
;; Function calmxw (calmxw_, funcdef_no=0, decl_uid=3772, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 9:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 10:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 34
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 35:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 36:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 38:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 41:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 45:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 46:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 48:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 55:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 56:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 58:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 61:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 64
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 65:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 66:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 68:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 69:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 75:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 118
	 Choosing alt 0 in insn 118:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 120:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 121:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 124:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 128:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 129:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 132:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 145:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 149:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 153
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 155:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 156:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 157:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 160:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 163:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 167
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 168:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 169:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 170:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 171:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 172:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 175:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 178:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 182
	 Choosing alt 0 in insn 182:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 183:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 184:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 185:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 186:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 187:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 190:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 192:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 194:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 199:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 200:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 202:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 203
	 Choosing alt 1 in insn 203:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 205:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 206
	 Choosing alt 1 in insn 206:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 207:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 210:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 212:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 214:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 218
	 Choosing alt 0 in insn 218:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 219:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 220:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 221:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 222:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 225:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 228:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 232
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 233:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 234:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 236:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 237:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 240:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 243:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 247
	 Choosing alt 0 in insn 247:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 248:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 249:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 250:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 251:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 252:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 255:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 257:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 259:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 263
	 Choosing alt 0 in insn 263:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 264:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 265:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 266:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 267:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 268
	 Choosing alt 1 in insn 268:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 270:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 271
	 Choosing alt 1 in insn 271:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 272:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 273:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 274:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=481 from oldreg=336, assigning class SSE_REGS to r481
  274: r481:SF=r481:SF*r336:SF
      REG_DEAD r336:SF
    Inserting insn reload before:
  537: r481:SF=r336:SF
    Inserting insn reload after:
  538: r337:SF=r481:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 275:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 276:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 277
	 Choosing alt 1 in insn 277:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =v  (1) vm {*sqrtsf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 279:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 280:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 281:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 289:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 292:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 296
	 Choosing alt 0 in insn 296:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 297:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 298:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 299:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 300:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 301:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 309:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 312
	 Choosing alt 0 in insn 312:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 313:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 314:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 315:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 316:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 319:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 322
	 Choosing alt 0 in insn 322:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 323:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 324:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 325:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 326:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 327:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 328:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 331:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 334:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 338
	 Choosing alt 0 in insn 338:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 339:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 340:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 341:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 343:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 345:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 348:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 352
	 Choosing alt 0 in insn 352:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 353:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 354:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 355:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 356
	 Choosing alt 1 in insn 356:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 360:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 363
	 Choosing alt 0 in insn 363:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 364:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 365:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 366
	 Choosing alt 1 in insn 366:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 367:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 368:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 369:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 370:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 372:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 375:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 379
	 Choosing alt 0 in insn 379:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 380:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 381:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 382:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 383:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 385:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 387:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 390:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 394
	 Choosing alt 0 in insn 394:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 395:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 396:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 397:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 398:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 399
	 Choosing alt 1 in insn 399:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 401:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 403:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 406:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 410
	 Choosing alt 0 in insn 410:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 411:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 412:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 413:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 414:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 415:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 416:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 417:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 418
	 Choosing alt 1 in insn 418:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 420
	 Choosing alt 1 in insn 420:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 421:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=2
	 Choosing alt 1 in insn 422:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=482 from oldreg=287, assigning class SSE_REGS to r482
  422: r482:SF=r482:SF*r465:SF
      REG_DEAD r465:SF
      REG_DEAD r287:SF
    Inserting insn reload before:
  539: r482:SF=r287:SF
    Inserting insn reload after:
  540: r288:SF=r482:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 540:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 424:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 426:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 429:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 433
	 Choosing alt 0 in insn 433:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 434:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 435:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 436:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1223,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=616,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=3,overall=1221,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=4,overall=615,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 439:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 442:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 443:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 445
	 Choosing alt 0 in insn 445:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 446:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 447:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 448:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (1) rBwBz {*call_value}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 452:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=483 from oldreg=299, assigning class SSE_REGS to r483
  452: r483:SF=r483:SF-r306:SF
      REG_DEAD r306:SF
      REG_DEAD r299:SF
    Inserting insn reload before:
  541: r483:SF=r299:SF
    Inserting insn reload after:
  542: r307:SF=r483:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=622,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 541:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
            alt=1,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 454:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=484 from oldreg=288, assigning class SSE_REGS to r484
  454: r484:SF=r484:SF*r308:SF
      REG_DEAD r308:SF
      REG_DEAD r288:SF
    Inserting insn reload before:
  543: r484:SF=r288:SF
    Inserting insn reload after:
  544: r309:SF=r484:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=622,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 543:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 456:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 458:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 461:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 465
	 Choosing alt 0 in insn 465:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 466:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 467:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 468:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 469:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 472:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 473:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 474:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 475
	 Choosing alt 0 in insn 475:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 476:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 477
	 Choosing alt 1 in insn 477:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 478:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 479:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 482:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 488:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 494:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 22
EBB 7
EBB 21
EBB 8
EBB 9 10
EBB 11 12
EBB 13 14 15 16
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=485 from oldreg=299, assigning class SSE_REGS to inheritance r485
    Original reg change 299->485 (bb16):
  439: r485:SF=xmm0:SF
      REG_DEAD xmm0:SF
    Add original<-inheritance after:
  545: r299:SF=r485:SF

    Inheritance reuse change 299->485 (bb16):
  541: r483:SF=r485:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=486 from oldreg=288, assigning class SSE_REGS to inheritance r486
    Original reg change 288->486 (bb16):
  540: r486:SF=r482:SF
    Add original<-inheritance after:
  546: r288:SF=r486:SF

    Inheritance reuse change 288->486 (bb16):
  543: r484:SF=r486:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   545: r299:SF=r485:SF
deleting insn with uid = 545.
	    Removing dead insn:
   546: r288:SF=r486:SF
deleting insn with uid = 546.
EBB 17
EBB 25
EBB 18
EBB 24
EBB 19
EBB 23
EBB 20

********** Pseudo live ranges #1: **********

  BB 20
   Insn 510: point = 0, n_alt = -1
  BB 23
   Insn 529: point = 0, n_alt = -1
  BB 9
   Insn 89: point = 0, n_alt = -1
   Insn 88: point = 0, n_alt = 0
   Insn 87: point = 1, n_alt = 0
   Insn 86: point = 3, n_alt = 0
   Insn 85: point = 4, n_alt = 0
  BB 19
   Insn 519: point = 5, n_alt = -1
   Insn 494: point = 5, n_alt = 1
  BB 24
   Insn 532: point = 6, n_alt = -1
  BB 11
   Insn 97: point = 7, n_alt = -1
   Insn 96: point = 7, n_alt = 0
   Insn 95: point = 8, n_alt = 0
   Insn 94: point = 10, n_alt = 0
   Insn 93: point = 11, n_alt = 0
  BB 18
   Insn 517: point = 12, n_alt = -1
   Insn 488: point = 12, n_alt = 1
  BB 25
   Insn 535: point = 13, n_alt = -1
  BB 13
   Insn 141: point = 14, n_alt = -1
   Insn 140: point = 14, n_alt = 0
   Insn 139: point = 15, n_alt = 0
   Insn 138: point = 17, n_alt = 0
   Insn 137: point = 18, n_alt = 1
  BB 17
   Insn 515: point = 19, n_alt = -1
   Insn 482: point = 19, n_alt = 1
  BB 16
   Insn 479: point = 20, n_alt = 8
   Insn 478: point = 21, n_alt = 3
   Insn 477: point = 22, n_alt = 1
   Insn 476: point = 24, n_alt = 3
   Insn 475: point = 26, n_alt = 0
   Insn 474: point = 28, n_alt = 0
   Insn 473: point = 30, n_alt = 0
   Insn 472: point = 31, n_alt = 0
   Insn 471: point = 33, n_alt = 0
   Insn 470: point = 35, n_alt = 0
   Insn 469: point = 36, n_alt = 7
   Insn 468: point = 38, n_alt = 0
   Insn 467: point = 40, n_alt = 4
   Insn 466: point = 41, n_alt = 3
   Insn 465: point = 43, n_alt = 0
   Insn 464: point = 45, n_alt = 0
   Insn 463: point = 47, n_alt = 0
   Insn 462: point = 48, n_alt = 0
   Insn 461: point = 50, n_alt = 0
   Insn 460: point = 52, n_alt = 0
   Insn 459: point = 54, n_alt = 0
   Insn 458: point = 55, n_alt = 1
   Insn 457: point = 57, n_alt = 0
   Insn 456: point = 59, n_alt = 0
   Insn 455: point = 61, n_alt = 0
   Insn 544: point = 62, n_alt = -2
	Hard reg 22 is preferable by r484 with profit 1000
   Insn 454: point = 64, n_alt = 1
   Insn 543: point = 65, n_alt = 7
	   Creating copy r484<-r486@1000
   Insn 453: point = 67, n_alt = -2
   Insn 542: point = 69, n_alt = -2
	Hard reg 21 is preferable by r483 with profit 1000
   Insn 452: point = 71, n_alt = 2
   Insn 541: point = 72, n_alt = 7
	   Creating copy r483<-r485@1000
   Insn 451: point = 74, n_alt = -2
   Insn 450: point = 75, n_alt = 0
   Insn 449: point = 75, n_alt = -2
   Insn 448: point = 76, n_alt = 7
   Insn 447: point = 78, n_alt = 3
   Insn 446: point = 79, n_alt = 3
   Insn 445: point = 81, n_alt = 0
   Insn 444: point = 83, n_alt = 0
   Insn 443: point = 85, n_alt = 0
   Insn 442: point = 86, n_alt = 0
   Insn 441: point = 88, n_alt = 0
   Insn 440: point = 90, n_alt = 0
   Insn 439: point = 91, n_alt = 8
	Hard reg 21 is preferable by r485 with profit 1000
   Insn 438: point = 92, n_alt = 0
   Insn 437: point = 92, n_alt = -2
   Insn 436: point = 93, n_alt = 7
   Insn 435: point = 95, n_alt = 4
   Insn 434: point = 96, n_alt = 3
   Insn 433: point = 98, n_alt = 0
   Insn 432: point = 100, n_alt = 0
   Insn 431: point = 102, n_alt = 0
   Insn 430: point = 103, n_alt = 0
   Insn 429: point = 105, n_alt = 0
   Insn 428: point = 107, n_alt = 0
   Insn 427: point = 109, n_alt = 0
   Insn 426: point = 110, n_alt = 1
   Insn 425: point = 112, n_alt = 0
   Insn 424: point = 114, n_alt = 0
   Insn 423: point = 116, n_alt = 0
   Insn 540: point = 117, n_alt = 8
	   Creating copy r482->r486@1000
   Insn 422: point = 119, n_alt = 1
   Insn 539: point = 120, n_alt = -2
	Hard reg 22 is preferable by r482 with profit 1000
   Insn 421: point = 122, n_alt = 7
   Insn 420: point = 123, n_alt = 1
   Insn 419: point = 125, n_alt = -2
   Insn 418: point = 127, n_alt = 1
   Insn 417: point = 129, n_alt = 7
   Insn 416: point = 130, n_alt = 1
   Insn 415: point = 132, n_alt = 7
   Insn 414: point = 133, n_alt = 7
   Insn 413: point = 135, n_alt = 0
   Insn 412: point = 137, n_alt = 4
   Insn 411: point = 138, n_alt = 3
   Insn 410: point = 140, n_alt = 0
   Insn 409: point = 142, n_alt = 0
   Insn 408: point = 144, n_alt = 0
   Insn 407: point = 145, n_alt = 0
   Insn 406: point = 147, n_alt = 0
   Insn 405: point = 149, n_alt = 0
   Insn 404: point = 151, n_alt = 0
   Insn 403: point = 152, n_alt = 1
   Insn 402: point = 154, n_alt = 0
   Insn 401: point = 156, n_alt = 0
   Insn 400: point = 158, n_alt = 0
   Insn 399: point = 159, n_alt = 1
   Insn 398: point = 161, n_alt = 7
   Insn 397: point = 163, n_alt = 0
   Insn 396: point = 165, n_alt = 4
   Insn 395: point = 166, n_alt = 3
   Insn 394: point = 168, n_alt = 0
   Insn 393: point = 170, n_alt = 0
   Insn 392: point = 172, n_alt = 0
   Insn 391: point = 173, n_alt = 0
   Insn 390: point = 175, n_alt = 0
   Insn 389: point = 177, n_alt = 0
   Insn 388: point = 179, n_alt = 0
   Insn 387: point = 180, n_alt = 1
   Insn 386: point = 182, n_alt = 0
   Insn 385: point = 184, n_alt = 0
   Insn 384: point = 186, n_alt = 0
   Insn 383: point = 187, n_alt = 7
   Insn 382: point = 189, n_alt = 0
   Insn 381: point = 191, n_alt = 4
   Insn 380: point = 192, n_alt = 3
   Insn 379: point = 194, n_alt = 0
   Insn 378: point = 196, n_alt = 0
   Insn 377: point = 198, n_alt = 0
   Insn 376: point = 199, n_alt = 0
   Insn 375: point = 201, n_alt = 0
   Insn 374: point = 203, n_alt = 0
   Insn 373: point = 205, n_alt = 0
   Insn 372: point = 206, n_alt = 1
   Insn 371: point = 208, n_alt = 0
   Insn 370: point = 210, n_alt = 0
   Insn 369: point = 212, n_alt = 0
   Insn 368: point = 213, n_alt = 8
   Insn 367: point = 214, n_alt = 3
   Insn 366: point = 215, n_alt = 1
   Insn 365: point = 217, n_alt = 7
   Insn 364: point = 218, n_alt = 3
   Insn 363: point = 220, n_alt = 0
   Insn 362: point = 222, n_alt = 0
   Insn 361: point = 224, n_alt = 0
   Insn 360: point = 225, n_alt = 0
   Insn 359: point = 227, n_alt = 0
   Insn 358: point = 229, n_alt = 0
   Insn 357: point = 230, n_alt = -2
   Insn 356: point = 232, n_alt = 1
   Insn 355: point = 234, n_alt = 7
   Insn 354: point = 236, n_alt = 4
   Insn 353: point = 237, n_alt = 3
   Insn 352: point = 239, n_alt = 0
   Insn 351: point = 241, n_alt = 0
   Insn 350: point = 243, n_alt = 0
   Insn 349: point = 244, n_alt = 0
   Insn 348: point = 246, n_alt = 0
   Insn 347: point = 248, n_alt = 0
   Insn 346: point = 250, n_alt = 0
   Insn 345: point = 251, n_alt = 1
   Insn 344: point = 253, n_alt = 0
   Insn 343: point = 255, n_alt = 0
   Insn 342: point = 257, n_alt = 0
   Insn 341: point = 258, n_alt = 7
   Insn 340: point = 260, n_alt = 4
   Insn 339: point = 261, n_alt = 3
   Insn 338: point = 263, n_alt = 0
   Insn 337: point = 265, n_alt = 0
   Insn 336: point = 267, n_alt = 0
   Insn 335: point = 268, n_alt = 0
   Insn 334: point = 270, n_alt = 0
   Insn 333: point = 272, n_alt = 0
   Insn 332: point = 274, n_alt = 0
   Insn 331: point = 275, n_alt = 1
   Insn 330: point = 277, n_alt = 0
   Insn 329: point = 279, n_alt = 0
   Insn 328: point = 280, n_alt = 8
   Insn 327: point = 281, n_alt = 7
   Insn 326: point = 282, n_alt = 8
   Insn 325: point = 283, n_alt = 7
   Insn 324: point = 284, n_alt = 3
   Insn 323: point = 285, n_alt = 3
   Insn 322: point = 287, n_alt = 0
   Insn 321: point = 289, n_alt = 0
   Insn 320: point = 291, n_alt = 0
   Insn 319: point = 292, n_alt = 0
   Insn 318: point = 294, n_alt = 0
   Insn 317: point = 296, n_alt = 0
   Insn 316: point = 297, n_alt = 8
   Insn 315: point = 298, n_alt = 7
   Insn 314: point = 299, n_alt = 3
   Insn 313: point = 300, n_alt = 3
   Insn 312: point = 302, n_alt = 0
   Insn 311: point = 304, n_alt = 0
   Insn 310: point = 306, n_alt = 0
   Insn 309: point = 307, n_alt = 0
   Insn 308: point = 309, n_alt = 0
   Insn 307: point = 311, n_alt = 0
  BB 15
   Insn 302: point = 313, n_alt = -1
   Insn 301: point = 313, n_alt = 1
   Insn 300: point = 314, n_alt = 7
   Insn 299: point = 315, n_alt = 7
   Insn 298: point = 317, n_alt = 4
   Insn 297: point = 318, n_alt = 3
   Insn 296: point = 320, n_alt = 0
   Insn 295: point = 322, n_alt = 0
   Insn 294: point = 324, n_alt = 0
   Insn 293: point = 325, n_alt = 0
   Insn 292: point = 327, n_alt = 0
   Insn 291: point = 329, n_alt = 0
   Insn 290: point = 331, n_alt = 0
   Insn 289: point = 332, n_alt = 1
   Insn 288: point = 334, n_alt = 0
   Insn 287: point = 336, n_alt = 0
  BB 14
   Insn 282: point = 338, n_alt = -1
   Insn 281: point = 338, n_alt = 1
   Insn 280: point = 339, n_alt = 7
   Insn 279: point = 340, n_alt = 8
   Insn 278: point = 341, n_alt = 0
   Insn 277: point = 343, n_alt = 1
   Insn 276: point = 345, n_alt = 1
   Insn 275: point = 347, n_alt = 7
   Insn 538: point = 348, n_alt = -2
	Hard reg 22 is preferable by r481 with profit 1000
   Insn 274: point = 350, n_alt = 1
   Insn 537: point = 351, n_alt = -2
	Hard reg 22 is preferable by r481 with profit 1000
	Hard reg 21 is preferable by r481 with profit 1000
   Insn 273: point = 352, n_alt = 7
   Insn 272: point = 353, n_alt = 8
   Insn 271: point = 354, n_alt = 1
   Insn 270: point = 356, n_alt = 7
   Insn 269: point = 357, n_alt = -2
   Insn 268: point = 359, n_alt = 1
   Insn 267: point = 361, n_alt = 7
   Insn 266: point = 363, n_alt = 0
   Insn 265: point = 365, n_alt = 4
   Insn 264: point = 366, n_alt = 3
   Insn 263: point = 368, n_alt = 0
   Insn 262: point = 370, n_alt = 0
   Insn 261: point = 372, n_alt = 0
   Insn 260: point = 373, n_alt = 0
   Insn 259: point = 375, n_alt = 0
   Insn 258: point = 377, n_alt = 0
   Insn 257: point = 379, n_alt = 0
   Insn 256: point = 381, n_alt = 0
   Insn 255: point = 382, n_alt = 1
   Insn 254: point = 384, n_alt = 0
   Insn 253: point = 386, n_alt = 0
   Insn 252: point = 387, n_alt = 1
   Insn 251: point = 389, n_alt = 7
   Insn 250: point = 391, n_alt = 0
   Insn 249: point = 393, n_alt = 4
   Insn 248: point = 394, n_alt = 3
   Insn 247: point = 396, n_alt = 0
   Insn 246: point = 398, n_alt = 0
   Insn 245: point = 400, n_alt = 0
   Insn 244: point = 401, n_alt = 0
   Insn 243: point = 403, n_alt = 0
   Insn 242: point = 405, n_alt = 0
   Insn 241: point = 407, n_alt = 0
   Insn 240: point = 408, n_alt = 1
   Insn 239: point = 410, n_alt = 0
   Insn 238: point = 412, n_alt = 0
   Insn 237: point = 413, n_alt = 1
   Insn 236: point = 415, n_alt = 7
   Insn 235: point = 417, n_alt = 0
   Insn 234: point = 419, n_alt = 4
   Insn 233: point = 420, n_alt = 3
   Insn 232: point = 422, n_alt = 0
   Insn 231: point = 424, n_alt = 0
   Insn 230: point = 426, n_alt = 0
   Insn 229: point = 427, n_alt = 0
   Insn 228: point = 429, n_alt = 0
   Insn 227: point = 431, n_alt = 0
   Insn 226: point = 433, n_alt = 0
   Insn 225: point = 434, n_alt = 1
   Insn 224: point = 436, n_alt = 0
   Insn 223: point = 438, n_alt = 0
   Insn 222: point = 439, n_alt = 7
   Insn 221: point = 441, n_alt = 0
   Insn 220: point = 443, n_alt = 4
   Insn 219: point = 444, n_alt = 3
   Insn 218: point = 446, n_alt = 0
   Insn 217: point = 448, n_alt = 0
   Insn 216: point = 450, n_alt = 0
   Insn 215: point = 451, n_alt = 0
   Insn 214: point = 453, n_alt = 0
   Insn 213: point = 455, n_alt = 0
   Insn 212: point = 457, n_alt = 0
   Insn 211: point = 459, n_alt = 0
   Insn 210: point = 460, n_alt = 1
   Insn 209: point = 462, n_alt = 0
   Insn 208: point = 464, n_alt = 0
   Insn 207: point = 465, n_alt = 8
   Insn 206: point = 466, n_alt = 1
   Insn 205: point = 468, n_alt = 7
   Insn 204: point = 469, n_alt = -2
   Insn 203: point = 471, n_alt = 1
   Insn 202: point = 473, n_alt = 7
   Insn 201: point = 475, n_alt = 0
   Insn 200: point = 477, n_alt = 4
   Insn 199: point = 478, n_alt = 3
   Insn 198: point = 480, n_alt = 0
   Insn 197: point = 482, n_alt = 0
   Insn 196: point = 484, n_alt = 0
   Insn 195: point = 485, n_alt = 0
   Insn 194: point = 487, n_alt = 0
   Insn 193: point = 489, n_alt = 0
   Insn 192: point = 491, n_alt = 0
   Insn 191: point = 493, n_alt = 0
   Insn 190: point = 494, n_alt = 1
   Insn 189: point = 496, n_alt = 0
   Insn 188: point = 498, n_alt = 0
   Insn 187: point = 499, n_alt = 1
   Insn 186: point = 501, n_alt = 7
   Insn 185: point = 503, n_alt = 0
   Insn 184: point = 505, n_alt = 4
   Insn 183: point = 506, n_alt = 3
   Insn 182: point = 508, n_alt = 0
   Insn 181: point = 510, n_alt = 0
   Insn 180: point = 512, n_alt = 0
   Insn 179: point = 513, n_alt = 0
   Insn 178: point = 515, n_alt = 0
   Insn 177: point = 517, n_alt = 0
   Insn 176: point = 519, n_alt = 0
   Insn 175: point = 520, n_alt = 1
   Insn 174: point = 522, n_alt = 0
   Insn 173: point = 524, n_alt = 0
   Insn 172: point = 525, n_alt = 1
   Insn 171: point = 527, n_alt = 7
   Insn 170: point = 529, n_alt = 0
   Insn 169: point = 531, n_alt = 4
   Insn 168: point = 532, n_alt = 3
   Insn 167: point = 534, n_alt = 0
   Insn 166: point = 536, n_alt = 0
   Insn 165: point = 538, n_alt = 0
   Insn 164: point = 539, n_alt = 0
   Insn 163: point = 541, n_alt = 0
   Insn 162: point = 543, n_alt = 0
   Insn 161: point = 545, n_alt = 0
   Insn 160: point = 546, n_alt = 1
   Insn 159: point = 548, n_alt = 0
   Insn 158: point = 550, n_alt = 0
   Insn 157: point = 551, n_alt = 7
   Insn 156: point = 553, n_alt = 0
   Insn 155: point = 555, n_alt = 4
   Insn 154: point = 556, n_alt = 3
   Insn 153: point = 558, n_alt = 0
   Insn 152: point = 560, n_alt = 0
   Insn 151: point = 562, n_alt = 0
   Insn 150: point = 563, n_alt = 0
   Insn 149: point = 565, n_alt = 0
   Insn 148: point = 567, n_alt = 0
   Insn 147: point = 569, n_alt = 0
   Insn 146: point = 571, n_alt = 0
   Insn 145: point = 572, n_alt = 1
   Insn 144: point = 574, n_alt = 0
   Insn 143: point = 576, n_alt = 0
  BB 12
   Insn 135: point = 578, n_alt = 1
   Insn 134: point = 579, n_alt = 0
   Insn 133: point = 581, n_alt = 0
   Insn 132: point = 582, n_alt = 1
   Insn 131: point = 583, n_alt = 0
   Insn 130: point = 585, n_alt = 0
   Insn 129: point = 587, n_alt = 4
   Insn 128: point = 588, n_alt = 3
   Insn 127: point = 590, n_alt = 0
   Insn 126: point = 592, n_alt = 0
   Insn 125: point = 594, n_alt = 0
   Insn 124: point = 595, n_alt = 0
   Insn 123: point = 597, n_alt = 0
   Insn 122: point = 599, n_alt = 0
   Insn 121: point = 600, n_alt = 8
   Insn 120: point = 601, n_alt = 7
   Insn 119: point = 602, n_alt = 1
   Insn 118: point = 603, n_alt = 0
   Insn 117: point = 605, n_alt = 0
   Insn 113: point = 606, n_alt = 0
   Insn 112: point = 608, n_alt = 0
   Insn 111: point = 610, n_alt = 0
   Insn 110: point = 612, n_alt = 0
   Insn 109: point = 614, n_alt = 0
   Insn 108: point = 615, n_alt = 1
   Insn 107: point = 616, n_alt = 0
   Insn 106: point = 618, n_alt = 0
   Insn 102: point = 619, n_alt = 0
   Insn 101: point = 621, n_alt = 0
   Insn 100: point = 623, n_alt = 0
   Insn 99: point = 625, n_alt = 0
  BB 10
   Insn 91: point = 627, n_alt = 1
  BB 8
   Insn 83: point = 628, n_alt = 1
   Insn 82: point = 629, n_alt = 0
   Insn 81: point = 630, n_alt = 0
  BB 21
   Insn 523: point = 631, n_alt = -1
  BB 3
   Insn 19: point = 631, n_alt = -1
   Insn 18: point = 631, n_alt = 0
   Insn 17: point = 632, n_alt = 0
   Insn 16: point = 634, n_alt = 0
   Insn 15: point = 635, n_alt = 0
  BB 7
   Insn 513: point = 636, n_alt = -1
   Insn 75: point = 636, n_alt = 1
  BB 22
   Insn 526: point = 637, n_alt = -1
  BB 5
   Insn 27: point = 638, n_alt = -1
   Insn 26: point = 638, n_alt = 0
   Insn 25: point = 639, n_alt = 0
   Insn 24: point = 641, n_alt = 0
   Insn 23: point = 642, n_alt = 0
  BB 6
   Insn 511: point = 643, n_alt = -1
   Insn 69: point = 643, n_alt = 1
   Insn 68: point = 643, n_alt = 8
   Insn 67: point = 644, n_alt = 3
   Insn 66: point = 645, n_alt = 7
   Insn 65: point = 646, n_alt = 3
   Insn 64: point = 648, n_alt = 0
   Insn 63: point = 650, n_alt = 1
   Insn 62: point = 652, n_alt = 0
   Insn 61: point = 653, n_alt = 0
   Insn 60: point = 655, n_alt = 1
   Insn 59: point = 657, n_alt = 0
   Insn 58: point = 658, n_alt = 8
   Insn 57: point = 659, n_alt = 3
   Insn 56: point = 660, n_alt = 7
   Insn 55: point = 661, n_alt = 3
   Insn 54: point = 663, n_alt = 0
   Insn 53: point = 665, n_alt = 1
   Insn 52: point = 667, n_alt = 0
   Insn 51: point = 668, n_alt = 0
   Insn 50: point = 670, n_alt = 1
   Insn 49: point = 672, n_alt = 0
   Insn 48: point = 673, n_alt = 8
   Insn 47: point = 674, n_alt = 3
   Insn 46: point = 675, n_alt = 7
   Insn 45: point = 676, n_alt = 3
   Insn 44: point = 678, n_alt = 0
   Insn 43: point = 680, n_alt = 1
   Insn 42: point = 682, n_alt = 0
   Insn 41: point = 683, n_alt = 0
   Insn 40: point = 685, n_alt = 1
   Insn 39: point = 687, n_alt = 0
   Insn 38: point = 688, n_alt = 8
   Insn 37: point = 689, n_alt = 3
   Insn 36: point = 690, n_alt = 7
   Insn 35: point = 691, n_alt = 3
   Insn 34: point = 693, n_alt = 0
   Insn 33: point = 695, n_alt = 1
   Insn 32: point = 697, n_alt = 0
   Insn 31: point = 698, n_alt = 0
   Insn 30: point = 700, n_alt = 1
   Insn 29: point = 702, n_alt = 0
  BB 4
   Insn 21: point = 704, n_alt = 1
  BB 2
   Insn 13: point = 705, n_alt = 1
   Insn 12: point = 706, n_alt = 0
   Insn 11: point = 707, n_alt = 0
   Insn 10: point = 708, n_alt = 8
   Insn 9: point = 709, n_alt = 7
   Insn 5: point = 710, n_alt = 5
   Insn 4: point = 710, n_alt = 5
   Insn 3: point = 710, n_alt = 5
   Insn 2: point = 710, n_alt = 5
 r87: [699..700]
 r88: [694..698]
 r89: [694..695]
 r90: [692..693]
 r91: [688..691]
 r92: [688..690]
 r93: [684..685]
 r94: [679..683]
 r95: [679..680]
 r96: [677..678]
 r97: [673..676]
 r98: [673..675]
 r99: [669..670]
 r100: [664..668]
 r101: [664..665]
 r102: [662..663]
 r103: [658..661]
 r104: [658..660]
 r105: [654..655]
 r106: [649..653]
 r107: [649..650]
 r108: [647..648]
 r109: [643..646]
 r110: [643..645]
 r111: [622..623]
 r112: [620..621]
 r113: [617..619]
 r114: [611..612]
 r115: [609..610]
 r116: [604..606]
 r117: [596..597]
 r118: [591..595]
 r119: [591..592]
 r120: [589..590]
 r121: [586..588]
 r122: [573..574]
 r123: [564..572]
 r124: [568..569]
 r125: [566..567]
 r126: [564..565]
 r127: [559..563]
 r128: [559..560]
 r129: [557..558]
 r130: [554..556]
 r131: [526..551]
 r132: [547..548]
 r133: [540..546]
 r134: [542..543]
 r135: [540..541]
 r136: [535..539]
 r137: [535..536]
 r138: [533..534]
 r139: [530..532]
 r140: [526..527]
 r141: [500..525]
 r142: [521..522]
 r143: [514..520]
 r144: [516..517]
 r145: [514..515]
 r146: [509..513]
 r147: [509..510]
 r148: [507..508]
 r149: [504..506]
 r150: [500..501]
 r151: [472..499]
 r152: [495..496]
 r153: [486..494]
 r154: [490..491]
 r155: [488..489]
 r156: [486..487]
 r157: [481..485]
 r158: [481..482]
 r159: [479..480]
 r160: [476..478]
 r161: [472..473]
 r162: [470..471]
 r163: [467..469]
 r164: [461..462]
 r165: [452..460]
 r166: [456..457]
 r167: [454..455]
 r168: [452..453]
 r169: [447..451]
 r170: [447..448]
 r171: [445..446]
 r172: [442..444]
 r173: [414..439]
 r174: [435..436]
 r175: [428..434]
 r176: [430..431]
 r177: [428..429]
 r178: [423..427]
 r179: [423..424]
 r180: [421..422]
 r181: [418..420]
 r182: [414..415]
 r183: [388..413]
 r184: [409..410]
 r185: [402..408]
 r186: [404..405]
 r187: [402..403]
 r188: [397..401]
 r189: [397..398]
 r190: [395..396]
 r191: [392..394]
 r192: [388..389]
 r193: [360..387]
 r194: [383..384]
 r195: [374..382]
 r196: [378..379]
 r197: [376..377]
 r198: [374..375]
 r199: [369..373]
 r200: [369..370]
 r201: [367..368]
 r202: [364..366]
 r203: [360..361]
 r204: [358..359]
 r205: [355..357]
 r206: [342..343]
 r207: [333..334]
 r208: [326..332]
 r209: [328..329]
 r210: [326..327]
 r211: [321..325]
 r212: [321..322]
 r213: [319..320]
 r214: [316..318]
 r215: [313..315]
 r216: [308..309]
 r217: [303..307]
 r218: [303..304]
 r219: [301..302]
 r220: [297..300]
 r221: [293..294]
 r222: [288..292]
 r223: [288..289]
 r224: [286..287]
 r225: [282..285]
 r226: [276..277]
 r227: [269..275]
 r228: [271..272]
 r229: [269..270]
 r230: [264..268]
 r231: [264..265]
 r232: [262..263]
 r233: [259..261]
 r234: [233..258]
 r235: [254..255]
 r236: [252..253]
 r237: [245..251]
 r238: [247..248]
 r239: [245..246]
 r240: [240..244]
 r241: [240..241]
 r242: [238..239]
 r243: [235..237]
 r244: [233..234]
 r245: [231..232]
 r246: [216..230]
 r247: [226..227]
 r248: [221..225]
 r249: [221..222]
 r250: [219..220]
 r251: [213..218]
 r252: [213..215]
 r253: [209..210]
 r254: [207..208]
 r255: [200..206]
 r256: [202..203]
 r257: [200..201]
 r258: [195..199]
 r259: [195..196]
 r260: [193..194]
 r261: [190..192]
 r262: [160..187]
 r263: [183..184]
 r264: [181..182]
 r265: [174..180]
 r266: [176..177]
 r267: [174..175]
 r268: [169..173]
 r269: [169..170]
 r270: [167..168]
 r271: [164..166]
 r272: [160..161]
 r273: [124..159]
 r274: [155..156]
 r275: [153..154]
 r276: [146..152]
 r277: [148..149]
 r278: [146..147]
 r279: [141..145]
 r280: [141..142]
 r281: [139..140]
 r282: [136..138]
 r283: [131..133]
 r284: [128..130]
 r285: [126..127]
 r286: [124..125]
 r287: [121..123]
 r289: [113..114]
 r290: [111..112]
 r291: [104..110]
 r292: [106..107]
 r293: [104..105]
 r294: [99..103]
 r295: [99..100]
 r296: [97..98]
 r297: [94..96]
 r298: [92..93]
 r300: [87..88]
 r301: [82..86]
 r302: [82..83]
 r303: [80..81]
 r304: [77..79]
 r305: [75..76]
 r306: [71..74]
 r307: [68..69]
 r308: [64..67]
 r309: [23..62]
 r310: [58..59]
 r311: [56..57]
 r312: [49..55]
 r313: [51..52]
 r314: [49..50]
 r315: [44..48]
 r316: [44..45]
 r317: [42..43]
 r318: [39..41]
 r319: [23..36]
 r320: [32..33]
 r321: [27..31]
 r322: [27..28]
 r323: [25..26]
 r324: [20..24]
 r325: [20..22]
 r326: [705..707]
 r327: [631..706]
 r328: [631..632]
 r329: [638..639]
 r330: [628..630]
 r331: [0..629]
 r332: [0..1]
 r333: [7..8]
 r334: [578..579]
 r335: [14..15]
 r336: [350..352]
 r337: [344..348]
 r338: [346..347]
 r339: [344..345]
 r340: [708..709]
 r341: [633..634]
 r342: [640..641]
 r343: [701..702]
 r344: [696..697]
 r345: [688..689]
 r346: [686..687]
 r347: [681..682]
 r348: [673..674]
 r349: [671..672]
 r350: [666..667]
 r351: [658..659]
 r352: [656..657]
 r353: [651..652]
 r354: [643..644]
 r355: [2..3]
 r356: [9..10]
 r357: [624..625]
 r360: [615..616]
 r361: [617..618]
 r362: [613..614]
 r363: [607..608]
 r366: [602..603]
 r367: [604..605]
 r368: [600..601]
 r369: [598..599]
 r370: [593..594]
 r371: [584..587]
 r372: [584..585]
 r373: [582..583]
 r374: [580..581]
 r375: [16..17]
 r376: [575..576]
 r377: [570..571]
 r378: [561..562]
 r379: [552..555]
 r380: [552..553]
 r381: [549..550]
 r382: [544..545]
 r383: [537..538]
 r384: [528..531]
 r385: [528..529]
 r386: [523..524]
 r387: [518..519]
 r388: [511..512]
 r389: [502..505]
 r390: [502..503]
 r391: [497..498]
 r392: [492..493]
 r393: [483..484]
 r394: [474..477]
 r395: [474..475]
 r396: [465..466]
 r397: [467..468]
 r398: [463..464]
 r399: [458..459]
 r400: [449..450]
 r401: [440..443]
 r402: [440..441]
 r403: [437..438]
 r404: [432..433]
 r405: [425..426]
 r406: [416..419]
 r407: [416..417]
 r408: [411..412]
 r409: [406..407]
 r410: [399..400]
 r411: [390..393]
 r412: [390..391]
 r413: [385..386]
 r414: [380..381]
 r415: [371..372]
 r416: [362..365]
 r417: [362..363]
 r418: [353..354]
 r419: [355..356]
 r420: [340..341]
 r421: [338..339]
 r422: [335..336]
 r423: [330..331]
 r424: [323..324]
 r425: [316..317]
 r426: [313..314]
 r427: [310..311]
 r428: [305..306]
 r429: [297..299]
 r430: [297..298]
 r431: [295..296]
 r432: [290..291]
 r433: [282..284]
 r434: [282..283]
 r435: [280..281]
 r436: [278..279]
 r437: [273..274]
 r438: [266..267]
 r439: [259..260]
 r440: [256..257]
 r441: [249..250]
 r442: [242..243]
 r443: [235..236]
 r444: [228..229]
 r445: [223..224]
 r446: [216..217]
 r447: [213..214]
 r448: [211..212]
 r449: [204..205]
 r450: [197..198]
 r451: [188..191]
 r452: [188..189]
 r453: [185..186]
 r454: [178..179]
 r455: [171..172]
 r456: [162..165]
 r457: [162..163]
 r458: [157..158]
 r459: [150..151]
 r460: [143..144]
 r461: [134..137]
 r462: [134..135]
 r463: [131..132]
 r464: [128..129]
 r465: [119..122]
 r466: [115..116]
 r467: [108..109]
 r468: [101..102]
 r469: [94..95]
 r470: [89..90]
 r471: [84..85]
 r472: [77..78]
 r473: [60..61]
 r474: [53..54]
 r475: [46..47]
 r476: [37..40]
 r477: [37..38]
 r478: [34..35]
 r479: [29..30]
 r480: [20..21]
 r481: [349..351]
 r482: [118..120]
 r483: [70..72]
 r484: [63..65]
 r485: [73..91]
 r486: [66..117]
Compressing live ranges: from 710 to 586 - 82%
Ranges after the compression:
 r87: [578..579]
 r88: [574..577]
 r89: [574..575]
 r90: [572..573]
 r91: [570..571]
 r92: [570..571]
 r93: [566..567]
 r94: [562..565]
 r95: [562..563]
 r96: [560..561]
 r97: [558..559]
 r98: [558..559]
 r99: [554..555]
 r100: [550..553]
 r101: [550..551]
 r102: [548..549]
 r103: [546..547]
 r104: [546..547]
 r105: [542..543]
 r106: [538..541]
 r107: [538..539]
 r108: [536..537]
 r109: [534..535]
 r110: [534..535]
 r111: [520..521]
 r112: [518..519]
 r113: [516..517]
 r114: [510..511]
 r115: [508..509]
 r116: [504..505]
 r117: [496..497]
 r118: [492..495]
 r119: [492..493]
 r120: [490..491]
 r121: [488..489]
 r122: [476..477]
 r123: [468..475]
 r124: [472..473]
 r125: [470..471]
 r126: [468..469]
 r127: [464..467]
 r128: [464..465]
 r129: [462..463]
 r130: [460..461]
 r131: [436..457]
 r132: [454..455]
 r133: [448..453]
 r134: [450..451]
 r135: [448..449]
 r136: [444..447]
 r137: [444..445]
 r138: [442..443]
 r139: [440..441]
 r140: [436..437]
 r141: [414..435]
 r142: [432..433]
 r143: [426..431]
 r144: [428..429]
 r145: [426..427]
 r146: [422..425]
 r147: [422..423]
 r148: [420..421]
 r149: [418..419]
 r150: [414..415]
 r151: [390..413]
 r152: [410..411]
 r153: [402..409]
 r154: [406..407]
 r155: [404..405]
 r156: [402..403]
 r157: [398..401]
 r158: [398..399]
 r159: [396..397]
 r160: [394..395]
 r161: [390..391]
 r162: [388..389]
 r163: [386..387]
 r164: [380..381]
 r165: [372..379]
 r166: [376..377]
 r167: [374..375]
 r168: [372..373]
 r169: [368..371]
 r170: [368..369]
 r171: [366..367]
 r172: [364..365]
 r173: [340..361]
 r174: [358..359]
 r175: [352..357]
 r176: [354..355]
 r177: [352..353]
 r178: [348..351]
 r179: [348..349]
 r180: [346..347]
 r181: [344..345]
 r182: [340..341]
 r183: [318..339]
 r184: [336..337]
 r185: [330..335]
 r186: [332..333]
 r187: [330..331]
 r188: [326..329]
 r189: [326..327]
 r190: [324..325]
 r191: [322..323]
 r192: [318..319]
 r193: [294..317]
 r194: [314..315]
 r195: [306..313]
 r196: [310..311]
 r197: [308..309]
 r198: [306..307]
 r199: [302..305]
 r200: [302..303]
 r201: [300..301]
 r202: [298..299]
 r203: [294..295]
 r204: [292..293]
 r205: [290..291]
 r206: [280..281]
 r207: [272..273]
 r208: [266..271]
 r209: [268..269]
 r210: [266..267]
 r211: [262..265]
 r212: [262..263]
 r213: [260..261]
 r214: [258..259]
 r215: [256..257]
 r216: [252..253]
 r217: [248..251]
 r218: [248..249]
 r219: [246..247]
 r220: [244..245]
 r221: [240..241]
 r222: [236..239]
 r223: [236..237]
 r224: [234..235]
 r225: [232..233]
 r226: [226..227]
 r227: [220..225]
 r228: [222..223]
 r229: [220..221]
 r230: [216..219]
 r231: [216..217]
 r232: [214..215]
 r233: [212..213]
 r234: [190..211]
 r235: [208..209]
 r236: [206..207]
 r237: [200..205]
 r238: [202..203]
 r239: [200..201]
 r240: [196..199]
 r241: [196..197]
 r242: [194..195]
 r243: [192..193]
 r244: [190..191]
 r245: [188..189]
 r246: [176..187]
 r247: [184..185]
 r248: [180..183]
 r249: [180..181]
 r250: [178..179]
 r251: [174..177]
 r252: [174..175]
 r253: [170..171]
 r254: [168..169]
 r255: [162..167]
 r256: [164..165]
 r257: [162..163]
 r258: [158..161]
 r259: [158..159]
 r260: [156..157]
 r261: [154..155]
 r262: [128..151]
 r263: [148..149]
 r264: [146..147]
 r265: [140..145]
 r266: [142..143]
 r267: [140..141]
 r268: [136..139]
 r269: [136..137]
 r270: [134..135]
 r271: [132..133]
 r272: [128..129]
 r273: [98..127]
 r274: [124..125]
 r275: [122..123]
 r276: [116..121]
 r277: [118..119]
 r278: [116..117]
 r279: [112..115]
 r280: [112..113]
 r281: [110..111]
 r282: [108..109]
 r283: [104..105]
 r284: [102..103]
 r285: [100..101]
 r286: [98..99]
 r287: [96..97]
 r289: [90..91]
 r290: [88..89]
 r291: [82..87]
 r292: [84..85]
 r293: [82..83]
 r294: [78..81]
 r295: [78..79]
 r296: [76..77]
 r297: [74..75]
 r298: [72..73]
 r300: [68..69]
 r301: [64..67]
 r302: [64..65]
 r303: [62..63]
 r304: [60..61]
 r305: [58..59]
 r306: [54..57]
 r307: [52..53]
 r308: [48..51]
 r309: [14..47]
 r310: [44..45]
 r311: [42..43]
 r312: [36..41]
 r313: [38..39]
 r314: [36..37]
 r315: [32..35]
 r316: [32..33]
 r317: [30..31]
 r318: [28..29]
 r319: [14..25]
 r320: [22..23]
 r321: [18..21]
 r322: [18..19]
 r323: [16..17]
 r324: [12..15]
 r325: [12..13]
 r326: [582..583]
 r327: [526..583]
 r328: [526..527]
 r329: [530..531]
 r330: [524..525]
 r331: [0..525]
 r332: [0..1]
 r333: [4..5]
 r334: [480..481]
 r335: [8..9]
 r336: [286..287]
 r337: [282..285]
 r338: [284..285]
 r339: [282..283]
 r340: [584..585]
 r341: [528..529]
 r342: [532..533]
 r343: [580..581]
 r344: [576..577]
 r345: [570..571]
 r346: [568..569]
 r347: [564..565]
 r348: [558..559]
 r349: [556..557]
 r350: [552..553]
 r351: [546..547]
 r352: [544..545]
 r353: [540..541]
 r354: [534..535]
 r355: [2..3]
 r356: [6..7]
 r357: [522..523]
 r360: [514..515]
 r361: [516..517]
 r362: [512..513]
 r363: [506..507]
 r366: [502..503]
 r367: [504..505]
 r368: [500..501]
 r369: [498..499]
 r370: [494..495]
 r371: [486..489]
 r372: [486..487]
 r373: [484..485]
 r374: [482..483]
 r375: [10..11]
 r376: [478..479]
 r377: [474..475]
 r378: [466..467]
 r379: [458..461]
 r380: [458..459]
 r381: [456..457]
 r382: [452..453]
 r383: [446..447]
 r384: [438..441]
 r385: [438..439]
 r386: [434..435]
 r387: [430..431]
 r388: [424..425]
 r389: [416..419]
 r390: [416..417]
 r391: [412..413]
 r392: [408..409]
 r393: [400..401]
 r394: [392..395]
 r395: [392..393]
 r396: [384..385]
 r397: [386..387]
 r398: [382..383]
 r399: [378..379]
 r400: [370..371]
 r401: [362..365]
 r402: [362..363]
 r403: [360..361]
 r404: [356..357]
 r405: [350..351]
 r406: [342..345]
 r407: [342..343]
 r408: [338..339]
 r409: [334..335]
 r410: [328..329]
 r411: [320..323]
 r412: [320..321]
 r413: [316..317]
 r414: [312..313]
 r415: [304..305]
 r416: [296..299]
 r417: [296..297]
 r418: [288..289]
 r419: [290..291]
 r420: [278..279]
 r421: [276..277]
 r422: [274..275]
 r423: [270..271]
 r424: [264..265]
 r425: [258..259]
 r426: [256..257]
 r427: [254..255]
 r428: [250..251]
 r429: [244..245]
 r430: [244..245]
 r431: [242..243]
 r432: [238..239]
 r433: [232..233]
 r434: [232..233]
 r435: [230..231]
 r436: [228..229]
 r437: [224..225]
 r438: [218..219]
 r439: [212..213]
 r440: [210..211]
 r441: [204..205]
 r442: [198..199]
 r443: [192..193]
 r444: [186..187]
 r445: [182..183]
 r446: [176..177]
 r447: [174..175]
 r448: [172..173]
 r449: [166..167]
 r450: [160..161]
 r451: [152..155]
 r452: [152..153]
 r453: [150..151]
 r454: [144..145]
 r455: [138..139]
 r456: [130..133]
 r457: [130..131]
 r458: [126..127]
 r459: [120..121]
 r460: [114..115]
 r461: [106..109]
 r462: [106..107]
 r463: [104..105]
 r464: [102..103]
 r465: [94..97]
 r466: [92..93]
 r467: [86..87]
 r468: [80..81]
 r469: [74..75]
 r470: [70..71]
 r471: [66..67]
 r472: [60..61]
 r473: [46..47]
 r474: [40..41]
 r475: [34..35]
 r476: [26..29]
 r477: [26..27]
 r478: [24..25]
 r479: [20..21]
 r480: [12..13]
 r481: [286..287]
 r482: [94..95]
 r483: [54..55]
 r484: [48..49]
 r485: [56..71]
 r486: [50..93]

********** Assignment #1: **********

	 Assigning to 486 (cl=SSE_REGS, orig=288, freq=2000, tfirst=482, tfreq=4000)...
	 Assigning to 482 (cl=SSE_REGS, orig=287, freq=3000, tfirst=482, tfreq=4000)...
	   Assign 22 to reload r482 (freq=3000)
	Hard reg 22 is preferable by r486 with profit 1000
	Hard reg 22 is preferable by r484 with profit 1500
	 Assigning to 484 (cl=SSE_REGS, orig=288, freq=3000, tfirst=482, tfreq=4000)...
	   Assign 22 to reload r484 (freq=3000)
	Hard reg 22 is preferable by r486 with profit 2000
	 Assigning to 481 (cl=SSE_REGS, orig=336, freq=3000, tfirst=481, tfreq=3000)...
	   Assign 22 to reload r481 (freq=3000)
	 Assigning to 485 (cl=SSE_REGS, orig=299, freq=2000, tfirst=483, tfreq=3000)...
	 Assigning to 483 (cl=SSE_REGS, orig=299, freq=3000, tfirst=483, tfreq=3000)...
	   Assign 24 to reload r483 (freq=3000)
	Hard reg 21 is preferable by r485 with profit 1000
	Hard reg 24 is preferable by r485 with profit 1000
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 2 (0.00%)
   Insn after restoring regs:
  543: r484:SF=r288:SF
      REG_DEAD r288:SF
   Insn after restoring regs:
  541: r483:SF=r299:SF
      REG_DEAD r299:SF
   Insn after restoring regs:
  439: r299:SF=xmm0:SF
      REG_DEAD xmm0:SF
   Insn after restoring regs:
  540: r288:SF=r482:SF
      REG_DEAD r482:SF

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6

********** Pseudo live ranges #2: **********

  BB 20
   Insn 510: point = 0, n_alt = -1
  BB 23
   Insn 529: point = 0, n_alt = -1
  BB 9
   Insn 89: point = 0, n_alt = -1
   Insn 88: point = 0, n_alt = 0
   Insn 87: point = 1, n_alt = 0
   Insn 86: point = 3, n_alt = 0
   Insn 85: point = 4, n_alt = 0
  BB 19
   Insn 519: point = 5, n_alt = -1
   Insn 494: point = 5, n_alt = 1
  BB 24
   Insn 532: point = 6, n_alt = -1
  BB 11
   Insn 97: point = 7, n_alt = -1
   Insn 96: point = 7, n_alt = 0
   Insn 95: point = 8, n_alt = 0
   Insn 94: point = 10, n_alt = 0
   Insn 93: point = 11, n_alt = 0
  BB 18
   Insn 517: point = 12, n_alt = -1
   Insn 488: point = 12, n_alt = 1
  BB 25
   Insn 535: point = 13, n_alt = -1
  BB 13
   Insn 141: point = 14, n_alt = -1
   Insn 140: point = 14, n_alt = 0
   Insn 139: point = 15, n_alt = 0
   Insn 138: point = 17, n_alt = 0
   Insn 137: point = 18, n_alt = 1
  BB 17
   Insn 515: point = 19, n_alt = -1
   Insn 482: point = 19, n_alt = 1
  BB 16
   Insn 479: point = 20, n_alt = 8
   Insn 478: point = 21, n_alt = 3
   Insn 477: point = 22, n_alt = 1
   Insn 476: point = 24, n_alt = 3
   Insn 475: point = 26, n_alt = 0
   Insn 474: point = 28, n_alt = 0
   Insn 473: point = 30, n_alt = 0
   Insn 472: point = 31, n_alt = 0
   Insn 471: point = 33, n_alt = 0
   Insn 470: point = 35, n_alt = 0
   Insn 469: point = 36, n_alt = 7
   Insn 468: point = 38, n_alt = 0
   Insn 467: point = 40, n_alt = 4
   Insn 466: point = 41, n_alt = 3
   Insn 465: point = 43, n_alt = 0
   Insn 464: point = 45, n_alt = 0
   Insn 463: point = 47, n_alt = 0
   Insn 462: point = 48, n_alt = 0
   Insn 461: point = 50, n_alt = 0
   Insn 460: point = 52, n_alt = 0
   Insn 459: point = 54, n_alt = 0
   Insn 458: point = 55, n_alt = 1
   Insn 457: point = 57, n_alt = 0
   Insn 456: point = 59, n_alt = 0
   Insn 455: point = 61, n_alt = 0
   Insn 544: point = 62, n_alt = -2
   Insn 454: point = 64, n_alt = 1
   Insn 543: point = 65, n_alt = 7
   Insn 453: point = 67, n_alt = -2
   Insn 542: point = 69, n_alt = -2
   Insn 452: point = 71, n_alt = 2
   Insn 541: point = 72, n_alt = 7
   Insn 451: point = 74, n_alt = -2
   Insn 450: point = 75, n_alt = 0
   Insn 449: point = 75, n_alt = -2
   Insn 448: point = 76, n_alt = 7
   Insn 447: point = 78, n_alt = 3
   Insn 446: point = 79, n_alt = 3
   Insn 445: point = 81, n_alt = 0
   Insn 444: point = 83, n_alt = 0
   Insn 443: point = 85, n_alt = 0
   Insn 442: point = 86, n_alt = 0
   Insn 441: point = 88, n_alt = 0
   Insn 440: point = 90, n_alt = 0
   Insn 439: point = 91, n_alt = 8
   Insn 438: point = 92, n_alt = 0
   Insn 437: point = 92, n_alt = -2
   Insn 436: point = 93, n_alt = 7
   Insn 435: point = 95, n_alt = 4
   Insn 434: point = 96, n_alt = 3
   Insn 433: point = 98, n_alt = 0
   Insn 432: point = 100, n_alt = 0
   Insn 431: point = 102, n_alt = 0
   Insn 430: point = 103, n_alt = 0
   Insn 429: point = 105, n_alt = 0
   Insn 428: point = 107, n_alt = 0
   Insn 427: point = 109, n_alt = 0
   Insn 426: point = 110, n_alt = 1
   Insn 425: point = 112, n_alt = 0
   Insn 424: point = 114, n_alt = 0
   Insn 423: point = 116, n_alt = 0
   Insn 540: point = 117, n_alt = 8
   Insn 422: point = 119, n_alt = 1
   Insn 539: point = 120, n_alt = -2
   Insn 421: point = 122, n_alt = 7
   Insn 420: point = 123, n_alt = 1
   Insn 419: point = 125, n_alt = -2
   Insn 418: point = 127, n_alt = 1
   Insn 417: point = 129, n_alt = 7
   Insn 416: point = 130, n_alt = 1
   Insn 415: point = 132, n_alt = 7
   Insn 414: point = 133, n_alt = 7
   Insn 413: point = 135, n_alt = 0
   Insn 412: point = 137, n_alt = 4
   Insn 411: point = 138, n_alt = 3
   Insn 410: point = 140, n_alt = 0
   Insn 409: point = 142, n_alt = 0
   Insn 408: point = 144, n_alt = 0
   Insn 407: point = 145, n_alt = 0
   Insn 406: point = 147, n_alt = 0
   Insn 405: point = 149, n_alt = 0
   Insn 404: point = 151, n_alt = 0
   Insn 403: point = 152, n_alt = 1
   Insn 402: point = 154, n_alt = 0
   Insn 401: point = 156, n_alt = 0
   Insn 400: point = 158, n_alt = 0
   Insn 399: point = 159, n_alt = 1
   Insn 398: point = 161, n_alt = 7
   Insn 397: point = 163, n_alt = 0
   Insn 396: point = 165, n_alt = 4
   Insn 395: point = 166, n_alt = 3
   Insn 394: point = 168, n_alt = 0
   Insn 393: point = 170, n_alt = 0
   Insn 392: point = 172, n_alt = 0
   Insn 391: point = 173, n_alt = 0
   Insn 390: point = 175, n_alt = 0
   Insn 389: point = 177, n_alt = 0
   Insn 388: point = 179, n_alt = 0
   Insn 387: point = 180, n_alt = 1
   Insn 386: point = 182, n_alt = 0
   Insn 385: point = 184, n_alt = 0
   Insn 384: point = 186, n_alt = 0
   Insn 383: point = 187, n_alt = 7
   Insn 382: point = 189, n_alt = 0
   Insn 381: point = 191, n_alt = 4
   Insn 380: point = 192, n_alt = 3
   Insn 379: point = 194, n_alt = 0
   Insn 378: point = 196, n_alt = 0
   Insn 377: point = 198, n_alt = 0
   Insn 376: point = 199, n_alt = 0
   Insn 375: point = 201, n_alt = 0
   Insn 374: point = 203, n_alt = 0
   Insn 373: point = 205, n_alt = 0
   Insn 372: point = 206, n_alt = 1
   Insn 371: point = 208, n_alt = 0
   Insn 370: point = 210, n_alt = 0
   Insn 369: point = 212, n_alt = 0
   Insn 368: point = 213, n_alt = 8
   Insn 367: point = 214, n_alt = 3
   Insn 366: point = 215, n_alt = 1
   Insn 365: point = 217, n_alt = 7
   Insn 364: point = 218, n_alt = 3
   Insn 363: point = 220, n_alt = 0
   Insn 362: point = 222, n_alt = 0
   Insn 361: point = 224, n_alt = 0
   Insn 360: point = 225, n_alt = 0
   Insn 359: point = 227, n_alt = 0
   Insn 358: point = 229, n_alt = 0
   Insn 357: point = 230, n_alt = -2
   Insn 356: point = 232, n_alt = 1
   Insn 355: point = 234, n_alt = 7
   Insn 354: point = 236, n_alt = 4
   Insn 353: point = 237, n_alt = 3
   Insn 352: point = 239, n_alt = 0
   Insn 351: point = 241, n_alt = 0
   Insn 350: point = 243, n_alt = 0
   Insn 349: point = 244, n_alt = 0
   Insn 348: point = 246, n_alt = 0
   Insn 347: point = 248, n_alt = 0
   Insn 346: point = 250, n_alt = 0
   Insn 345: point = 251, n_alt = 1
   Insn 344: point = 253, n_alt = 0
   Insn 343: point = 255, n_alt = 0
   Insn 342: point = 257, n_alt = 0
   Insn 341: point = 258, n_alt = 7
   Insn 340: point = 260, n_alt = 4
   Insn 339: point = 261, n_alt = 3
   Insn 338: point = 263, n_alt = 0
   Insn 337: point = 265, n_alt = 0
   Insn 336: point = 267, n_alt = 0
   Insn 335: point = 268, n_alt = 0
   Insn 334: point = 270, n_alt = 0
   Insn 333: point = 272, n_alt = 0
   Insn 332: point = 274, n_alt = 0
   Insn 331: point = 275, n_alt = 1
   Insn 330: point = 277, n_alt = 0
   Insn 329: point = 279, n_alt = 0
   Insn 328: point = 280, n_alt = 8
   Insn 327: point = 281, n_alt = 7
   Insn 326: point = 282, n_alt = 8
   Insn 325: point = 283, n_alt = 7
   Insn 324: point = 284, n_alt = 3
   Insn 323: point = 285, n_alt = 3
   Insn 322: point = 287, n_alt = 0
   Insn 321: point = 289, n_alt = 0
   Insn 320: point = 291, n_alt = 0
   Insn 319: point = 292, n_alt = 0
   Insn 318: point = 294, n_alt = 0
   Insn 317: point = 296, n_alt = 0
   Insn 316: point = 297, n_alt = 8
   Insn 315: point = 298, n_alt = 7
   Insn 314: point = 299, n_alt = 3
   Insn 313: point = 300, n_alt = 3
   Insn 312: point = 302, n_alt = 0
   Insn 311: point = 304, n_alt = 0
   Insn 310: point = 306, n_alt = 0
   Insn 309: point = 307, n_alt = 0
   Insn 308: point = 309, n_alt = 0
   Insn 307: point = 311, n_alt = 0
  BB 15
   Insn 302: point = 313, n_alt = -1
   Insn 301: point = 313, n_alt = 1
   Insn 300: point = 314, n_alt = 7
   Insn 299: point = 315, n_alt = 7
   Insn 298: point = 317, n_alt = 4
   Insn 297: point = 318, n_alt = 3
   Insn 296: point = 320, n_alt = 0
   Insn 295: point = 322, n_alt = 0
   Insn 294: point = 324, n_alt = 0
   Insn 293: point = 325, n_alt = 0
   Insn 292: point = 327, n_alt = 0
   Insn 291: point = 329, n_alt = 0
   Insn 290: point = 331, n_alt = 0
   Insn 289: point = 332, n_alt = 1
   Insn 288: point = 334, n_alt = 0
   Insn 287: point = 336, n_alt = 0
  BB 14
   Insn 282: point = 338, n_alt = -1
   Insn 281: point = 338, n_alt = 1
   Insn 280: point = 339, n_alt = 7
   Insn 279: point = 340, n_alt = 8
   Insn 278: point = 341, n_alt = 0
   Insn 277: point = 343, n_alt = 1
   Insn 276: point = 345, n_alt = 1
   Insn 275: point = 347, n_alt = 7
   Insn 538: point = 348, n_alt = -2
   Insn 274: point = 350, n_alt = 1
   Insn 537: point = 351, n_alt = -2
   Insn 273: point = 352, n_alt = 7
   Insn 272: point = 353, n_alt = 8
   Insn 271: point = 354, n_alt = 1
   Insn 270: point = 356, n_alt = 7
   Insn 269: point = 357, n_alt = -2
   Insn 268: point = 359, n_alt = 1
   Insn 267: point = 361, n_alt = 7
   Insn 266: point = 363, n_alt = 0
   Insn 265: point = 365, n_alt = 4
   Insn 264: point = 366, n_alt = 3
   Insn 263: point = 368, n_alt = 0
   Insn 262: point = 370, n_alt = 0
   Insn 261: point = 372, n_alt = 0
   Insn 260: point = 373, n_alt = 0
   Insn 259: point = 375, n_alt = 0
   Insn 258: point = 377, n_alt = 0
   Insn 257: point = 379, n_alt = 0
   Insn 256: point = 381, n_alt = 0
   Insn 255: point = 382, n_alt = 1
   Insn 254: point = 384, n_alt = 0
   Insn 253: point = 386, n_alt = 0
   Insn 252: point = 387, n_alt = 1
   Insn 251: point = 389, n_alt = 7
   Insn 250: point = 391, n_alt = 0
   Insn 249: point = 393, n_alt = 4
   Insn 248: point = 394, n_alt = 3
   Insn 247: point = 396, n_alt = 0
   Insn 246: point = 398, n_alt = 0
   Insn 245: point = 400, n_alt = 0
   Insn 244: point = 401, n_alt = 0
   Insn 243: point = 403, n_alt = 0
   Insn 242: point = 405, n_alt = 0
   Insn 241: point = 407, n_alt = 0
   Insn 240: point = 408, n_alt = 1
   Insn 239: point = 410, n_alt = 0
   Insn 238: point = 412, n_alt = 0
   Insn 237: point = 413, n_alt = 1
   Insn 236: point = 415, n_alt = 7
   Insn 235: point = 417, n_alt = 0
   Insn 234: point = 419, n_alt = 4
   Insn 233: point = 420, n_alt = 3
   Insn 232: point = 422, n_alt = 0
   Insn 231: point = 424, n_alt = 0
   Insn 230: point = 426, n_alt = 0
   Insn 229: point = 427, n_alt = 0
   Insn 228: point = 429, n_alt = 0
   Insn 227: point = 431, n_alt = 0
   Insn 226: point = 433, n_alt = 0
   Insn 225: point = 434, n_alt = 1
   Insn 224: point = 436, n_alt = 0
   Insn 223: point = 438, n_alt = 0
   Insn 222: point = 439, n_alt = 7
   Insn 221: point = 441, n_alt = 0
   Insn 220: point = 443, n_alt = 4
   Insn 219: point = 444, n_alt = 3
   Insn 218: point = 446, n_alt = 0
   Insn 217: point = 448, n_alt = 0
   Insn 216: point = 450, n_alt = 0
   Insn 215: point = 451, n_alt = 0
   Insn 214: point = 453, n_alt = 0
   Insn 213: point = 455, n_alt = 0
   Insn 212: point = 457, n_alt = 0
   Insn 211: point = 459, n_alt = 0
   Insn 210: point = 460, n_alt = 1
   Insn 209: point = 462, n_alt = 0
   Insn 208: point = 464, n_alt = 0
   Insn 207: point = 465, n_alt = 8
   Insn 206: point = 466, n_alt = 1
   Insn 205: point = 468, n_alt = 7
   Insn 204: point = 469, n_alt = -2
   Insn 203: point = 471, n_alt = 1
   Insn 202: point = 473, n_alt = 7
   Insn 201: point = 475, n_alt = 0
   Insn 200: point = 477, n_alt = 4
   Insn 199: point = 478, n_alt = 3
   Insn 198: point = 480, n_alt = 0
   Insn 197: point = 482, n_alt = 0
   Insn 196: point = 484, n_alt = 0
   Insn 195: point = 485, n_alt = 0
   Insn 194: point = 487, n_alt = 0
   Insn 193: point = 489, n_alt = 0
   Insn 192: point = 491, n_alt = 0
   Insn 191: point = 493, n_alt = 0
   Insn 190: point = 494, n_alt = 1
   Insn 189: point = 496, n_alt = 0
   Insn 188: point = 498, n_alt = 0
   Insn 187: point = 499, n_alt = 1
   Insn 186: point = 501, n_alt = 7
   Insn 185: point = 503, n_alt = 0
   Insn 184: point = 505, n_alt = 4
   Insn 183: point = 506, n_alt = 3
   Insn 182: point = 508, n_alt = 0
   Insn 181: point = 510, n_alt = 0
   Insn 180: point = 512, n_alt = 0
   Insn 179: point = 513, n_alt = 0
   Insn 178: point = 515, n_alt = 0
   Insn 177: point = 517, n_alt = 0
   Insn 176: point = 519, n_alt = 0
   Insn 175: point = 520, n_alt = 1
   Insn 174: point = 522, n_alt = 0
   Insn 173: point = 524, n_alt = 0
   Insn 172: point = 525, n_alt = 1
   Insn 171: point = 527, n_alt = 7
   Insn 170: point = 529, n_alt = 0
   Insn 169: point = 531, n_alt = 4
   Insn 168: point = 532, n_alt = 3
   Insn 167: point = 534, n_alt = 0
   Insn 166: point = 536, n_alt = 0
   Insn 165: point = 538, n_alt = 0
   Insn 164: point = 539, n_alt = 0
   Insn 163: point = 541, n_alt = 0
   Insn 162: point = 543, n_alt = 0
   Insn 161: point = 545, n_alt = 0
   Insn 160: point = 546, n_alt = 1
   Insn 159: point = 548, n_alt = 0
   Insn 158: point = 550, n_alt = 0
   Insn 157: point = 551, n_alt = 7
   Insn 156: point = 553, n_alt = 0
   Insn 155: point = 555, n_alt = 4
   Insn 154: point = 556, n_alt = 3
   Insn 153: point = 558, n_alt = 0
   Insn 152: point = 560, n_alt = 0
   Insn 151: point = 562, n_alt = 0
   Insn 150: point = 563, n_alt = 0
   Insn 149: point = 565, n_alt = 0
   Insn 148: point = 567, n_alt = 0
   Insn 147: point = 569, n_alt = 0
   Insn 146: point = 571, n_alt = 0
   Insn 145: point = 572, n_alt = 1
   Insn 144: point = 574, n_alt = 0
   Insn 143: point = 576, n_alt = 0
  BB 12
   Insn 135: point = 578, n_alt = 1
   Insn 134: point = 579, n_alt = 0
   Insn 133: point = 581, n_alt = 0
   Insn 132: point = 582, n_alt = 1
   Insn 131: point = 583, n_alt = 0
   Insn 130: point = 585, n_alt = 0
   Insn 129: point = 587, n_alt = 4
   Insn 128: point = 588, n_alt = 3
   Insn 127: point = 590, n_alt = 0
   Insn 126: point = 592, n_alt = 0
   Insn 125: point = 594, n_alt = 0
   Insn 124: point = 595, n_alt = 0
   Insn 123: point = 597, n_alt = 0
   Insn 122: point = 599, n_alt = 0
   Insn 121: point = 600, n_alt = 8
   Insn 120: point = 601, n_alt = 7
   Insn 119: point = 602, n_alt = 1
   Insn 118: point = 603, n_alt = 0
   Insn 117: point = 605, n_alt = 0
   Insn 113: point = 606, n_alt = 0
   Insn 112: point = 608, n_alt = 0
   Insn 111: point = 610, n_alt = 0
   Insn 110: point = 612, n_alt = 0
   Insn 109: point = 614, n_alt = 0
   Insn 108: point = 615, n_alt = 1
   Insn 107: point = 616, n_alt = 0
   Insn 106: point = 618, n_alt = 0
   Insn 102: point = 619, n_alt = 0
   Insn 101: point = 621, n_alt = 0
   Insn 100: point = 623, n_alt = 0
   Insn 99: point = 625, n_alt = 0
  BB 10
   Insn 91: point = 627, n_alt = 1
  BB 8
   Insn 83: point = 628, n_alt = 1
   Insn 82: point = 629, n_alt = 0
   Insn 81: point = 630, n_alt = 0
  BB 21
   Insn 523: point = 631, n_alt = -1
  BB 3
   Insn 19: point = 631, n_alt = -1
   Insn 18: point = 631, n_alt = 0
   Insn 17: point = 632, n_alt = 0
   Insn 16: point = 634, n_alt = 0
   Insn 15: point = 635, n_alt = 0
  BB 7
   Insn 513: point = 636, n_alt = -1
   Insn 75: point = 636, n_alt = 1
  BB 22
   Insn 526: point = 637, n_alt = -1
  BB 5
   Insn 27: point = 638, n_alt = -1
   Insn 26: point = 638, n_alt = 0
   Insn 25: point = 639, n_alt = 0
   Insn 24: point = 641, n_alt = 0
   Insn 23: point = 642, n_alt = 0
  BB 6
   Insn 511: point = 643, n_alt = -1
   Insn 69: point = 643, n_alt = 1
   Insn 68: point = 643, n_alt = 8
   Insn 67: point = 644, n_alt = 3
   Insn 66: point = 645, n_alt = 7
   Insn 65: point = 646, n_alt = 3
   Insn 64: point = 648, n_alt = 0
   Insn 63: point = 650, n_alt = 1
   Insn 62: point = 652, n_alt = 0
   Insn 61: point = 653, n_alt = 0
   Insn 60: point = 655, n_alt = 1
   Insn 59: point = 657, n_alt = 0
   Insn 58: point = 658, n_alt = 8
   Insn 57: point = 659, n_alt = 3
   Insn 56: point = 660, n_alt = 7
   Insn 55: point = 661, n_alt = 3
   Insn 54: point = 663, n_alt = 0
   Insn 53: point = 665, n_alt = 1
   Insn 52: point = 667, n_alt = 0
   Insn 51: point = 668, n_alt = 0
   Insn 50: point = 670, n_alt = 1
   Insn 49: point = 672, n_alt = 0
   Insn 48: point = 673, n_alt = 8
   Insn 47: point = 674, n_alt = 3
   Insn 46: point = 675, n_alt = 7
   Insn 45: point = 676, n_alt = 3
   Insn 44: point = 678, n_alt = 0
   Insn 43: point = 680, n_alt = 1
   Insn 42: point = 682, n_alt = 0
   Insn 41: point = 683, n_alt = 0
   Insn 40: point = 685, n_alt = 1
   Insn 39: point = 687, n_alt = 0
   Insn 38: point = 688, n_alt = 8
   Insn 37: point = 689, n_alt = 3
   Insn 36: point = 690, n_alt = 7
   Insn 35: point = 691, n_alt = 3
   Insn 34: point = 693, n_alt = 0
   Insn 33: point = 695, n_alt = 1
   Insn 32: point = 697, n_alt = 0
   Insn 31: point = 698, n_alt = 0
   Insn 30: point = 700, n_alt = 1
   Insn 29: point = 702, n_alt = 0
  BB 4
   Insn 21: point = 704, n_alt = 1
  BB 2
   Insn 13: point = 705, n_alt = 1
   Insn 12: point = 706, n_alt = 0
   Insn 11: point = 707, n_alt = 0
   Insn 10: point = 708, n_alt = 8
   Insn 9: point = 709, n_alt = 7
   Insn 5: point = 710, n_alt = 5
   Insn 4: point = 710, n_alt = 5
   Insn 3: point = 710, n_alt = 5
   Insn 2: point = 710, n_alt = 5
 r288: [66..117]
 r299: [73..91]
Compressing live ranges: from 710 to 2 - 0%
Ranges after the compression:
 r288: [0..1]
 r299: [0..1]
  Slot 0 regnos (width = 0):	 288
  Slot 1 regnos (width = 0):	 299
Changing spilled pseudos to memory in insn #540
Changing spilled pseudos to memory in insn #439
Changing spilled pseudos to memory in insn #541
Changing spilled pseudos to memory in insn #543
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 7 for insn #543
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 543:  (0) v  (1) m {*movsf_internal}
Reusing alternative 7 for insn #541
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 541:  (0) v  (1) m {*movsf_internal}
Reusing alternative 8 for insn #439
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 439:  (0) m  (1) v {*movsf_internal}
Reusing alternative 8 for insn #540
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 540:  (0) m  (1) v {*movsf_internal}
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 38
changing reg in insn 36
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 48
changing reg in insn 46
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 58
changing reg in insn 56
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 68
changing reg in insn 66
changing reg in insn 68
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 107
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 118
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 130
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 150
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 157
changing reg in insn 172
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 164
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 187
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 179
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 195
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 197
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 215
changing reg in insn 212
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 221
changing reg in insn 222
changing reg in insn 237
changing reg in insn 224
changing reg in insn 225
changing reg in insn 225
changing reg in insn 229
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 231
changing reg in insn 232
changing reg in insn 233
changing reg in insn 233
changing reg in insn 235
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 252
changing reg in insn 239
changing reg in insn 240
changing reg in insn 240
changing reg in insn 244
changing reg in insn 242
changing reg in insn 243
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 246
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 250
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 260
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 262
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 266
changing reg in insn 267
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 277
changing reg in insn 278
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 293
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 295
changing reg in insn 296
changing reg in insn 297
changing reg in insn 297
changing reg in insn 299
changing reg in insn 299
changing reg in insn 301
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 311
changing reg in insn 312
changing reg in insn 313
changing reg in insn 313
changing reg in insn 316
changing reg in insn 318
changing reg in insn 319
changing reg in insn 319
changing reg in insn 321
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 326
changing reg in insn 330
changing reg in insn 331
changing reg in insn 331
changing reg in insn 335
changing reg in insn 333
changing reg in insn 334
changing reg in insn 334
changing reg in insn 335
changing reg in insn 335
changing reg in insn 337
changing reg in insn 338
changing reg in insn 339
changing reg in insn 339
changing reg in insn 341
changing reg in insn 341
changing reg in insn 343
changing reg in insn 344
changing reg in insn 344
changing reg in insn 345
changing reg in insn 345
changing reg in insn 349
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 349
changing reg in insn 349
changing reg in insn 351
changing reg in insn 352
changing reg in insn 353
changing reg in insn 353
changing reg in insn 355
changing reg in insn 355
changing reg in insn 356
changing reg in insn 357
changing reg in insn 357
changing reg in insn 359
changing reg in insn 360
changing reg in insn 360
changing reg in insn 362
changing reg in insn 363
changing reg in insn 364
changing reg in insn 364
changing reg in insn 368
changing reg in insn 366
changing reg in insn 368
changing reg in insn 370
changing reg in insn 371
changing reg in insn 371
changing reg in insn 372
changing reg in insn 372
changing reg in insn 376
changing reg in insn 374
changing reg in insn 375
changing reg in insn 375
changing reg in insn 376
changing reg in insn 376
changing reg in insn 378
changing reg in insn 379
changing reg in insn 380
changing reg in insn 380
changing reg in insn 382
changing reg in insn 383
changing reg in insn 385
changing reg in insn 386
changing reg in insn 386
changing reg in insn 387
changing reg in insn 387
changing reg in insn 391
changing reg in insn 389
changing reg in insn 390
changing reg in insn 390
changing reg in insn 391
changing reg in insn 391
changing reg in insn 393
changing reg in insn 394
changing reg in insn 395
changing reg in insn 395
changing reg in insn 397
changing reg in insn 398
changing reg in insn 399
changing reg in insn 401
changing reg in insn 402
changing reg in insn 402
changing reg in insn 403
changing reg in insn 403
changing reg in insn 407
changing reg in insn 405
changing reg in insn 406
changing reg in insn 406
changing reg in insn 407
changing reg in insn 407
changing reg in insn 409
changing reg in insn 410
changing reg in insn 411
changing reg in insn 411
changing reg in insn 413
changing reg in insn 414
changing reg in insn 416
changing reg in insn 416
changing reg in insn 418
changing reg in insn 419
changing reg in insn 419
changing reg in insn 420
changing reg in insn 424
changing reg in insn 425
changing reg in insn 425
changing reg in insn 426
changing reg in insn 426
changing reg in insn 430
changing reg in insn 428
changing reg in insn 429
changing reg in insn 429
changing reg in insn 430
changing reg in insn 430
changing reg in insn 432
changing reg in insn 433
changing reg in insn 434
changing reg in insn 434
changing reg in insn 436
changing reg in insn 436
changing reg in insn 437
changing reg in insn 441
changing reg in insn 442
changing reg in insn 442
changing reg in insn 444
changing reg in insn 445
changing reg in insn 446
changing reg in insn 446
changing reg in insn 448
changing reg in insn 448
changing reg in insn 449
changing reg in insn 451
changing reg in insn 452
changing reg in insn 453
changing reg in insn 453
changing reg in insn 454
changing reg in insn 456
changing reg in insn 457
changing reg in insn 457
changing reg in insn 458
changing reg in insn 458
changing reg in insn 462
changing reg in insn 460
changing reg in insn 461
changing reg in insn 461
changing reg in insn 462
changing reg in insn 462
changing reg in insn 464
changing reg in insn 465
changing reg in insn 466
changing reg in insn 466
changing reg in insn 468
changing reg in insn 469
changing reg in insn 471
changing reg in insn 472
changing reg in insn 472
changing reg in insn 474
changing reg in insn 475
changing reg in insn 476
changing reg in insn 476
changing reg in insn 479
changing reg in insn 477
changing reg in insn 479
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 25
changing reg in insn 26
changing reg in insn 81
changing reg in insn 83
changing reg in insn 82
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 95
changing reg in insn 96
changing reg in insn 134
changing reg in insn 135
changing reg in insn 139
changing reg in insn 140
changing reg in insn 273
changing reg in insn 274
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 276
changing reg in insn 9
changing reg in insn 10
changing reg in insn 16
changing reg in insn 17
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 67
changing reg in insn 68
changing reg in insn 86
changing reg in insn 87
changing reg in insn 94
changing reg in insn 95
changing reg in insn 99
changing reg in insn 100
changing reg in insn 107
changing reg in insn 108
changing reg in insn 106
changing reg in insn 109
changing reg in insn 110
changing reg in insn 112
changing reg in insn 113
changing reg in insn 118
changing reg in insn 119
changing reg in insn 117
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 125
changing reg in insn 126
changing reg in insn 129
changing reg in insn 131
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 138
changing reg in insn 139
changing reg in insn 143
changing reg in insn 144
changing reg in insn 146
changing reg in insn 147
changing reg in insn 151
changing reg in insn 152
changing reg in insn 155
changing reg in insn 157
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 159
changing reg in insn 161
changing reg in insn 162
changing reg in insn 165
changing reg in insn 166
changing reg in insn 169
changing reg in insn 171
changing reg in insn 170
changing reg in insn 171
changing reg in insn 173
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
changing reg in insn 180
changing reg in insn 181
changing reg in insn 184
changing reg in insn 186
changing reg in insn 185
changing reg in insn 186
changing reg in insn 188
changing reg in insn 189
changing reg in insn 191
changing reg in insn 192
changing reg in insn 196
changing reg in insn 197
changing reg in insn 200
changing reg in insn 202
changing reg in insn 201
changing reg in insn 202
changing reg in insn 206
changing reg in insn 207
changing reg in insn 205
changing reg in insn 208
changing reg in insn 209
changing reg in insn 211
changing reg in insn 212
changing reg in insn 216
changing reg in insn 217
changing reg in insn 220
changing reg in insn 222
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 226
changing reg in insn 227
changing reg in insn 230
changing reg in insn 231
changing reg in insn 234
changing reg in insn 236
changing reg in insn 235
changing reg in insn 236
changing reg in insn 238
changing reg in insn 239
changing reg in insn 241
changing reg in insn 242
changing reg in insn 245
changing reg in insn 246
changing reg in insn 249
changing reg in insn 251
changing reg in insn 250
changing reg in insn 251
changing reg in insn 253
changing reg in insn 254
changing reg in insn 256
changing reg in insn 257
changing reg in insn 261
changing reg in insn 262
changing reg in insn 265
changing reg in insn 267
changing reg in insn 266
changing reg in insn 267
changing reg in insn 271
changing reg in insn 272
changing reg in insn 270
changing reg in insn 278
changing reg in insn 279
changing reg in insn 280
changing reg in insn 281
changing reg in insn 287
changing reg in insn 288
changing reg in insn 290
changing reg in insn 291
changing reg in insn 294
changing reg in insn 295
changing reg in insn 298
changing reg in insn 299
changing reg in insn 300
changing reg in insn 301
changing reg in insn 307
changing reg in insn 308
changing reg in insn 310
changing reg in insn 311
changing reg in insn 314
changing reg in insn 316
changing reg in insn 315
changing reg in insn 316
changing reg in insn 317
changing reg in insn 318
changing reg in insn 320
changing reg in insn 321
changing reg in insn 324
changing reg in insn 326
changing reg in insn 325
changing reg in insn 326
changing reg in insn 327
changing reg in insn 328
changing reg in insn 329
changing reg in insn 330
changing reg in insn 332
changing reg in insn 333
changing reg in insn 336
changing reg in insn 337
changing reg in insn 340
changing reg in insn 341
changing reg in insn 342
changing reg in insn 343
changing reg in insn 346
changing reg in insn 347
changing reg in insn 350
changing reg in insn 351
changing reg in insn 354
changing reg in insn 355
changing reg in insn 358
changing reg in insn 359
changing reg in insn 361
changing reg in insn 362
changing reg in insn 365
changing reg in insn 367
changing reg in insn 368
changing reg in insn 369
changing reg in insn 370
changing reg in insn 373
changing reg in insn 374
changing reg in insn 377
changing reg in insn 378
changing reg in insn 381
changing reg in insn 383
changing reg in insn 382
changing reg in insn 383
changing reg in insn 384
changing reg in insn 385
changing reg in insn 388
changing reg in insn 389
changing reg in insn 392
changing reg in insn 393
changing reg in insn 396
changing reg in insn 398
changing reg in insn 397
changing reg in insn 398
changing reg in insn 400
changing reg in insn 401
changing reg in insn 404
changing reg in insn 405
changing reg in insn 408
changing reg in insn 409
changing reg in insn 412
changing reg in insn 414
changing reg in insn 413
changing reg in insn 414
changing reg in insn 415
changing reg in insn 416
changing reg in insn 417
changing reg in insn 421
changing reg in insn 422
changing reg in insn 423
changing reg in insn 424
changing reg in insn 427
changing reg in insn 428
changing reg in insn 431
changing reg in insn 432
changing reg in insn 435
changing reg in insn 436
changing reg in insn 440
changing reg in insn 441
changing reg in insn 443
changing reg in insn 444
changing reg in insn 447
changing reg in insn 448
changing reg in insn 455
changing reg in insn 456
changing reg in insn 459
changing reg in insn 460
changing reg in insn 463
changing reg in insn 464
changing reg in insn 467
changing reg in insn 469
changing reg in insn 468
changing reg in insn 469
changing reg in insn 470
changing reg in insn 471
changing reg in insn 473
changing reg in insn 474
changing reg in insn 478
changing reg in insn 479
deleting insn with uid = 538.
deleting insn with uid = 419.
deleting insn with uid = 539.
deleting insn with uid = 437.
deleting insn with uid = 449.
deleting insn with uid = 451.
deleting insn with uid = 453.
deleting insn with uid = 544.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 438.
verify found no changes in insn with uid = 450.


calmxw

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3]
;;  ref usage 	r0={215d,212u} r1={107d,105u,2e} r2={11d,9u} r3={1d,1u} r4={3d,1u} r5={3d,1u} r6={1d,152u} r7={1d,27u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={158d,12u} r18={2d} r19={2d} r20={1d,1u,13e} r21={43d,44u} r22={24d,21u} r23={5d,2u} r24={5d,2u} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 1313{708d,590u,15e} in 455{453 regular + 2 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 326 327 340
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 mxwp+0 S8 A64])
        (reg:DI 5 di [ mxwp ])) "CALMXW.f":1 85 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [3 mxwz+0 S8 A64])
        (reg:DI 4 si [ mxwz ])) "CALMXW.f":1 85 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 mxwu+0 S8 A64])
        (reg:DI 1 dx [ mxwu ])) "CALMXW.f":1 85 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 mxwv+0 S8 A64])
        (reg:DI 2 cx [ mxwv ])) "CALMXW.f":1 85 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:SF 21 xmm0 [340])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALMXW.f":72 131 {*movsf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 critp+0 S4 A32])
        (reg:SF 21 xmm0 [340])) "CALMXW.f":72 131 {*movsf_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 1 dx [orig:326 _255 ] [326])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f8a2981a630 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "CALMXW.f":74 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:327 _256 ] [327])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f8a2981a630 parallel>)
                    (const_int 12 [0xc]))) [1 parallel.jend+0 S4 A32])) "CALMXW.f":74 86 {*movsi_internal}
     (nil))
(insn 13 12 76 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
        (reg:SI 1 dx [orig:326 _255 ] [326])) "CALMXW.f":74 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327
;; lr  def 	 17 [flags] 328 341
(code_label 76 13 14 3 5 (nil) [1 uses])
(note 14 76 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:327 _256 ] [327]))) "CALMXW.f":74 11 {*cmpsi_1}
     (nil))
(insn 16 15 17 3 (set (reg:QI 1 dx [341])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALMXW.f":74 678 {*setcc_qi}
     (nil))
(insn 17 16 18 3 (set (reg:SI 1 dx [orig:328 _258 ] [328])
        (zero_extend:SI (reg:QI 1 dx [341]))) "CALMXW.f":74 140 {*zero_extendqisi2}
     (nil))
(insn 18 17 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:328 _258 ] [328])
            (const_int 0 [0]))) "CALMXW.f":74 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 522)
            (pc))) "CALMXW.f":74 682 {*jcc}
     (nil)
 -> 522)
;;  succ:       21
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 70 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALMXW.f":75 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 329 342
(code_label 70 21 22 5 4 (nil) [1 uses])
(note 22 70 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALMXW.f":75 11 {*cmpsi_1}
     (nil))
(insn 24 23 25 5 (set (reg:QI 1 dx [342])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALMXW.f":75 678 {*setcc_qi}
     (nil))
(insn 25 24 26 5 (set (reg:SI 1 dx [orig:329 _260 ] [329])
        (zero_extend:SI (reg:QI 1 dx [342]))) "CALMXW.f":75 140 {*zero_extendqisi2}
     (nil))
(insn 26 25 27 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:329 _260 ] [329])
            (const_int 0 [0]))) "CALMXW.f":75 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 27 26 28 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 525)
            (pc))) "CALMXW.f":75 682 {*jcc}
     (nil)
 -> 525)
;;  succ:       22
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 22, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 343 344 345 346 347 348 349 350 351 352 353 354
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (set (reg:SI 1 dx [343])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":76 86 {*movsi_internal}
     (nil))
(insn 30 29 31 6 (set (reg:DI 1 dx [orig:87 _1 ] [87])
        (sign_extend:DI (reg:SI 1 dx [343]))) "CALMXW.f":76 149 {*extendsidi2_rex64}
     (nil))
(insn 31 30 32 6 (parallel [
            (set (reg:DI 2 cx [orig:88 _2 ] [88])
                (mult:DI (reg:DI 1 dx [orig:87 _1 ] [87])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":76 349 {*muldi3_1}
     (nil))
(insn 32 31 33 6 (set (reg:SI 1 dx [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":76 86 {*movsi_internal}
     (nil))
(insn 33 32 34 6 (set (reg:DI 1 dx [orig:89 _3 ] [89])
        (sign_extend:DI (reg:SI 1 dx [344]))) "CALMXW.f":76 149 {*extendsidi2_rex64}
     (nil))
(insn 34 33 35 6 (parallel [
            (set (reg:DI 1 dx [orig:90 _4 ] [90])
                (plus:DI (reg:DI 1 dx [orig:89 _3 ] [89])
                    (reg:DI 2 cx [orig:88 _2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":76 222 {*adddi_1}
     (nil))
(insn 35 34 36 6 (parallel [
            (set (reg:DI 2 cx [orig:91 _5 ] [91])
                (plus:DI (reg:DI 1 dx [orig:90 _4 ] [90])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":76 222 {*adddi_1}
     (nil))
(insn 36 35 37 6 (set (reg:SF 21 xmm0 [orig:92 _6 ] [92])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f8a2981a240 options>) [2 options.spval+0 S4 A128])) "CALMXW.f":1 131 {*movsf_internal}
     (nil))
(insn 37 36 38 6 (set (reg/f:DI 1 dx [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 mxwu+0 S8 A64])) "CALMXW.f":76 85 {*movdi_internal}
     (nil))
(insn 38 37 39 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:91 _5 ] [91])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [345])) [2 *mxwu_261(D) S4 A32])
        (reg:SF 21 xmm0 [orig:92 _6 ] [92])) "CALMXW.f":76 131 {*movsf_internal}
     (nil))
(insn 39 38 40 6 (set (reg:SI 1 dx [346])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":77 86 {*movsi_internal}
     (nil))
(insn 40 39 41 6 (set (reg:DI 1 dx [orig:93 _7 ] [93])
        (sign_extend:DI (reg:SI 1 dx [346]))) "CALMXW.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 41 40 42 6 (parallel [
            (set (reg:DI 2 cx [orig:94 _8 ] [94])
                (mult:DI (reg:DI 1 dx [orig:93 _7 ] [93])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":77 349 {*muldi3_1}
     (nil))
(insn 42 41 43 6 (set (reg:SI 1 dx [347])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":77 86 {*movsi_internal}
     (nil))
(insn 43 42 44 6 (set (reg:DI 1 dx [orig:95 _9 ] [95])
        (sign_extend:DI (reg:SI 1 dx [347]))) "CALMXW.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 6 (parallel [
            (set (reg:DI 1 dx [orig:96 _10 ] [96])
                (plus:DI (reg:DI 1 dx [orig:95 _9 ] [95])
                    (reg:DI 2 cx [orig:94 _8 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":77 222 {*adddi_1}
     (nil))
(insn 45 44 46 6 (parallel [
            (set (reg:DI 2 cx [orig:97 _11 ] [97])
                (plus:DI (reg:DI 1 dx [orig:96 _10 ] [96])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":77 222 {*adddi_1}
     (nil))
(insn 46 45 47 6 (set (reg:SF 21 xmm0 [orig:98 _12 ] [98])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f8a2981a240 options>) [2 options.spval+0 S4 A128])) "CALMXW.f":1 131 {*movsf_internal}
     (nil))
(insn 47 46 48 6 (set (reg/f:DI 1 dx [348])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 mxwv+0 S8 A64])) "CALMXW.f":77 85 {*movdi_internal}
     (nil))
(insn 48 47 49 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:97 _11 ] [97])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [348])) [2 *mxwv_263(D) S4 A32])
        (reg:SF 21 xmm0 [orig:98 _12 ] [98])) "CALMXW.f":77 131 {*movsf_internal}
     (nil))
(insn 49 48 50 6 (set (reg:SI 1 dx [349])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":78 86 {*movsi_internal}
     (nil))
(insn 50 49 51 6 (set (reg:DI 1 dx [orig:99 _13 ] [99])
        (sign_extend:DI (reg:SI 1 dx [349]))) "CALMXW.f":78 149 {*extendsidi2_rex64}
     (nil))
(insn 51 50 52 6 (parallel [
            (set (reg:DI 2 cx [orig:100 _14 ] [100])
                (mult:DI (reg:DI 1 dx [orig:99 _13 ] [99])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":78 349 {*muldi3_1}
     (nil))
(insn 52 51 53 6 (set (reg:SI 1 dx [350])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":78 86 {*movsi_internal}
     (nil))
(insn 53 52 54 6 (set (reg:DI 1 dx [orig:101 _15 ] [101])
        (sign_extend:DI (reg:SI 1 dx [350]))) "CALMXW.f":78 149 {*extendsidi2_rex64}
     (nil))
(insn 54 53 55 6 (parallel [
            (set (reg:DI 1 dx [orig:102 _16 ] [102])
                (plus:DI (reg:DI 1 dx [orig:101 _15 ] [101])
                    (reg:DI 2 cx [orig:100 _14 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":78 222 {*adddi_1}
     (nil))
(insn 55 54 56 6 (parallel [
            (set (reg:DI 2 cx [orig:103 _17 ] [103])
                (plus:DI (reg:DI 1 dx [orig:102 _16 ] [102])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":78 222 {*adddi_1}
     (nil))
(insn 56 55 57 6 (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f8a2981a240 options>) [2 options.spval+0 S4 A128])) "CALMXW.f":1 131 {*movsf_internal}
     (nil))
(insn 57 56 58 6 (set (reg/f:DI 1 dx [351])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 mxwp+0 S8 A64])) "CALMXW.f":78 85 {*movdi_internal}
     (nil))
(insn 58 57 59 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:103 _17 ] [103])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [351])) [2 *mxwp_265(D) S4 A32])
        (reg:SF 21 xmm0 [orig:104 _18 ] [104])) "CALMXW.f":78 131 {*movsf_internal}
     (nil))
(insn 59 58 60 6 (set (reg:SI 1 dx [352])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":79 86 {*movsi_internal}
     (nil))
(insn 60 59 61 6 (set (reg:DI 1 dx [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 1 dx [352]))) "CALMXW.f":79 149 {*extendsidi2_rex64}
     (nil))
(insn 61 60 62 6 (parallel [
            (set (reg:DI 2 cx [orig:106 _20 ] [106])
                (mult:DI (reg:DI 1 dx [orig:105 _19 ] [105])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":79 349 {*muldi3_1}
     (nil))
(insn 62 61 63 6 (set (reg:SI 1 dx [353])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":79 86 {*movsi_internal}
     (nil))
(insn 63 62 64 6 (set (reg:DI 1 dx [orig:107 _21 ] [107])
        (sign_extend:DI (reg:SI 1 dx [353]))) "CALMXW.f":79 149 {*extendsidi2_rex64}
     (nil))
(insn 64 63 65 6 (parallel [
            (set (reg:DI 1 dx [orig:108 _22 ] [108])
                (plus:DI (reg:DI 1 dx [orig:107 _21 ] [107])
                    (reg:DI 2 cx [orig:106 _20 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":79 222 {*adddi_1}
     (nil))
(insn 65 64 66 6 (parallel [
            (set (reg:DI 2 cx [orig:109 _23 ] [109])
                (plus:DI (reg:DI 1 dx [orig:108 _22 ] [108])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":79 222 {*adddi_1}
     (nil))
(insn 66 65 67 6 (set (reg:SF 21 xmm0 [orig:110 _24 ] [110])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f8a2981a240 options>) [2 options.spval+0 S4 A128])) "CALMXW.f":1 131 {*movsf_internal}
     (nil))
(insn 67 66 68 6 (set (reg/f:DI 1 dx [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [3 mxwz+0 S8 A64])) "CALMXW.f":79 85 {*movdi_internal}
     (nil))
(insn 68 67 69 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:109 _23 ] [109])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [354])) [2 *mxwz_267(D) S4 A32])
        (reg:SF 21 xmm0 [orig:110 _24 ] [110])) "CALMXW.f":79 131 {*movsf_internal}
     (nil))
(insn 69 68 511 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":75 221 {*addsi_1}
     (nil))
(jump_insn 511 69 512 6 (set (pc)
        (label_ref 70)) "CALMXW.f":75 683 {jump}
     (nil)
 -> 70)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327

(barrier 512 511 525)
;; basic block 22, loop depth 0, maybe hot
;;  prev block 6, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 525 512 524 22 19 (nil) [1 uses])
(note 524 525 526 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 526 524 73 22 (const_int 0 [0]) "CALMXW.f":79 718 {nop}
     (nil))
;;  succ:       7 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327

;; basic block 7, loop depth 0, maybe hot
;;  prev block 22, next block 21, flags: (RTL, MODIFIED)
;;  pred:       22 [always]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 73 526 74 7 3 (nil) [0 uses])
(note 74 73 75 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 513 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":74 221 {*addsi_1}
     (nil))
(jump_insn 513 75 514 7 (set (pc)
        (label_ref 76)) "CALMXW.f":74 683 {jump}
     (nil)
 -> 76)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327

(barrier 514 513 522)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 522 514 521 21 18 (nil) [1 uses])
(note 521 522 523 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 523 521 79 21 (const_int 0 [0]) "CALMXW.f":75 718 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 21, next block 9, flags: (RTL, MODIFIED)
;;  pred:       21 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 330 331
(code_label 79 523 80 8 2 (nil) [0 uses])
(note 80 79 81 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 8 (set (reg:SI 0 ax [orig:330 _271 ] [330])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f8a2981a630 parallel>)
                    (const_int 16 [0x10]))) [1 parallel.jsta_m+0 S4 A128])) "CALMXW.f":87 86 {*movsi_internal}
     (nil))
(insn 82 81 83 8 (set (reg:SI 3 bx [orig:331 _272 ] [331])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f8a2981a630 parallel>)
                    (const_int 20 [0x14]))) [1 parallel.jend_m+0 S4 A32])) "CALMXW.f":87 86 {*movsi_internal}
     (nil))
(insn 83 82 495 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
        (reg:SI 0 ax [orig:330 _271 ] [330])) "CALMXW.f":87 86 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              19 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  def 	 17 [flags] 332 355
(code_label 495 83 84 9 14 (nil) [1 uses])
(note 84 495 85 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
            (reg:SI 3 bx [orig:331 _272 ] [331]))) "CALMXW.f":87 11 {*cmpsi_1}
     (nil))
(insn 86 85 87 9 (set (reg:QI 0 ax [355])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALMXW.f":87 678 {*setcc_qi}
     (nil))
(insn 87 86 88 9 (set (reg:SI 0 ax [orig:332 _274 ] [332])
        (zero_extend:SI (reg:QI 0 ax [355]))) "CALMXW.f":87 140 {*zero_extendqisi2}
     (nil))
(insn 88 87 89 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:332 _274 ] [332])
            (const_int 0 [0]))) "CALMXW.f":87 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 89 88 90 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 528)
            (pc))) "CALMXW.f":87 682 {*jcc}
     (nil)
 -> 528)
;;  succ:       23
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 90 89 91 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 489 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 2 [0x2])) "CALMXW.f":88 86 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              18 [always] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 333 356
(code_label 489 91 92 11 13 (nil) [1 uses])
(note 92 489 93 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (const_int 118 [0x76]))) "CALMXW.f":88 11 {*cmpsi_1}
     (nil))
(insn 94 93 95 11 (set (reg:QI 0 ax [356])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALMXW.f":88 678 {*setcc_qi}
     (nil))
(insn 95 94 96 11 (set (reg:SI 0 ax [orig:333 _276 ] [333])
        (zero_extend:SI (reg:QI 0 ax [356]))) "CALMXW.f":88 140 {*zero_extendqisi2}
     (nil))
(insn 96 95 97 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:333 _276 ] [333])
            (const_int 0 [0]))) "CALMXW.f":88 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 97 96 98 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 531)
            (pc))) "CALMXW.f":88 682 {*jcc}
     (nil)
 -> 531)
;;  succ:       24
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 112 113 114 115 116 117 118 119 120 121 334 357 360 361 362 363 366 367 368 369 370 371 372 373 374
(note 98 97 99 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 12 (set (reg:SI 0 ax [357])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":89 86 {*movsi_internal}
     (nil))
(insn 100 99 101 12 (set (reg:DI 0 ax [orig:111 _25 ] [111])
        (sign_extend:DI (reg:SI 0 ax [357]))) "CALMXW.f":89 149 {*extendsidi2_rex64}
     (nil))
(insn 101 100 102 12 (parallel [
            (set (reg:DI 0 ax [orig:112 _26 ] [112])
                (plus:DI (reg:DI 0 ax [orig:111 _25 ] [111])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":89 222 {*adddi_1}
     (nil))
(insn 102 101 106 12 (set (reg:SI 1 dx [orig:113 _27 ] [113])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:112 _26 ] [112])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f8a29813630 indx>)) [1 indx.ihe S4 A32])) "CALMXW.f":89 86 {*movsi_internal}
     (nil))
(insn 106 102 107 12 (set (reg:SI 0 ax [361])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":89 86 {*movsi_internal}
     (nil))
(insn 107 106 108 12 (parallel [
            (set (reg:SI 0 ax [360])
                (plus:SI (reg:SI 0 ax [361])
                    (reg:SI 1 dx [orig:113 _27 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":89 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:113 _27 ] [113])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 108 107 109 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ie+0 S4 A32])
        (reg:SI 0 ax [360])) "CALMXW.f":89 86 {*movsi_internal}
     (nil))
(insn 109 108 110 12 (set (reg:SI 0 ax [362])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":90 86 {*movsi_internal}
     (nil))
(insn 110 109 111 12 (set (reg:DI 0 ax [orig:114 _28 ] [114])
        (sign_extend:DI (reg:SI 0 ax [362]))) "CALMXW.f":90 149 {*extendsidi2_rex64}
     (nil))
(insn 111 110 112 12 (parallel [
            (set (reg:DI 0 ax [orig:115 _29 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 _28 ] [114])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":90 222 {*adddi_1}
     (nil))
(insn 112 111 113 12 (parallel [
            (set (reg:DI 0 ax [363])
                (plus:DI (reg:DI 0 ax [orig:115 _29 ] [115])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":90 222 {*adddi_1}
     (nil))
(insn 113 112 117 12 (set (reg:SI 1 dx [orig:116 _30 ] [116])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [363])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f8a29813630 indx>)) [1 indx.ihw S4 A32])) "CALMXW.f":90 86 {*movsi_internal}
     (nil))
(insn 117 113 118 12 (set (reg:SI 0 ax [367])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":90 86 {*movsi_internal}
     (nil))
(insn 118 117 119 12 (parallel [
            (set (reg:SI 0 ax [366])
                (plus:SI (reg:SI 0 ax [367])
                    (reg:SI 1 dx [orig:116 _30 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":90 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:116 _30 ] [116])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 119 118 120 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 iw+0 S4 A32])
        (reg:SI 0 ax [366])) "CALMXW.f":90 86 {*movsi_internal}
     (nil))
(insn 120 119 121 12 (set (reg:SF 21 xmm0 [368])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALMXW.f":91 131 {*movsf_internal}
     (nil))
(insn 121 120 122 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 mxww+0 S4 A32])
        (reg:SF 21 xmm0 [368])) "CALMXW.f":91 131 {*movsf_internal}
     (nil))
(insn 122 121 123 12 (set (reg:SI 0 ax [369])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":92 86 {*movsi_internal}
     (nil))
(insn 123 122 124 12 (set (reg:DI 0 ax [orig:117 _31 ] [117])
        (sign_extend:DI (reg:SI 0 ax [369]))) "CALMXW.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 124 123 125 12 (parallel [
            (set (reg:DI 1 dx [orig:118 _32 ] [118])
                (mult:DI (reg:DI 0 ax [orig:117 _31 ] [117])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":92 349 {*muldi3_1}
     (nil))
(insn 125 124 126 12 (set (reg:SI 0 ax [370])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":92 86 {*movsi_internal}
     (nil))
(insn 126 125 127 12 (set (reg:DI 0 ax [orig:119 _33 ] [119])
        (sign_extend:DI (reg:SI 0 ax [370]))) "CALMXW.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 127 126 128 12 (parallel [
            (set (reg:DI 0 ax [orig:120 _34 ] [120])
                (plus:DI (reg:DI 0 ax [orig:119 _33 ] [119])
                    (reg:DI 1 dx [orig:118 _32 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":92 222 {*adddi_1}
     (nil))
(insn 128 127 129 12 (parallel [
            (set (reg:DI 1 dx [orig:121 _35 ] [121])
                (plus:DI (reg:DI 0 ax [orig:120 _34 ] [120])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":92 222 {*adddi_1}
     (nil))
(insn 129 128 130 12 (set (reg/f:DI 0 ax [371])
        (symbol_ref:DI ("loops_") [flags 0x202]  <var_decl 0x7f8a29813900 loops>)) "CALMXW.f":92 85 {*movdi_internal}
     (nil))
(insn 130 129 131 12 (parallel [
            (set (reg:DI 1 dx [372])
                (plus:DI (reg:DI 1 dx [orig:121 _35 ] [121])
                    (const_int 2420 [0x974])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":92 222 {*adddi_1}
     (nil))
(insn 131 130 132 12 (set (reg:SI 0 ax [373])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [372])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [371])) [1 loops.lmh S4 A32])) "CALMXW.f":92 86 {*movsi_internal}
     (nil))
(insn 132 131 133 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 llmh+0 S4 A32])
        (reg:SI 0 ax [373])) "CALMXW.f":92 86 {*movsi_internal}
     (nil))
(insn 133 132 134 12 (set (reg:SI 0 ax [374])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 llmh+0 S4 A32])) "CALMXW.f":94 86 {*movsi_internal}
     (nil))
(insn 134 133 135 12 (parallel [
            (set (reg:SI 0 ax [orig:334 _281 ] [334])
                (plus:SI (reg:SI 0 ax [374])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":94 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [1 llmh+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 135 134 483 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
        (reg:SI 0 ax [orig:334 _281 ] [334])) "CALMXW.f":94 86 {*movsi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              17 [always] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 335 375
(code_label 483 135 136 13 12 (nil) [1 uses])
(note 136 483 137 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 137 136 138 13 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
            (const_int 0 [0]))) "CALMXW.f":94 7 {*cmpsi_ccno_1}
     (nil))
(insn 138 137 139 13 (set (reg:QI 0 ax [375])
        (le:QI (reg:CCNO 17 flags)
            (const_int 0 [0]))) "CALMXW.f":94 678 {*setcc_qi}
     (nil))
(insn 139 138 140 13 (set (reg:SI 0 ax [orig:335 _283 ] [335])
        (zero_extend:SI (reg:QI 0 ax [375]))) "CALMXW.f":94 140 {*zero_extendqisi2}
     (nil))
(insn 140 139 141 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:335 _283 ] [335])
            (const_int 0 [0]))) "CALMXW.f":94 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 141 140 142 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 534)
            (pc))) "CALMXW.f":94 682 {*jcc}
     (nil)
 -> 534)
;;  succ:       25
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags
(note 142 141 143 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 14 (set (reg:SI 0 ax [376])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":96 86 {*movsi_internal}
     (nil))
(insn 144 143 145 14 (set (reg:DI 0 ax [orig:122 _36 ] [122])
        (sign_extend:DI (reg:SI 0 ax [376]))) "CALMXW.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 145 144 146 14 (parallel [
            (set (reg:DI 1 dx [orig:123 _37 ] [123])
                (mult:DI (reg:DI 0 ax [orig:122 _36 ] [122])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 349 {*muldi3_1}
     (nil))
(insn 146 145 147 14 (set (reg:SI 0 ax [377])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":96 86 {*movsi_internal}
     (nil))
(insn 147 146 148 14 (parallel [
            (set (reg:SI 0 ax [orig:124 _38 ] [124])
                (plus:SI (reg:SI 0 ax [377])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 148 147 149 14 (set (reg:DI 0 ax [orig:125 _39 ] [125])
        (sign_extend:DI (reg:SI 0 ax [orig:124 _38 ] [124]))) "CALMXW.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 149 148 150 14 (parallel [
            (set (reg:DI 0 ax [orig:126 _40 ] [126])
                (mult:DI (reg:DI 0 ax [orig:125 _39 ] [125])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 349 {*muldi3_1}
     (nil))
(insn 150 149 151 14 (parallel [
            (set (reg:DI 1 dx [orig:127 _41 ] [127])
                (plus:DI (reg:DI 1 dx [orig:123 _37 ] [123])
                    (reg:DI 0 ax [orig:126 _40 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 151 150 152 14 (set (reg:SI 0 ax [378])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":96 86 {*movsi_internal}
     (nil))
(insn 152 151 153 14 (set (reg:DI 0 ax [orig:128 _42 ] [128])
        (sign_extend:DI (reg:SI 0 ax [378]))) "CALMXW.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 153 152 154 14 (parallel [
            (set (reg:DI 0 ax [orig:129 _43 ] [129])
                (plus:DI (reg:DI 0 ax [orig:128 _42 ] [128])
                    (reg:DI 1 dx [orig:127 _41 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 154 153 155 14 (parallel [
            (set (reg:DI 1 dx [orig:130 _44 ] [130])
                (plus:DI (reg:DI 0 ax [orig:129 _43 ] [129])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 155 154 156 14 (set (reg/f:DI 0 ax [379])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f8a2981aea0 vrbls>)) "CALMXW.f":96 85 {*movdi_internal}
     (nil))
(insn 156 155 157 14 (parallel [
            (set (reg:DI 1 dx [380])
                (plus:DI (reg:DI 1 dx [orig:130 _44 ] [130])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 157 156 158 14 (set (reg:SF 22 xmm1 [orig:131 _45 ] [131])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [380])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [379])) [2 vrbls.u S4 A32])) "CALMXW.f":96 131 {*movsf_internal}
     (nil))
(insn 158 157 159 14 (set (reg:SI 0 ax [381])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":96 86 {*movsi_internal}
     (nil))
(insn 159 158 160 14 (set (reg:DI 0 ax [orig:132 _46 ] [132])
        (sign_extend:DI (reg:SI 0 ax [381]))) "CALMXW.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 160 159 161 14 (parallel [
            (set (reg:DI 1 dx [orig:133 _47 ] [133])
                (mult:DI (reg:DI 0 ax [orig:132 _46 ] [132])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 349 {*muldi3_1}
     (nil))
(insn 161 160 162 14 (set (reg:SI 0 ax [382])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":96 86 {*movsi_internal}
     (nil))
(insn 162 161 163 14 (set (reg:DI 0 ax [orig:134 _48 ] [134])
        (sign_extend:DI (reg:SI 0 ax [382]))) "CALMXW.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 163 162 164 14 (parallel [
            (set (reg:DI 0 ax [orig:135 _49 ] [135])
                (mult:DI (reg:DI 0 ax [orig:134 _48 ] [134])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 349 {*muldi3_1}
     (nil))
(insn 164 163 165 14 (parallel [
            (set (reg:DI 1 dx [orig:136 _50 ] [136])
                (plus:DI (reg:DI 1 dx [orig:133 _47 ] [133])
                    (reg:DI 0 ax [orig:135 _49 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 165 164 166 14 (set (reg:SI 0 ax [383])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 iw+0 S4 A32])) "CALMXW.f":96 86 {*movsi_internal}
     (nil))
(insn 166 165 167 14 (set (reg:DI 0 ax [orig:137 _51 ] [137])
        (sign_extend:DI (reg:SI 0 ax [383]))) "CALMXW.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 167 166 168 14 (parallel [
            (set (reg:DI 0 ax [orig:138 _52 ] [138])
                (plus:DI (reg:DI 0 ax [orig:137 _51 ] [137])
                    (reg:DI 1 dx [orig:136 _50 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 168 167 169 14 (parallel [
            (set (reg:DI 1 dx [orig:139 _53 ] [139])
                (plus:DI (reg:DI 0 ax [orig:138 _52 ] [138])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 169 168 170 14 (set (reg/f:DI 0 ax [384])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f8a2981aea0 vrbls>)) "CALMXW.f":96 85 {*movdi_internal}
     (nil))
(insn 170 169 171 14 (parallel [
            (set (reg:DI 1 dx [385])
                (plus:DI (reg:DI 1 dx [orig:139 _53 ] [139])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 171 170 172 14 (set (reg:SF 21 xmm0 [orig:140 _54 ] [140])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [385])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [384])) [2 vrbls.u S4 A32])) "CALMXW.f":96 131 {*movsf_internal}
     (nil))
(insn 172 171 173 14 (set (reg:SF 22 xmm1 [orig:141 _55 ] [141])
        (plus:SF (reg:SF 22 xmm1 [orig:131 _45 ] [131])
            (reg:SF 21 xmm0 [orig:140 _54 ] [140]))) "CALMXW.f":96 838 {*fop_sf_comm}
     (nil))
(insn 173 172 174 14 (set (reg:SI 0 ax [386])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":96 86 {*movsi_internal}
     (nil))
(insn 174 173 175 14 (set (reg:DI 0 ax [orig:142 _56 ] [142])
        (sign_extend:DI (reg:SI 0 ax [386]))) "CALMXW.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 175 174 176 14 (parallel [
            (set (reg:DI 1 dx [orig:143 _57 ] [143])
                (mult:DI (reg:DI 0 ax [orig:142 _56 ] [142])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 349 {*muldi3_1}
     (nil))
(insn 176 175 177 14 (set (reg:SI 0 ax [387])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":96 86 {*movsi_internal}
     (nil))
(insn 177 176 178 14 (set (reg:DI 0 ax [orig:144 _58 ] [144])
        (sign_extend:DI (reg:SI 0 ax [387]))) "CALMXW.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 14 (parallel [
            (set (reg:DI 0 ax [orig:145 _59 ] [145])
                (mult:DI (reg:DI 0 ax [orig:144 _58 ] [144])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 349 {*muldi3_1}
     (nil))
(insn 179 178 180 14 (parallel [
            (set (reg:DI 1 dx [orig:146 _60 ] [146])
                (plus:DI (reg:DI 1 dx [orig:143 _57 ] [143])
                    (reg:DI 0 ax [orig:145 _59 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 180 179 181 14 (set (reg:SI 0 ax [388])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ie+0 S4 A32])) "CALMXW.f":96 86 {*movsi_internal}
     (nil))
(insn 181 180 182 14 (set (reg:DI 0 ax [orig:147 _61 ] [147])
        (sign_extend:DI (reg:SI 0 ax [388]))) "CALMXW.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 182 181 183 14 (parallel [
            (set (reg:DI 0 ax [orig:148 _62 ] [148])
                (plus:DI (reg:DI 0 ax [orig:147 _61 ] [147])
                    (reg:DI 1 dx [orig:146 _60 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 183 182 184 14 (parallel [
            (set (reg:DI 1 dx [orig:149 _63 ] [149])
                (plus:DI (reg:DI 0 ax [orig:148 _62 ] [148])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 184 183 185 14 (set (reg/f:DI 0 ax [389])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f8a2981aea0 vrbls>)) "CALMXW.f":96 85 {*movdi_internal}
     (nil))
(insn 185 184 186 14 (parallel [
            (set (reg:DI 1 dx [390])
                (plus:DI (reg:DI 1 dx [orig:149 _63 ] [149])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 186 185 187 14 (set (reg:SF 21 xmm0 [orig:150 _64 ] [150])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [390])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [389])) [2 vrbls.u S4 A32])) "CALMXW.f":96 131 {*movsf_internal}
     (nil))
(insn 187 186 188 14 (set (reg:SF 22 xmm1 [orig:151 _65 ] [151])
        (plus:SF (reg:SF 22 xmm1 [orig:141 _55 ] [141])
            (reg:SF 21 xmm0 [orig:150 _64 ] [150]))) "CALMXW.f":96 838 {*fop_sf_comm}
     (nil))
(insn 188 187 189 14 (set (reg:SI 0 ax [391])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":96 86 {*movsi_internal}
     (nil))
(insn 189 188 190 14 (set (reg:DI 0 ax [orig:152 _66 ] [152])
        (sign_extend:DI (reg:SI 0 ax [391]))) "CALMXW.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 190 189 191 14 (parallel [
            (set (reg:DI 1 dx [orig:153 _67 ] [153])
                (mult:DI (reg:DI 0 ax [orig:152 _66 ] [152])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 349 {*muldi3_1}
     (nil))
(insn 191 190 192 14 (set (reg:SI 0 ax [392])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":96 86 {*movsi_internal}
     (nil))
(insn 192 191 193 14 (parallel [
            (set (reg:SI 0 ax [orig:154 _68 ] [154])
                (plus:SI (reg:SI 0 ax [392])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 193 192 194 14 (set (reg:DI 0 ax [orig:155 _69 ] [155])
        (sign_extend:DI (reg:SI 0 ax [orig:154 _68 ] [154]))) "CALMXW.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 194 193 195 14 (parallel [
            (set (reg:DI 0 ax [orig:156 _70 ] [156])
                (mult:DI (reg:DI 0 ax [orig:155 _69 ] [155])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 349 {*muldi3_1}
     (nil))
(insn 195 194 196 14 (parallel [
            (set (reg:DI 1 dx [orig:157 _71 ] [157])
                (plus:DI (reg:DI 1 dx [orig:153 _67 ] [153])
                    (reg:DI 0 ax [orig:156 _70 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 196 195 197 14 (set (reg:SI 0 ax [393])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":96 86 {*movsi_internal}
     (nil))
(insn 197 196 198 14 (set (reg:DI 0 ax [orig:158 _72 ] [158])
        (sign_extend:DI (reg:SI 0 ax [393]))) "CALMXW.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 198 197 199 14 (parallel [
            (set (reg:DI 0 ax [orig:159 _73 ] [159])
                (plus:DI (reg:DI 0 ax [orig:158 _72 ] [158])
                    (reg:DI 1 dx [orig:157 _71 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 199 198 200 14 (parallel [
            (set (reg:DI 1 dx [orig:160 _74 ] [160])
                (plus:DI (reg:DI 0 ax [orig:159 _73 ] [159])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 200 199 201 14 (set (reg/f:DI 0 ax [394])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f8a2981aea0 vrbls>)) "CALMXW.f":96 85 {*movdi_internal}
     (nil))
(insn 201 200 202 14 (parallel [
            (set (reg:DI 1 dx [395])
                (plus:DI (reg:DI 1 dx [orig:160 _74 ] [160])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":96 222 {*adddi_1}
     (nil))
(insn 202 201 203 14 (set (reg:SF 21 xmm0 [orig:161 _75 ] [161])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [395])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [394])) [2 vrbls.u S4 A32])) "CALMXW.f":96 131 {*movsf_internal}
     (nil))
(insn 203 202 204 14 (set (reg:SF 21 xmm0 [orig:162 _76 ] [162])
        (plus:SF (reg:SF 21 xmm0 [orig:161 _75 ] [161])
            (reg:SF 22 xmm1 [orig:151 _65 ] [151]))) "CALMXW.f":96 838 {*fop_sf_comm}
     (nil))
(insn 204 203 205 14 (set (reg:SF 22 xmm1 [orig:163 _77 ] [163])
        (reg:SF 21 xmm0 [orig:162 _76 ] [162])) "CALMXW.f":96 131 {*movsf_internal}
     (nil))
(insn 205 204 206 14 (set (reg:SF 21 xmm0 [397])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "CALMXW.f":96 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.5e-1 [0x0.8p-1])
        (nil)))
(insn 206 205 207 14 (set (reg:SF 21 xmm0 [396])
        (mult:SF (reg:SF 21 xmm0 [397])
            (reg:SF 22 xmm1 [orig:163 _77 ] [163]))) "CALMXW.f":96 838 {*fop_sf_comm}
     (nil))
(insn 207 206 208 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 u0+0 S4 A32])
        (reg:SF 21 xmm0 [396])) "CALMXW.f":96 131 {*movsf_internal}
     (nil))
(insn 208 207 209 14 (set (reg:SI 0 ax [398])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":98 86 {*movsi_internal}
     (nil))
(insn 209 208 210 14 (set (reg:DI 0 ax [orig:164 _78 ] [164])
        (sign_extend:DI (reg:SI 0 ax [398]))) "CALMXW.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 210 209 211 14 (parallel [
            (set (reg:DI 1 dx [orig:165 _79 ] [165])
                (mult:DI (reg:DI 0 ax [orig:164 _78 ] [164])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 349 {*muldi3_1}
     (nil))
(insn 211 210 212 14 (set (reg:SI 0 ax [399])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":98 86 {*movsi_internal}
     (nil))
(insn 212 211 213 14 (parallel [
            (set (reg:SI 0 ax [orig:166 _80 ] [166])
                (plus:SI (reg:SI 0 ax [399])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 213 212 214 14 (set (reg:DI 0 ax [orig:167 _81 ] [167])
        (sign_extend:DI (reg:SI 0 ax [orig:166 _80 ] [166]))) "CALMXW.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 14 (parallel [
            (set (reg:DI 0 ax [orig:168 _82 ] [168])
                (mult:DI (reg:DI 0 ax [orig:167 _81 ] [167])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 349 {*muldi3_1}
     (nil))
(insn 215 214 216 14 (parallel [
            (set (reg:DI 1 dx [orig:169 _83 ] [169])
                (plus:DI (reg:DI 1 dx [orig:165 _79 ] [165])
                    (reg:DI 0 ax [orig:168 _82 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 216 215 217 14 (set (reg:SI 0 ax [400])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":98 86 {*movsi_internal}
     (nil))
(insn 217 216 218 14 (set (reg:DI 0 ax [orig:170 _84 ] [170])
        (sign_extend:DI (reg:SI 0 ax [400]))) "CALMXW.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 218 217 219 14 (parallel [
            (set (reg:DI 0 ax [orig:171 _85 ] [171])
                (plus:DI (reg:DI 0 ax [orig:170 _84 ] [170])
                    (reg:DI 1 dx [orig:169 _83 ] [169])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 219 218 220 14 (parallel [
            (set (reg:DI 1 dx [orig:172 _86 ] [172])
                (plus:DI (reg:DI 0 ax [orig:171 _85 ] [171])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 220 219 221 14 (set (reg/f:DI 0 ax [401])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f8a2981aea0 vrbls>)) "CALMXW.f":98 85 {*movdi_internal}
     (nil))
(insn 221 220 222 14 (parallel [
            (set (reg:DI 1 dx [402])
                (plus:DI (reg:DI 1 dx [orig:172 _86 ] [172])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 222 221 223 14 (set (reg:SF 22 xmm1 [orig:173 _87 ] [173])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [402])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [401])) [2 vrbls.v S4 A32])) "CALMXW.f":98 131 {*movsf_internal}
     (nil))
(insn 223 222 224 14 (set (reg:SI 0 ax [403])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":98 86 {*movsi_internal}
     (nil))
(insn 224 223 225 14 (set (reg:DI 0 ax [orig:174 _88 ] [174])
        (sign_extend:DI (reg:SI 0 ax [403]))) "CALMXW.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 225 224 226 14 (parallel [
            (set (reg:DI 1 dx [orig:175 _89 ] [175])
                (mult:DI (reg:DI 0 ax [orig:174 _88 ] [174])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 349 {*muldi3_1}
     (nil))
(insn 226 225 227 14 (set (reg:SI 0 ax [404])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":98 86 {*movsi_internal}
     (nil))
(insn 227 226 228 14 (set (reg:DI 0 ax [orig:176 _90 ] [176])
        (sign_extend:DI (reg:SI 0 ax [404]))) "CALMXW.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 228 227 229 14 (parallel [
            (set (reg:DI 0 ax [orig:177 _91 ] [177])
                (mult:DI (reg:DI 0 ax [orig:176 _90 ] [176])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 349 {*muldi3_1}
     (nil))
(insn 229 228 230 14 (parallel [
            (set (reg:DI 1 dx [orig:178 _92 ] [178])
                (plus:DI (reg:DI 1 dx [orig:175 _89 ] [175])
                    (reg:DI 0 ax [orig:177 _91 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 230 229 231 14 (set (reg:SI 0 ax [405])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 iw+0 S4 A32])) "CALMXW.f":98 86 {*movsi_internal}
     (nil))
(insn 231 230 232 14 (set (reg:DI 0 ax [orig:179 _93 ] [179])
        (sign_extend:DI (reg:SI 0 ax [405]))) "CALMXW.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 232 231 233 14 (parallel [
            (set (reg:DI 0 ax [orig:180 _94 ] [180])
                (plus:DI (reg:DI 0 ax [orig:179 _93 ] [179])
                    (reg:DI 1 dx [orig:178 _92 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 233 232 234 14 (parallel [
            (set (reg:DI 1 dx [orig:181 _95 ] [181])
                (plus:DI (reg:DI 0 ax [orig:180 _94 ] [180])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 234 233 235 14 (set (reg/f:DI 0 ax [406])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f8a2981aea0 vrbls>)) "CALMXW.f":98 85 {*movdi_internal}
     (nil))
(insn 235 234 236 14 (parallel [
            (set (reg:DI 1 dx [407])
                (plus:DI (reg:DI 1 dx [orig:181 _95 ] [181])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 236 235 237 14 (set (reg:SF 21 xmm0 [orig:182 _96 ] [182])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [407])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [406])) [2 vrbls.v S4 A32])) "CALMXW.f":98 131 {*movsf_internal}
     (nil))
(insn 237 236 238 14 (set (reg:SF 22 xmm1 [orig:183 _97 ] [183])
        (plus:SF (reg:SF 22 xmm1 [orig:173 _87 ] [173])
            (reg:SF 21 xmm0 [orig:182 _96 ] [182]))) "CALMXW.f":98 838 {*fop_sf_comm}
     (nil))
(insn 238 237 239 14 (set (reg:SI 0 ax [408])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":98 86 {*movsi_internal}
     (nil))
(insn 239 238 240 14 (set (reg:DI 0 ax [orig:184 _98 ] [184])
        (sign_extend:DI (reg:SI 0 ax [408]))) "CALMXW.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 240 239 241 14 (parallel [
            (set (reg:DI 1 dx [orig:185 _99 ] [185])
                (mult:DI (reg:DI 0 ax [orig:184 _98 ] [184])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 349 {*muldi3_1}
     (nil))
(insn 241 240 242 14 (set (reg:SI 0 ax [409])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":98 86 {*movsi_internal}
     (nil))
(insn 242 241 243 14 (set (reg:DI 0 ax [orig:186 _100 ] [186])
        (sign_extend:DI (reg:SI 0 ax [409]))) "CALMXW.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 243 242 244 14 (parallel [
            (set (reg:DI 0 ax [orig:187 _101 ] [187])
                (mult:DI (reg:DI 0 ax [orig:186 _100 ] [186])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 349 {*muldi3_1}
     (nil))
(insn 244 243 245 14 (parallel [
            (set (reg:DI 1 dx [orig:188 _102 ] [188])
                (plus:DI (reg:DI 1 dx [orig:185 _99 ] [185])
                    (reg:DI 0 ax [orig:187 _101 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 245 244 246 14 (set (reg:SI 0 ax [410])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ie+0 S4 A32])) "CALMXW.f":98 86 {*movsi_internal}
     (nil))
(insn 246 245 247 14 (set (reg:DI 0 ax [orig:189 _103 ] [189])
        (sign_extend:DI (reg:SI 0 ax [410]))) "CALMXW.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 247 246 248 14 (parallel [
            (set (reg:DI 0 ax [orig:190 _104 ] [190])
                (plus:DI (reg:DI 0 ax [orig:189 _103 ] [189])
                    (reg:DI 1 dx [orig:188 _102 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 248 247 249 14 (parallel [
            (set (reg:DI 1 dx [orig:191 _105 ] [191])
                (plus:DI (reg:DI 0 ax [orig:190 _104 ] [190])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 249 248 250 14 (set (reg/f:DI 0 ax [411])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f8a2981aea0 vrbls>)) "CALMXW.f":98 85 {*movdi_internal}
     (nil))
(insn 250 249 251 14 (parallel [
            (set (reg:DI 1 dx [412])
                (plus:DI (reg:DI 1 dx [orig:191 _105 ] [191])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 251 250 252 14 (set (reg:SF 21 xmm0 [orig:192 _106 ] [192])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [412])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [411])) [2 vrbls.v S4 A32])) "CALMXW.f":98 131 {*movsf_internal}
     (nil))
(insn 252 251 253 14 (set (reg:SF 22 xmm1 [orig:193 _107 ] [193])
        (plus:SF (reg:SF 22 xmm1 [orig:183 _97 ] [183])
            (reg:SF 21 xmm0 [orig:192 _106 ] [192]))) "CALMXW.f":98 838 {*fop_sf_comm}
     (nil))
(insn 253 252 254 14 (set (reg:SI 0 ax [413])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":98 86 {*movsi_internal}
     (nil))
(insn 254 253 255 14 (set (reg:DI 0 ax [orig:194 _108 ] [194])
        (sign_extend:DI (reg:SI 0 ax [413]))) "CALMXW.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 255 254 256 14 (parallel [
            (set (reg:DI 1 dx [orig:195 _109 ] [195])
                (mult:DI (reg:DI 0 ax [orig:194 _108 ] [194])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 349 {*muldi3_1}
     (nil))
(insn 256 255 257 14 (set (reg:SI 0 ax [414])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":98 86 {*movsi_internal}
     (nil))
(insn 257 256 258 14 (parallel [
            (set (reg:SI 0 ax [orig:196 _110 ] [196])
                (plus:SI (reg:SI 0 ax [414])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 258 257 259 14 (set (reg:DI 0 ax [orig:197 _111 ] [197])
        (sign_extend:DI (reg:SI 0 ax [orig:196 _110 ] [196]))) "CALMXW.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 259 258 260 14 (parallel [
            (set (reg:DI 0 ax [orig:198 _112 ] [198])
                (mult:DI (reg:DI 0 ax [orig:197 _111 ] [197])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 349 {*muldi3_1}
     (nil))
(insn 260 259 261 14 (parallel [
            (set (reg:DI 1 dx [orig:199 _113 ] [199])
                (plus:DI (reg:DI 1 dx [orig:195 _109 ] [195])
                    (reg:DI 0 ax [orig:198 _112 ] [198])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 261 260 262 14 (set (reg:SI 0 ax [415])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":98 86 {*movsi_internal}
     (nil))
(insn 262 261 263 14 (set (reg:DI 0 ax [orig:200 _114 ] [200])
        (sign_extend:DI (reg:SI 0 ax [415]))) "CALMXW.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 263 262 264 14 (parallel [
            (set (reg:DI 0 ax [orig:201 _115 ] [201])
                (plus:DI (reg:DI 0 ax [orig:200 _114 ] [200])
                    (reg:DI 1 dx [orig:199 _113 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 264 263 265 14 (parallel [
            (set (reg:DI 1 dx [orig:202 _116 ] [202])
                (plus:DI (reg:DI 0 ax [orig:201 _115 ] [201])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 265 264 266 14 (set (reg/f:DI 0 ax [416])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f8a2981aea0 vrbls>)) "CALMXW.f":98 85 {*movdi_internal}
     (nil))
(insn 266 265 267 14 (parallel [
            (set (reg:DI 1 dx [417])
                (plus:DI (reg:DI 1 dx [orig:202 _116 ] [202])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":98 222 {*adddi_1}
     (nil))
(insn 267 266 268 14 (set (reg:SF 21 xmm0 [orig:203 _117 ] [203])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [417])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [416])) [2 vrbls.v S4 A32])) "CALMXW.f":98 131 {*movsf_internal}
     (nil))
(insn 268 267 269 14 (set (reg:SF 21 xmm0 [orig:204 _118 ] [204])
        (plus:SF (reg:SF 21 xmm0 [orig:203 _117 ] [203])
            (reg:SF 22 xmm1 [orig:193 _107 ] [193]))) "CALMXW.f":98 838 {*fop_sf_comm}
     (nil))
(insn 269 268 270 14 (set (reg:SF 22 xmm1 [orig:205 _119 ] [205])
        (reg:SF 21 xmm0 [orig:204 _118 ] [204])) "CALMXW.f":98 131 {*movsf_internal}
     (nil))
(insn 270 269 271 14 (set (reg:SF 21 xmm0 [419])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "CALMXW.f":98 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.5e-1 [0x0.8p-1])
        (nil)))
(insn 271 270 272 14 (set (reg:SF 21 xmm0 [418])
        (mult:SF (reg:SF 21 xmm0 [419])
            (reg:SF 22 xmm1 [orig:205 _119 ] [205]))) "CALMXW.f":98 838 {*fop_sf_comm}
     (nil))
(insn 272 271 273 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 v0+0 S4 A32])
        (reg:SF 21 xmm0 [418])) "CALMXW.f":98 131 {*movsf_internal}
     (nil))
(insn 273 272 537 14 (set (reg:SF 21 xmm0 [orig:336 _286 ] [336])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 u0+0 S4 A32])) "CALMXW.f":99 131 {*movsf_internal}
     (nil))
(insn 537 273 274 14 (set (reg:SF 22 xmm1 [orig:336 _286 ] [336])
        (reg:SF 21 xmm0 [orig:336 _286 ] [336])) "CALMXW.f":99 131 {*movsf_internal}
     (nil))
(insn 274 537 275 14 (set (reg:SF 22 xmm1 [orig:336 _286 ] [336])
        (mult:SF (reg:SF 22 xmm1 [orig:336 _286 ] [336])
            (reg:SF 21 xmm0 [orig:336 _286 ] [336]))) "CALMXW.f":99 838 {*fop_sf_comm}
     (nil))
(insn 275 274 276 14 (set (reg:SF 21 xmm0 [orig:338 _288 ] [338])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 v0+0 S4 A32])) "CALMXW.f":99 131 {*movsf_internal}
     (nil))
(insn 276 275 277 14 (set (reg:SF 21 xmm0 [orig:339 _289 ] [339])
        (mult:SF (reg:SF 21 xmm0 [orig:338 _288 ] [338])
            (reg:SF 21 xmm0 [orig:338 _288 ] [338]))) "CALMXW.f":99 838 {*fop_sf_comm}
     (nil))
(insn 277 276 278 14 (set (reg:SF 21 xmm0 [orig:206 _120 ] [206])
        (plus:SF (reg:SF 21 xmm0 [orig:339 _289 ] [339])
            (reg:SF 22 xmm1 [orig:337 _287 ] [337]))) "CALMXW.f":99 838 {*fop_sf_comm}
     (nil))
(insn 278 277 279 14 (set (reg:SF 21 xmm0 [420])
        (sqrt:SF (reg:SF 21 xmm0 [orig:206 _120 ] [206]))) "CALMXW.f":99 872 {*sqrtsf2_sse}
     (nil))
(insn 279 278 280 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 wind+0 S4 A32])
        (reg:SF 21 xmm0 [420])) "CALMXW.f":99 131 {*movsf_internal}
     (nil))
(insn 280 279 281 14 (set (reg:SF 21 xmm0 [421])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 wind+0 S4 A32])) "CALMXW.f":107 131 {*movsf_internal}
     (nil))
(insn 281 280 282 14 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [421])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 mxww+0 S4 A32]))) "CALMXW.f":107 53 {*cmpisf}
     (nil))
(jump_insn 282 281 286 14 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 480)
            (pc))) "CALMXW.f":107 682 {*jcc}
     (nil)
 -> 480)
;;  succ:       15 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 207 208 209 210 211 212 213 214 215 422 423 424 425 426
(note 286 282 287 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 287 286 288 15 (set (reg:SI 0 ax [422])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":107 86 {*movsi_internal}
     (nil))
(insn 288 287 289 15 (set (reg:DI 0 ax [orig:207 _121 ] [207])
        (sign_extend:DI (reg:SI 0 ax [422]))) "CALMXW.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 289 288 290 15 (parallel [
            (set (reg:DI 1 dx [orig:208 _122 ] [208])
                (mult:DI (reg:DI 0 ax [orig:207 _121 ] [207])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":107 349 {*muldi3_1}
     (nil))
(insn 290 289 291 15 (set (reg:SI 0 ax [423])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":107 86 {*movsi_internal}
     (nil))
(insn 291 290 292 15 (set (reg:DI 0 ax [orig:209 _123 ] [209])
        (sign_extend:DI (reg:SI 0 ax [423]))) "CALMXW.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 292 291 293 15 (parallel [
            (set (reg:DI 0 ax [orig:210 _124 ] [210])
                (mult:DI (reg:DI 0 ax [orig:209 _123 ] [209])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":107 349 {*muldi3_1}
     (nil))
(insn 293 292 294 15 (parallel [
            (set (reg:DI 1 dx [orig:211 _125 ] [211])
                (plus:DI (reg:DI 1 dx [orig:208 _122 ] [208])
                    (reg:DI 0 ax [orig:210 _124 ] [210])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":107 222 {*adddi_1}
     (nil))
(insn 294 293 295 15 (set (reg:SI 0 ax [424])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":107 86 {*movsi_internal}
     (nil))
(insn 295 294 296 15 (set (reg:DI 0 ax [orig:212 _126 ] [212])
        (sign_extend:DI (reg:SI 0 ax [424]))) "CALMXW.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 296 295 297 15 (parallel [
            (set (reg:DI 0 ax [orig:213 _127 ] [213])
                (plus:DI (reg:DI 0 ax [orig:212 _126 ] [212])
                    (reg:DI 1 dx [orig:211 _125 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":107 222 {*adddi_1}
     (nil))
(insn 297 296 298 15 (parallel [
            (set (reg:DI 1 dx [orig:214 _128 ] [214])
                (plus:DI (reg:DI 0 ax [orig:213 _127 ] [213])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":107 222 {*adddi_1}
     (nil))
(insn 298 297 299 15 (set (reg/f:DI 0 ax [425])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f8a2980b870 extra>)) "CALMXW.f":107 85 {*movdi_internal}
     (nil))
(insn 299 298 300 15 (set (reg:SF 22 xmm1 [orig:215 _129 ] [215])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:214 _128 ] [214])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [425])) [2 extra.pint S4 A32])) "CALMXW.f":107 131 {*movsf_internal}
     (nil))
(insn 300 299 301 15 (set (reg:SF 21 xmm0 [426])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 critp+0 S4 A32])) "CALMXW.f":107 131 {*movsf_internal}
     (nil))
(insn 301 300 302 15 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [426])
            (reg:SF 22 xmm1 [orig:215 _129 ] [215]))) "CALMXW.f":107 53 {*cmpisf}
     (nil))
(jump_insn 302 301 306 15 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 480)
            (pc))) "CALMXW.f":107 682 {*jcc}
     (nil)
 -> 480)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480
(note 306 302 307 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 307 306 308 16 (set (reg:SI 0 ax [427])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":108 86 {*movsi_internal}
     (nil))
(insn 308 307 309 16 (set (reg:DI 0 ax [orig:216 _130 ] [216])
        (sign_extend:DI (reg:SI 0 ax [427]))) "CALMXW.f":108 149 {*extendsidi2_rex64}
     (nil))
(insn 309 308 310 16 (parallel [
            (set (reg:DI 1 dx [orig:217 _131 ] [217])
                (mult:DI (reg:DI 0 ax [orig:216 _130 ] [216])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":108 349 {*muldi3_1}
     (nil))
(insn 310 309 311 16 (set (reg:SI 0 ax [428])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":108 86 {*movsi_internal}
     (nil))
(insn 311 310 312 16 (set (reg:DI 0 ax [orig:218 _132 ] [218])
        (sign_extend:DI (reg:SI 0 ax [428]))) "CALMXW.f":108 149 {*extendsidi2_rex64}
     (nil))
(insn 312 311 313 16 (parallel [
            (set (reg:DI 0 ax [orig:219 _133 ] [219])
                (plus:DI (reg:DI 0 ax [orig:218 _132 ] [218])
                    (reg:DI 1 dx [orig:217 _131 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":108 222 {*adddi_1}
     (nil))
(insn 313 312 314 16 (parallel [
            (set (reg:DI 1 dx [orig:220 _134 ] [220])
                (plus:DI (reg:DI 0 ax [orig:219 _133 ] [219])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":108 222 {*adddi_1}
     (nil))
(insn 314 313 315 16 (set (reg/f:DI 0 ax [429])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 mxwu+0 S8 A64])) "CALMXW.f":108 85 {*movdi_internal}
     (nil))
(insn 315 314 316 16 (set (reg:SF 21 xmm0 [430])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 u0+0 S4 A32])) "CALMXW.f":108 131 {*movsf_internal}
     (nil))
(insn 316 315 317 16 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:220 _134 ] [220])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [429])) [2 *mxwu_261(D) S4 A32])
        (reg:SF 21 xmm0 [430])) "CALMXW.f":108 131 {*movsf_internal}
     (nil))
(insn 317 316 318 16 (set (reg:SI 0 ax [431])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":109 86 {*movsi_internal}
     (nil))
(insn 318 317 319 16 (set (reg:DI 0 ax [orig:221 _135 ] [221])
        (sign_extend:DI (reg:SI 0 ax [431]))) "CALMXW.f":109 149 {*extendsidi2_rex64}
     (nil))
(insn 319 318 320 16 (parallel [
            (set (reg:DI 1 dx [orig:222 _136 ] [222])
                (mult:DI (reg:DI 0 ax [orig:221 _135 ] [221])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":109 349 {*muldi3_1}
     (nil))
(insn 320 319 321 16 (set (reg:SI 0 ax [432])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":109 86 {*movsi_internal}
     (nil))
(insn 321 320 322 16 (set (reg:DI 0 ax [orig:223 _137 ] [223])
        (sign_extend:DI (reg:SI 0 ax [432]))) "CALMXW.f":109 149 {*extendsidi2_rex64}
     (nil))
(insn 322 321 323 16 (parallel [
            (set (reg:DI 0 ax [orig:224 _138 ] [224])
                (plus:DI (reg:DI 0 ax [orig:223 _137 ] [223])
                    (reg:DI 1 dx [orig:222 _136 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":109 222 {*adddi_1}
     (nil))
(insn 323 322 324 16 (parallel [
            (set (reg:DI 1 dx [orig:225 _139 ] [225])
                (plus:DI (reg:DI 0 ax [orig:224 _138 ] [224])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":109 222 {*adddi_1}
     (nil))
(insn 324 323 325 16 (set (reg/f:DI 0 ax [433])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 mxwv+0 S8 A64])) "CALMXW.f":109 85 {*movdi_internal}
     (nil))
(insn 325 324 326 16 (set (reg:SF 21 xmm0 [434])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 v0+0 S4 A32])) "CALMXW.f":109 131 {*movsf_internal}
     (nil))
(insn 326 325 327 16 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:225 _139 ] [225])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [433])) [2 *mxwv_263(D) S4 A32])
        (reg:SF 21 xmm0 [434])) "CALMXW.f":109 131 {*movsf_internal}
     (nil))
(insn 327 326 328 16 (set (reg:SF 21 xmm0 [435])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 wind+0 S4 A32])) "CALMXW.f":110 131 {*movsf_internal}
     (nil))
(insn 328 327 329 16 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 mxww+0 S4 A32])
        (reg:SF 21 xmm0 [435])) "CALMXW.f":110 131 {*movsf_internal}
     (nil))
(insn 329 328 330 16 (set (reg:SI 0 ax [436])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":111 86 {*movsi_internal}
     (nil))
(insn 330 329 331 16 (set (reg:DI 0 ax [orig:226 _140 ] [226])
        (sign_extend:DI (reg:SI 0 ax [436]))) "CALMXW.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 331 330 332 16 (parallel [
            (set (reg:DI 1 dx [orig:227 _141 ] [227])
                (mult:DI (reg:DI 0 ax [orig:226 _140 ] [226])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 349 {*muldi3_1}
     (nil))
(insn 332 331 333 16 (set (reg:SI 0 ax [437])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":111 86 {*movsi_internal}
     (nil))
(insn 333 332 334 16 (set (reg:DI 0 ax [orig:228 _142 ] [228])
        (sign_extend:DI (reg:SI 0 ax [437]))) "CALMXW.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 334 333 335 16 (parallel [
            (set (reg:DI 0 ax [orig:229 _143 ] [229])
                (mult:DI (reg:DI 0 ax [orig:228 _142 ] [228])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 349 {*muldi3_1}
     (nil))
(insn 335 334 336 16 (parallel [
            (set (reg:DI 1 dx [orig:230 _144 ] [230])
                (plus:DI (reg:DI 1 dx [orig:227 _141 ] [227])
                    (reg:DI 0 ax [orig:229 _143 ] [229])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 222 {*adddi_1}
     (nil))
(insn 336 335 337 16 (set (reg:SI 0 ax [438])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":111 86 {*movsi_internal}
     (nil))
(insn 337 336 338 16 (set (reg:DI 0 ax [orig:231 _145 ] [231])
        (sign_extend:DI (reg:SI 0 ax [438]))) "CALMXW.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 338 337 339 16 (parallel [
            (set (reg:DI 0 ax [orig:232 _146 ] [232])
                (plus:DI (reg:DI 0 ax [orig:231 _145 ] [231])
                    (reg:DI 1 dx [orig:230 _144 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 222 {*adddi_1}
     (nil))
(insn 339 338 340 16 (parallel [
            (set (reg:DI 1 dx [orig:233 _147 ] [233])
                (plus:DI (reg:DI 0 ax [orig:232 _146 ] [232])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 222 {*adddi_1}
     (nil))
(insn 340 339 341 16 (set (reg/f:DI 0 ax [439])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f8a2980b870 extra>)) "CALMXW.f":111 85 {*movdi_internal}
     (nil))
(insn 341 340 342 16 (set (reg:SF 22 xmm1 [orig:234 _148 ] [234])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:233 _147 ] [233])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [439])) [2 extra.pint S4 A32])) "CALMXW.f":111 131 {*movsf_internal}
     (nil))
(insn 342 341 343 16 (set (reg:SI 0 ax [440])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":111 86 {*movsi_internal}
     (nil))
(insn 343 342 344 16 (parallel [
            (set (reg:SI 0 ax [orig:235 _149 ] [235])
                (plus:SI (reg:SI 0 ax [440])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 344 343 345 16 (set (reg:DI 0 ax [orig:236 _150 ] [236])
        (sign_extend:DI (reg:SI 0 ax [orig:235 _149 ] [235]))) "CALMXW.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 345 344 346 16 (parallel [
            (set (reg:DI 1 dx [orig:237 _151 ] [237])
                (mult:DI (reg:DI 0 ax [orig:236 _150 ] [236])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 349 {*muldi3_1}
     (nil))
(insn 346 345 347 16 (set (reg:SI 0 ax [441])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":111 86 {*movsi_internal}
     (nil))
(insn 347 346 348 16 (set (reg:DI 0 ax [orig:238 _152 ] [238])
        (sign_extend:DI (reg:SI 0 ax [441]))) "CALMXW.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 348 347 349 16 (parallel [
            (set (reg:DI 0 ax [orig:239 _153 ] [239])
                (mult:DI (reg:DI 0 ax [orig:238 _152 ] [238])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 349 {*muldi3_1}
     (nil))
(insn 349 348 350 16 (parallel [
            (set (reg:DI 1 dx [orig:240 _154 ] [240])
                (plus:DI (reg:DI 1 dx [orig:237 _151 ] [237])
                    (reg:DI 0 ax [orig:239 _153 ] [239])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 222 {*adddi_1}
     (nil))
(insn 350 349 351 16 (set (reg:SI 0 ax [442])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":111 86 {*movsi_internal}
     (nil))
(insn 351 350 352 16 (set (reg:DI 0 ax [orig:241 _155 ] [241])
        (sign_extend:DI (reg:SI 0 ax [442]))) "CALMXW.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 352 351 353 16 (parallel [
            (set (reg:DI 0 ax [orig:242 _156 ] [242])
                (plus:DI (reg:DI 0 ax [orig:241 _155 ] [241])
                    (reg:DI 1 dx [orig:240 _154 ] [240])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 222 {*adddi_1}
     (nil))
(insn 353 352 354 16 (parallel [
            (set (reg:DI 1 dx [orig:243 _157 ] [243])
                (plus:DI (reg:DI 0 ax [orig:242 _156 ] [242])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 222 {*adddi_1}
     (nil))
(insn 354 353 355 16 (set (reg/f:DI 0 ax [443])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f8a2980b870 extra>)) "CALMXW.f":111 85 {*movdi_internal}
     (nil))
(insn 355 354 356 16 (set (reg:SF 21 xmm0 [orig:244 _158 ] [244])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:243 _157 ] [243])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [443])) [2 extra.pint S4 A32])) "CALMXW.f":111 131 {*movsf_internal}
     (nil))
(insn 356 355 357 16 (set (reg:SF 21 xmm0 [orig:245 _159 ] [245])
        (plus:SF (reg:SF 21 xmm0 [orig:244 _158 ] [244])
            (reg:SF 22 xmm1 [orig:234 _148 ] [234]))) "CALMXW.f":111 838 {*fop_sf_comm}
     (nil))
(insn 357 356 358 16 (set (reg:SF 22 xmm1 [orig:246 _160 ] [246])
        (reg:SF 21 xmm0 [orig:245 _159 ] [245])) "CALMXW.f":111 131 {*movsf_internal}
     (nil))
(insn 358 357 359 16 (set (reg:SI 0 ax [444])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":111 86 {*movsi_internal}
     (nil))
(insn 359 358 360 16 (set (reg:DI 0 ax [orig:247 _161 ] [247])
        (sign_extend:DI (reg:SI 0 ax [444]))) "CALMXW.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 360 359 361 16 (parallel [
            (set (reg:DI 1 dx [orig:248 _162 ] [248])
                (mult:DI (reg:DI 0 ax [orig:247 _161 ] [247])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 349 {*muldi3_1}
     (nil))
(insn 361 360 362 16 (set (reg:SI 0 ax [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":111 86 {*movsi_internal}
     (nil))
(insn 362 361 363 16 (set (reg:DI 0 ax [orig:249 _163 ] [249])
        (sign_extend:DI (reg:SI 0 ax [445]))) "CALMXW.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 363 362 364 16 (parallel [
            (set (reg:DI 0 ax [orig:250 _164 ] [250])
                (plus:DI (reg:DI 0 ax [orig:249 _163 ] [249])
                    (reg:DI 1 dx [orig:248 _162 ] [248])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 222 {*adddi_1}
     (nil))
(insn 364 363 365 16 (parallel [
            (set (reg:DI 1 dx [orig:251 _165 ] [251])
                (plus:DI (reg:DI 0 ax [orig:250 _164 ] [250])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":111 222 {*adddi_1}
     (nil))
(insn 365 364 366 16 (set (reg:SF 21 xmm0 [446])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) "CALMXW.f":111 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 366 365 367 16 (set (reg:SF 21 xmm0 [orig:252 _166 ] [252])
        (mult:SF (reg:SF 21 xmm0 [446])
            (reg:SF 22 xmm1 [orig:246 _160 ] [246]))) "CALMXW.f":111 838 {*fop_sf_comm}
     (nil))
(insn 367 366 368 16 (set (reg/f:DI 0 ax [447])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 mxwp+0 S8 A64])) "CALMXW.f":111 85 {*movdi_internal}
     (nil))
(insn 368 367 369 16 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:251 _165 ] [251])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [447])) [2 *mxwp_265(D) S4 A32])
        (reg:SF 21 xmm0 [orig:252 _166 ] [252])) "CALMXW.f":111 131 {*movsf_internal}
     (nil))
(insn 369 368 370 16 (set (reg:SI 0 ax [448])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 370 369 371 16 (parallel [
            (set (reg:SI 0 ax [orig:253 _167 ] [253])
                (plus:SI (reg:SI 0 ax [448])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 371 370 372 16 (set (reg:DI 0 ax [orig:254 _168 ] [254])
        (sign_extend:DI (reg:SI 0 ax [orig:253 _167 ] [253]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 372 371 373 16 (parallel [
            (set (reg:DI 1 dx [orig:255 _169 ] [255])
                (mult:DI (reg:DI 0 ax [orig:254 _168 ] [254])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 349 {*muldi3_1}
     (nil))
(insn 373 372 374 16 (set (reg:SI 0 ax [449])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 374 373 375 16 (set (reg:DI 0 ax [orig:256 _170 ] [256])
        (sign_extend:DI (reg:SI 0 ax [449]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 375 374 376 16 (parallel [
            (set (reg:DI 0 ax [orig:257 _171 ] [257])
                (mult:DI (reg:DI 0 ax [orig:256 _170 ] [256])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 349 {*muldi3_1}
     (nil))
(insn 376 375 377 16 (parallel [
            (set (reg:DI 1 dx [orig:258 _172 ] [258])
                (plus:DI (reg:DI 1 dx [orig:255 _169 ] [255])
                    (reg:DI 0 ax [orig:257 _171 ] [257])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 377 376 378 16 (set (reg:SI 0 ax [450])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 378 377 379 16 (set (reg:DI 0 ax [orig:259 _173 ] [259])
        (sign_extend:DI (reg:SI 0 ax [450]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 379 378 380 16 (parallel [
            (set (reg:DI 0 ax [orig:260 _174 ] [260])
                (plus:DI (reg:DI 0 ax [orig:259 _173 ] [259])
                    (reg:DI 1 dx [orig:258 _172 ] [258])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 380 379 381 16 (parallel [
            (set (reg:DI 1 dx [orig:261 _175 ] [261])
                (plus:DI (reg:DI 0 ax [orig:260 _174 ] [260])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 381 380 382 16 (set (reg/f:DI 0 ax [451])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f8a29813d80 masks>)) "CALMXW.f":113 85 {*movdi_internal}
     (nil))
(insn 382 381 383 16 (parallel [
            (set (reg:DI 1 dx [452])
                (plus:DI (reg:DI 1 dx [orig:261 _175 ] [261])
                    (const_int 148155 [0x242bb])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 383 382 384 16 (set (reg:SF 22 xmm1 [orig:262 _176 ] [262])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [452])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [451])) [2 masks.htm S4 A32])) "CALMXW.f":113 131 {*movsf_internal}
     (nil))
(insn 384 383 385 16 (set (reg:SI 0 ax [453])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 385 384 386 16 (parallel [
            (set (reg:SI 0 ax [orig:263 _177 ] [263])
                (plus:SI (reg:SI 0 ax [453])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 386 385 387 16 (set (reg:DI 0 ax [orig:264 _178 ] [264])
        (sign_extend:DI (reg:SI 0 ax [orig:263 _177 ] [263]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 387 386 388 16 (parallel [
            (set (reg:DI 1 dx [orig:265 _179 ] [265])
                (mult:DI (reg:DI 0 ax [orig:264 _178 ] [264])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 349 {*muldi3_1}
     (nil))
(insn 388 387 389 16 (set (reg:SI 0 ax [454])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 389 388 390 16 (set (reg:DI 0 ax [orig:266 _180 ] [266])
        (sign_extend:DI (reg:SI 0 ax [454]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 390 389 391 16 (parallel [
            (set (reg:DI 0 ax [orig:267 _181 ] [267])
                (mult:DI (reg:DI 0 ax [orig:266 _180 ] [266])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 349 {*muldi3_1}
     (nil))
(insn 391 390 392 16 (parallel [
            (set (reg:DI 1 dx [orig:268 _182 ] [268])
                (plus:DI (reg:DI 1 dx [orig:265 _179 ] [265])
                    (reg:DI 0 ax [orig:267 _181 ] [267])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 392 391 393 16 (set (reg:SI 0 ax [455])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 393 392 394 16 (set (reg:DI 0 ax [orig:269 _183 ] [269])
        (sign_extend:DI (reg:SI 0 ax [455]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 394 393 395 16 (parallel [
            (set (reg:DI 0 ax [orig:270 _184 ] [270])
                (plus:DI (reg:DI 0 ax [orig:269 _183 ] [269])
                    (reg:DI 1 dx [orig:268 _182 ] [268])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 395 394 396 16 (parallel [
            (set (reg:DI 1 dx [orig:271 _185 ] [271])
                (plus:DI (reg:DI 0 ax [orig:270 _184 ] [270])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 396 395 397 16 (set (reg/f:DI 0 ax [456])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f8a2981aea0 vrbls>)) "CALMXW.f":113 85 {*movdi_internal}
     (nil))
(insn 397 396 398 16 (parallel [
            (set (reg:DI 1 dx [457])
                (plus:DI (reg:DI 1 dx [orig:271 _185 ] [271])
                    (const_int 2340849 [0x23b7f1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 398 397 399 16 (set (reg:SF 21 xmm0 [orig:272 _186 ] [272])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [457])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [456])) [2 vrbls.t S4 A32])) "CALMXW.f":113 131 {*movsf_internal}
     (nil))
(insn 399 398 400 16 (set (reg:SF 21 xmm0 [orig:273 _187 ] [273])
        (mult:SF (reg:SF 21 xmm0 [orig:272 _186 ] [272])
            (reg:SF 22 xmm1 [orig:262 _176 ] [262]))) "CALMXW.f":113 838 {*fop_sf_comm}
     (nil))
(insn 400 399 401 16 (set (reg:SI 0 ax [458])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 401 400 402 16 (parallel [
            (set (reg:SI 0 ax [orig:274 _188 ] [274])
                (plus:SI (reg:SI 0 ax [458])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 402 401 403 16 (set (reg:DI 0 ax [orig:275 _189 ] [275])
        (sign_extend:DI (reg:SI 0 ax [orig:274 _188 ] [274]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 403 402 404 16 (parallel [
            (set (reg:DI 1 dx [orig:276 _190 ] [276])
                (mult:DI (reg:DI 0 ax [orig:275 _189 ] [275])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 349 {*muldi3_1}
     (nil))
(insn 404 403 405 16 (set (reg:SI 0 ax [459])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 405 404 406 16 (set (reg:DI 0 ax [orig:277 _191 ] [277])
        (sign_extend:DI (reg:SI 0 ax [459]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 406 405 407 16 (parallel [
            (set (reg:DI 0 ax [orig:278 _192 ] [278])
                (mult:DI (reg:DI 0 ax [orig:277 _191 ] [277])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 349 {*muldi3_1}
     (nil))
(insn 407 406 408 16 (parallel [
            (set (reg:DI 1 dx [orig:279 _193 ] [279])
                (plus:DI (reg:DI 1 dx [orig:276 _190 ] [276])
                    (reg:DI 0 ax [orig:278 _192 ] [278])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 408 407 409 16 (set (reg:SI 0 ax [460])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 409 408 410 16 (set (reg:DI 0 ax [orig:280 _194 ] [280])
        (sign_extend:DI (reg:SI 0 ax [460]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 410 409 411 16 (parallel [
            (set (reg:DI 0 ax [orig:281 _195 ] [281])
                (plus:DI (reg:DI 0 ax [orig:280 _194 ] [280])
                    (reg:DI 1 dx [orig:279 _193 ] [279])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 411 410 412 16 (parallel [
            (set (reg:DI 1 dx [orig:282 _196 ] [282])
                (plus:DI (reg:DI 0 ax [orig:281 _195 ] [281])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 412 411 413 16 (set (reg/f:DI 0 ax [461])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f8a2981aea0 vrbls>)) "CALMXW.f":113 85 {*movdi_internal}
     (nil))
(insn 413 412 414 16 (parallel [
            (set (reg:DI 1 dx [462])
                (plus:DI (reg:DI 1 dx [orig:282 _196 ] [282])
                    (const_int 3466827 [0x34e64b])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 414 413 415 16 (set (reg:SF 23 xmm2 [orig:283 _197 ] [283])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [462])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [461])) [2 vrbls.q S4 A32])) "CALMXW.f":113 131 {*movsf_internal}
     (nil))
(insn 415 414 416 16 (set (reg:SF 22 xmm1 [463])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S4 A32])) "CALMXW.f":113 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.07999980449676513671875e-1 [0x0.9ba5e3p+0])
        (nil)))
(insn 416 415 417 16 (set (reg:SF 23 xmm2 [orig:284 _198 ] [284])
        (mult:SF (reg:SF 23 xmm2 [orig:283 _197 ] [283])
            (reg:SF 22 xmm1 [463]))) "CALMXW.f":113 838 {*fop_sf_comm}
     (nil))
(insn 417 416 418 16 (set (reg:SF 22 xmm1 [464])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) "CALMXW.f":113 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 418 417 420 16 (set (reg:SF 22 xmm1 [orig:285 _199 ] [285])
        (plus:SF (reg:SF 22 xmm1 [464])
            (reg:SF 23 xmm2 [orig:284 _198 ] [284]))) "CALMXW.f":113 838 {*fop_sf_comm}
     (nil))
(insn 420 418 421 16 (set (reg:SF 22 xmm1 [orig:287 _201 ] [287])
        (mult:SF (reg:SF 22 xmm1 [orig:286 _200 ] [286])
            (reg:SF 21 xmm0 [orig:273 _187 ] [273]))) "CALMXW.f":113 838 {*fop_sf_comm}
     (nil))
(insn 421 420 422 16 (set (reg:SF 21 xmm0 [465])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S4 A32])) "CALMXW.f":113 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.92897968292236328125e+1 [0x0.ea5181p+5])
        (nil)))
(insn 422 421 540 16 (set (reg:SF 22 xmm1 [orig:287 _201 ] [287])
        (mult:SF (reg:SF 22 xmm1 [orig:287 _201 ] [287])
            (reg:SF 21 xmm0 [465]))) "CALMXW.f":113 838 {*fop_sf_comm}
     (nil))
(insn 540 422 546 16 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [11 %sfp+-84 S4 A32])
        (reg:SF 22 xmm1 [orig:287 _201 ] [287])) "CALMXW.f":113 131 {*movsf_internal}
     (nil))
(note 546 540 423 16 NOTE_INSN_DELETED)
(insn 423 546 424 16 (set (reg:SI 0 ax [466])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 424 423 425 16 (parallel [
            (set (reg:SI 0 ax [orig:289 _203 ] [289])
                (plus:SI (reg:SI 0 ax [466])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 425 424 426 16 (set (reg:DI 0 ax [orig:290 _204 ] [290])
        (sign_extend:DI (reg:SI 0 ax [orig:289 _203 ] [289]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 426 425 427 16 (parallel [
            (set (reg:DI 1 dx [orig:291 _205 ] [291])
                (mult:DI (reg:DI 0 ax [orig:290 _204 ] [290])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 349 {*muldi3_1}
     (nil))
(insn 427 426 428 16 (set (reg:SI 0 ax [467])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 428 427 429 16 (set (reg:DI 0 ax [orig:292 _206 ] [292])
        (sign_extend:DI (reg:SI 0 ax [467]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 429 428 430 16 (parallel [
            (set (reg:DI 0 ax [orig:293 _207 ] [293])
                (mult:DI (reg:DI 0 ax [orig:292 _206 ] [292])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 349 {*muldi3_1}
     (nil))
(insn 430 429 431 16 (parallel [
            (set (reg:DI 1 dx [orig:294 _208 ] [294])
                (plus:DI (reg:DI 1 dx [orig:291 _205 ] [291])
                    (reg:DI 0 ax [orig:293 _207 ] [293])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 431 430 432 16 (set (reg:SI 0 ax [468])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 432 431 433 16 (set (reg:DI 0 ax [orig:295 _209 ] [295])
        (sign_extend:DI (reg:SI 0 ax [468]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 433 432 434 16 (parallel [
            (set (reg:DI 0 ax [orig:296 _210 ] [296])
                (plus:DI (reg:DI 0 ax [orig:295 _209 ] [295])
                    (reg:DI 1 dx [orig:294 _208 ] [294])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 434 433 435 16 (parallel [
            (set (reg:DI 1 dx [orig:297 _211 ] [297])
                (plus:DI (reg:DI 0 ax [orig:296 _210 ] [296])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 435 434 436 16 (set (reg/f:DI 0 ax [469])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f8a2980b870 extra>)) "CALMXW.f":113 85 {*movdi_internal}
     (nil))
(insn 436 435 438 16 (set (reg:SF 21 xmm0 [orig:298 _212 ] [298])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:297 _211 ] [297])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [469])) [2 extra.pint S4 A32])) "CALMXW.f":113 131 {*movsf_internal}
     (nil))
(call_insn/u 438 436 439 16 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("logf") [flags 0x41]  <function_decl 0x7f8a2967b900 __builtin_logf>) [0 __builtin_logf S1 A8])
            (const_int 0 [0]))) "CALMXW.f":113 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 439 438 545 16 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [11 %sfp+-88 S4 A32])
        (reg:SF 21 xmm0)) "CALMXW.f":113 131 {*movsf_internal}
     (nil))
(note 545 439 440 16 NOTE_INSN_DELETED)
(insn 440 545 441 16 (set (reg:SI 0 ax [470])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 441 440 442 16 (set (reg:DI 0 ax [orig:300 _214 ] [300])
        (sign_extend:DI (reg:SI 0 ax [470]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 442 441 443 16 (parallel [
            (set (reg:DI 1 dx [orig:301 _215 ] [301])
                (mult:DI (reg:DI 0 ax [orig:300 _214 ] [300])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 349 {*muldi3_1}
     (nil))
(insn 443 442 444 16 (set (reg:SI 0 ax [471])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 444 443 445 16 (set (reg:DI 0 ax [orig:302 _216 ] [302])
        (sign_extend:DI (reg:SI 0 ax [471]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 445 444 446 16 (parallel [
            (set (reg:DI 0 ax [orig:303 _217 ] [303])
                (plus:DI (reg:DI 0 ax [orig:302 _216 ] [302])
                    (reg:DI 1 dx [orig:301 _215 ] [301])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 446 445 447 16 (parallel [
            (set (reg:DI 1 dx [orig:304 _218 ] [304])
                (plus:DI (reg:DI 0 ax [orig:303 _217 ] [303])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 447 446 448 16 (set (reg/f:DI 0 ax [472])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 mxwp+0 S8 A64])) "CALMXW.f":113 85 {*movdi_internal}
     (nil))
(insn 448 447 450 16 (set (reg:SF 21 xmm0 [orig:305 _219 ] [305])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:304 _218 ] [304])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [472])) [2 *mxwp_265(D) S4 A32])) "CALMXW.f":113 131 {*movsf_internal}
     (nil))
(call_insn/u 450 448 541 16 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("logf") [flags 0x41]  <function_decl 0x7f8a2967b900 __builtin_logf>) [0 __builtin_logf S1 A8])
            (const_int 0 [0]))) "CALMXW.f":113 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 541 450 452 16 (set (reg:SF 24 xmm3 [orig:299 _213 ] [299])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [11 %sfp+-88 S4 A32])) "CALMXW.f":113 131 {*movsf_internal}
     (nil))
(insn 452 541 542 16 (set (reg:SF 24 xmm3 [orig:299 _213 ] [299])
        (minus:SF (reg:SF 24 xmm3 [orig:299 _213 ] [299])
            (reg:SF 21 xmm0 [orig:306 _220 ] [306]))) "CALMXW.f":113 841 {*fop_sf_1}
     (nil))
(insn 542 452 543 16 (set (reg:SF 21 xmm0 [orig:307 _221 ] [307])
        (reg:SF 24 xmm3 [orig:299 _213 ] [299])) "CALMXW.f":113 131 {*movsf_internal}
     (nil))
(insn 543 542 454 16 (set (reg:SF 22 xmm1 [orig:288 _202 ] [288])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [11 %sfp+-84 S4 A32])) "CALMXW.f":113 131 {*movsf_internal}
     (nil))
(insn 454 543 455 16 (set (reg:SF 22 xmm1 [orig:288 _202 ] [288])
        (mult:SF (reg:SF 22 xmm1 [orig:288 _202 ] [288])
            (reg:SF 21 xmm0 [orig:308 _222 ] [308]))) "CALMXW.f":113 838 {*fop_sf_comm}
     (nil))
(insn 455 454 456 16 (set (reg:SI 0 ax [473])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 456 455 457 16 (parallel [
            (set (reg:SI 0 ax [orig:310 _224 ] [310])
                (plus:SI (reg:SI 0 ax [473])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 457 456 458 16 (set (reg:DI 0 ax [orig:311 _225 ] [311])
        (sign_extend:DI (reg:SI 0 ax [orig:310 _224 ] [310]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 458 457 459 16 (parallel [
            (set (reg:DI 1 dx [orig:312 _226 ] [312])
                (mult:DI (reg:DI 0 ax [orig:311 _225 ] [311])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 349 {*muldi3_1}
     (nil))
(insn 459 458 460 16 (set (reg:SI 0 ax [474])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 460 459 461 16 (set (reg:DI 0 ax [orig:313 _227 ] [313])
        (sign_extend:DI (reg:SI 0 ax [474]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 461 460 462 16 (parallel [
            (set (reg:DI 0 ax [orig:314 _228 ] [314])
                (mult:DI (reg:DI 0 ax [orig:313 _227 ] [313])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 349 {*muldi3_1}
     (nil))
(insn 462 461 463 16 (parallel [
            (set (reg:DI 1 dx [orig:315 _229 ] [315])
                (plus:DI (reg:DI 1 dx [orig:312 _226 ] [312])
                    (reg:DI 0 ax [orig:314 _228 ] [314])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 463 462 464 16 (set (reg:SI 0 ax [475])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 464 463 465 16 (set (reg:DI 0 ax [orig:316 _230 ] [316])
        (sign_extend:DI (reg:SI 0 ax [475]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 465 464 466 16 (parallel [
            (set (reg:DI 0 ax [orig:317 _231 ] [317])
                (plus:DI (reg:DI 0 ax [orig:316 _230 ] [316])
                    (reg:DI 1 dx [orig:315 _229 ] [315])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 466 465 467 16 (parallel [
            (set (reg:DI 1 dx [orig:318 _232 ] [318])
                (plus:DI (reg:DI 0 ax [orig:317 _231 ] [317])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 467 466 468 16 (set (reg/f:DI 0 ax [476])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f8a2980b870 extra>)) "CALMXW.f":113 85 {*movdi_internal}
     (nil))
(insn 468 467 469 16 (parallel [
            (set (reg:DI 1 dx [477])
                (plus:DI (reg:DI 1 dx [orig:318 _232 ] [318])
                    (const_int 2311218 [0x234432])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 469 468 470 16 (set (reg:SF 21 xmm0 [orig:319 _233 ] [319])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [477])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [476])) [2 extra.zint S4 A32])) "CALMXW.f":113 131 {*movsf_internal}
     (nil))
(insn 470 469 471 16 (set (reg:SI 0 ax [478])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 471 470 472 16 (set (reg:DI 0 ax [orig:320 _234 ] [320])
        (sign_extend:DI (reg:SI 0 ax [478]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 472 471 473 16 (parallel [
            (set (reg:DI 1 dx [orig:321 _235 ] [321])
                (mult:DI (reg:DI 0 ax [orig:320 _234 ] [320])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 349 {*muldi3_1}
     (nil))
(insn 473 472 474 16 (set (reg:SI 0 ax [479])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALMXW.f":113 86 {*movsi_internal}
     (nil))
(insn 474 473 475 16 (set (reg:DI 0 ax [orig:322 _236 ] [322])
        (sign_extend:DI (reg:SI 0 ax [479]))) "CALMXW.f":113 149 {*extendsidi2_rex64}
     (nil))
(insn 475 474 476 16 (parallel [
            (set (reg:DI 0 ax [orig:323 _237 ] [323])
                (plus:DI (reg:DI 0 ax [orig:322 _236 ] [322])
                    (reg:DI 1 dx [orig:321 _235 ] [321])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 476 475 477 16 (parallel [
            (set (reg:DI 1 dx [orig:324 _238 ] [324])
                (plus:DI (reg:DI 0 ax [orig:323 _237 ] [323])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":113 222 {*adddi_1}
     (nil))
(insn 477 476 478 16 (set (reg:SF 21 xmm0 [orig:325 _239 ] [325])
        (plus:SF (reg:SF 21 xmm0 [orig:319 _233 ] [319])
            (reg:SF 22 xmm1 [orig:309 _223 ] [309]))) "CALMXW.f":113 838 {*fop_sf_comm}
     (nil))
(insn 478 477 479 16 (set (reg/f:DI 0 ax [480])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [3 mxwz+0 S8 A64])) "CALMXW.f":113 85 {*movdi_internal}
     (nil))
(insn 479 478 480 16 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:324 _238 ] [324])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [480])) [2 *mxwz_267(D) S4 A32])
        (reg:SF 21 xmm0 [orig:325 _239 ] [325])) "CALMXW.f":113 131 {*movsf_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 25, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              14
;;              15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 480 479 481 17 9 (nil) [2 uses])
(note 481 480 482 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 482 481 515 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":94 221 {*addsi_1}
     (nil))
(jump_insn 515 482 516 17 (set (pc)
        (label_ref 483)) "CALMXW.f":94 683 {jump}
     (nil)
 -> 483)
;;  succ:       13 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

(barrier 516 515 534)
;; basic block 25, loop depth 0, maybe hot
;;  prev block 17, next block 18, flags: (RTL, MODIFIED)
;;  pred:       13
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 534 516 533 25 22 (nil) [1 uses])
(note 533 534 535 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 535 533 486 25 (const_int 0 [0]) "CALMXW.f":107 718 {nop}
     (nil))
;;  succ:       18 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

;; basic block 18, loop depth 0, maybe hot
;;  prev block 25, next block 24, flags: (RTL, MODIFIED)
;;  pred:       25 [always]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 486 535 487 18 8 (nil) [0 uses])
(note 487 486 488 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 488 487 517 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":88 221 {*addsi_1}
     (nil))
(jump_insn 517 488 518 18 (set (pc)
        (label_ref 489)) "CALMXW.f":88 683 {jump}
     (nil)
 -> 489)
;;  succ:       11 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

(barrier 518 517 531)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 18, next block 19, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 531 518 530 24 21 (nil) [1 uses])
(note 530 531 532 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 532 530 492 24 (const_int 0 [0]) "CALMXW.f":94 718 {nop}
     (nil))
;;  succ:       19 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

;; basic block 19, loop depth 0, maybe hot
;;  prev block 24, next block 23, flags: (RTL, MODIFIED)
;;  pred:       24 [always]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 492 532 493 19 7 (nil) [0 uses])
(note 493 492 494 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 494 493 519 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMXW.f":87 221 {*addsi_1}
     (nil))
(jump_insn 519 494 520 19 (set (pc)
        (label_ref 495)) "CALMXW.f":87 683 {jump}
     (nil)
 -> 495)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 331

(barrier 520 519 528)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 19, next block 20, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 528 520 527 23 20 (nil) [1 uses])
(note 527 528 529 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 529 527 498 23 (const_int 0 [0]) "CALMXW.f":88 718 {nop}
     (nil))
;;  succ:       20 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 23, next block 1, flags: (RTL, MODIFIED)
;;  pred:       23 [always]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 498 529 499 20 6 (nil) [0 uses])
(note 499 498 510 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 510 499 536 20 (const_int 0 [0]) "CALMXW.f":121 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 536 510 0 NOTE_INSN_DELETED)
