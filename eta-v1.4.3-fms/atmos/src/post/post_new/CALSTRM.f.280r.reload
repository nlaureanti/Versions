
;; Function calstrm (calstrm_, funcdef_no=0, decl_uid=3770, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 8:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 9:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 10
	 Choosing alt 1 in insn 10:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 14:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 15
	 Choosing alt 1 in insn 15:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 16:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 17:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 19:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 44:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 46:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 52
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 53:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 54:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 56:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 57:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 63:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 10
EBB 7
EBB 9
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 73: point = 0, n_alt = -1
  BB 9
   Insn 80: point = 0, n_alt = -1
  BB 3
   Insn 28: point = 0, n_alt = -1
   Insn 27: point = 0, n_alt = 0
   Insn 26: point = 1, n_alt = 0
   Insn 25: point = 3, n_alt = 0
   Insn 24: point = 4, n_alt = 0
  BB 7
   Insn 76: point = 5, n_alt = -1
   Insn 63: point = 5, n_alt = 1
  BB 10
   Insn 83: point = 6, n_alt = -1
  BB 5
   Insn 36: point = 7, n_alt = -1
   Insn 35: point = 7, n_alt = 0
   Insn 34: point = 8, n_alt = 0
   Insn 33: point = 10, n_alt = 0
   Insn 32: point = 11, n_alt = 0
  BB 6
   Insn 74: point = 12, n_alt = -1
   Insn 57: point = 12, n_alt = 1
   Insn 56: point = 12, n_alt = 8
   Insn 55: point = 13, n_alt = 3
   Insn 54: point = 14, n_alt = 1
   Insn 53: point = 16, n_alt = 3
   Insn 52: point = 18, n_alt = 0
   Insn 51: point = 20, n_alt = 1
   Insn 50: point = 22, n_alt = 0
   Insn 49: point = 23, n_alt = 0
   Insn 48: point = 25, n_alt = 1
   Insn 47: point = 27, n_alt = 0
   Insn 46: point = 28, n_alt = 7
   Insn 45: point = 30, n_alt = 3
   Insn 44: point = 31, n_alt = 3
   Insn 43: point = 33, n_alt = 0
   Insn 42: point = 35, n_alt = 1
   Insn 41: point = 37, n_alt = 0
   Insn 40: point = 38, n_alt = 0
   Insn 39: point = 40, n_alt = 1
   Insn 38: point = 42, n_alt = 0
  BB 4
   Insn 30: point = 44, n_alt = 1
  BB 2
   Insn 22: point = 45, n_alt = 1
   Insn 21: point = 46, n_alt = 0
   Insn 20: point = 47, n_alt = 0
   Insn 19: point = 48, n_alt = 8
   Insn 18: point = 49, n_alt = 2
   Insn 17: point = 51, n_alt = 7
   Insn 16: point = 52, n_alt = 8
   Insn 15: point = 53, n_alt = 1
   Insn 14: point = 55, n_alt = 7
   Insn 13: point = 56, n_alt = -2
   Insn 12: point = 57, n_alt = 0
   Insn 11: point = 57, n_alt = -2
   Insn 10: point = 58, n_alt = 1
   Insn 9: point = 60, n_alt = 7
   Insn 8: point = 61, n_alt = 7
   Insn 7: point = 63, n_alt = 4
   Insn 3: point = 64, n_alt = 5
   Insn 2: point = 64, n_alt = 5
 r87: [59..61]
 r88: [57..58]
 r89: [54..56]
 r90: [39..40]
 r91: [34..38]
 r92: [34..35]
 r93: [32..33]
 r94: [29..31]
 r95: [15..28]
 r96: [24..25]
 r97: [19..23]
 r98: [19..20]
 r99: [17..18]
 r100: [12..16]
 r101: [12..14]
 r102: [45..47]
 r103: [0..46]
 r104: [0..1]
 r105: [7..8]
 r106: [62..63]
 r107: [59..60]
 r108: [52..53]
 r109: [54..55]
 r110: [48..49]
 r111: [50..51]
 r112: [2..3]
 r113: [9..10]
 r114: [41..42]
 r115: [36..37]
 r116: [29..30]
 r117: [26..27]
 r118: [21..22]
 r119: [12..13]
Compressing live ranges: from 64 to 50 - 78%
Ranges after the compression:
 r87: [46..47]
 r88: [44..45]
 r89: [42..43]
 r90: [30..31]
 r91: [26..29]
 r92: [26..27]
 r93: [24..25]
 r94: [22..23]
 r95: [10..21]
 r96: [18..19]
 r97: [14..17]
 r98: [14..15]
 r99: [12..13]
 r100: [8..11]
 r101: [8..9]
 r102: [34..35]
 r103: [0..35]
 r104: [0..1]
 r105: [4..5]
 r106: [48..49]
 r107: [46..47]
 r108: [40..41]
 r109: [42..43]
 r110: [36..37]
 r111: [38..39]
 r112: [2..3]
 r113: [6..7]
 r114: [32..33]
 r115: [28..29]
 r116: [22..23]
 r117: [20..21]
 r118: [16..17]
 r119: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 54
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 56
changing reg in insn 54
changing reg in insn 56
changing reg in insn 20
changing reg in insn 22
changing reg in insn 21
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 34
changing reg in insn 35
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 15
changing reg in insn 16
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 17
changing reg in insn 18
changing reg in insn 25
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
changing reg in insn 55
changing reg in insn 56
deleting insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


calstrm

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1]
;;  ref usage 	r0={4d,2u} r1={19d,17u} r2={6d,4u} r4={2d,1u} r5={2d,1u} r6={1d,30u} r7={1d,11u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={13d,4u} r18={1d} r19={1d} r20={1d,1u} r21={10d,9u} r22={4d,2u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 217{135d,82u,0e} in 54{53 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 102 103 106 107 108 109 110 111
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 z1d+0 S8 A64])
        (reg:DI 5 di [ z1d ])) "CALSTRM.f":1 85 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 strm+0 S8 A64])
        (reg:DI 4 si [ strm ])) "CALSTRM.f":1 85 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [106])
        (symbol_ref:DI ("mapot_") [flags 0x202]  <var_decl 0x7fd0b9c63870 mapot>)) "CALSTRM.f":1 85 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SF 22 xmm1 [orig:87 _1 ] [87])
        (mem/c:SF (plus:DI (reg/f:DI 0 ax [106])
                (const_int 4000032 [0x3d0920])) [2 mapot.tph0d+0 S4 A128])) "CALSTRM.f":1 131 {*movsf_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SF 21 xmm0 [107])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALSTRM.f":66 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.7453290522098541259765625e-2 [0x0.8efa34p-5])
        (nil)))
(insn 10 9 12 2 (set (reg:SF 21 xmm0 [orig:88 _2 ] [88])
        (mult:SF (reg:SF 21 xmm0 [107])
            (reg:SF 22 xmm1 [orig:87 _1 ] [87]))) "CALSTRM.f":66 838 {*fop_sf_comm}
     (nil))
(call_insn/u 12 10 13 2 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sinf") [flags 0x41]  <function_decl 0x7fd0b9ad4500 __builtin_sinf>) [0 __builtin_sinf S1 A8])
            (const_int 0 [0]))) "CALSTRM.f":66 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 13 12 14 2 (set (reg:SF 22 xmm1 [orig:89 _3 ] [89])
        (reg:SF 21 xmm0)) "CALSTRM.f":66 131 {*movsf_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SF 21 xmm0 [109])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALSTRM.f":66 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.458399929106235504150390625e-4 [0x0.98ecap-12])
        (nil)))
(insn 15 14 16 2 (set (reg:SF 21 xmm0 [108])
        (mult:SF (reg:SF 21 xmm0 [109])
            (reg:SF 22 xmm1 [orig:89 _3 ] [89]))) "CALSTRM.f":66 838 {*fop_sf_comm}
     (nil))
(insn 16 15 17 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 f0+0 S4 A32])
        (reg:SF 21 xmm0 [108])) "CALSTRM.f":66 131 {*movsf_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SF 21 xmm0 [111])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "CALSTRM.f":67 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.80000019073486328125e+0 [0x0.9ccccdp+4])
        (nil)))
(insn 18 17 19 2 (set (reg:SF 21 xmm0 [110])
        (div:SF (reg:SF 21 xmm0 [111])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 f0+0 S4 A32]))) "CALSTRM.f":67 841 {*fop_sf_1}
     (nil))
(insn 19 18 20 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 gof0+0 S4 A32])
        (reg:SF 21 xmm0 [110])) "CALSTRM.f":67 131 {*movsf_internal}
     (nil))
(insn 20 19 21 2 (set (reg:SI 1 dx [orig:102 _23 ] [102])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fd0b9c68bd0 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "CALSTRM.f":71 86 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 0 ax [orig:103 _24 ] [103])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fd0b9c68bd0 parallel>)
                    (const_int 12 [0xc]))) [1 parallel.jend+0 S4 A32])) "CALSTRM.f":71 86 {*movsi_internal}
     (nil))
(insn 22 21 64 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (reg:SI 1 dx [orig:102 _23 ] [102])) "CALSTRM.f":71 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  def 	 17 [flags] 104 112
(code_label 64 22 23 3 5 (nil) [1 uses])
(note 23 64 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:103 _24 ] [103]))) "CALSTRM.f":71 11 {*cmpsi_1}
     (nil))
(insn 25 24 26 3 (set (reg:QI 1 dx [112])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALSTRM.f":71 678 {*setcc_qi}
     (nil))
(insn 26 25 27 3 (set (reg:SI 1 dx [orig:104 _26 ] [104])
        (zero_extend:SI (reg:QI 1 dx [112]))) "CALSTRM.f":71 140 {*zero_extendqisi2}
     (nil))
(insn 27 26 28 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:104 _26 ] [104])
            (const_int 0 [0]))) "CALSTRM.f":71 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 28 27 29 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 79)
            (pc))) "CALSTRM.f":71 682 {*jcc}
     (nil)
 -> 79)
;;  succ:       9
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 58 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALSTRM.f":72 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 113
(code_label 58 30 31 5 4 (nil) [1 uses])
(note 31 58 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALSTRM.f":72 11 {*cmpsi_1}
     (nil))
(insn 33 32 34 5 (set (reg:QI 1 dx [113])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALSTRM.f":72 678 {*setcc_qi}
     (nil))
(insn 34 33 35 5 (set (reg:SI 1 dx [orig:105 _28 ] [105])
        (zero_extend:SI (reg:QI 1 dx [113]))) "CALSTRM.f":72 140 {*zero_extendqisi2}
     (nil))
(insn 35 34 36 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:105 _28 ] [105])
            (const_int 0 [0]))) "CALSTRM.f":72 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 36 35 37 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 82)
            (pc))) "CALSTRM.f":72 682 {*jcc}
     (nil)
 -> 82)
;;  succ:       10
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 10, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 94 95 96 97 98 99 100 101 114 115 116 117 118 119
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 6 (set (reg:SI 1 dx [114])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALSTRM.f":73 86 {*movsi_internal}
     (nil))
(insn 39 38 40 6 (set (reg:DI 1 dx [orig:90 _4 ] [90])
        (sign_extend:DI (reg:SI 1 dx [114]))) "CALSTRM.f":73 149 {*extendsidi2_rex64}
     (nil))
(insn 40 39 41 6 (parallel [
            (set (reg:DI 2 cx [orig:91 _5 ] [91])
                (mult:DI (reg:DI 1 dx [orig:90 _4 ] [90])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":73 349 {*muldi3_1}
     (nil))
(insn 41 40 42 6 (set (reg:SI 1 dx [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALSTRM.f":73 86 {*movsi_internal}
     (nil))
(insn 42 41 43 6 (set (reg:DI 1 dx [orig:92 _6 ] [92])
        (sign_extend:DI (reg:SI 1 dx [115]))) "CALSTRM.f":73 149 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 6 (parallel [
            (set (reg:DI 1 dx [orig:93 _7 ] [93])
                (plus:DI (reg:DI 1 dx [orig:92 _6 ] [92])
                    (reg:DI 2 cx [orig:91 _5 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":73 222 {*adddi_1}
     (nil))
(insn 44 43 45 6 (parallel [
            (set (reg:DI 2 cx [orig:94 _8 ] [94])
                (plus:DI (reg:DI 1 dx [orig:93 _7 ] [93])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":73 222 {*adddi_1}
     (nil))
(insn 45 44 46 6 (set (reg/f:DI 1 dx [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 z1d+0 S8 A64])) "CALSTRM.f":73 85 {*movdi_internal}
     (nil))
(insn 46 45 47 6 (set (reg:SF 21 xmm0 [orig:95 _9 ] [95])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:94 _8 ] [94])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [116])) [2 *z1d_29(D) S4 A32])) "CALSTRM.f":73 131 {*movsf_internal}
     (nil))
(insn 47 46 48 6 (set (reg:SI 1 dx [117])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALSTRM.f":73 86 {*movsi_internal}
     (nil))
(insn 48 47 49 6 (set (reg:DI 1 dx [orig:96 _10 ] [96])
        (sign_extend:DI (reg:SI 1 dx [117]))) "CALSTRM.f":73 149 {*extendsidi2_rex64}
     (nil))
(insn 49 48 50 6 (parallel [
            (set (reg:DI 2 cx [orig:97 _11 ] [97])
                (mult:DI (reg:DI 1 dx [orig:96 _10 ] [96])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":73 349 {*muldi3_1}
     (nil))
(insn 50 49 51 6 (set (reg:SI 1 dx [118])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALSTRM.f":73 86 {*movsi_internal}
     (nil))
(insn 51 50 52 6 (set (reg:DI 1 dx [orig:98 _12 ] [98])
        (sign_extend:DI (reg:SI 1 dx [118]))) "CALSTRM.f":73 149 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 6 (parallel [
            (set (reg:DI 1 dx [orig:99 _13 ] [99])
                (plus:DI (reg:DI 1 dx [orig:98 _12 ] [98])
                    (reg:DI 2 cx [orig:97 _11 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":73 222 {*adddi_1}
     (nil))
(insn 53 52 54 6 (parallel [
            (set (reg:DI 2 cx [orig:100 _14 ] [100])
                (plus:DI (reg:DI 1 dx [orig:99 _13 ] [99])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":73 222 {*adddi_1}
     (nil))
(insn 54 53 55 6 (set (reg:SF 21 xmm0 [orig:101 _15 ] [101])
        (mult:SF (reg:SF 21 xmm0 [orig:95 _9 ] [95])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 gof0+0 S4 A32]))) "CALSTRM.f":73 838 {*fop_sf_comm}
     (nil))
(insn 55 54 56 6 (set (reg/f:DI 1 dx [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 strm+0 S8 A64])) "CALSTRM.f":73 85 {*movdi_internal}
     (nil))
(insn 56 55 57 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:100 _14 ] [100])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [119])) [2 *strm_30(D) S4 A32])
        (reg:SF 21 xmm0 [orig:101 _15 ] [101])) "CALSTRM.f":73 131 {*movsf_internal}
     (nil))
(insn 57 56 74 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":72 221 {*addsi_1}
     (nil))
(jump_insn 74 57 75 6 (set (pc)
        (label_ref 58)) "CALSTRM.f":72 683 {jump}
     (nil)
 -> 58)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

(barrier 75 74 82)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 6, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 82 75 81 10 8 (nil) [1 uses])
(note 81 82 83 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 83 81 61 10 (const_int 0 [0]) "CALSTRM.f":73 718 {nop}
     (nil))
;;  succ:       7 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

;; basic block 7, loop depth 0, maybe hot
;;  prev block 10, next block 9, flags: (RTL, MODIFIED)
;;  pred:       10 [always]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 61 83 62 7 3 (nil) [0 uses])
(note 62 61 63 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 76 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":71 221 {*addsi_1}
     (nil))
(jump_insn 76 63 77 7 (set (pc)
        (label_ref 64)) "CALSTRM.f":71 683 {jump}
     (nil)
 -> 64)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

(barrier 77 76 79)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 79 77 78 9 7 (nil) [1 uses])
(note 78 79 80 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 80 78 67 9 (const_int 0 [0]) "CALSTRM.f":72 718 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 67 80 68 8 2 (nil) [0 uses])
(note 68 67 73 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 73 68 84 8 (const_int 0 [0]) "CALSTRM.f":78 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 84 73 0 NOTE_INSN_DELETED)
