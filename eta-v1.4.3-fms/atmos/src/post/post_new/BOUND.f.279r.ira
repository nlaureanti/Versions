
;; Function bound (bound_, funcdef_no=0, decl_uid=3768, cgraph_uid=0, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 18 n_edges 22 count 26 (  1.4)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 17 12 16 13 15 14
;;
;; Loop 1
;;  header 4, latch 12
;;  depth 1, outer 0
;;  nodes: 4 12 17 6 5 11 9 10 7 8
;;
;; Loop 2
;;  header 6, latch 11
;;  depth 2, outer 1
;;  nodes: 6 11 9 10 7 8
;; 2 succs { 3 15 }
;; 3 succs { 4 }
;; 4 succs { 16 5 }
;; 5 succs { 6 }
;; 6 succs { 17 7 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 6 }
;; 17 succs { 12 }
;; 12 succs { 4 }
;; 16 succs { 13 }
;; 13 succs { 15 }
;; 15 succs { 14 }
;; 14 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a13 (r134,l0) best SSE_REGS, allocno SSE_REGS
    r133: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a37 (r133,l0) best SSE_REGS, allocno SSE_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a5 (r120,l0) best SSE_REGS, allocno SSE_REGS
    r119: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a30 (r119,l0) best SSE_REGS, allocno SSE_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r122,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 NON_Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:65000 NO_REX_SSE_REGS:65000 SSE_REGS:65000 MMX_REGS:95000 INT_SSE_REGS:95000 ALL_REGS:1488000 MEM:41000
  a1(r128,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:47000 NO_REX_SSE_REGS:47000 SSE_REGS:47000 MMX_REGS:67000 INT_SSE_REGS:67000 ALL_REGS:1062000 MEM:27000
  a2(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r120,l0) costs: AREG:45000 DREG:45000 CREG:45000 BREG:45000 SIREG:45000 DIREG:45000 AD_REGS:45000 CLOBBERED_REGS:45000 Q_REGS:45000 NON_Q_REGS:45000 TLS_GOTBASE_REGS:45000 GENERAL_REGS:45000 FP_TOP_REG:69000 FP_SECOND_REG:69000 FLOAT_REGS:69000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:69000 FP_TOP_SSE_REGS:69000 FP_SECOND_SSE_REGS:69000 FLOAT_SSE_REGS:69000 FLOAT_INT_REGS:69000 INT_SSE_REGS:69000 FLOAT_INT_SSE_REGS:69000 ALL_REGS:69000 MEM:30000
  a6(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a7(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a8(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a9(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a10(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a11(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r134,l0) costs: AREG:17000 DREG:17000 CREG:17000 BREG:17000 SIREG:17000 DIREG:17000 AD_REGS:17000 CLOBBERED_REGS:17000 Q_REGS:17000 NON_Q_REGS:17000 TLS_GOTBASE_REGS:17000 GENERAL_REGS:17000 FP_TOP_REG:31000 FP_SECOND_REG:31000 FLOAT_REGS:31000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31000 FP_TOP_SSE_REGS:31000 FP_SECOND_SSE_REGS:31000 FLOAT_SSE_REGS:31000 FLOAT_INT_REGS:31000 INT_SSE_REGS:31000 FLOAT_INT_SSE_REGS:31000 ALL_REGS:31000 MEM:12000
  a14(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a15(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a16(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a17(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a18(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a19(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a21(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a22(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a23(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a24(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a25(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a26(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a27(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a28(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a30(r119,l0) costs: AREG:45000 DREG:45000 CREG:45000 BREG:45000 SIREG:45000 DIREG:45000 AD_REGS:45000 CLOBBERED_REGS:45000 Q_REGS:45000 NON_Q_REGS:45000 TLS_GOTBASE_REGS:45000 GENERAL_REGS:45000 FP_TOP_REG:69000 FP_SECOND_REG:69000 FLOAT_REGS:69000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:69000 FP_TOP_SSE_REGS:69000 FP_SECOND_SSE_REGS:69000 FLOAT_SSE_REGS:69000 FLOAT_INT_REGS:69000 INT_SSE_REGS:69000 FLOAT_INT_SSE_REGS:69000 ALL_REGS:69000 MEM:29000
  a31(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a32(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a33(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a34(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a35(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a36(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a37(r133,l0) costs: AREG:17000 DREG:17000 CREG:17000 BREG:17000 SIREG:17000 DIREG:17000 AD_REGS:17000 CLOBBERED_REGS:17000 Q_REGS:17000 NON_Q_REGS:17000 TLS_GOTBASE_REGS:17000 GENERAL_REGS:17000 FP_TOP_REG:31000 FP_SECOND_REG:31000 FLOAT_REGS:31000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31000 FP_TOP_SSE_REGS:31000 FP_SECOND_SSE_REGS:31000 FLOAT_SSE_REGS:31000 FLOAT_INT_REGS:31000 INT_SSE_REGS:31000 FLOAT_INT_SSE_REGS:31000 ALL_REGS:31000 MEM:13000
  a38(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a39(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a40(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a41(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a42(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a43(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a44(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a45(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a46(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a47(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a48(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a49(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a50(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a51(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a52(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a53(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a54(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a55(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a56(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a57(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a58(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a59(r90,l0) costs: AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:2000
  a60(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a61(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a62(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a63(r123,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:31000 NO_REX_SSE_REGS:31000 SSE_REGS:31000 MMX_REGS:41000 INT_SSE_REGS:41000 ALL_REGS:638000 MEM:19000
  a64(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a65(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a66(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a67(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a68(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:17000
  a69(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a70(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a71(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 151(l0): point = 1
   Insn 142(l0): point = 4
   Insn 154(l0): point = 7
   Insn 48(l0): point = 10
   Insn 47(l0): point = 12
   Insn 46(l0): point = 14
   Insn 45(l0): point = 16
   Insn 44(l0): point = 18
   Insn 145(l0): point = 21
   Insn 130(l0): point = 23
   Insn 157(l0): point = 26
   Insn 58(l0): point = 29
   Insn 57(l0): point = 31
   Insn 56(l0): point = 33
   Insn 55(l0): point = 35
   Insn 54(l0): point = 37
   Insn 52(l0): point = 40
   Insn 51(l0): point = 42
   Insn 50(l0): point = 44
   Insn 143(l0): point = 47
   Insn 124(l0): point = 49
   Insn 123(l0): point = 51
   Insn 122(l0): point = 53
   Insn 121(l0): point = 55
   Insn 120(l0): point = 57
   Insn 119(l0): point = 59
   Insn 118(l0): point = 61
   Insn 117(l0): point = 63
   Insn 116(l0): point = 65
   Insn 115(l0): point = 67
   Insn 111(l0): point = 70
   Insn 110(l0): point = 72
   Insn 109(l0): point = 74
   Insn 108(l0): point = 76
   Insn 107(l0): point = 78
   Insn 106(l0): point = 80
   Insn 105(l0): point = 82
   Insn 104(l0): point = 84
   Insn 103(l0): point = 86
   Insn 102(l0): point = 88
   Insn 101(l0): point = 90
   Insn 100(l0): point = 92
   Insn 99(l0): point = 94
   Insn 98(l0): point = 96
   Insn 97(l0): point = 98
   Insn 96(l0): point = 100
   Insn 95(l0): point = 102
   Insn 94(l0): point = 104
   Insn 93(l0): point = 106
   Insn 92(l0): point = 108
   Insn 91(l0): point = 110
   Insn 90(l0): point = 112
   Insn 89(l0): point = 114
   Insn 88(l0): point = 116
   Insn 87(l0): point = 118
   Insn 86(l0): point = 120
   Insn 85(l0): point = 122
   Insn 84(l0): point = 124
   Insn 83(l0): point = 126
   Insn 79(l0): point = 129
   Insn 78(l0): point = 131
   Insn 77(l0): point = 133
   Insn 76(l0): point = 135
   Insn 75(l0): point = 137
   Insn 74(l0): point = 139
   Insn 73(l0): point = 141
   Insn 72(l0): point = 143
   Insn 71(l0): point = 145
   Insn 70(l0): point = 147
   Insn 69(l0): point = 149
   Insn 68(l0): point = 151
   Insn 67(l0): point = 153
   Insn 66(l0): point = 155
   Insn 65(l0): point = 157
   Insn 64(l0): point = 159
   Insn 63(l0): point = 161
   Insn 62(l0): point = 163
   Insn 61(l0): point = 165
   Insn 60(l0): point = 167
   Insn 8(l0): point = 170
   Insn 9(l0): point = 173
   Insn 42(l0): point = 176
   Insn 41(l0): point = 178
   Insn 40(l0): point = 180
   Insn 38(l0): point = 183
   Insn 37(l0): point = 185
   Insn 36(l0): point = 187
   Insn 35(l0): point = 189
   Insn 31(l0): point = 191
   Insn 30(l0): point = 193
   Insn 29(l0): point = 195
   Insn 27(l0): point = 197
   Insn 25(l0): point = 199
   Insn 26(l0): point = 201
   Insn 24(l0): point = 203
   Insn 23(l0): point = 205
   Insn 22(l0): point = 207
   Insn 21(l0): point = 209
   Insn 20(l0): point = 211
   Insn 19(l0): point = 213
   Insn 17(l0): point = 215
   Insn 18(l0): point = 217
   Insn 16(l0): point = 219
   Insn 15(l0): point = 221
   Insn 14(l0): point = 223
   Insn 13(l0): point = 225
   Insn 12(l0): point = 227
   Insn 6(l0): point = 229
   Insn 5(l0): point = 231
   Insn 4(l0): point = 233
   Insn 3(l0): point = 235
   Insn 2(l0): point = 237
 a0(r122): [10..213]
 a1(r128): [10..189]
 a2(r129): [10..178]
 a3(r163): [52..53]
 a4(r118): [52..55]
 a5(r120): [173..173] [52..92]
 a6(r117): [56..57]
 a7(r116): [56..61]
 a8(r162): [58..59]
 a9(r115): [62..63]
 a10(r114): [64..65]
 a11(r161): [66..67]
 a12(r131): [47..175] [29..42]
 a13(r134): [174..175] [70..88]
 a14(r113): [73..74]
 a15(r112): [75..76]
 a16(r111): [75..82]
 a17(r160): [77..78]
 a18(r159): [83..84]
 a19(r157): [89..90]
 a20(r156): [93..94]
 a21(r110): [93..96]
 a22(r109): [97..98]
 a23(r108): [97..102]
 a24(r155): [99..100]
 a25(r107): [103..104]
 a26(r106): [105..106]
 a27(r154): [107..108]
 a28(r153): [111..112]
 a29(r105): [111..114]
 a30(r119): [170..170] [111..165]
 a31(r104): [115..116]
 a32(r103): [115..120]
 a33(r152): [117..118]
 a34(r102): [121..122]
 a35(r101): [123..124]
 a36(r151): [125..126]
 a37(r133): [171..172] [129..147]
 a38(r100): [132..133]
 a39(r99): [134..135]
 a40(r98): [134..141]
 a41(r150): [136..137]
 a42(r149): [142..143]
 a43(r148): [148..149]
 a44(r97): [148..151]
 a45(r96): [152..153]
 a46(r95): [152..157]
 a47(r147): [154..155]
 a48(r94): [158..159]
 a49(r93): [160..161]
 a50(r146): [162..163]
 a51(r145): [166..167]
 a52(r132): [32..33]
 a53(r144): [34..35]
 a54(r143): [43..44]
 a55(r130): [13..14]
 a56(r142): [15..16]
 a57(r141): [179..180]
 a58(r92): [186..187]
 a59(r90 [0]): [192..239]
 a59(r90 [1]): [191..239]
 a60(r89): [194..195]
 a61(r124): [196..197]
 a62(r140): [198..201]
 a63(r123): [198..203]
 a64(r139): [206..207]
 a65(r88): [208..209]
 a66(r138): [210..211]
 a67(r137): [214..217]
 a68(r121): [214..219]
 a69(r136): [222..223]
 a70(r87): [224..225]
 a71(r135): [226..227]
Compressing live ranges: from 240 to 108 - 45%
Ranges after the compression:
 a0(r122): [0..99]
 a1(r128): [0..87]
 a2(r129): [0..83]
 a3(r163): [10..11]
 a4(r118): [10..11]
 a5(r120): [81..81] [10..31]
 a6(r117): [12..13]
 a7(r116): [12..15]
 a8(r162): [14..15]
 a9(r115): [16..17]
 a10(r114): [18..19]
 a11(r161): [20..21]
 a12(r131): [10..83] [4..7]
 a13(r134): [82..83] [22..29]
 a14(r113): [22..23]
 a15(r112): [24..25]
 a16(r111): [24..27]
 a17(r160): [26..27]
 a18(r159): [28..29]
 a19(r157): [30..31]
 a20(r156): [32..33]
 a21(r110): [32..33]
 a22(r109): [34..35]
 a23(r108): [34..37]
 a24(r155): [36..37]
 a25(r107): [38..39]
 a26(r106): [40..41]
 a27(r154): [42..43]
 a28(r153): [44..45]
 a29(r105): [44..45]
 a30(r119): [78..78] [44..75]
 a31(r104): [46..47]
 a32(r103): [46..49]
 a33(r152): [48..49]
 a34(r102): [50..51]
 a35(r101): [52..53]
 a36(r151): [54..55]
 a37(r133): [79..80] [56..63]
 a38(r100): [56..57]
 a39(r99): [58..59]
 a40(r98): [58..61]
 a41(r150): [60..61]
 a42(r149): [62..63]
 a43(r148): [64..65]
 a44(r97): [64..65]
 a45(r96): [66..67]
 a46(r95): [66..69]
 a47(r147): [68..69]
 a48(r94): [70..71]
 a49(r93): [72..73]
 a50(r146): [74..75]
 a51(r145): [76..77]
 a52(r132): [4..5]
 a53(r144): [6..7]
 a54(r143): [8..9]
 a55(r130): [0..1]
 a56(r142): [2..3]
 a57(r141): [84..85]
 a58(r92): [86..87]
 a59(r90 [0]): [88..107]
 a59(r90 [1]): [88..107]
 a60(r89): [88..89]
 a61(r124): [90..91]
 a62(r140): [92..93]
 a63(r123): [92..93]
 a64(r139): [94..95]
 a65(r88): [96..97]
 a66(r138): [98..99]
 a67(r137): [100..101]
 a68(r121): [100..101]
 a69(r136): [102..103]
 a70(r87): [104..105]
 a71(r135): [106..107]
  regions=1, blocks=18, points=108
    allocnos=72 (big 1), copies=0, conflicts=0, ranges=78
Disposition:
   70:r87  l0     0   65:r88  l0     1   60:r89  l0     1   59:r90  l0    38
   58:r92  l0     2   49:r93  l0     4   48:r94  l0     4   46:r95  l0    37
   45:r96  l0     4   44:r97  l0    37   40:r98  l0    37   39:r99  l0     4
   38:r100 l0     4   35:r101 l0     4   34:r102 l0     4   32:r103 l0    37
   31:r104 l0     4   29:r105 l0    37   26:r106 l0     4   25:r107 l0     4
   23:r108 l0    37   22:r109 l0     4   21:r110 l0    37   16:r111 l0    37
   15:r112 l0     4   14:r113 l0     4   10:r114 l0     4    9:r115 l0     4
    7:r116 l0    37    6:r117 l0     4    4:r118 l0    37   30:r119 l0    21
    5:r120 l0    21   68:r121 l0     0    0:r122 l0     0   63:r123 l0     1
   61:r124 l0     1    1:r128 l0     1    2:r129 l0     2   55:r130 l0     4
   12:r131 l0     5   52:r132 l0     4   37:r133 l0    22   13:r134 l0    22
   71:r135 l0     0   69:r136 l0     0   67:r137 l0     1   66:r138 l0     1
   64:r139 l0     1   62:r140 l0     2   57:r141 l0     2   56:r142 l0     4
   54:r143 l0     4   53:r144 l0     4   51:r145 l0     4   50:r146 l0     4
   47:r147 l0     4   43:r148 l0     4   42:r149 l0     4   41:r150 l0     4
   36:r151 l0     4   33:r152 l0     4   28:r153 l0     4   27:r154 l0     4
   24:r155 l0     4   20:r156 l0     4   19:r157 l0     4   18:r159 l0     4
   17:r160 l0     4   11:r161 l0     4    8:r162 l0     4    3:r163 l0     4
+++Costs: overall 8000, reg 8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8]
;;  ref usage 	r0={1d} r1={1d,1u} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,17u} r7={1d,17u} r16={1d,16u} r17={30d,13u} r20={1d,52u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={2d,2u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={2d,4u} r120={2d,4u} r121={1d,2u} r122={1d,6u} r123={1d,2u} r124={1d,1u} r128={1d,4u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,2u} r134={1d,2u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} 
;;    total ref usage 335{124d,211u,0e} in 112{112 regular + 0 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 90
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 90
;; lr  def 	 17 [flags] 87 88 89 92 121 122 123 124 128 135 136 137 138 139 140
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])
        (reg:DI 5 di [ fld ])) "BOUND.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ fld ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [4 fmin+0 S8 A64])
        (reg:DI 4 si [ fmin ])) "BOUND.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ fmin ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [4 fmax+0 S8 A64])
        (reg:DI 1 dx [ fmax ])) "BOUND.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ fmax ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [5 im+0 S8 A64])
        (reg:DI 2 cx [ im ])) "BOUND.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ im ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [5 jm+0 S8 A64])
        (reg:DI 37 r8 [ jm ])) "BOUND.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ jm ])
        (nil)))
(note 7 6 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 7 13 2 (set (reg/f:DI 135)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [5 im+0 S8 A64])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 135) [1 *im_41(D)+0 S4 A32])) "BOUND.f":1 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135)
        (nil)))
(insn 14 13 15 2 (set (reg:DI 136)
        (sign_extend:DI (reg:SI 87 [ _1 ]))) "BOUND.f":1 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
        (nil)))
(insn 15 14 16 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 ubound.0+0 S8 A64])
        (reg:DI 136)) "BOUND.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 136)
        (nil)))
(insn 16 15 18 2 (set (reg:DI 121 [ stride.2_43 ])
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 ubound.0+0 S8 A64])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 18 16 17 2 (set (reg:DI 137)
        (const_int 0 [0])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 17 18 19 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 121 [ stride.2_43 ])
            (const_int 0 [0]))) "BOUND.f":1 8 {*cmpdi_ccno_1}
     (nil))
(insn 19 17 20 2 (set (reg:DI 122 [ stride.2_44 ])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 121 [ stride.2_43 ])
            (reg:DI 137))) "BOUND.f":1 1003 {*movdicc_noc}
     (expr_list:REG_DEAD (reg:DI 137)
        (expr_list:REG_DEAD (reg:DI 121 [ stride.2_43 ])
            (expr_list:REG_DEAD (reg:CCGOC 17 flags)
                (nil)))))
(insn 20 19 21 2 (set (reg/f:DI 138)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [5 jm+0 S8 A64])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 88 [ _2 ])
        (mem:SI (reg/f:DI 138) [1 *jm_45(D)+0 S4 A32])) "BOUND.f":1 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138)
        (nil)))
(insn 22 21 23 2 (set (reg:DI 139)
        (sign_extend:DI (reg:SI 88 [ _2 ]))) "BOUND.f":1 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
        (nil)))
(insn 23 22 24 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 ubound.1+0 S8 A64])
        (reg:DI 139)) "BOUND.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 139)
        (nil)))
(insn 24 23 26 2 (parallel [
            (set (reg:DI 123 [ size.4_47 ])
                (mult:DI (reg:DI 122 [ stride.2_44 ])
                    (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [2 ubound.1+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":1 349 {*muldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 26 24 25 2 (set (reg:DI 140)
        (const_int 0 [0])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 25 26 27 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 123 [ size.4_47 ])
            (const_int 0 [0]))) "BOUND.f":1 8 {*cmpdi_ccno_1}
     (nil))
(insn 27 25 29 2 (set (reg:DI 124 [ size.4_48 ])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 123 [ size.4_47 ])
            (reg:DI 140))) "BOUND.f":1 1003 {*movdicc_noc}
     (expr_list:REG_DEAD (reg:DI 140)
        (expr_list:REG_DEAD (reg:DI 123 [ size.4_47 ])
            (expr_list:REG_DEAD (reg:CCGOC 17 flags)
                (nil)))))
(insn 29 27 30 2 (set (reg:DI 89 [ size.7_3 ])
        (reg:DI 124 [ size.4_48 ])) "BOUND.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 124 [ size.4_48 ])
        (nil)))
(insn 30 29 31 2 (set (subreg:DI (reg:TI 90 [ _4 ]) 0)
        (reg:DI 89 [ size.7_3 ])) "BOUND.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 89 [ size.7_3 ])
        (nil)))
(insn 31 30 35 2 (set (subreg:DI (reg:TI 90 [ _4 ]) 8)
        (const_int 0 [0])) "BOUND.f":1 85 {*movdi_internal}
     (expr_list:REG_UNUSED (reg:TI 90 [ _4 ])
        (nil)))
(insn 35 31 36 2 (set (reg:DI 128 [ offset.3_52 ])
        (not:DI (reg:DI 122 [ stride.2_44 ]))) "BOUND.f":1 532 {*one_cmpldi2_1}
     (nil))
(insn 36 35 37 2 (set (reg:SI 92 [ _6 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f4161f76870 parallel>)
                    (const_int 4 [0x4]))) [1 parallel.me+0 S4 A32])) "BOUND.f":1 86 {*movsi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 92 [ _6 ])
            (const_int 0 [0]))) "BOUND.f":56 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 92 [ _6 ])
        (nil)))
(jump_insn 38 37 39 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 150)
            (pc))) "BOUND.f":56 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 150)
;;  succ:       3 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 129 141
(note 39 38 40 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 3 (set (reg/f:DI 141)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [5 jm+0 S8 A64])) "BOUND.f":58 85 {*movdi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:SI 129 [ _53 ])
        (mem:SI (reg/f:DI 141) [1 *jm_45(D)+0 S4 A32])) "BOUND.f":58 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 141)
        (nil)))
(insn 42 41 131 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "BOUND.f":58 86 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;;              12 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 129
;; lr  def 	 17 [flags] 130 142
(code_label 131 42 43 4 8 (nil) [1 uses])
(note 43 131 44 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 129 [ _53 ]))) "BOUND.f":58 11 {*cmpsi_1}
     (nil))
(insn 45 44 46 4 (set (reg:QI 142)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "BOUND.f":58 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 46 45 47 4 (set (reg:SI 130 [ _55 ])
        (zero_extend:SI (reg:QI 142))) "BOUND.f":58 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 142)
        (nil)))
(insn 47 46 48 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 130 [ _55 ])
            (const_int 0 [0]))) "BOUND.f":58 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 130 [ _55 ])
        (nil)))
(jump_insn 48 47 49 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 153)
            (pc))) "BOUND.f":58 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 153)
;;  succ:       16
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 131 143
(note 49 48 50 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 5 (set (reg/f:DI 143)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [5 im+0 S8 A64])) "BOUND.f":59 85 {*movdi_internal}
     (nil))
(insn 51 50 52 5 (set (reg:SI 131 [ _56 ])
        (mem:SI (reg/f:DI 143) [1 *im_41(D)+0 S4 A32])) "BOUND.f":59 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 143)
        (nil)))
(insn 52 51 125 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "BOUND.f":59 86 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;;              11 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
;; lr  def 	 17 [flags] 132 144
(code_label 125 52 53 6 7 (nil) [1 uses])
(note 53 125 54 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (reg:SI 131 [ _56 ]))) "BOUND.f":59 11 {*cmpsi_1}
     (nil))
(insn 55 54 56 6 (set (reg:QI 144)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "BOUND.f":59 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 56 55 57 6 (set (reg:SI 132 [ _58 ])
        (zero_extend:SI (reg:QI 144))) "BOUND.f":59 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 144)
        (nil)))
(insn 57 56 58 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 132 [ _58 ])
            (const_int 0 [0]))) "BOUND.f":59 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 132 [ _58 ])
        (nil)))
(jump_insn 58 57 59 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 156)
            (pc))) "BOUND.f":59 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 156)
;;  succ:       17
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128
;; lr  def 	 17 [flags] 93 94 95 96 97 98 99 100 119 133 145 146 147 148 149 150
(note 59 58 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 7 (set (reg/f:DI 145)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [4 fmin+0 S8 A64])) "BOUND.f":60 85 {*movdi_internal}
     (nil))
(insn 61 60 62 7 (set (reg:SF 119 [ M.5_35 ])
        (mem:SF (reg/f:DI 145) [7 *fmin_59(D)+0 S4 A32])) "BOUND.f":60 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 145)
        (nil)))
(insn 62 61 63 7 (set (reg:SI 146)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUND.f":60 86 {*movsi_internal}
     (nil))
(insn 63 62 64 7 (set (reg:DI 93 [ _7 ])
        (sign_extend:DI (reg:SI 146))) "BOUND.f":60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 146)
        (nil)))
(insn 64 63 65 7 (parallel [
            (set (reg:DI 94 [ _8 ])
                (mult:DI (reg:DI 122 [ stride.2_44 ])
                    (reg:DI 93 [ _7 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 93 [ _7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 65 64 66 7 (parallel [
            (set (reg:DI 95 [ _9 ])
                (plus:DI (reg:DI 128 [ offset.3_52 ])
                    (reg:DI 94 [ _8 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 94 [ _8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 66 65 67 7 (set (reg:SI 147)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUND.f":60 86 {*movsi_internal}
     (nil))
(insn 67 66 68 7 (set (reg:DI 96 [ _10 ])
        (sign_extend:DI (reg:SI 147))) "BOUND.f":60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 147)
        (nil)))
(insn 68 67 69 7 (parallel [
            (set (reg:DI 97 [ _11 ])
                (plus:DI (reg:DI 95 [ _9 ])
                    (reg:DI 96 [ _10 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 96 [ _10 ])
        (expr_list:REG_DEAD (reg:DI 95 [ _9 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 69 68 70 7 (set (reg/f:DI 148)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUND.f":60 85 {*movdi_internal}
     (nil))
(insn 70 69 71 7 (set (reg:SF 133 [ _63 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 97 [ _11 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 148)) [7 *fld_62(D) S4 A32])) "BOUND.f":60 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 148)
        (expr_list:REG_DEAD (reg:DI 97 [ _11 ])
            (nil))))
(insn 71 70 72 7 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 133 [ _63 ])
            (reg:SF 119 [ M.5_35 ]))) "BOUND.f":60 53 {*cmpisf}
     (nil))
(insn 72 71 73 7 (set (reg:QI 149)
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUND.f":60 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil)))
(insn 73 72 74 7 (set (reg:SI 98 [ _12 ])
        (zero_extend:SI (reg:QI 149))) "BOUND.f":60 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 149)
        (nil)))
(insn 74 73 75 7 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 119 [ M.5_35 ])
                    (reg:SF 119 [ M.5_35 ]))
            ] UNSPEC_NOTRAP)) "BOUND.f":60 54 {*cmpiusf}
     (nil))
(insn 75 74 76 7 (set (reg:QI 150)
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUND.f":60 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil)))
(insn 76 75 77 7 (set (reg:SI 99 [ _13 ])
        (zero_extend:SI (reg:QI 150))) "BOUND.f":60 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 150)
        (nil)))
(insn 77 76 78 7 (parallel [
            (set (reg:SI 100 [ _14 ])
                (ior:SI (reg:SI 98 [ _12 ])
                    (reg:SI 99 [ _13 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 450 {*iorsi_1}
     (expr_list:REG_DEAD (reg:SI 99 [ _13 ])
        (expr_list:REG_DEAD (reg:SI 98 [ _12 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 78 77 79 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ _14 ])
            (const_int 0 [0]))) "BOUND.f":60 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 100 [ _14 ])
        (nil)))
(jump_insn 79 78 80 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) "BOUND.f":60 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 81)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 122 128 129 131 133

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131 133
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 133
;; lr  def 	 119
(note 80 79 8 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 8 80 81 8 (set (reg:SF 119 [ M.5_35 ])
        (reg:SF 133 [ _63 ])) "BOUND.f":60 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 133 [ _63 ])
        (nil)))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 122 128 129 131

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 122 128 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 122 128
;; lr  def 	 17 [flags] 101 102 103 104 105 106 107 108 109 110 111 112 113 120 134 151 152 153 154 155 156 157 159 160
(code_label 81 8 82 9 5 (nil) [1 uses])
(note 82 81 83 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 9 (set (reg:SI 151)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUND.f":60 86 {*movsi_internal}
     (nil))
(insn 84 83 85 9 (set (reg:DI 101 [ _15 ])
        (sign_extend:DI (reg:SI 151))) "BOUND.f":60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 151)
        (nil)))
(insn 85 84 86 9 (parallel [
            (set (reg:DI 102 [ _16 ])
                (mult:DI (reg:DI 122 [ stride.2_44 ])
                    (reg:DI 101 [ _15 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 101 [ _15 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 86 85 87 9 (parallel [
            (set (reg:DI 103 [ _17 ])
                (plus:DI (reg:DI 128 [ offset.3_52 ])
                    (reg:DI 102 [ _16 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 102 [ _16 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 87 86 88 9 (set (reg:SI 152)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUND.f":60 86 {*movsi_internal}
     (nil))
(insn 88 87 89 9 (set (reg:DI 104 [ _18 ])
        (sign_extend:DI (reg:SI 152))) "BOUND.f":60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 152)
        (nil)))
(insn 89 88 90 9 (parallel [
            (set (reg:DI 105 [ _19 ])
                (plus:DI (reg:DI 103 [ _17 ])
                    (reg:DI 104 [ _18 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 104 [ _18 ])
        (expr_list:REG_DEAD (reg:DI 103 [ _17 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 90 89 91 9 (set (reg/f:DI 153)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUND.f":60 85 {*movdi_internal}
     (nil))
(insn 91 90 92 9 (set (mem:SF (plus:DI (mult:DI (reg:DI 105 [ _19 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 153)) [7 *fld_62(D) S4 A32])
        (reg:SF 119 [ M.5_35 ])) "BOUND.f":60 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 153)
        (expr_list:REG_DEAD (reg:SF 119 [ M.5_35 ])
            (expr_list:REG_DEAD (reg:DI 105 [ _19 ])
                (nil)))))
(insn 92 91 93 9 (set (reg:SI 154)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUND.f":61 86 {*movsi_internal}
     (nil))
(insn 93 92 94 9 (set (reg:DI 106 [ _20 ])
        (sign_extend:DI (reg:SI 154))) "BOUND.f":61 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 154)
        (nil)))
(insn 94 93 95 9 (parallel [
            (set (reg:DI 107 [ _21 ])
                (mult:DI (reg:DI 122 [ stride.2_44 ])
                    (reg:DI 106 [ _20 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 106 [ _20 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 95 94 96 9 (parallel [
            (set (reg:DI 108 [ _22 ])
                (plus:DI (reg:DI 128 [ offset.3_52 ])
                    (reg:DI 107 [ _21 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 107 [ _21 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 96 95 97 9 (set (reg:SI 155)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUND.f":61 86 {*movsi_internal}
     (nil))
(insn 97 96 98 9 (set (reg:DI 109 [ _23 ])
        (sign_extend:DI (reg:SI 155))) "BOUND.f":61 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 155)
        (nil)))
(insn 98 97 99 9 (parallel [
            (set (reg:DI 110 [ _24 ])
                (plus:DI (reg:DI 108 [ _22 ])
                    (reg:DI 109 [ _23 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 109 [ _23 ])
        (expr_list:REG_DEAD (reg:DI 108 [ _22 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 99 98 100 9 (set (reg/f:DI 156)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUND.f":61 85 {*movdi_internal}
     (nil))
(insn 100 99 101 9 (set (reg:SF 120 [ M.6_36 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 110 [ _24 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 156)) [7 *fld_62(D) S4 A32])) "BOUND.f":61 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 156)
        (expr_list:REG_DEAD (reg:DI 110 [ _24 ])
            (nil))))
(insn 101 100 102 9 (set (reg/f:DI 157)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [4 fmax+0 S8 A64])) "BOUND.f":61 85 {*movdi_internal}
     (nil))
(insn 102 101 103 9 (set (reg:SF 134 [ _69 ])
        (mem:SF (reg/f:DI 157) [7 *fmax_68(D)+0 S4 A32])) "BOUND.f":61 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 157)
        (nil)))
(insn 103 102 104 9 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 120 [ M.6_36 ])
            (reg:SF 134 [ _69 ]))) "BOUND.f":61 53 {*cmpisf}
     (nil))
(insn 104 103 105 9 (set (reg:QI 159)
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUND.f":61 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil)))
(insn 105 104 106 9 (set (reg:SI 111 [ _25 ])
        (zero_extend:SI (reg:QI 159))) "BOUND.f":61 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 159)
        (nil)))
(insn 106 105 107 9 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 120 [ M.6_36 ])
                    (reg:SF 120 [ M.6_36 ]))
            ] UNSPEC_NOTRAP)) "BOUND.f":61 54 {*cmpiusf}
     (nil))
(insn 107 106 108 9 (set (reg:QI 160)
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUND.f":61 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil)))
(insn 108 107 109 9 (set (reg:SI 112 [ _26 ])
        (zero_extend:SI (reg:QI 160))) "BOUND.f":61 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 160)
        (nil)))
(insn 109 108 110 9 (parallel [
            (set (reg:SI 113 [ _27 ])
                (ior:SI (reg:SI 111 [ _25 ])
                    (reg:SI 112 [ _26 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 450 {*iorsi_1}
     (expr_list:REG_DEAD (reg:SI 112 [ _26 ])
        (expr_list:REG_DEAD (reg:SI 111 [ _25 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 110 109 111 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 113 [ _27 ])
            (const_int 0 [0]))) "BOUND.f":61 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 113 [ _27 ])
        (nil)))
(jump_insn 111 110 112 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "BOUND.f":61 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 113)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120 122 128 129 131 134

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131 134
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 134
;; lr  def 	 120
(note 112 111 9 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 9 112 113 10 (set (reg:SF 120 [ M.6_36 ])
        (reg:SF 134 [ _69 ])) "BOUND.f":61 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 134 [ _69 ])
        (nil)))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120 122 128 129 131

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 17, flags: (RTL)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120 122 128 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120 122 128
;; lr  def 	 17 [flags] 114 115 116 117 118 161 162 163
(code_label 113 9 114 11 6 (nil) [1 uses])
(note 114 113 115 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 11 (set (reg:SI 161)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUND.f":61 86 {*movsi_internal}
     (nil))
(insn 116 115 117 11 (set (reg:DI 114 [ _28 ])
        (sign_extend:DI (reg:SI 161))) "BOUND.f":61 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 161)
        (nil)))
(insn 117 116 118 11 (parallel [
            (set (reg:DI 115 [ _29 ])
                (mult:DI (reg:DI 122 [ stride.2_44 ])
                    (reg:DI 114 [ _28 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 114 [ _28 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 118 117 119 11 (parallel [
            (set (reg:DI 116 [ _30 ])
                (plus:DI (reg:DI 128 [ offset.3_52 ])
                    (reg:DI 115 [ _29 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 115 [ _29 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 119 118 120 11 (set (reg:SI 162)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUND.f":61 86 {*movsi_internal}
     (nil))
(insn 120 119 121 11 (set (reg:DI 117 [ _31 ])
        (sign_extend:DI (reg:SI 162))) "BOUND.f":61 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 162)
        (nil)))
(insn 121 120 122 11 (parallel [
            (set (reg:DI 118 [ _32 ])
                (plus:DI (reg:DI 116 [ _30 ])
                    (reg:DI 117 [ _31 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 117 [ _31 ])
        (expr_list:REG_DEAD (reg:DI 116 [ _30 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 122 121 123 11 (set (reg/f:DI 163)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUND.f":61 85 {*movdi_internal}
     (nil))
(insn 123 122 124 11 (set (mem:SF (plus:DI (mult:DI (reg:DI 118 [ _32 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 163)) [7 *fld_62(D) S4 A32])
        (reg:SF 120 [ M.6_36 ])) "BOUND.f":61 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 163)
        (expr_list:REG_DEAD (reg:SF 120 [ M.6_36 ])
            (expr_list:REG_DEAD (reg:DI 118 [ _32 ])
                (nil)))))
(insn 124 123 143 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":59 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 143 124 144 11 (set (pc)
        (label_ref 125)) "BOUND.f":59 683 {jump}
     (nil)
 -> 125)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131

(barrier 144 143 156)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 11, next block 12, flags: (RTL)
;;  pred:       6
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 156 144 155 17 12 (nil) [1 uses])
(note 155 156 157 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 157 155 128 17 (const_int 0 [0]) "BOUND.f":61 718 {nop}
     (nil))
;;  succ:       12 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129

;; basic block 12, loop depth 0, maybe hot
;;  prev block 17, next block 16, flags: (RTL)
;;  pred:       17 [always]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 128 157 129 12 4 (nil) [0 uses])
(note 129 128 130 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 145 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":58 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 145 130 146 12 (set (pc)
        (label_ref 131)) "BOUND.f":58 683 {jump}
     (nil)
 -> 131)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129

(barrier 146 145 153)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL)
;;  pred:       4
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 153 146 152 16 11 (nil) [1 uses])
(note 152 153 154 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 154 152 136 16 (const_int 0 [0]) "BOUND.f":59 718 {nop}
     (nil))
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 16, next block 15, flags: (RTL)
;;  pred:       16 [always]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 136 154 137 13 2 (nil) [0 uses])
(note 137 136 142 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 142 137 150 13 (const_int 0 [0]) "BOUND.f":69 718 {nop}
     (nil))
;;  succ:       15 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 13, next block 14, flags: (RTL)
;;  pred:       2
;;              13 [always]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 150 142 149 15 10 (nil) [1 uses])
(note 149 150 151 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 151 149 140 15 (const_int 0 [0]) "BOUND.f":69 718 {nop}
     (nil))
;;  succ:       14 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 15, next block 1, flags: (RTL)
;;  pred:       15 [always]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 140 151 141 14 1 (nil) [0 uses])
(note 141 140 0 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

