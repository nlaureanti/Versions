
;; Function calhpbl (calhpbl_, funcdef_no=0, decl_uid=3769, cgraph_uid=0, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 26 n_edges 34 count 26 (    1)
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 24 25 15 16 17 18 19 23 20 22 21
;;
;; Loop 1
;;  header 3, latch 20
;;  depth 1, outer 0
;;  nodes: 3 20 23 5 4 19 17 18 16 15 25 24 7 6 14 13 10 12 11 9 8
;;
;; Loop 2
;;  header 5, latch 19
;;  depth 2, outer 1
;;  nodes: 5 19 17 18 16 15 25 24 7 6 14 13 10 12 11 9 8
;;
;; Loop 3
;;  header 7, latch 14
;;  depth 3, outer 2
;;  nodes: 7 14 13 10 12 11 9 8
;; 2 succs { 3 }
;; 3 succs { 22 4 }
;; 4 succs { 5 }
;; 5 succs { 23 6 }
;; 6 succs { 7 }
;; 7 succs { 24 8 }
;; 8 succs { 9 11 }
;; 9 succs { 10 11 }
;; 10 succs { 14 }
;; 11 succs { 12 13 }
;; 12 succs { 14 }
;; 13 succs { 25 14 }
;; 14 succs { 7 }
;; 24 succs { 15 }
;; 25 succs { 15 }
;; 15 succs { 16 17 }
;; 16 succs { 17 }
;; 17 succs { 18 19 }
;; 18 succs { 19 }
;; 19 succs { 5 }
;; 23 succs { 20 }
;; 20 succs { 3 }
;; 22 succs { 21 }
;; 21 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a62 (r195,l0) best SSE_REGS, allocno SSE_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a94 (r183,l0) best SSE_REGS, allocno SSE_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a9 (r164,l0) best SSE_REGS, allocno SSE_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a2 (r158,l0) best SSE_REGS, allocno SSE_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a25 (r144,l0) best SSE_REGS, allocno SSE_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a26 (r138,l0) best SSE_REGS, allocno SSE_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a27 (r128,l0) best SSE_REGS, allocno SSE_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a61 (r119,l0) best SSE_REGS, allocno SSE_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a79 (r109,l0) best SSE_REGS, allocno SSE_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a93 (r100,l0) best SSE_REGS, allocno SSE_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a2(r158,l0) costs: AREG:45000 DREG:45000 CREG:45000 BREG:45000 SIREG:45000 DIREG:45000 AD_REGS:45000 CLOBBERED_REGS:45000 Q_REGS:45000 NON_Q_REGS:45000 TLS_GOTBASE_REGS:45000 GENERAL_REGS:45000 FP_TOP_REG:69000 FP_SECOND_REG:69000 FLOAT_REGS:69000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:69000 FP_TOP_SSE_REGS:69000 FP_SECOND_SSE_REGS:69000 FLOAT_SSE_REGS:69000 FLOAT_INT_REGS:69000 INT_SSE_REGS:69000 FLOAT_INT_SSE_REGS:69000 ALL_REGS:69000 MEM:29000
  a3(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a4(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a6(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a8(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a9(r164,l0) costs: AREG:17000 DREG:17000 CREG:17000 BREG:17000 SIREG:17000 DIREG:17000 AD_REGS:17000 CLOBBERED_REGS:17000 Q_REGS:17000 NON_Q_REGS:17000 TLS_GOTBASE_REGS:17000 GENERAL_REGS:17000 FP_TOP_REG:31000 FP_SECOND_REG:31000 FLOAT_REGS:31000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31000 FP_TOP_SSE_REGS:31000 FP_SECOND_SSE_REGS:31000 FLOAT_SSE_REGS:31000 FLOAT_INT_REGS:31000 INT_SSE_REGS:31000 FLOAT_INT_SSE_REGS:31000 ALL_REGS:31000 MEM:13000
  a10(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a11(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a12(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a13(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a14(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a15(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a17(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a18(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a19(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a20(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a21(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a22(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a23(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a25(r144,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a26(r138,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a27(r128,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a28(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a29(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a30(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a31(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a32(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a33(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a34(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a35(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a36(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a37(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a38(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a39(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a40(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a41(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a42(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a43(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a44(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a45(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a46(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a47(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a48(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a49(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a50(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a51(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a52(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a53(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a54(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a55(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a56(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a57(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a58(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a59(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a60(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a61(r119,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a62(r195,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a63(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a64(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a65(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a66(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a67(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a68(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a69(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a70(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a71(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a72(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a73(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a74(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a75(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a76(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a77(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a78(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a79(r109,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a80(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a81(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a82(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a83(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a84(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a85(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a86(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a87(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a88(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a89(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a90(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a91(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a92(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a93(r100,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a94(r183,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a95(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a96(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a97(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a98(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a99(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a100(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a101(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a102(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a103(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a104(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a105(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a106(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a107(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a108(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a109(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a110(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a111(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a112(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a113(r173,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:30000 NO_REX_SSE_REGS:30000 SSE_REGS:30000 MMX_REGS:40000 INT_SSE_REGS:40000 ALL_REGS:532000 MEM:18000
  a114(r174,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:23000 NO_REX_SSE_REGS:23000 SSE_REGS:23000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a115(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a116(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a117(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a118(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a119(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a120(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a121(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a122(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a123(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a124(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a125(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a126(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a127(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a128(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a129(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000

   Insn 240(l0): point = 0
   Insn 254(l0): point = 3
   Insn 13(l0): point = 6
   Insn 12(l0): point = 8
   Insn 11(l0): point = 10
   Insn 10(l0): point = 12
   Insn 9(l0): point = 14
   Insn 250(l0): point = 17
   Insn 221(l0): point = 19
   Insn 257(l0): point = 22
   Insn 21(l0): point = 25
   Insn 20(l0): point = 27
   Insn 19(l0): point = 29
   Insn 18(l0): point = 31
   Insn 17(l0): point = 33
   Insn 15(l0): point = 36
   Insn 248(l0): point = 39
   Insn 215(l0): point = 41
   Insn 214(l0): point = 43
   Insn 213(l0): point = 45
   Insn 212(l0): point = 47
   Insn 211(l0): point = 49
   Insn 210(l0): point = 51
   Insn 209(l0): point = 53
   Insn 208(l0): point = 55
   Insn 207(l0): point = 57
   Insn 206(l0): point = 59
   Insn 202(l0): point = 62
   Insn 201(l0): point = 64
   Insn 200(l0): point = 66
   Insn 199(l0): point = 68
   Insn 198(l0): point = 70
   Insn 197(l0): point = 72
   Insn 196(l0): point = 74
   Insn 195(l0): point = 76
   Insn 194(l0): point = 78
   Insn 193(l0): point = 80
   Insn 192(l0): point = 82
   Insn 191(l0): point = 84
   Insn 190(l0): point = 86
   Insn 189(l0): point = 88
   Insn 188(l0): point = 90
   Insn 187(l0): point = 92
   Insn 186(l0): point = 94
   Insn 185(l0): point = 96
   Insn 184(l0): point = 98
   Insn 183(l0): point = 100
   Insn 182(l0): point = 102
   Insn 181(l0): point = 104
   Insn 180(l0): point = 106
   Insn 179(l0): point = 108
   Insn 178(l0): point = 110
   Insn 177(l0): point = 112
   Insn 176(l0): point = 114
   Insn 175(l0): point = 116
   Insn 174(l0): point = 118
   Insn 173(l0): point = 120
   Insn 172(l0): point = 122
   Insn 171(l0): point = 124
   Insn 170(l0): point = 126
   Insn 169(l0): point = 128
   Insn 168(l0): point = 130
   Insn 167(l0): point = 132
   Insn 166(l0): point = 134
   Insn 165(l0): point = 136
   Insn 164(l0): point = 138
   Insn 163(l0): point = 140
   Insn 162(l0): point = 142
   Insn 161(l0): point = 144
   Insn 160(l0): point = 146
   Insn 159(l0): point = 148
   Insn 158(l0): point = 150
   Insn 157(l0): point = 152
   Insn 156(l0): point = 154
   Insn 155(l0): point = 156
   Insn 154(l0): point = 158
   Insn 153(l0): point = 160
   Insn 152(l0): point = 162
   Insn 151(l0): point = 164
   Insn 150(l0): point = 166
   Insn 149(l0): point = 168
   Insn 148(l0): point = 170
   Insn 147(l0): point = 172
   Insn 146(l0): point = 174
   Insn 145(l0): point = 176
   Insn 142(l0): point = 179
   Insn 137(l0): point = 182
   Insn 136(l0): point = 184
   Insn 135(l0): point = 186
   Insn 134(l0): point = 188
   Insn 133(l0): point = 190
   Insn 132(l0): point = 192
   Insn 131(l0): point = 194
   Insn 130(l0): point = 196
   Insn 129(l0): point = 198
   Insn 128(l0): point = 200
   Insn 127(l0): point = 202
   Insn 126(l0): point = 204
   Insn 125(l0): point = 206
   Insn 124(l0): point = 208
   Insn 123(l0): point = 210
   Insn 122(l0): point = 212
   Insn 121(l0): point = 214
   Insn 120(l0): point = 216
   Insn 265(l0): point = 219
   Insn 261(l0): point = 222
   Insn 260(l0): point = 224
   Insn 49(l0): point = 227
   Insn 48(l0): point = 229
   Insn 47(l0): point = 231
   Insn 46(l0): point = 233
   Insn 45(l0): point = 235
   Insn 43(l0): point = 238
   Insn 42(l0): point = 240
   Insn 41(l0): point = 242
   Insn 40(l0): point = 244
   Insn 39(l0): point = 246
   Insn 38(l0): point = 248
   Insn 37(l0): point = 250
   Insn 36(l0): point = 252
   Insn 35(l0): point = 254
   Insn 34(l0): point = 256
   Insn 33(l0): point = 258
   Insn 32(l0): point = 260
   Insn 31(l0): point = 262
   Insn 30(l0): point = 264
   Insn 29(l0): point = 266
   Insn 28(l0): point = 268
   Insn 27(l0): point = 270
   Insn 26(l0): point = 272
   Insn 25(l0): point = 274
   Insn 24(l0): point = 276
   Insn 23(l0): point = 278
   Insn 246(l0): point = 281
   Insn 114(l0): point = 283
   Insn 108(l0): point = 286
   Insn 107(l0): point = 288
   Insn 241(l0): point = 291
   Insn 75(l0): point = 293
   Insn 244(l0): point = 296
   Insn 102(l0): point = 298
   Insn 101(l0): point = 300
   Insn 100(l0): point = 302
   Insn 95(l0): point = 305
   Insn 94(l0): point = 307
   Insn 93(l0): point = 309
   Insn 92(l0): point = 311
   Insn 91(l0): point = 313
   Insn 90(l0): point = 315
   Insn 89(l0): point = 317
   Insn 88(l0): point = 319
   Insn 87(l0): point = 321
   Insn 86(l0): point = 323
   Insn 85(l0): point = 325
   Insn 84(l0): point = 327
   Insn 83(l0): point = 329
   Insn 82(l0): point = 331
   Insn 81(l0): point = 333
   Insn 80(l0): point = 335
   Insn 73(l0): point = 338
   Insn 72(l0): point = 340
   Insn 67(l0): point = 343
   Insn 66(l0): point = 345
   Insn 65(l0): point = 347
   Insn 64(l0): point = 349
   Insn 63(l0): point = 351
   Insn 62(l0): point = 353
   Insn 61(l0): point = 355
   Insn 60(l0): point = 357
   Insn 59(l0): point = 359
   Insn 58(l0): point = 361
   Insn 57(l0): point = 363
   Insn 56(l0): point = 365
   Insn 55(l0): point = 367
   Insn 54(l0): point = 369
   Insn 53(l0): point = 371
   Insn 52(l0): point = 373
   Insn 51(l0): point = 375
   Insn 4(l0): point = 378
   Insn 7(l0): point = 381
   Insn 2(l0): point = 383
 a0(r216): [44..45]
 a1(r157): [44..47]
 a2(r158): [378..378] [44..98]
 a3(r156): [48..49]
 a4(r155): [50..51]
 a5(r154): [50..55]
 a6(r215): [52..53]
 a7(r153): [56..57]
 a8(r214): [58..59]
 a9(r164): [379..380] [62..80]
 a10(r152): [65..66]
 a11(r151): [67..68]
 a12(r150): [67..74]
 a13(r213): [69..70]
 a14(r212): [75..76]
 a15(r211): [81..82]
 a16(r149): [81..84]
 a17(r148): [85..86]
 a18(r147): [87..88]
 a19(r146): [87..92]
 a20(r210): [89..90]
 a21(r145): [93..94]
 a22(r209): [95..96]
 a23(r208): [101..102]
 a24(r143): [101..106]
 a25(r144): [101..104]
 a26(r138): [105..120]
 a27(r128): [105..150]
 a28(r142): [107..108]
 a29(r141): [109..110]
 a30(r140): [109..114]
 a31(r207): [111..112]
 a32(r139): [115..116]
 a33(r206): [117..118]
 a34(r204): [121..124]
 a35(r205): [121..122]
 a36(r137): [123..126]
 a37(r136): [127..128]
 a38(r135): [129..130]
 a39(r134): [129..134]
 a40(r203): [131..132]
 a41(r133): [135..136]
 a42(r131): [135..142]
 a43(r132): [137..138]
 a44(r202): [139..140]
 a45(r130): [143..144]
 a46(r129): [145..146]
 a47(r201): [147..148]
 a48(r199): [151..154]
 a49(r200): [151..152]
 a50(r127): [153..156]
 a51(r126): [157..158]
 a52(r125): [159..160]
 a53(r124): [159..164]
 a54(r198): [161..162]
 a55(r123): [165..166]
 a56(r121): [165..172]
 a57(r122): [167..168]
 a58(r197): [169..170]
 a59(r120): [173..174]
 a60(r196): [175..176]
 a61(r119): [185..188]
 a62(r195): [185..186]
 a63(r193): [189..192]
 a64(r194): [189..190]
 a65(r118): [191..194]
 a66(r117): [195..196]
 a67(r116): [197..198]
 a68(r115): [197..202]
 a69(r192): [199..200]
 a70(r114): [203..204]
 a71(r112): [203..210]
 a72(r113): [205..206]
 a73(r191): [207..208]
 a74(r111): [211..212]
 a75(r110): [213..214]
 a76(r190): [215..216]
 a77(r162): [281..377] [227..240]
 a78(r189): [301..302]
 a79(r109): [308..309]
 a80(r187): [310..313]
 a81(r188): [310..311]
 a82(r108): [312..315]
 a83(r107): [316..317]
 a84(r106): [318..319]
 a85(r105): [318..323]
 a86(r186): [320..321]
 a87(r104): [324..325]
 a88(r102): [324..331]
 a89(r103): [326..327]
 a90(r185): [328..329]
 a91(r101): [332..333]
 a92(r184): [334..335]
 a93(r100): [346..349]
 a94(r183): [346..347]
 a95(r181): [350..353]
 a96(r182): [350..351]
 a97(r99): [352..355]
 a98(r98): [356..357]
 a99(r97): [358..359]
 a100(r96): [358..363]
 a101(r180): [360..361]
 a102(r95): [364..365]
 a103(r93): [364..371]
 a104(r94): [366..367]
 a105(r179): [368..369]
 a106(r92): [372..373]
 a107(r178): [374..375]
 a108(r163): [230..231]
 a109(r177): [232..233]
 a110(r161): [239..250]
 a111(r176): [241..242]
 a112(r175): [243..244]
 a113(r173): [245..248]
 a114(r174): [245..246]
 a115(r172): [255..256]
 a116(r171): [259..260]
 a117(r169): [261..264]
 a118(r170): [261..262]
 a119(r91): [263..266]
 a120(r90): [267..268]
 a121(r89): [269..270]
 a122(r88): [269..274]
 a123(r168): [271..272]
 a124(r87): [275..276]
 a125(r167): [277..278]
 a126(r160): [28..29]
 a127(r166): [30..31]
 a128(r159): [9..10]
 a129(r165): [11..12]
Compressing live ranges: from 386 to 199 - 51%
Ranges after the compression:
 a0(r216): [8..9]
 a1(r157): [8..9]
 a2(r158): [196..196] [8..39]
 a3(r156): [10..11]
 a4(r155): [12..13]
 a5(r154): [12..15]
 a6(r215): [14..15]
 a7(r153): [16..17]
 a8(r214): [18..19]
 a9(r164): [197..198] [20..27]
 a10(r152): [20..21]
 a11(r151): [22..23]
 a12(r150): [22..25]
 a13(r213): [24..25]
 a14(r212): [26..27]
 a15(r211): [28..29]
 a16(r149): [28..29]
 a17(r148): [30..31]
 a18(r147): [32..33]
 a19(r146): [32..35]
 a20(r210): [34..35]
 a21(r145): [36..37]
 a22(r209): [38..39]
 a23(r208): [40..41]
 a24(r143): [40..43]
 a25(r144): [40..41]
 a26(r138): [42..53]
 a27(r128): [42..75]
 a28(r142): [44..45]
 a29(r141): [46..47]
 a30(r140): [46..49]
 a31(r207): [48..49]
 a32(r139): [50..51]
 a33(r206): [52..53]
 a34(r204): [54..57]
 a35(r205): [54..55]
 a36(r137): [56..57]
 a37(r136): [58..59]
 a38(r135): [60..61]
 a39(r134): [60..63]
 a40(r203): [62..63]
 a41(r133): [64..65]
 a42(r131): [64..69]
 a43(r132): [66..67]
 a44(r202): [68..69]
 a45(r130): [70..71]
 a46(r129): [72..73]
 a47(r201): [74..75]
 a48(r199): [76..79]
 a49(r200): [76..77]
 a50(r127): [78..79]
 a51(r126): [80..81]
 a52(r125): [82..83]
 a53(r124): [82..85]
 a54(r198): [84..85]
 a55(r123): [86..87]
 a56(r121): [86..91]
 a57(r122): [88..89]
 a58(r197): [90..91]
 a59(r120): [92..93]
 a60(r196): [94..95]
 a61(r119): [96..97]
 a62(r195): [96..97]
 a63(r193): [98..101]
 a64(r194): [98..99]
 a65(r118): [100..101]
 a66(r117): [102..103]
 a67(r116): [104..105]
 a68(r115): [104..107]
 a69(r192): [106..107]
 a70(r114): [108..109]
 a71(r112): [108..113]
 a72(r113): [110..111]
 a73(r191): [112..113]
 a74(r111): [114..115]
 a75(r110): [116..117]
 a76(r190): [118..119]
 a77(r162): [150..195] [120..125]
 a78(r189): [150..151]
 a79(r109): [152..153]
 a80(r187): [154..157]
 a81(r188): [154..155]
 a82(r108): [156..157]
 a83(r107): [158..159]
 a84(r106): [160..161]
 a85(r105): [160..163]
 a86(r186): [162..163]
 a87(r104): [164..165]
 a88(r102): [164..169]
 a89(r103): [166..167]
 a90(r185): [168..169]
 a91(r101): [170..171]
 a92(r184): [172..173]
 a93(r100): [174..175]
 a94(r183): [174..175]
 a95(r181): [176..179]
 a96(r182): [176..177]
 a97(r99): [178..179]
 a98(r98): [180..181]
 a99(r97): [182..183]
 a100(r96): [182..185]
 a101(r180): [184..185]
 a102(r95): [186..187]
 a103(r93): [186..191]
 a104(r94): [188..189]
 a105(r179): [190..191]
 a106(r92): [192..193]
 a107(r178): [194..195]
 a108(r163): [120..121]
 a109(r177): [122..123]
 a110(r161): [124..131]
 a111(r176): [126..127]
 a112(r175): [128..129]
 a113(r173): [130..131]
 a114(r174): [130..131]
 a115(r172): [132..133]
 a116(r171): [134..135]
 a117(r169): [136..139]
 a118(r170): [136..137]
 a119(r91): [138..139]
 a120(r90): [140..141]
 a121(r89): [142..143]
 a122(r88): [142..145]
 a123(r168): [144..145]
 a124(r87): [146..147]
 a125(r167): [148..149]
 a126(r160): [4..5]
 a127(r166): [6..7]
 a128(r159): [0..1]
 a129(r165): [2..3]
  regions=1, blocks=26, points=199
    allocnos=130 (big 0), copies=0, conflicts=0, ranges=133
Disposition:
  124:r87  l0     0  122:r88  l0     1  121:r89  l0     0  120:r90  l0     0
  119:r91  l0     1  106:r92  l0     0  103:r93  l0     1  104:r94  l0     0
  102:r95  l0     0  100:r96  l0     1   99:r97  l0     0   98:r98  l0     0
   97:r99  l0     1   93:r100 l0    22   91:r101 l0     0   88:r102 l0     1
   89:r103 l0     0   87:r104 l0     0   85:r105 l0     1   84:r106 l0     0
   83:r107 l0     0   82:r108 l0     1   79:r109 l0    21   75:r110 l0     0
   74:r111 l0     0   71:r112 l0     1   72:r113 l0     0   70:r114 l0     0
   68:r115 l0     1   67:r116 l0     0   66:r117 l0     0   65:r118 l0     1
   61:r119 l0    22   59:r120 l0     0   56:r121 l0     1   57:r122 l0     0
   55:r123 l0     0   53:r124 l0     1   52:r125 l0     0   51:r126 l0     0
   50:r127 l0     1   27:r128 l0    21   46:r129 l0     0   45:r130 l0     0
   42:r131 l0     1   43:r132 l0     0   41:r133 l0     0   39:r134 l0     1
   38:r135 l0     0   37:r136 l0     0   36:r137 l0     1   26:r138 l0    22
   32:r139 l0     0   30:r140 l0     1   29:r141 l0     0   28:r142 l0     0
   24:r143 l0     1   25:r144 l0    21   21:r145 l0     0   19:r146 l0     1
   18:r147 l0     0   17:r148 l0     0   16:r149 l0     1   12:r150 l0     1
   11:r151 l0     0   10:r152 l0     0    7:r153 l0     0    5:r154 l0     1
    4:r155 l0     0    3:r156 l0     0    1:r157 l0     1    2:r158 l0    21
  128:r159 l0     0  126:r160 l0     0  110:r161 l0     1   77:r162 l0     2
  108:r163 l0     0    9:r164 l0    22  129:r165 l0     0  127:r166 l0     0
  125:r167 l0     0  123:r168 l0     0  117:r169 l0     0  118:r170 l0     1
  116:r171 l0     0  115:r172 l0     0  113:r173 l0     0  114:r174 l0     2
  112:r175 l0     0  111:r176 l0     0  109:r177 l0     0  107:r178 l0     0
  105:r179 l0     0  101:r180 l0     0   95:r181 l0     0   96:r182 l0     1
   94:r183 l0    21   92:r184 l0     0   90:r185 l0     0   86:r186 l0     0
   80:r187 l0     0   81:r188 l0     1   78:r189 l0     0   76:r190 l0     0
   73:r191 l0     0   69:r192 l0     0   63:r193 l0     0   64:r194 l0     1
   62:r195 l0    21   60:r196 l0     0   58:r197 l0     0   54:r198 l0     0
   48:r199 l0     0   49:r200 l0     1   47:r201 l0     0   44:r202 l0     0
   40:r203 l0     0   34:r204 l0     0   35:r205 l0     1   33:r206 l0     0
   31:r207 l0     0   23:r208 l0     0   22:r209 l0     0   20:r210 l0     0
   15:r211 l0     0   14:r212 l0     0   13:r213 l0     0    8:r214 l0     0
    6:r215 l0     0    0:r216 l0     0
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


calhpbl

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,25u} r7={1d,25u} r16={1d,24u} r17={68d,14u} r20={1d,79u,2e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={2d,4u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,2u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,2u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} 
;;    total ref usage 523{218d,303u,2e} in 181{181 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 hpbl+0 S8 A64])
        (reg:DI 5 di [ hpbl ])) "CALHPBL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ hpbl ])
        (nil)))
(note 3 2 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 3 222 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "CALHPBL.f":40 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;;              20 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 159 165
(code_label 222 7 8 3 15 (nil) [1 uses])
(note 8 222 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "CALHPBL.f":40 11 {*cmpsi_1}
     (nil))
(insn 10 9 11 3 (set (reg:QI 165)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALHPBL.f":40 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 11 10 12 3 (set (reg:SI 159 [ _85 ])
        (zero_extend:SI (reg:QI 165))) "CALHPBL.f":40 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 165)
        (nil)))
(insn 12 11 13 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 159 [ _85 ])
            (const_int 0 [0]))) "CALHPBL.f":40 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 159 [ _85 ])
        (nil)))
(jump_insn 13 12 14 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 253)
            (pc))) "CALHPBL.f":40 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 253)
;;  succ:       22
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 216 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALHPBL.f":41 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              19 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 166
(code_label 216 15 16 5 14 (nil) [1 uses])
(note 16 216 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALHPBL.f":41 11 {*cmpsi_1}
     (nil))
(insn 18 17 19 5 (set (reg:QI 166)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALHPBL.f":41 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 19 18 20 5 (set (reg:SI 160 [ _87 ])
        (zero_extend:SI (reg:QI 166))) "CALHPBL.f":41 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 166)
        (nil)))
(insn 20 19 21 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 160 [ _87 ])
            (const_int 0 [0]))) "CALHPBL.f":41 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 160 [ _87 ])
        (nil)))
(jump_insn 21 20 22 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 256)
            (pc))) "CALHPBL.f":41 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 256)
;;  succ:       23
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 161 162 167 168 169 170 171 172 173 174 175 176
(note 22 21 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 6 (set (reg:SI 167)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":43 86 {*movsi_internal}
     (nil))
(insn 24 23 25 6 (set (reg:DI 87 [ _1 ])
        (sign_extend:DI (reg:SI 167))) "CALHPBL.f":43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 167)
        (nil)))
(insn 25 24 26 6 (parallel [
            (set (reg:DI 88 [ _2 ])
                (mult:DI (reg:DI 87 [ _1 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":43 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 87 [ _1 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 26 25 27 6 (set (reg:SI 168)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":43 86 {*movsi_internal}
     (nil))
(insn 27 26 28 6 (set (reg:DI 89 [ _3 ])
        (sign_extend:DI (reg:SI 168))) "CALHPBL.f":43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 168)
        (nil)))
(insn 28 27 29 6 (parallel [
            (set (reg:DI 90 [ _4 ])
                (plus:DI (reg:DI 88 [ _2 ])
                    (reg:DI 89 [ _3 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":43 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 89 [ _3 ])
        (expr_list:REG_DEAD (reg:DI 88 [ _2 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 29 28 30 6 (parallel [
            (set (reg:DI 91 [ _5 ])
                (plus:DI (reg:DI 90 [ _4 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":43 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 90 [ _4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 30 29 31 6 (set (reg/f:DI 169)
        (symbol_ref:DI ("loops_") [flags 0x202]  <var_decl 0x7f59e6831630 loops>)) "CALHPBL.f":43 85 {*movdi_internal}
     (nil))
(insn 31 30 32 6 (parallel [
            (set (reg:DI 170)
                (plus:DI (reg:DI 91 [ _5 ])
                    (const_int 2420 [0x974])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":43 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 91 [ _5 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 32 31 33 6 (set (reg:SI 171)
        (mem:SI (plus:DI (mult:DI (reg:DI 170)
                    (const_int 4 [0x4]))
                (reg/f:DI 169)) [1 loops.lmh S4 A32])) "CALHPBL.f":43 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 170)
        (expr_list:REG_DEAD (reg/f:DI 169)
            (nil))))
(insn 33 32 34 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])
        (reg:SI 171)) "CALHPBL.f":43 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 171)
        (nil)))
(insn 34 33 35 6 (set (reg:SI 172)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])) "CALHPBL.f":44 86 {*movsi_internal}
     (nil))
(insn 35 34 36 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 lpbl+0 S4 A32])
        (reg:SI 172)) "CALHPBL.f":44 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 172)
        (nil)))
(insn 36 35 37 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [1 nepsq2+0 S4 A32])
        (const_int 0 [0])) "CALHPBL.f":47 86 {*movsi_internal}
     (nil))
(insn 37 36 38 6 (set (reg:SI 161 [ _91 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])) "CALHPBL.f":48 86 {*movsi_internal}
     (nil))
(insn 38 37 39 6 (set (reg:SI 173)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])) "CALHPBL.f":48 86 {*movsi_internal}
     (nil))
(insn 39 38 40 6 (parallel [
            (set (reg:SI 174)
                (lshiftrt:SI (reg:SI 173)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":48 587 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 40 39 41 6 (parallel [
            (set (reg:SI 175)
                (plus:SI (reg:SI 174)
                    (reg:SI 173)))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":48 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 174)
        (expr_list:REG_DEAD (reg:SI 173)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 41 40 42 6 (parallel [
            (set (reg:SI 176)
                (ashiftrt:SI (reg:SI 175)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":48 588 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 175)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 42 41 43 6 (set (reg:SI 162 [ _92 ])
        (reg:SI 176)) "CALHPBL.f":48 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 176)
        (nil)))
(insn 43 42 115 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
        (reg:SI 161 [ _91 ])) "CALHPBL.f":48 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 161 [ _91 ])
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;;              14 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  def 	 17 [flags] 163 177
(code_label 115 43 44 7 10 (nil) [1 uses])
(note 44 115 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (reg:SI 162 [ _92 ]))) "CALHPBL.f":48 11 {*cmpsi_1}
     (nil))
(insn 46 45 47 7 (set (reg:QI 177)
        (lt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALHPBL.f":48 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 47 46 48 7 (set (reg:SI 163 [ _94 ])
        (zero_extend:SI (reg:QI 177))) "CALHPBL.f":48 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 177)
        (nil)))
(insn 48 47 49 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 163 [ _94 ])
            (const_int 0 [0]))) "CALHPBL.f":48 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 163 [ _94 ])
        (nil)))
(jump_insn 49 48 50 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 259)
            (pc))) "CALHPBL.f":48 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 259)
;;  succ:       24
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 95 96 97 98 99 100 178 179 180 181 182 183
(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 8 (set (reg:SI 178)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALHPBL.f":49 86 {*movsi_internal}
     (nil))
(insn 52 51 53 8 (set (reg:DI 92 [ _6 ])
        (sign_extend:DI (reg:SI 178))) "CALHPBL.f":49 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 178)
        (nil)))
(insn 53 52 54 8 (parallel [
            (set (reg:DI 93 [ _7 ])
                (mult:DI (reg:DI 92 [ _6 ])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":49 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 92 [ _6 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 54 53 55 8 (set (reg:SI 179)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":49 86 {*movsi_internal}
     (nil))
(insn 55 54 56 8 (set (reg:DI 94 [ _8 ])
        (sign_extend:DI (reg:SI 179))) "CALHPBL.f":49 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 179)
        (nil)))
(insn 56 55 57 8 (parallel [
            (set (reg:DI 95 [ _9 ])
                (mult:DI (reg:DI 94 [ _8 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":49 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 94 [ _8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 57 56 58 8 (parallel [
            (set (reg:DI 96 [ _10 ])
                (plus:DI (reg:DI 93 [ _7 ])
                    (reg:DI 95 [ _9 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":49 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 95 [ _9 ])
        (expr_list:REG_DEAD (reg:DI 93 [ _7 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 58 57 59 8 (set (reg:SI 180)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":49 86 {*movsi_internal}
     (nil))
(insn 59 58 60 8 (set (reg:DI 97 [ _11 ])
        (sign_extend:DI (reg:SI 180))) "CALHPBL.f":49 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 180)
        (nil)))
(insn 60 59 61 8 (parallel [
            (set (reg:DI 98 [ _12 ])
                (plus:DI (reg:DI 96 [ _10 ])
                    (reg:DI 97 [ _11 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":49 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 97 [ _11 ])
        (expr_list:REG_DEAD (reg:DI 96 [ _10 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 61 60 62 8 (parallel [
            (set (reg:DI 99 [ _13 ])
                (plus:DI (reg:DI 98 [ _12 ])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":49 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 98 [ _12 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 62 61 63 8 (set (reg/f:DI 181)
        (symbol_ref:DI ("pvrbls_") [flags 0x202]  <var_decl 0x7f59e6835360 pvrbls>)) "CALHPBL.f":49 85 {*movdi_internal}
     (nil))
(insn 63 62 64 8 (parallel [
            (set (reg:DI 182)
                (plus:DI (reg:DI 99 [ _13 ])
                    (const_int 562989 [0x8972d])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":49 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 99 [ _13 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 64 63 65 8 (set (reg:SF 100 [ _14 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 182)
                    (const_int 4 [0x4]))
                (reg/f:DI 181)) [5 pvrbls.q2 S4 A32])) "CALHPBL.f":49 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:DI 182)
        (expr_list:REG_DEAD (reg/f:DI 181)
            (nil))))
(insn 65 64 66 8 (set (reg:SF 183)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALHPBL.f":49 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.211999952793121337890625e-1 [0x0.f837b4p-3])
        (nil)))
(insn 66 65 67 8 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 183)
            (reg:SF 100 [ _14 ]))) "CALHPBL.f":49 53 {*cmpisf}
     (expr_list:REG_DEAD (reg:SF 183)
        (expr_list:REG_DEAD (reg:SF 100 [ _14 ])
            (nil))))
(jump_insn 67 66 71 8 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 78)
            (pc))) "CALHPBL.f":49 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil))
 -> 78)
;;  succ:       9 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 71 67 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [1 nepsq2+0 S4 A32])
            (const_int 1 [0x1]))) "CALHPBL.f":49 11 {*cmpsi_1}
     (nil))
(jump_insn 73 72 74 9 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) "CALHPBL.f":49 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 78)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 74 73 75 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 241 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [1 nepsq2+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -20 [0xffffffffffffffec])) [1 nepsq2+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":50 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 241 75 242 10 (set (pc)
        (label_ref 112)) "CALHPBL.f":51 683 {jump}
     (nil)
 -> 112)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

(barrier 242 241 78)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9
;;              8
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 104 105 106 107 108 109 184 185 186 187 188
(code_label 78 242 79 11 5 (nil) [2 uses])
(note 79 78 80 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 11 (set (reg:SI 184)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALHPBL.f":53 86 {*movsi_internal}
     (nil))
(insn 81 80 82 11 (set (reg:DI 101 [ _15 ])
        (sign_extend:DI (reg:SI 184))) "CALHPBL.f":53 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 184)
        (nil)))
(insn 82 81 83 11 (parallel [
            (set (reg:DI 102 [ _16 ])
                (mult:DI (reg:DI 101 [ _15 ])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":53 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 101 [ _15 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 83 82 84 11 (set (reg:SI 185)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":53 86 {*movsi_internal}
     (nil))
(insn 84 83 85 11 (set (reg:DI 103 [ _17 ])
        (sign_extend:DI (reg:SI 185))) "CALHPBL.f":53 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 185)
        (nil)))
(insn 85 84 86 11 (parallel [
            (set (reg:DI 104 [ _18 ])
                (mult:DI (reg:DI 103 [ _17 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":53 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 103 [ _17 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 86 85 87 11 (parallel [
            (set (reg:DI 105 [ _19 ])
                (plus:DI (reg:DI 102 [ _16 ])
                    (reg:DI 104 [ _18 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":53 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 104 [ _18 ])
        (expr_list:REG_DEAD (reg:DI 102 [ _16 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 87 86 88 11 (set (reg:SI 186)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":53 86 {*movsi_internal}
     (nil))
(insn 88 87 89 11 (set (reg:DI 106 [ _20 ])
        (sign_extend:DI (reg:SI 186))) "CALHPBL.f":53 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 186)
        (nil)))
(insn 89 88 90 11 (parallel [
            (set (reg:DI 107 [ _21 ])
                (plus:DI (reg:DI 105 [ _19 ])
                    (reg:DI 106 [ _20 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":53 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 106 [ _20 ])
        (expr_list:REG_DEAD (reg:DI 105 [ _19 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 90 89 91 11 (parallel [
            (set (reg:DI 108 [ _22 ])
                (plus:DI (reg:DI 107 [ _21 ])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":53 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 107 [ _21 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 91 90 92 11 (set (reg/f:DI 187)
        (symbol_ref:DI ("pvrbls_") [flags 0x202]  <var_decl 0x7f59e6835360 pvrbls>)) "CALHPBL.f":53 85 {*movdi_internal}
     (nil))
(insn 92 91 93 11 (parallel [
            (set (reg:DI 188)
                (plus:DI (reg:DI 108 [ _22 ])
                    (const_int 562989 [0x8972d])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":53 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 108 [ _22 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 93 92 94 11 (set (reg:SF 109 [ _23 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 188)
                    (const_int 4 [0x4]))
                (reg/f:DI 187)) [5 pvrbls.q2 S4 A32])) "CALHPBL.f":53 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:DI 188)
        (expr_list:REG_DEAD (reg/f:DI 187)
            (nil))))
(insn 94 93 95 11 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 109 [ _23 ])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32]))) "CALHPBL.f":53 53 {*cmpisf}
     (expr_list:REG_DEAD (reg:SF 109 [ _23 ])
        (nil)))
(jump_insn 95 94 99 11 (set (pc)
        (if_then_else (unlt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 243)
            (pc))) "CALHPBL.f":53 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil))
 -> 243)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 189
(note 99 95 100 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 12 (set (reg:SI 189)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALHPBL.f":54 86 {*movsi_internal}
     (nil))
(insn 101 100 102 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 lpbl+0 S4 A32])
        (reg:SI 189)) "CALHPBL.f":54 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 189)
        (nil)))
(insn 102 101 244 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [1 nepsq2+0 S4 A32])
        (const_int 0 [0])) "CALHPBL.f":55 86 {*movsi_internal}
     (nil))
(jump_insn 244 102 245 12 (set (pc)
        (label_ref 112)) "CALHPBL.f":56 683 {jump}
     (nil)
 -> 112)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

(barrier 245 244 243)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 243 245 106 13 20 (nil) [1 uses])
(note 106 243 107 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [1 nepsq2+0 S4 A32])
            (const_int 1 [0x1]))) "CALHPBL.f":57 11 {*cmpsi_1}
     (nil))
(jump_insn 108 107 112 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 264)
            (pc))) "CALHPBL.f":57 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 264)
;;  succ:       25
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 24, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;;              10 [always] 
;;              12 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 112 108 113 14 7 (nil) [2 uses])
(note 113 112 114 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 246 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":48 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 246 114 247 14 (set (pc)
        (label_ref 115)) "CALHPBL.f":48 683 {jump}
     (nil)
 -> 115)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

(barrier 247 246 259)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 14, next block 25, flags: (RTL)
;;  pred:       7
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 259 247 258 24 23 (nil) [1 uses])
(note 258 259 260 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 260 258 261 24 (const_int 0 [0]) "CALHPBL.f":60 718 {nop}
     (nil))
(jump_insn 261 260 262 24 (set (pc)
        (label_ref 118)) 683 {jump}
     (nil)
 -> 118)
;;  succ:       15 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 262 261 264)
;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 15, flags: (RTL)
;;  pred:       13
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 264 262 263 25 24 (nil) [1 uses])
(note 263 264 265 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 265 263 118 25 (const_int 0 [0]) "CALHPBL.f":58 718 {nop}
     (nil))
;;  succ:       15 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 25, next block 16, flags: (RTL)
;;  pred:       25 [always]  (FALLTHRU)
;;              24 [always] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 111 112 113 114 115 116 117 118 119 190 191 192 193 194 195
(code_label 118 265 119 15 4 (nil) [1 uses])
(note 119 118 120 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 15 (set (reg:SI 190)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])) "CALHPBL.f":61 86 {*movsi_internal}
     (nil))
(insn 121 120 122 15 (parallel [
            (set (reg:SI 110 [ _24 ])
                (plus:SI (reg:SI 190)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 190)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 122 121 123 15 (set (reg:DI 111 [ _25 ])
        (sign_extend:DI (reg:SI 110 [ _24 ]))) "CALHPBL.f":61 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 110 [ _24 ])
        (nil)))
(insn 123 122 124 15 (parallel [
            (set (reg:DI 112 [ _26 ])
                (mult:DI (reg:DI 111 [ _25 ])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 111 [ _25 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 124 123 125 15 (set (reg:SI 191)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":61 86 {*movsi_internal}
     (nil))
(insn 125 124 126 15 (set (reg:DI 113 [ _27 ])
        (sign_extend:DI (reg:SI 191))) "CALHPBL.f":61 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 191)
        (nil)))
(insn 126 125 127 15 (parallel [
            (set (reg:DI 114 [ _28 ])
                (mult:DI (reg:DI 113 [ _27 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 113 [ _27 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 127 126 128 15 (parallel [
            (set (reg:DI 115 [ _29 ])
                (plus:DI (reg:DI 112 [ _26 ])
                    (reg:DI 114 [ _28 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 114 [ _28 ])
        (expr_list:REG_DEAD (reg:DI 112 [ _26 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 128 127 129 15 (set (reg:SI 192)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":61 86 {*movsi_internal}
     (nil))
(insn 129 128 130 15 (set (reg:DI 116 [ _30 ])
        (sign_extend:DI (reg:SI 192))) "CALHPBL.f":61 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 192)
        (nil)))
(insn 130 129 131 15 (parallel [
            (set (reg:DI 117 [ _31 ])
                (plus:DI (reg:DI 115 [ _29 ])
                    (reg:DI 116 [ _30 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 116 [ _30 ])
        (expr_list:REG_DEAD (reg:DI 115 [ _29 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 131 130 132 15 (parallel [
            (set (reg:DI 118 [ _32 ])
                (plus:DI (reg:DI 117 [ _31 ])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 117 [ _31 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 132 131 133 15 (set (reg/f:DI 193)
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f59e6829870 extra>)) "CALHPBL.f":61 85 {*movdi_internal}
     (nil))
(insn 133 132 134 15 (parallel [
            (set (reg:DI 194)
                (plus:DI (reg:DI 118 [ _32 ])
                    (const_int 2311218 [0x234432])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 118 [ _32 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 134 133 135 15 (set (reg:SF 119 [ _33 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 194)
                    (const_int 4 [0x4]))
                (reg/f:DI 193)) [5 extra.zint S4 A32])) "CALHPBL.f":61 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:DI 194)
        (expr_list:REG_DEAD (reg/f:DI 193)
            (nil))))
(insn 135 134 136 15 (set (reg:SF 195)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALHPBL.f":61 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.5e+3 [0x0.9c4p+12])
        (nil)))
(insn 136 135 137 15 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 195)
            (reg:SF 119 [ _33 ]))) "CALHPBL.f":61 53 {*cmpisf}
     (expr_list:REG_DEAD (reg:SF 195)
        (expr_list:REG_DEAD (reg:SF 119 [ _33 ])
            (nil))))
(jump_insn 137 136 141 15 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 143)
            (pc))) "CALHPBL.f":61 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil))
 -> 143)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 141 137 142 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 143 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [1 lpbl+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [1 lpbl+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 (FALLTHRU)
;;              15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 158 164 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213
(code_label 143 142 144 17 11 (nil) [1 uses])
(note 144 143 145 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 17 (set (reg:SI 196)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 lpbl+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 146 145 147 17 (set (reg:DI 120 [ _34 ])
        (sign_extend:DI (reg:SI 196))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 196)
        (nil)))
(insn 147 146 148 17 (parallel [
            (set (reg:DI 121 [ _35 ])
                (mult:DI (reg:DI 120 [ _34 ])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 120 [ _34 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 148 147 149 17 (set (reg:SI 197)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 149 148 150 17 (set (reg:DI 122 [ _36 ])
        (sign_extend:DI (reg:SI 197))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 197)
        (nil)))
(insn 150 149 151 17 (parallel [
            (set (reg:DI 123 [ _37 ])
                (mult:DI (reg:DI 122 [ _36 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 122 [ _36 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 151 150 152 17 (parallel [
            (set (reg:DI 124 [ _38 ])
                (plus:DI (reg:DI 121 [ _35 ])
                    (reg:DI 123 [ _37 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 123 [ _37 ])
        (expr_list:REG_DEAD (reg:DI 121 [ _35 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 152 151 153 17 (set (reg:SI 198)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 153 152 154 17 (set (reg:DI 125 [ _39 ])
        (sign_extend:DI (reg:SI 198))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 198)
        (nil)))
(insn 154 153 155 17 (parallel [
            (set (reg:DI 126 [ _40 ])
                (plus:DI (reg:DI 124 [ _38 ])
                    (reg:DI 125 [ _39 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 125 [ _39 ])
        (expr_list:REG_DEAD (reg:DI 124 [ _38 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 155 154 156 17 (parallel [
            (set (reg:DI 127 [ _41 ])
                (plus:DI (reg:DI 126 [ _40 ])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 126 [ _40 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 156 155 157 17 (set (reg/f:DI 199)
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f59e6829870 extra>)) "CALHPBL.f":66 85 {*movdi_internal}
     (nil))
(insn 157 156 158 17 (parallel [
            (set (reg:DI 200)
                (plus:DI (reg:DI 127 [ _41 ])
                    (const_int 2311218 [0x234432])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 127 [ _41 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 158 157 159 17 (set (reg:SF 128 [ _42 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 200)
                    (const_int 4 [0x4]))
                (reg/f:DI 199)) [5 extra.zint S4 A32])) "CALHPBL.f":66 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:DI 200)
        (expr_list:REG_DEAD (reg/f:DI 199)
            (nil))))
(insn 159 158 160 17 (set (reg:SI 201)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 160 159 161 17 (parallel [
            (set (reg:SI 129 [ _43 ])
                (plus:SI (reg:SI 201)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 201)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 161 160 162 17 (set (reg:DI 130 [ _44 ])
        (sign_extend:DI (reg:SI 129 [ _43 ]))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 129 [ _43 ])
        (nil)))
(insn 162 161 163 17 (parallel [
            (set (reg:DI 131 [ _45 ])
                (mult:DI (reg:DI 130 [ _44 ])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 130 [ _44 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 163 162 164 17 (set (reg:SI 202)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 164 163 165 17 (set (reg:DI 132 [ _46 ])
        (sign_extend:DI (reg:SI 202))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 202)
        (nil)))
(insn 165 164 166 17 (parallel [
            (set (reg:DI 133 [ _47 ])
                (mult:DI (reg:DI 132 [ _46 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 132 [ _46 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 166 165 167 17 (parallel [
            (set (reg:DI 134 [ _48 ])
                (plus:DI (reg:DI 131 [ _45 ])
                    (reg:DI 133 [ _47 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 133 [ _47 ])
        (expr_list:REG_DEAD (reg:DI 131 [ _45 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 167 166 168 17 (set (reg:SI 203)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 168 167 169 17 (set (reg:DI 135 [ _49 ])
        (sign_extend:DI (reg:SI 203))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 203)
        (nil)))
(insn 169 168 170 17 (parallel [
            (set (reg:DI 136 [ _50 ])
                (plus:DI (reg:DI 134 [ _48 ])
                    (reg:DI 135 [ _49 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 135 [ _49 ])
        (expr_list:REG_DEAD (reg:DI 134 [ _48 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 170 169 171 17 (parallel [
            (set (reg:DI 137 [ _51 ])
                (plus:DI (reg:DI 136 [ _50 ])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 136 [ _50 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 171 170 172 17 (set (reg/f:DI 204)
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f59e6829870 extra>)) "CALHPBL.f":66 85 {*movdi_internal}
     (nil))
(insn 172 171 173 17 (parallel [
            (set (reg:DI 205)
                (plus:DI (reg:DI 137 [ _51 ])
                    (const_int 2311218 [0x234432])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 137 [ _51 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 173 172 174 17 (set (reg:SF 138 [ _52 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 205)
                    (const_int 4 [0x4]))
                (reg/f:DI 204)) [5 extra.zint S4 A32])) "CALHPBL.f":66 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:DI 205)
        (expr_list:REG_DEAD (reg/f:DI 204)
            (nil))))
(insn 174 173 175 17 (set (reg:SI 206)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 175 174 176 17 (set (reg:DI 139 [ _53 ])
        (sign_extend:DI (reg:SI 206))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 206)
        (nil)))
(insn 176 175 177 17 (parallel [
            (set (reg:DI 140 [ _54 ])
                (mult:DI (reg:DI 139 [ _53 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 139 [ _53 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 177 176 178 17 (set (reg:SI 207)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 178 177 179 17 (set (reg:DI 141 [ _55 ])
        (sign_extend:DI (reg:SI 207))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 207)
        (nil)))
(insn 179 178 180 17 (parallel [
            (set (reg:DI 142 [ _56 ])
                (plus:DI (reg:DI 140 [ _54 ])
                    (reg:DI 141 [ _55 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 141 [ _55 ])
        (expr_list:REG_DEAD (reg:DI 140 [ _54 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 180 179 181 17 (parallel [
            (set (reg:DI 143 [ _57 ])
                (plus:DI (reg:DI 142 [ _56 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 142 [ _56 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 181 180 182 17 (set (reg:SF 144 [ _58 ])
        (minus:SF (reg:SF 128 [ _42 ])
            (reg:SF 138 [ _52 ]))) "CALHPBL.f":66 841 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 138 [ _52 ])
        (expr_list:REG_DEAD (reg:SF 128 [ _42 ])
            (nil))))
(insn 182 181 183 17 (set (reg/f:DI 208)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 hpbl+0 S8 A64])) "CALHPBL.f":66 85 {*movdi_internal}
     (nil))
(insn 183 182 184 17 (set (mem:SF (plus:DI (mult:DI (reg:DI 143 [ _57 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 208)) [5 *hpbl_100(D) S4 A32])
        (reg:SF 144 [ _58 ])) "CALHPBL.f":66 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 208)
        (expr_list:REG_DEAD (reg:SF 144 [ _58 ])
            (expr_list:REG_DEAD (reg:DI 143 [ _57 ])
                (nil)))))
(insn 184 183 185 17 (set (reg:SF 158 [ M.0_80 ])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "CALHPBL.f":67 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+2 [0x0.96p+9])
        (nil)))
(insn 185 184 186 17 (set (reg:SI 209)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":67 86 {*movsi_internal}
     (nil))
(insn 186 185 187 17 (set (reg:DI 145 [ _59 ])
        (sign_extend:DI (reg:SI 209))) "CALHPBL.f":67 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 209)
        (nil)))
(insn 187 186 188 17 (parallel [
            (set (reg:DI 146 [ _60 ])
                (mult:DI (reg:DI 145 [ _59 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 145 [ _59 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 188 187 189 17 (set (reg:SI 210)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":67 86 {*movsi_internal}
     (nil))
(insn 189 188 190 17 (set (reg:DI 147 [ _61 ])
        (sign_extend:DI (reg:SI 210))) "CALHPBL.f":67 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 210)
        (nil)))
(insn 190 189 191 17 (parallel [
            (set (reg:DI 148 [ _62 ])
                (plus:DI (reg:DI 146 [ _60 ])
                    (reg:DI 147 [ _61 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 147 [ _61 ])
        (expr_list:REG_DEAD (reg:DI 146 [ _60 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 191 190 192 17 (parallel [
            (set (reg:DI 149 [ _63 ])
                (plus:DI (reg:DI 148 [ _62 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 148 [ _62 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 192 191 193 17 (set (reg/f:DI 211)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 hpbl+0 S8 A64])) "CALHPBL.f":67 85 {*movdi_internal}
     (nil))
(insn 193 192 194 17 (set (reg:SF 164 [ _103 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 149 [ _63 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 211)) [5 *hpbl_100(D) S4 A32])) "CALHPBL.f":67 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 211)
        (expr_list:REG_DEAD (reg:DI 149 [ _63 ])
            (nil))))
(insn 194 193 195 17 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 164 [ _103 ])
            (reg:SF 158 [ M.0_80 ]))) "CALHPBL.f":67 53 {*cmpisf}
     (nil))
(insn 195 194 196 17 (set (reg:QI 212)
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "CALHPBL.f":67 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil)))
(insn 196 195 197 17 (set (reg:SI 150 [ _64 ])
        (zero_extend:SI (reg:QI 212))) "CALHPBL.f":67 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 212)
        (nil)))
(insn 197 196 198 17 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 158 [ M.0_80 ])
                    (reg:SF 158 [ M.0_80 ]))
            ] UNSPEC_NOTRAP)) "CALHPBL.f":67 54 {*cmpiusf}
     (nil))
(insn 198 197 199 17 (set (reg:QI 213)
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "CALHPBL.f":67 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil)))
(insn 199 198 200 17 (set (reg:SI 151 [ _65 ])
        (zero_extend:SI (reg:QI 213))) "CALHPBL.f":67 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 213)
        (nil)))
(insn 200 199 201 17 (parallel [
            (set (reg:SI 152 [ _66 ])
                (ior:SI (reg:SI 150 [ _64 ])
                    (reg:SI 151 [ _65 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 450 {*iorsi_1}
     (expr_list:REG_DEAD (reg:SI 151 [ _65 ])
        (expr_list:REG_DEAD (reg:SI 150 [ _64 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 201 200 202 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 152 [ _66 ])
            (const_int 0 [0]))) "CALHPBL.f":67 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 152 [ _66 ])
        (nil)))
(jump_insn 202 201 203 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 204)
            (pc))) "CALHPBL.f":67 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 204)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 158 164

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 164
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 164
;; lr  def 	 158
(note 203 202 4 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 4 203 204 18 (set (reg:SF 158 [ M.0_80 ])
        (reg:SF 164 [ _103 ])) "CALHPBL.f":67 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 164 [ _103 ])
        (nil)))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 158

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 23, flags: (RTL)
;;  pred:       17
;;              18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 158
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 158
;; lr  def 	 17 [flags] 153 154 155 156 157 214 215 216
(code_label 204 4 205 19 13 (nil) [1 uses])
(note 205 204 206 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 206 205 207 19 (set (reg:SI 214)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":67 86 {*movsi_internal}
     (nil))
(insn 207 206 208 19 (set (reg:DI 153 [ _67 ])
        (sign_extend:DI (reg:SI 214))) "CALHPBL.f":67 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 214)
        (nil)))
(insn 208 207 209 19 (parallel [
            (set (reg:DI 154 [ _68 ])
                (mult:DI (reg:DI 153 [ _67 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 153 [ _67 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 209 208 210 19 (set (reg:SI 215)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":67 86 {*movsi_internal}
     (nil))
(insn 210 209 211 19 (set (reg:DI 155 [ _69 ])
        (sign_extend:DI (reg:SI 215))) "CALHPBL.f":67 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 215)
        (nil)))
(insn 211 210 212 19 (parallel [
            (set (reg:DI 156 [ _70 ])
                (plus:DI (reg:DI 154 [ _68 ])
                    (reg:DI 155 [ _69 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 155 [ _69 ])
        (expr_list:REG_DEAD (reg:DI 154 [ _68 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 212 211 213 19 (parallel [
            (set (reg:DI 157 [ _71 ])
                (plus:DI (reg:DI 156 [ _70 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 156 [ _70 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 213 212 214 19 (set (reg/f:DI 216)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 hpbl+0 S8 A64])) "CALHPBL.f":67 85 {*movdi_internal}
     (nil))
(insn 214 213 215 19 (set (mem:SF (plus:DI (mult:DI (reg:DI 157 [ _71 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 216)) [5 *hpbl_100(D) S4 A32])
        (reg:SF 158 [ M.0_80 ])) "CALHPBL.f":67 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 216)
        (expr_list:REG_DEAD (reg:SF 158 [ M.0_80 ])
            (expr_list:REG_DEAD (reg:DI 157 [ _71 ])
                (nil)))))
(insn 215 214 248 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":41 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 248 215 249 19 (set (pc)
        (label_ref 216)) "CALHPBL.f":41 683 {jump}
     (nil)
 -> 216)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 249 248 256)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 19, next block 20, flags: (RTL)
;;  pred:       5
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 256 249 255 23 22 (nil) [1 uses])
(note 255 256 257 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 257 255 219 23 (const_int 0 [0]) "CALHPBL.f":67 718 {nop}
     (nil))
;;  succ:       20 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 23, next block 22, flags: (RTL)
;;  pred:       23 [always]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 219 257 220 20 3 (nil) [0 uses])
(note 220 219 221 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 221 220 250 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":40 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 250 221 251 20 (set (pc)
        (label_ref 222)) "CALHPBL.f":40 683 {jump}
     (nil)
 -> 222)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 251 250 253)
;; basic block 22, loop depth 0, maybe hot
;;  prev block 20, next block 21, flags: (RTL)
;;  pred:       3
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 253 251 252 22 21 (nil) [1 uses])
(note 252 253 254 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 254 252 225 22 (const_int 0 [0]) "CALHPBL.f":41 718 {nop}
     (nil))
;;  succ:       21 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 22, next block 1, flags: (RTL)
;;  pred:       22 [always]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 225 254 226 21 2 (nil) [0 uses])
(note 226 225 240 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 240 226 0 21 (const_int 0 [0]) "CALHPBL.f":71 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

