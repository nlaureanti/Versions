
;; Function dist (dist_, funcdef_no=0, decl_uid=3769, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) r  (1) Z {*movdi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=2
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 13:  (0) r  (1) 0  (2) rm {*subdi_1}
      Creating newreg=151 from oldreg=136, assigning class GENERAL_REGS to r151
   13: {r151:DI=r151:DI-[frame:DI-0x18];clobber flags:CC;}
      REG_DEAD r136:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  145: r151:DI=r136:DI
    Inserting insn reload after:
  146: r89:DI=r151:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 15
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (2) 0  (3) rm {*movdicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 39:  (0) =rm  (1) 0 {*one_cmpldi2_1}
      Creating newreg=152 from oldreg=97, assigning class GENERAL_REGS to r152
   39: r152:DI=~r152:DI
      REG_DEAD r97:DI
    Inserting insn reload before:
  147: r152:DI=r97:DI
    Inserting insn reload after:
  148: r126:DI=r152:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 53:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =r  (1) %rm  (2) K {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 57
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 63:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =<  (1) re*m {*pushdi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-24)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 70:  (0) r  (1) Z {*movdi_internal} (sp_off=-32)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 71:  (0) r  (1) Z {*movdi_internal} (sp_off=-32)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 72:  (0) r  (1) Z {*movdi_internal} (sp_off=-32)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) q  (1) n {*movqi_internal} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rBwBz {*call} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 85:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=153 from oldreg=129, assigning class GENERAL_REGS to r153
   85: {r153:DI=r153:DI-r127:DI;clobber flags:CC;}
      REG_DEAD r129:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  149: r153:DI=r129:DI
    Inserting insn reload after:
  150: r131:DI=r153:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 90:  (0) =r  (1) %rm  (2) K {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 93:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 94:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 95:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) rm  (1) re {*cmpdi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 103:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 105:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 106:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6
EBB 7 8
EBB 9
EBB 10
EBB 11

********** Pseudo live ranges #1: **********

  BB 11
   Insn 124: point = 0, n_alt = 0
   Insn 123: point = 1, n_alt = 0
   Insn 122: point = 1, n_alt = -2
   Insn 121: point = 2, n_alt = 3
  BB 3
   Insn 138: point = 4, n_alt = -1
   Insn 44: point = 4, n_alt = 0
  BB 10
   Insn 118: point = 5, n_alt = 0
  BB 5
   Insn 88: point = 6, n_alt = -1
   Insn 87: point = 6, n_alt = 0
  BB 9
   Insn 142: point = 7, n_alt = -1
   Insn 112: point = 7, n_alt = 0
  BB 7
   Insn 98: point = 8, n_alt = -1
   Insn 97: point = 8, n_alt = 0
  BB 8
   Insn 140: point = 9, n_alt = -1
   Insn 106: point = 9, n_alt = 0
   Insn 105: point = 9, n_alt = 8
   Insn 104: point = 10, n_alt = 3
   Insn 103: point = 11, n_alt = 7
   Insn 102: point = 13, n_alt = 3
   Insn 101: point = 14, n_alt = 3
   Insn 100: point = 15, n_alt = 3
  BB 6
   Insn 95: point = 17, n_alt = 2
   Insn 94: point = 18, n_alt = 3
   Insn 93: point = 20, n_alt = 0
   Insn 92: point = 22, n_alt = 3
   Insn 91: point = 23, n_alt = 3
   Insn 90: point = 25, n_alt = 0
  BB 4
   Insn 150: point = 27, n_alt = -2
	Hard reg 38 is preferable by r153 with profit 1000
   Insn 85: point = 29, n_alt = 0
   Insn 149: point = 29, n_alt = -2
	Hard reg 38 is preferable by r153 with profit 1000
	Hard reg 1 is preferable by r153 with profit 1000
   Insn 82: point = 31, n_alt = 1
   Insn 81: point = 33, n_alt = 0
   Insn 80: point = 34, n_alt = 1
   Insn 79: point = 36, n_alt = 0
   Insn 78: point = 37, n_alt = 0
   Insn 77: point = 39, n_alt = 0
   Insn 76: point = 40, n_alt = 0
   Insn 75: point = 40, n_alt = 0
   Insn 74: point = 40, n_alt = 3
   Insn 73: point = 40, n_alt = -2
   Insn 72: point = 41, n_alt = 2
   Insn 71: point = 41, n_alt = 2
   Insn 70: point = 41, n_alt = 2
   Insn 69: point = 41, n_alt = -2
   Insn 68: point = 42, n_alt = -2
   Insn 67: point = 43, n_alt = 0
   Insn 66: point = 43, n_alt = 0
   Insn 65: point = 43, n_alt = 0
   Insn 64: point = 43, n_alt = 0
   Insn 63: point = 44, n_alt = 3
   Insn 62: point = 45, n_alt = 3
   Insn 61: point = 46, n_alt = 3
   Insn 60: point = 48, n_alt = 3
   Insn 59: point = 49, n_alt = 1
   Insn 58: point = 51, n_alt = 0
   Insn 57: point = 53, n_alt = 0
   Insn 56: point = 55, n_alt = 0
   Insn 55: point = 57, n_alt = 0
   Insn 54: point = 59, n_alt = 0
   Insn 53: point = 60, n_alt = 3
   Insn 52: point = 62, n_alt = 0
   Insn 51: point = 64, n_alt = 0
   Insn 50: point = 66, n_alt = 0
   Insn 49: point = 68, n_alt = 0
  BB 2
   Insn 42: point = 70, n_alt = -1
   Insn 41: point = 70, n_alt = 0
   Insn 40: point = 71, n_alt = 0
   Insn 148: point = 72, n_alt = -2
	Hard reg 3 is preferable by r152 with profit 1000
   Insn 39: point = 74, n_alt = 0
   Insn 147: point = 74, n_alt = -2
	Hard reg 3 is preferable by r152 with profit 1000
	Hard reg 0 is preferable by r152 with profit 1000
   Insn 38: point = 76, n_alt = 0
   Insn 37: point = 78, n_alt = 3
   Insn 36: point = 79, n_alt = 5
   Insn 35: point = 80, n_alt = -2
   Insn 34: point = 82, n_alt = -2
   Insn 33: point = 83, n_alt = 0
   Insn 32: point = 83, n_alt = -2
   Insn 31: point = 84, n_alt = 1
   Insn 29: point = 86, n_alt = 0
   Insn 30: point = 86, n_alt = 2
   Insn 28: point = 87, n_alt = -2
   Insn 27: point = 89, n_alt = 0
   Insn 23: point = 91, n_alt = 2
   Insn 22: point = 92, n_alt = 3
   Insn 21: point = 93, n_alt = -2
   Insn 19: point = 94, n_alt = 1
   Insn 17: point = 96, n_alt = 0
   Insn 18: point = 96, n_alt = 2
   Insn 16: point = 97, n_alt = 0
   Insn 15: point = 99, n_alt = 0
   Insn 14: point = 101, n_alt = 3
   Insn 146: point = 102, n_alt = -2
	Hard reg 1 is preferable by r151 with profit 1000
   Insn 13: point = 104, n_alt = 1
   Insn 145: point = 104, n_alt = -2
	Hard reg 1 is preferable by r151 with profit 1000
	Hard reg 0 is preferable by r151 with profit 1000
   Insn 12: point = 106, n_alt = 2
   Insn 11: point = 107, n_alt = 5
   Insn 10: point = 108, n_alt = 0
   Insn 9: point = 110, n_alt = 0
   Insn 8: point = 111, n_alt = 5
   Insn 7: point = 112, n_alt = 0
   Insn 6: point = 114, n_alt = 0
   Insn 2: point = 115, n_alt = 5
 r87: [113..114]
 r88: [109..110]
 r89: [100..102]
 r90: [98..99]
 r91: [92..93]
 r92: [91..115]
 r94: [88..89]
 r95: [85..87]
 r96: [83..84]
 r97: [75..76]
 r98: [70..71]
 r99: [67..68]
 r100: [65..66]
 r101: [42..60]
 r102: [58..59]
 r103: [56..57]
 r104: [54..55]
 r105: [52..53]
 r106: [50..51]
 r107: [41..46]
 r108: [38..39]
 r109: [35..36]
 r110: [32..33]
 r112: [24..25]
 r113: [21..22]
 r114: [19..20]
 r115: [12..15]
 r116: [9..14]
 r117: [9..11]
 r118: [8..17]
 r119: [0..5]
 r120: [95..97]
 r121: [90..94]
 r125: [79..80]
 r126: [6..72]
 r127: [6..37]
 r128: [6..34]
 r129: [30..31]
 r131: [6..27]
 r132: [8..23]
 r133: [8..18]
 r134: [111..112]
 r135: [107..108]
 r136: [105..106]
 r137: [100..101]
 r138: [95..96]
 r139: [85..86]
 r140: [81..82]
 r141: [77..78]
 r142: [63..64]
 r143: [61..62]
 r144: [47..49]
 r145: [47..48]
 r146: [40..45]
 r147: [43..44]
 r148: [12..13]
 r149: [9..10]
 r150: [1..2]
 r151: [103..104]
 r152: [73..74]
 r153: [28..29]
Compressing live ranges: from 116 to 82 - 70%
Ranges after the compression:
 r87: [80..81]
 r88: [76..77]
 r89: [68..69]
 r90: [66..67]
 r91: [62..63]
 r92: [62..81]
 r94: [60..61]
 r95: [58..59]
 r96: [56..57]
 r97: [48..49]
 r98: [44..45]
 r99: [42..43]
 r100: [40..41]
 r101: [22..35]
 r102: [34..35]
 r103: [32..33]
 r104: [30..31]
 r105: [28..29]
 r106: [26..27]
 r107: [22..23]
 r108: [20..21]
 r109: [18..19]
 r110: [16..17]
 r112: [10..11]
 r113: [8..9]
 r114: [6..7]
 r115: [4..5]
 r116: [2..5]
 r117: [2..3]
 r118: [2..5]
 r119: [0..1]
 r120: [64..65]
 r121: [62..63]
 r125: [52..53]
 r126: [2..45]
 r127: [2..19]
 r128: [2..17]
 r129: [14..15]
 r131: [2..11]
 r132: [2..9]
 r133: [2..5]
 r134: [78..79]
 r135: [74..75]
 r136: [72..73]
 r137: [68..69]
 r138: [64..65]
 r139: [58..59]
 r140: [54..55]
 r141: [50..51]
 r142: [38..39]
 r143: [36..37]
 r144: [24..25]
 r145: [24..25]
 r146: [22..23]
 r147: [22..23]
 r148: [4..5]
 r149: [2..3]
 r150: [0..1]
 r151: [70..71]
 r152: [46..47]
 r153: [12..13]

********** Assignment #1: **********

	 Assigning to 151 (cl=GENERAL_REGS, orig=136, freq=3000, tfirst=151, tfreq=3000)...
	   Assign 0 to reload r151 (freq=3000)
	 Assigning to 152 (cl=GENERAL_REGS, orig=97, freq=3000, tfirst=152, tfreq=3000)...
	   Assign 0 to reload r152 (freq=3000)
	 Assigning to 153 (cl=GENERAL_REGS, orig=129, freq=3000, tfirst=153, tfreq=3000)...
	   Assign 1 to reload r153 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 22
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 31
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 68
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 69
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 100
changing reg in insn 103
changing reg in insn 101
changing reg in insn 105
changing reg in insn 103
changing reg in insn 105
changing reg in insn 106
changing reg in insn 95
changing reg in insn 106
changing reg in insn 101
changing reg in insn 100
changing reg in insn 97
changing reg in insn 118
changing reg in insn 44
changing reg in insn 124
changing reg in insn 16
changing reg in insn 19
changing reg in insn 17
changing reg in insn 19
changing reg in insn 27
changing reg in insn 21
changing reg in insn 35
changing reg in insn 36
changing reg in insn 91
changing reg in insn 112
changing reg in insn 78
changing reg in insn 112
changing reg in insn 92
changing reg in insn 90
changing reg in insn 87
changing reg in insn 85
changing reg in insn 80
changing reg in insn 87
changing reg in insn 82
changing reg in insn 92
changing reg in insn 91
changing reg in insn 100
changing reg in insn 94
changing reg in insn 101
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 59
changing reg in insn 61
changing reg in insn 61
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 73
changing reg in insn 63
changing reg in insn 64
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 121
changing reg in insn 122
deleting insn with uid = 145.
deleting insn with uid = 28.
deleting insn with uid = 34.
deleting insn with uid = 35.
deleting insn with uid = 147.
deleting insn with uid = 149.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 123.


dist

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;;  ref usage 	r0={36d,39u} r1={20d,18u,2e} r2={9d,4u} r3={4d,3u} r4={7d,3u} r5={8d,5u} r6={1d,24u} r7={6d,20u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={34d,5u} r18={3d} r19={3d} r20={1d,1u,2e} r21={5d,1u} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={6d,2u} r38={6d,2u} r39={4d,1u} r40={4d,1u} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 474{341d,129u,4e} in 96{93 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 94 95 96 97 98 120 121 125 126 134 135 136 137 138 139 140 141
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 a+0 S8 A64])
        (reg:DI 5 di [ a ])) "DIST.f":1 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 8 [0x8]))) [3 parallel.jsta+0 S4 A64])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 0 ax [134])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "DIST.f":40 149 {*extendsidi2_rex64}
     (nil))
(insn 8 7 9 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 lbound.0+0 S8 A64])
        (reg:DI 0 ax [134])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 12 [0xc]))) [3 parallel.jend+0 S4 A32])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 0 ax [135])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _2 ] [88]))) "DIST.f":40 149 {*extendsidi2_rex64}
     (nil))
(insn 11 10 12 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 ubound.1+0 S8 A64])
        (reg:DI 0 ax [135])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [136])
        (const_int 1 [0x1])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 13 12 146 2 (parallel [
            (set (reg:DI 0 ax [136])
                (minus:DI (reg:DI 0 ax [136])
                    (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 lbound.0+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":40 278 {*subdi_1}
     (nil))
(insn 146 13 14 2 (set (reg:DI 1 dx [orig:89 _3 ] [89])
        (reg:DI 0 ax [136])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 14 146 15 2 (set (reg:DI 0 ax [137])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 ubound.1+0 S8 A64])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg:DI 0 ax [orig:90 _4 ] [90])
                (plus:DI (reg:DI 0 ax [137])
                    (reg:DI 1 dx [orig:89 _3 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":40 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg:DI 1 dx [orig:89 _3 ] [89])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [1 ubound.1+0 S8 A64]))
        (nil)))
(insn 16 15 18 2 (parallel [
            (set (reg:DI 0 ax [orig:120 size.3_42 ] [120])
                (mult:DI (reg:DI 0 ax [orig:90 _4 ] [90])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":40 349 {*muldi3_1}
     (nil))
(insn 18 16 17 2 (set (reg:DI 1 dx [138])
        (const_int 0 [0])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 17 18 19 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:120 size.3_42 ] [120])
            (const_int 0 [0]))) "DIST.f":40 8 {*cmpdi_ccno_1}
     (nil))
(insn 19 17 21 2 (set (reg:DI 0 ax [orig:121 size.3_43 ] [121])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:120 size.3_42 ] [120])
            (reg:DI 1 dx [138]))) "DIST.f":40 1003 {*movdicc_noc}
     (nil))
(insn 21 19 22 2 (set (reg:DI 1 dx [orig:91 size.6_5 ] [91])
        (reg:DI 0 ax [orig:121 size.3_43 ] [121])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 2 cx [orig:92 _6 ] [92])
        (reg:DI 1 dx [orig:91 size.6_5 ] [91])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 23 22 27 2 (set (reg:DI 3 bx [ _6+8 ])
        (const_int 0 [0])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 27 23 30 2 (parallel [
            (set (reg:DI 0 ax [orig:94 _8 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:121 size.3_43 ] [121])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":40 551 {*ashldi3_1}
     (nil))
(insn 30 27 29 2 (set (reg:DI 1 dx [139])
        (const_int 1 [0x1])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 29 30 31 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:95 _9 ] [95])
            (const_int 0 [0]))) "DIST.f":40 8 {*cmpdi_ccno_1}
     (nil))
(insn 31 29 32 2 (set (reg:DI 0 ax [orig:96 _10 ] [96])
        (if_then_else:DI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:95 _9 ] [95])
            (reg:DI 1 dx [139]))) "DIST.f":40 1003 {*movdicc_noc}
     (nil))
(insn 32 31 33 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:96 _10 ] [96])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(call_insn 33 32 36 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fb8d7935f00 __builtin_malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "DIST.f":40 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 36 33 37 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 b+0 S8 A64])
        (reg/f:DI 0 ax [orig:125 _48 ] [125])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:DI 0 ax [141])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 lbound.0+0 S8 A64])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 38 37 39 2 (parallel [
            (set (reg:DI 0 ax [orig:97 _11 ] [97])
                (mult:DI (reg:DI 0 ax [141])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":40 349 {*muldi3_1}
     (nil))
(insn 39 38 148 2 (set (reg:DI 0 ax [orig:97 _11 ] [97])
        (not:DI (reg:DI 0 ax [orig:97 _11 ] [97]))) "DIST.f":40 532 {*one_cmpldi2_1}
     (nil))
(insn 148 39 40 2 (set (reg:DI 3 bx [orig:126 offset.2_50 ] [126])
        (reg:DI 0 ax [orig:97 _11 ] [97])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 40 148 41 2 (set (reg:SI 0 ax [orig:98 _12 ] [98])
        (mem/c:SI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>) [3 parallel.num_procs+0 S4 A128])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:98 _12 ] [98])
            (const_int 1 [0x1]))) "DIST.f":44 11 {*cmpsi_1}
     (nil))
(jump_insn 42 41 43 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) "DIST.f":44 682 {*jcc}
     (nil)
 -> 47)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 119
(note 43 42 44 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 138 3 (set (reg:SI 3 bx [orig:119 finally_tmp.8_34 ] [119])
        (const_int 0 [0])) 86 {*movsi_internal}
     (nil))
(jump_insn 138 44 139 3 (set (pc)
        (label_ref 119)) "DIST.f":44 683 {jump}
     (nil)
 -> 119)
;;  succ:       11 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119

(barrier 139 138 47)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 99 100 101 102 103 104 105 106 107 108 109 110 127 128 129 131 142 143 144 145 146 147
(code_label 47 139 48 4 2 (nil) [1 uses])
(note 48 47 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 4 (set (reg:SI 0 ax [orig:99 _13 ] [99])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 4 [0x4]))) [3 parallel.me+0 S4 A32])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:DI 0 ax [orig:100 _14 ] [100])
        (sign_extend:DI (reg:SI 0 ax [orig:99 _13 ] [99]))) "DIST.f":46 149 {*extendsidi2_rex64}
     (nil))
(insn 51 50 52 4 (parallel [
            (set (reg:DI 0 ax [142])
                (plus:DI (reg:DI 0 ax [orig:100 _14 ] [100])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (nil))
(insn 52 51 53 4 (parallel [
            (set (reg:DI 0 ax [143])
                (ashift:DI (reg:DI 0 ax [142])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 551 {*ashldi3_1}
     (nil))
(insn 53 52 54 4 (parallel [
            (set (reg/f:DI 4 si [orig:101 _15 ] [101])
                (plus:DI (reg:DI 0 ax [143])
                    (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (nil))
(insn 54 53 55 4 (set (reg:SI 0 ax [orig:102 _16 ] [102])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 8 [0x8]))) [3 parallel.jsta+0 S4 A64])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DI 0 ax [orig:103 _17 ] [103])
        (sign_extend:DI (reg:SI 0 ax [orig:102 _16 ] [102]))) "DIST.f":46 149 {*extendsidi2_rex64}
     (nil))
(insn 56 55 57 4 (parallel [
            (set (reg:DI 0 ax [orig:104 _18 ] [104])
                (mult:DI (reg:DI 0 ax [orig:103 _17 ] [103])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 349 {*muldi3_1}
     (nil))
(insn 57 56 58 4 (parallel [
            (set (reg:DI 0 ax [orig:105 _19 ] [105])
                (plus:DI (reg:DI 0 ax [orig:104 _18 ] [104])
                    (reg:DI 3 bx [orig:126 offset.2_50 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (nil))
(insn 58 57 59 4 (parallel [
            (set (reg:DI 0 ax [orig:106 _20 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 _19 ] [105])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (nil))
(insn 59 58 60 4 (parallel [
            (set (reg:DI 1 dx [144])
                (ashift:DI (reg:DI 0 ax [orig:106 _20 ] [106])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 551 {*ashldi3_1}
     (nil))
(insn 60 59 61 4 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 b+0 S8 A64])) "DIST.f":46 85 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (parallel [
            (set (reg/f:DI 2 cx [orig:107 _21 ] [107])
                (plus:DI (reg:DI 1 dx [144])
                    (reg/f:DI 0 ax [145])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 b+0 S8 A64])
            (reg:DI 1 dx [144]))
        (nil)))
(insn 62 61 63 4 (set (reg:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 a+0 S8 A64])) "DIST.f":46 85 {*movdi_internal}
     (nil))
(insn 63 62 64 4 (parallel [
            (set (reg:DI 1 dx [147])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (nil))
(insn 64 63 65 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (reg:DI 1 dx [147])) "DIST.f":46 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 65 64 66 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fb8d7ae1ab0 *.LC1>)) "DIST.f":46 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 66 65 67 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fb8d7ae1ab0 *.LC1>)) "DIST.f":46 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 67 66 68 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fb8d7ae1a20 *.LC0>)) "DIST.f":46 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 68 67 69 4 (set (reg:DI 38 r9)
        (reg/f:DI 4 si [orig:101 _15 ] [101])) "DIST.f":46 85 {*movdi_internal}
     (nil))
(insn 69 68 70 4 (set (reg:DI 37 r8)
        (reg/f:DI 2 cx [orig:107 _21 ] [107])) "DIST.f":46 85 {*movdi_internal}
     (nil))
(insn 70 69 71 4 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fb8d7ae1a20 *.LC0>)) "DIST.f":46 85 {*movdi_internal}
     (nil))
(insn 71 70 72 4 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                (const_int 4136 [0x1028])))) "DIST.f":46 85 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DI 4 si)
        (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                (const_int 40 [0x28])))) "DIST.f":46 85 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [146])) "DIST.f":46 85 {*movdi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "DIST.f":46 88 {*movqi_internal}
     (nil))
(call_insn 75 74 76 4 (call (mem:QI (symbol_ref:DI ("mpi_scatterv_") [flags 0x41]  <function_decl 0x7fb8d7aaf600 mpi_scatterv>) [0 mpi_scatterv S1 A8])
        (const_int 32 [0x20])) "DIST.f":46 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 76 75 77 4 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 77 76 78 4 (set (reg:SI 0 ax [orig:108 _22 ] [108])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 8 [0x8]))) [3 parallel.jsta+0 S4 A64])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 78 77 79 4 (set (reg:DI 0 ax [orig:127 _55 ] [127])
        (sign_extend:DI (reg:SI 0 ax [orig:108 _22 ] [108]))) "DIST.f":48 149 {*extendsidi2_rex64}
     (nil))
(insn 79 78 80 4 (set (reg:SI 1 dx [orig:109 _23 ] [109])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 12 [0xc]))) [3 parallel.jend+0 S4 A32])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 80 79 81 4 (set (reg:DI 37 r8 [orig:128 _56 ] [128])
        (sign_extend:DI (reg:SI 1 dx [orig:109 _23 ] [109]))) "DIST.f":48 149 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 4 (set (reg:SI 1 dx [orig:110 _24 ] [110])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 8 [0x8]))) [3 parallel.jsta+0 S4 A64])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 82 81 85 4 (set (reg:DI 1 dx [orig:129 _57 ] [129])
        (sign_extend:DI (reg:SI 1 dx [orig:110 _24 ] [110]))) "DIST.f":48 149 {*extendsidi2_rex64}
     (nil))
(insn 85 82 150 4 (parallel [
            (set (reg:DI 1 dx [orig:129 _57 ] [129])
                (minus:DI (reg:DI 1 dx [orig:129 _57 ] [129])
                    (reg:DI 0 ax [orig:127 _55 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 278 {*subdi_1}
     (nil))
(insn 150 85 113 4 (set (reg:DI 38 r9 [orig:131 _59 ] [131])
        (reg:DI 1 dx [orig:129 _57 ] [129])) "DIST.f":48 85 {*movdi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 128 131

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              9 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 128 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 127 128
;; lr  def 	 17 [flags]
(code_label 113 150 86 5 7 (nil) [1 uses])
(note 86 113 87 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:127 _55 ] [127])
            (reg:DI 37 r8 [orig:128 _56 ] [128]))) "DIST.f":48 12 {*cmpdi_1}
     (nil))
(jump_insn 88 87 89 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 116)
            (pc))) "DIST.f":48 682 {*jcc}
     (nil)
 -> 116)
;;  succ:       10
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 128 131

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 128 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 131
;; lr  def 	 17 [flags] 112 113 114 118 132 133
(note 89 88 90 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 6 (parallel [
            (set (reg:DI 1 dx [orig:112 _26 ] [112])
                (mult:DI (reg:DI 0 ax [orig:127 _55 ] [127])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 349 {*muldi3_1}
     (nil))
(insn 91 90 92 6 (parallel [
            (set (reg:DI 40 r11 [orig:132 _61 ] [132])
                (plus:DI (reg:DI 3 bx [orig:126 offset.2_50 ] [126])
                    (reg:DI 1 dx [orig:112 _26 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (nil))
(insn 92 91 93 6 (parallel [
            (set (reg:DI 1 dx [orig:113 _27 ] [113])
                (plus:DI (reg:DI 0 ax [orig:127 _55 ] [127])
                    (reg:DI 38 r9 [orig:131 _59 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (nil))
(insn 93 92 94 6 (parallel [
            (set (reg:DI 1 dx [orig:114 _28 ] [114])
                (mult:DI (reg:DI 1 dx [orig:113 _27 ] [113])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 349 {*muldi3_1}
     (nil))
(insn 94 93 95 6 (parallel [
            (set (reg:DI 39 r10 [orig:133 _62 ] [133])
                (plus:DI (reg:DI 1 dx [orig:114 _28 ] [114])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (nil))
(insn 95 94 107 6 (set (reg:DI 1 dx [orig:118 S.5_33 ] [118])
        (const_int 1 [0x1])) "DIST.f":48 85 {*movdi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 126 127 128 131 132 133

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              8 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 126 127 128 131 132 133
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118
;; lr  def 	 17 [flags]
(code_label 107 95 96 7 6 (nil) [1 uses])
(note 96 107 97 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 1 dx [orig:118 S.5_33 ] [118])
            (const_int 119 [0x77]))) "DIST.f":48 12 {*cmpdi_1}
     (nil))
(jump_insn 98 97 99 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 110)
            (pc))) "DIST.f":48 682 {*jcc}
     (nil)
 -> 110)
;;  succ:       9
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 126 127 128 131 132 133

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 126 127 128 131 132 133
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 132 133
;; lr  def 	 17 [flags] 115 116 117 118 148 149
(note 99 98 100 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 8 (parallel [
            (set (reg:DI 5 di [orig:115 _29 ] [115])
                (plus:DI (reg:DI 1 dx [orig:118 S.5_33 ] [118])
                    (reg:DI 40 r11 [orig:132 _61 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (nil))
(insn 101 100 102 8 (parallel [
            (set (reg:DI 4 si [orig:116 _30 ] [116])
                (plus:DI (reg:DI 1 dx [orig:118 S.5_33 ] [118])
                    (reg:DI 39 r10 [orig:133 _62 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (nil))
(insn 102 101 103 8 (set (reg/f:DI 2 cx [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 b+0 S8 A64])) "DIST.f":48 85 {*movdi_internal}
     (nil))
(insn 103 102 104 8 (set (reg:SF 21 xmm0 [orig:117 _31 ] [117])
        (mem:SF (plus:DI (mult:DI (reg:DI 5 di [orig:115 _29 ] [115])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [148])) [6 *b_49 S4 A32])) "DIST.f":48 131 {*movsf_internal}
     (nil))
(insn 104 103 105 8 (set (reg/f:DI 2 cx [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 a+0 S8 A64])) "DIST.f":48 85 {*movdi_internal}
     (nil))
(insn 105 104 106 8 (set (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:116 _30 ] [116])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [149])) [6 *a_52(D) S4 A32])
        (reg:SF 21 xmm0 [orig:117 _31 ] [117])) "DIST.f":48 131 {*movsf_internal}
     (nil))
(insn 106 105 140 8 (parallel [
            (set (reg:DI 1 dx [orig:118 S.5_33 ] [118])
                (plus:DI (reg:DI 1 dx [orig:118 S.5_33 ] [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (nil))
(jump_insn 140 106 141 8 (set (pc)
        (label_ref 107)) "DIST.f":48 683 {jump}
     (nil)
 -> 107)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 126 127 128 131 132 133

(barrier 141 140 110)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 128 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 127
;; lr  def 	 17 [flags] 127
(code_label 110 141 111 9 5 (nil) [1 uses])
(note 111 110 112 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 142 9 (parallel [
            (set (reg:DI 0 ax [orig:127 _55 ] [127])
                (plus:DI (reg:DI 0 ax [orig:127 _55 ] [127])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (nil))
(jump_insn 142 112 143 9 (set (pc)
        (label_ref 113)) "DIST.f":48 683 {jump}
     (nil)
 -> 113)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 128 131

(barrier 143 142 116)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 119
(code_label 116 143 117 10 4 (nil) [1 uses])
(note 117 116 118 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 10 (set (reg:SI 3 bx [orig:119 finally_tmp.8_34 ] [119])
        (const_int 1 [0x1])) "DIST.f":40 86 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 1, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              3 [always] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 150
(code_label 119 118 120 11 3 (nil) [1 uses])
(note 120 119 121 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 11 (set (reg:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 b+0 S8 A64])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 122 121 123 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [150])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(call_insn 123 122 124 11 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb8d7935e00 __builtin_free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "DIST.f":40 689 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 124 123 144 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 3 bx [orig:119 finally_tmp.8_34 ] [119])
            (const_int 1 [0x1]))) "DIST.f":40 11 {*cmpsi_1}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 144 124 0 NOTE_INSN_DELETED)
