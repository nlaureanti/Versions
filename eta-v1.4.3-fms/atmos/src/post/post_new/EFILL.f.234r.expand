
;; Function efill (efill_, funcdef_no=0, decl_uid=3768, cgraph_uid=0, symbol_order=0)

efill (real(kind=4)[0:D.3832] * restrict egrid, integer(kind=4) & restrict im, integer(kind=4) & restrict jm)
{
  logical(kind=4) D.3830;
  integer(kind=4) D.3827;
  logical(kind=4) D.3826;
  integer(kind=4) D.3823;
  struct __st_parameter_dt dt_parm.5;
  logical(kind=4) D.3819;
  integer(kind=4) D.3816;
  logical(kind=4) D.3815;
  integer(kind=4) D.3812;
  sizetype D.3834;
  bitsizetype D.3833;
  integer(kind=8) D.3832;
  real(kind=8) sum;
  integer(kind=4) npts;
  integer(kind=4) j;
  integer(kind=4) i;
  real(kind=4) fmin;
  real(kind=4) fmax;
  integer(kind=8) size.4;
  integer(kind=8) offset.3;
  integer(kind=8) stride.2;
  integer(kind=8) ubound.1;
  integer(kind=8) ubound.0;
  real(kind=4) avg;
  static real(kind=4) satdel [value-expr: options.satdel];
  static integer(kind=4) iflag [value-expr: options.iflag];
  static integer(kind=4) ioffs [value-expr: options.ioffs];
  static integer(kind=4) ksb [value-expr: options.ksb];
  static integer(kind=4) ibessl [value-expr: options.ibessl];
  static real(kind=4) spval [value-expr: options.spval];
  static integer(kind=4) lunout [value-expr: iounit.lunout];
  static integer(kind=4) lunll [value-expr: iounit.lunll];
  static integer(kind=4) lunco [value-expr: iounit.lunco];
  static integer(kind=4) lcntrl [value-expr: iounit.lcntrl];
  static integer(kind=4) stdout [value-expr: iounit.stdout];
  integer(kind=4) _1;
  integer(kind=4) _2;
  sizetype size.6_3;
  bitsizetype _4;
  sizetype size.7_5;
  real(kind=4) fmax.8_6;
  real(kind=4) _7;
  real(kind=4) _8;
  real(kind=4) _9;
  integer(kind=8) _10;
  integer(kind=8) _11;
  integer(kind=8) _12;
  integer(kind=8) _13;
  integer(kind=8) _14;
  real(kind=4) _15;
  real(kind=4) _16;
  real(kind=4) _17;
  real(kind=4) _18;
  integer(kind=8) _19;
  integer(kind=8) _20;
  integer(kind=8) _21;
  integer(kind=8) _22;
  integer(kind=8) _23;
  real(kind=4) _24;
  real(kind=8) _25;
  integer(kind=4) _26;
  real(kind=8) _27;
  real(kind=8) _28;
  integer(kind=8) _29;
  integer(kind=8) _30;
  integer(kind=8) _31;
  integer(kind=8) _32;
  integer(kind=8) _33;
  real(kind=4) _34;
  real(kind=4) _35;
  real(kind=4) _36;
  real(kind=4) _37;
  integer(kind=8) _38;
  integer(kind=8) _39;
  integer(kind=8) _40;
  integer(kind=8) _41;
  integer(kind=8) _42;
  integer(kind=8) stride.2_60;
  integer(kind=8) stride.2_61;
  integer(kind=8) size.4_64;
  integer(kind=8) size.4_65;
  integer(kind=8) _66;
  bitsizetype _67;
  sizetype _68;
  integer(kind=8) offset.3_69;
  integer(kind=4) _74;
  logical(kind=4) _76;
  integer(kind=4) _77;
  logical(kind=4) _79;
  integer(kind=4) _93;
  logical(kind=4) _95;
  integer(kind=4) _96;
  logical(kind=4) _98;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = *im_58(D);
  ubound.0_59 = (integer(kind=8)) _1;
  stride.2_60 = ubound.0_59;
  stride.2_61 = MAX_EXPR <stride.2_60, 0>;
  _2 = *jm_62(D);
  ubound.1_63 = (integer(kind=8)) _2;
  size.4_64 = stride.2_61 * ubound.1_63;
  size.4_65 = MAX_EXPR <size.4_64, 0>;
  _66 = size.4_65 + -1;
  size.6_3 = (sizetype) size.4_65;
  _4 = (bitsizetype) size.6_3;
  _67 = _4 * 32;
  size.7_5 = (sizetype) size.4_65;
  _68 = size.7_5 * 4;
  offset.3_69 = ~stride.2_61;
  minmax (egrid_70(D), im_58(D), jm_62(D), &fmin, &fmax);
  fmax.8_6 = fmax;
  _7 = options.spval;
  _8 = fmax.8_6 - _7;
  _9 = ABS_EXPR <_8>;
  if (_9 > 9.999999960041972002500187954865396022796630859375e-13)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 23>; [INV]
;;    succ:       23

;;   basic block 4, loop depth 0
;;    pred:       2
  npts_72 = 0;
  sum_73 = 0.0;
  _74 = *jm_62(D);
  j_75 = 1;
;;    succ:       5

;;   basic block 5, loop depth 1
;;    pred:       4
;;                11
  # j_45 = PHI <j_75(4), j_83(11)>
  # npts_47 = PHI <npts_72(4), npts_48(11)>
  # sum_50 = PHI <sum_73(4), sum_51(11)>
  _76 = j_45 > _74;
  if (_76 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       12
;;                6

;;   basic block 6, loop depth 1
;;    pred:       5
  _77 = *im_58(D);
  i_78 = 1;
;;    succ:       7

;;   basic block 7, loop depth 2
;;    pred:       6
;;                10
  # i_43 = PHI <i_78(6), i_82(10)>
  # npts_48 = PHI <npts_47(6), npts_49(10)>
  # sum_51 = PHI <sum_50(6), sum_52(10)>
  _79 = i_43 > _77;
  if (_79 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       11
;;                8

;;   basic block 8, loop depth 2
;;    pred:       7
  _10 = (integer(kind=8)) j_45;
  _11 = stride.2_61 * _10;
  _12 = offset.3_69 + _11;
  _13 = (integer(kind=8)) i_43;
  _14 = _12 + _13;
  _15 = *egrid_70(D)[_14];
  _16 = options.spval;
  _17 = _15 - _16;
  _18 = ABS_EXPR <_17>;
  if (_18 >= 9.999999960041972002500187954865396022796630859375e-13)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 2
;;    pred:       8
  npts_80 = npts_48 + 1;
  _19 = (integer(kind=8)) j_45;
  _20 = stride.2_61 * _19;
  _21 = offset.3_69 + _20;
  _22 = (integer(kind=8)) i_43;
  _23 = _21 + _22;
  _24 = *egrid_70(D)[_23];
  _25 = (real(kind=8)) _24;
  sum_81 = sum_51 + _25;
;;    succ:       10

;;   basic block 10, loop depth 2
;;    pred:       8
;;                9
  # npts_49 = PHI <npts_48(8), npts_80(9)>
  # sum_52 = PHI <sum_51(8), sum_81(9)>
  i_82 = i_43 + 1;
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 11, loop depth 1
;;    pred:       7
  j_83 = j_45 + 1;
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 12, loop depth 0
;;    pred:       5
  if (npts_47 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]
;;    succ:       13
;;                14

;;   basic block 13, loop depth 0
;;    pred:       12
  dt_parm.5.common.filename = &"EFILL.f"[1]{lb: 1 sz: 1};
  dt_parm.5.common.line = 77;
  dt_parm.5.common.flags = 128;
  _26 = iounit.stdout;
  dt_parm.5.common.unit = _26;
  _gfortran_st_write (&dt_parm.5);
  _gfortran_transfer_character_write (&dt_parm.5, &"EFILL:  ALL DATA ON EGRID EQUAL SPVAL"[1]{lb: 1 sz: 1}, 37);
  _gfortran_st_write_done (&dt_parm.5);
  dt_parm.5 ={v} {CLOBBER};
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 23>; [INV]
;;    succ:       23

;;   basic block 14, loop depth 0
;;    pred:       12
  _27 = (real(kind=8)) npts_47;
  _28 = sum_50 / _27;
  avg_92 = (real(kind=4)) _28;
  _93 = *jm_62(D);
  j_94 = 1;
;;    succ:       15

;;   basic block 15, loop depth 1
;;    pred:       14
;;                21
  # j_46 = PHI <j_94(14), j_101(21)>
  _95 = j_46 > _93;
  if (_95 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 16>; [INV]
;;    succ:       22
;;                16

;;   basic block 16, loop depth 1
;;    pred:       15
  _96 = *im_58(D);
  i_97 = 1;
;;    succ:       17

;;   basic block 17, loop depth 2
;;    pred:       16
;;                20
  # i_44 = PHI <i_97(16), i_100(20)>
  _98 = i_44 > _96;
  if (_98 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 18>; [INV]
;;    succ:       21
;;                18

;;   basic block 18, loop depth 2
;;    pred:       17
  _29 = (integer(kind=8)) j_46;
  _30 = stride.2_61 * _29;
  _31 = offset.3_69 + _30;
  _32 = (integer(kind=8)) i_44;
  _33 = _31 + _32;
  _34 = *egrid_70(D)[_33];
  _35 = options.spval;
  _36 = _34 - _35;
  _37 = ABS_EXPR <_36>;
  if (_37 < 9.999999960041972002500187954865396022796630859375e-13)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]
;;    succ:       19
;;                20

;;   basic block 19, loop depth 2
;;    pred:       18
  _38 = (integer(kind=8)) j_46;
  _39 = stride.2_61 * _38;
  _40 = offset.3_69 + _39;
  _41 = (integer(kind=8)) i_44;
  _42 = _40 + _41;
  *egrid_70(D)[_42] = avg_92;
;;    succ:       20

;;   basic block 20, loop depth 2
;;    pred:       18
;;                19
  i_100 = i_44 + 1;
  goto <bb 17>; [INV]
;;    succ:       17

;;   basic block 21, loop depth 1
;;    pred:       17
  j_101 = j_46 + 1;
  goto <bb 15>; [INV]
;;    succ:       15

;;   basic block 22, loop depth 0
;;    pred:       15
;;    succ:       23

;;   basic block 23, loop depth 0
;;    pred:       3
;;                13
;;                22
  fmax ={v} {CLOBBER};
  fmin ={v} {CLOBBER};
;;    succ:       24

;;   basic block 24, loop depth 0
;;    pred:       23
<L31>:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (size.6_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (size.7_5 - 5 )
Partition 6 (fmax.8_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (_12 - 12 )
Partition 13 (_13 - 13 )
Partition 14 (_14 - 14 )
Partition 15 (_15 - 15 )
Partition 16 (_16 - 16 )
Partition 17 (_17 - 17 )
Partition 18 (_18 - 18 )
Partition 19 (_19 - 19 )
Partition 20 (_20 - 20 )
Partition 21 (_21 - 21 )
Partition 22 (_22 - 22 )
Partition 23 (_23 - 23 )
Partition 24 (_24 - 24 )
Partition 25 (_25 - 25 )
Partition 26 (_26 - 26 )
Partition 27 (_27 - 27 )
Partition 28 (_28 - 28 )
Partition 29 (_29 - 29 )
Partition 30 (_30 - 30 )
Partition 31 (_31 - 31 )
Partition 32 (_32 - 32 )
Partition 33 (_33 - 33 )
Partition 34 (_34 - 34 )
Partition 35 (_35 - 35 )
Partition 36 (_36 - 36 )
Partition 37 (_37 - 37 )
Partition 38 (_38 - 38 )
Partition 39 (_39 - 39 )
Partition 40 (_40 - 40 )
Partition 41 (_41 - 41 )
Partition 42 (_42 - 42 )
Partition 43 (i_43 - 43 )
Partition 44 (i_44 - 44 )
Partition 45 (j_45 - 45 )
Partition 46 (j_46 - 46 )
Partition 47 (npts_47 - 47 )
Partition 48 (npts_48 - 48 )
Partition 49 (npts_49 - 49 )
Partition 50 (sum_50 - 50 )
Partition 51 (sum_51 - 51 )
Partition 52 (sum_52 - 52 )
Partition 58 (im_58(D) - 58 )
Partition 59 (ubound.0_59 - 59 )
Partition 60 (stride.2_60 - 60 )
Partition 61 (stride.2_61 - 61 )
Partition 62 (jm_62(D) - 62 )
Partition 63 (ubound.1_63 - 63 )
Partition 64 (size.4_64 - 64 )
Partition 65 (size.4_65 - 65 )
Partition 66 (_66 - 66 )
Partition 67 (_67 - 67 )
Partition 68 (_68 - 68 )
Partition 69 (offset.3_69 - 69 )
Partition 70 (egrid_70(D) - 70 )
Partition 72 (npts_72 - 72 )
Partition 73 (sum_73 - 73 )
Partition 74 (_74 - 74 )
Partition 75 (j_75 - 75 )
Partition 76 (_76 - 76 )
Partition 77 (_77 - 77 )
Partition 78 (i_78 - 78 )
Partition 79 (_79 - 79 )
Partition 80 (npts_80 - 80 )
Partition 81 (sum_81 - 81 )
Partition 82 (i_82 - 82 )
Partition 83 (j_83 - 83 )
Partition 92 (avg_92 - 92 )
Partition 93 (_93 - 93 )
Partition 94 (j_94 - 94 )
Partition 95 (_95 - 95 )
Partition 96 (_96 - 96 )
Partition 97 (i_97 - 97 )
Partition 98 (_98 - 98 )
Partition 100 (i_100 - 100 )
Partition 101 (j_101 - 101 )


Coalescible Partition map 

Partition 0, base 0 (i_43 - 43 44 78 82 97 100 )
Partition 2, base 1 (j_45 - 45 46 75 83 94 101 )
Partition 4, base 2 (npts_47 - 47 48 49 72 80 )
Partition 7, base 3 (sum_50 - 50 51 52 73 81 )
Partition 10, base 4 (im_58(D) - 58 )
Partition 11, base 5 (jm_62(D) - 62 )
Partition 12, base 6 (egrid_70(D) - 70 )


Partition map 

Partition 0 (i_43 - 43 )
Partition 1 (i_44 - 44 )
Partition 2 (j_45 - 45 )
Partition 3 (j_46 - 46 )
Partition 4 (npts_47 - 47 )
Partition 5 (npts_48 - 48 )
Partition 6 (npts_49 - 49 )
Partition 7 (sum_50 - 50 )
Partition 8 (sum_51 - 51 )
Partition 9 (sum_52 - 52 )
Partition 10 (im_58(D) - 58 )
Partition 11 (jm_62(D) - 62 )
Partition 12 (egrid_70(D) - 70 )
Partition 13 (npts_72 - 72 )
Partition 14 (sum_73 - 73 )
Partition 15 (j_75 - 75 )
Partition 16 (i_78 - 78 )
Partition 17 (npts_80 - 80 )
Partition 18 (sum_81 - 81 )
Partition 19 (i_82 - 82 )
Partition 20 (j_83 - 83 )
Partition 21 (j_94 - 94 )
Partition 22 (i_97 - 97 )
Partition 23 (i_100 - 100 )
Partition 24 (j_101 - 101 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) j_45 <-> j_75
(2147483646, 0) j_45 <-> j_83
(2147483646, 0) npts_47 <-> npts_72
(2147483646, 0) npts_47 <-> npts_48
(2147483646, 0) sum_50 <-> sum_73
(2147483646, 0) sum_50 <-> sum_51
(2147483646, 0) i_43 <-> i_78
(2147483646, 0) i_43 <-> i_82
(2147483646, 0) i_43 <-> i_44
(2147483646, 0) j_45 <-> j_46
(2147483646, 0) npts_47 <-> npts_49
(2147483646, 0) sum_50 <-> sum_52
(2147483646, 0) npts_47 <-> npts_80
(2147483646, 0) sum_50 <-> sum_81
(2147483646, 0) j_45 <-> j_94
(2147483646, 0) i_43 <-> i_97
(2147483646, 0) i_43 <-> i_100
(2147483646, 0) j_45 <-> j_101
(30000, 0) npts_48 <-> npts_49
(30000, 0) sum_51 <-> sum_52
(10000, 0) npts_49 <-> npts_80
(10000, 0) sum_52 <-> sum_81
(10000, 0) j_46 <-> j_94
(10000, 0) j_46 <-> j_101
(10000, 0) i_44 <-> i_97
(10000, 0) i_44 <-> i_100

Partition map 

Partition 0 (i_43 - 43 )
Partition 1 (i_44 - 44 )
Partition 2 (j_45 - 45 )
Partition 3 (j_46 - 46 )
Partition 4 (npts_47 - 47 )
Partition 5 (npts_48 - 48 )
Partition 6 (npts_49 - 49 )
Partition 7 (sum_50 - 50 )
Partition 8 (sum_51 - 51 )
Partition 9 (sum_52 - 52 )
Partition 10 (im_58(D) - 58 )
Partition 11 (jm_62(D) - 62 )
Partition 12 (egrid_70(D) - 70 )
Partition 13 (npts_72 - 72 )
Partition 14 (sum_73 - 73 )
Partition 15 (j_75 - 75 )
Partition 16 (i_78 - 78 )
Partition 17 (npts_80 - 80 )
Partition 18 (sum_81 - 81 )
Partition 19 (i_82 - 82 )
Partition 20 (j_83 - 83 )
Partition 21 (j_94 - 94 )
Partition 22 (i_97 - 97 )
Partition 23 (i_100 - 100 )
Partition 24 (j_101 - 101 )

Coalesce list: (45)j_45 & (75)j_75 [map: 2, 15] : Success -> 2
Coalesce list: (45)j_45 & (83)j_83 [map: 2, 20] : Success -> 2
Coalesce list: (47)npts_47 & (72)npts_72 [map: 4, 13] : Success -> 4
Coalesce list: (47)npts_47 & (48)npts_48 [map: 4, 5] : Success -> 4
Coalesce list: (50)sum_50 & (73)sum_73 [map: 7, 14] : Success -> 7
Coalesce list: (50)sum_50 & (51)sum_51 [map: 7, 8] : Success -> 7
Coalesce list: (43)i_43 & (78)i_78 [map: 0, 16] : Success -> 0
Coalesce list: (43)i_43 & (82)i_82 [map: 0, 19] : Success -> 0
Coalesce list: (43)i_43 & (44)i_44 [map: 0, 1] : Success -> 0
Coalesce list: (45)j_45 & (46)j_46 [map: 2, 3] : Success -> 2
Coalesce list: (47)npts_47 & (49)npts_49 [map: 4, 6] : Success -> 4
Coalesce list: (50)sum_50 & (52)sum_52 [map: 7, 9] : Success -> 7
Coalesce list: (47)npts_47 & (80)npts_80 [map: 4, 17] : Success -> 4
Coalesce list: (50)sum_50 & (81)sum_81 [map: 7, 18] : Success -> 7
Coalesce list: (45)j_45 & (94)j_94 [map: 2, 21] : Success -> 2
Coalesce list: (43)i_43 & (97)i_97 [map: 0, 22] : Success -> 0
Coalesce list: (43)i_43 & (100)i_100 [map: 0, 23] : Success -> 0
Coalesce list: (45)j_45 & (101)j_101 [map: 2, 24] : Success -> 2
Coalesce list: (48)npts_47 & (49)npts_47: Already Coalesced.
Coalesce list: (51)sum_50 & (52)sum_50: Already Coalesced.
Coalesce list: (49)npts_47 & (80)npts_47: Already Coalesced.
Coalesce list: (52)sum_50 & (81)sum_50: Already Coalesced.
Coalesce list: (46)j_45 & (94)j_45: Already Coalesced.
Coalesce list: (46)j_45 & (101)j_45: Already Coalesced.
Coalesce list: (44)i_43 & (97)i_43: Already Coalesced.
Coalesce list: (44)i_43 & (100)i_43: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (size.6_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (size.7_5 - 5 )
Partition 5 (fmax.8_6 - 6 )
Partition 6 (_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (_11 - 11 )
Partition 11 (_12 - 12 )
Partition 12 (_13 - 13 )
Partition 13 (_14 - 14 )
Partition 14 (_15 - 15 )
Partition 15 (_16 - 16 )
Partition 16 (_17 - 17 )
Partition 17 (_18 - 18 )
Partition 18 (_19 - 19 )
Partition 19 (_20 - 20 )
Partition 20 (_21 - 21 )
Partition 21 (_22 - 22 )
Partition 22 (_23 - 23 )
Partition 23 (_24 - 24 )
Partition 24 (_25 - 25 )
Partition 25 (_26 - 26 )
Partition 26 (_27 - 27 )
Partition 27 (_28 - 28 )
Partition 28 (_29 - 29 )
Partition 29 (_30 - 30 )
Partition 30 (_31 - 31 )
Partition 31 (_32 - 32 )
Partition 32 (_33 - 33 )
Partition 33 (_34 - 34 )
Partition 34 (_35 - 35 )
Partition 35 (_36 - 36 )
Partition 36 (_37 - 37 )
Partition 37 (_38 - 38 )
Partition 38 (_39 - 39 )
Partition 39 (_40 - 40 )
Partition 40 (_41 - 41 )
Partition 41 (_42 - 42 )
Partition 42 (i_43 - 43 44 78 82 97 100 )
Partition 43 (j_45 - 45 46 75 83 94 101 )
Partition 44 (npts_47 - 47 48 49 72 80 )
Partition 45 (sum_50 - 50 51 52 73 81 )
Partition 46 (im_58(D) - 58 )
Partition 47 (ubound.0_59 - 59 )
Partition 48 (stride.2_60 - 60 )
Partition 49 (stride.2_61 - 61 )
Partition 50 (jm_62(D) - 62 )
Partition 51 (ubound.1_63 - 63 )
Partition 52 (size.4_64 - 64 )
Partition 53 (size.4_65 - 65 )
Partition 54 (_66 - 66 )
Partition 55 (_67 - 67 )
Partition 56 (_68 - 68 )
Partition 57 (offset.3_69 - 69 )
Partition 58 (egrid_70(D) - 70 )
Partition 59 (_74 - 74 )
Partition 60 (_76 - 76 )
Partition 61 (_77 - 77 )
Partition 62 (_79 - 79 )
Partition 63 (avg_92 - 92 )
Partition 64 (_93 - 93 )
Partition 65 (_95 - 95 )
Partition 66 (_96 - 96 )
Partition 67 (_98 - 98 )

efill (real(kind=4)[0:D.3832] * restrict egrid, integer(kind=4) & restrict im, integer(kind=4) & restrict jm)
{
  logical(kind=4) D.3830;
  integer(kind=4) D.3827;
  logical(kind=4) D.3826;
  integer(kind=4) D.3823;
  struct __st_parameter_dt dt_parm.5;
  logical(kind=4) D.3819;
  integer(kind=4) D.3816;
  logical(kind=4) D.3815;
  integer(kind=4) D.3812;
  sizetype D.3834;
  bitsizetype D.3833;
  integer(kind=8) D.3832;
  real(kind=8) sum;
  integer(kind=4) npts;
  integer(kind=4) j;
  integer(kind=4) i;
  real(kind=4) fmin;
  real(kind=4) fmax;
  integer(kind=8) size.4;
  integer(kind=8) offset.3;
  integer(kind=8) stride.2;
  integer(kind=8) ubound.1;
  integer(kind=8) ubound.0;
  real(kind=4) avg;
  static real(kind=4) satdel [value-expr: options.satdel];
  static integer(kind=4) iflag [value-expr: options.iflag];
  static integer(kind=4) ioffs [value-expr: options.ioffs];
  static integer(kind=4) ksb [value-expr: options.ksb];
  static integer(kind=4) ibessl [value-expr: options.ibessl];
  static real(kind=4) spval [value-expr: options.spval];
  static integer(kind=4) lunout [value-expr: iounit.lunout];
  static integer(kind=4) lunll [value-expr: iounit.lunll];
  static integer(kind=4) lunco [value-expr: iounit.lunco];
  static integer(kind=4) lcntrl [value-expr: iounit.lcntrl];
  static integer(kind=4) stdout [value-expr: iounit.stdout];
  integer(kind=4) _1;
  integer(kind=4) _2;
  sizetype size.6_3;
  bitsizetype _4;
  sizetype size.7_5;
  real(kind=4) fmax.8_6;
  real(kind=4) _7;
  real(kind=4) _8;
  real(kind=4) _9;
  integer(kind=8) _10;
  integer(kind=8) _11;
  integer(kind=8) _12;
  integer(kind=8) _13;
  integer(kind=8) _14;
  real(kind=4) _15;
  real(kind=4) _16;
  real(kind=4) _17;
  real(kind=4) _18;
  integer(kind=8) _19;
  integer(kind=8) _20;
  integer(kind=8) _21;
  integer(kind=8) _22;
  integer(kind=8) _23;
  real(kind=4) _24;
  real(kind=8) _25;
  integer(kind=4) _26;
  real(kind=8) _27;
  real(kind=8) _28;
  integer(kind=8) _29;
  integer(kind=8) _30;
  integer(kind=8) _31;
  integer(kind=8) _32;
  integer(kind=8) _33;
  real(kind=4) _34;
  real(kind=4) _35;
  real(kind=4) _36;
  real(kind=4) _37;
  integer(kind=8) _38;
  integer(kind=8) _39;
  integer(kind=8) _40;
  integer(kind=8) _41;
  integer(kind=8) _42;
  integer(kind=8) stride.2_60;
  integer(kind=8) stride.2_61;
  integer(kind=8) size.4_64;
  integer(kind=8) size.4_65;
  integer(kind=8) _66;
  bitsizetype _67;
  sizetype _68;
  integer(kind=8) offset.3_69;
  integer(kind=4) _74;
  logical(kind=4) _76;
  integer(kind=4) _77;
  logical(kind=4) _79;
  integer(kind=4) _93;
  logical(kind=4) _95;
  integer(kind=4) _96;
  logical(kind=4) _98;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = *im_58(D);
  ubound.0_59 = (integer(kind=8)) _1;
  stride.2_60 = ubound.0_59;
  stride.2_61 = MAX_EXPR <stride.2_60, 0>;
  _2 = *jm_62(D);
  ubound.1_63 = (integer(kind=8)) _2;
  size.4_64 = stride.2_61 * ubound.1_63;
  size.4_65 = MAX_EXPR <size.4_64, 0>;
  _66 = size.4_65 + -1;
  size.6_3 = (sizetype) size.4_65;
  _4 = (bitsizetype) size.6_3;
  _67 = _4 * 32;
  size.7_5 = (sizetype) size.4_65;
  _68 = size.7_5 * 4;
  offset.3_69 = ~stride.2_61;
  minmax (egrid_70(D), im_58(D), jm_62(D), &fmin, &fmax);
  fmax.8_6 = fmax;
  _7 = options.spval;
  _8 = fmax.8_6 - _7;
  _9 = ABS_EXPR <_8>;
  if (_9 > 9.999999960041972002500187954865396022796630859375e-13)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 23>; [INV]
;;    succ:       23

;;   basic block 4, loop depth 0
;;    pred:       2
  npts_72 = 0;
  sum_73 = 0.0;
  _74 = *jm_62(D);
  j_75 = 1;
;;    succ:       5

;;   basic block 5, loop depth 1
;;    pred:       4
;;                11
  # j_45 = PHI <j_75(4), j_83(11)>
  # npts_47 = PHI <npts_72(4), npts_48(11)>
  # sum_50 = PHI <sum_73(4), sum_51(11)>
  _76 = j_45 > _74;
  if (_76 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       12
;;                6

;;   basic block 6, loop depth 1
;;    pred:       5
  _77 = *im_58(D);
  i_78 = 1;
;;    succ:       7

;;   basic block 7, loop depth 2
;;    pred:       6
;;                10
  # i_43 = PHI <i_78(6), i_82(10)>
  # npts_48 = PHI <npts_47(6), npts_49(10)>
  # sum_51 = PHI <sum_50(6), sum_52(10)>
  _79 = i_43 > _77;
  if (_79 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       11
;;                8

;;   basic block 8, loop depth 2
;;    pred:       7
  _10 = (integer(kind=8)) j_45;
  _11 = stride.2_61 * _10;
  _12 = offset.3_69 + _11;
  _13 = (integer(kind=8)) i_43;
  _14 = _12 + _13;
  _15 = *egrid_70(D)[_14];
  _16 = options.spval;
  _17 = _15 - _16;
  _18 = ABS_EXPR <_17>;
  if (_18 >= 9.999999960041972002500187954865396022796630859375e-13)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 2
;;    pred:       8
  npts_80 = npts_48 + 1;
  _19 = (integer(kind=8)) j_45;
  _20 = stride.2_61 * _19;
  _21 = offset.3_69 + _20;
  _22 = (integer(kind=8)) i_43;
  _23 = _21 + _22;
  _24 = *egrid_70(D)[_23];
  _25 = (real(kind=8)) _24;
  sum_81 = sum_51 + _25;
;;    succ:       10

;;   basic block 10, loop depth 2
;;    pred:       8
;;                9
  # npts_49 = PHI <npts_48(8), npts_80(9)>
  # sum_52 = PHI <sum_51(8), sum_81(9)>
  i_82 = i_43 + 1;
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 11, loop depth 1
;;    pred:       7
  j_83 = j_45 + 1;
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 12, loop depth 0
;;    pred:       5
  if (npts_47 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]
;;    succ:       13
;;                14

;;   basic block 13, loop depth 0
;;    pred:       12
  dt_parm.5.common.filename = &"EFILL.f"[1]{lb: 1 sz: 1};
  dt_parm.5.common.line = 77;
  dt_parm.5.common.flags = 128;
  _26 = iounit.stdout;
  dt_parm.5.common.unit = _26;
  _gfortran_st_write (&dt_parm.5);
  _gfortran_transfer_character_write (&dt_parm.5, &"EFILL:  ALL DATA ON EGRID EQUAL SPVAL"[1]{lb: 1 sz: 1}, 37);
  _gfortran_st_write_done (&dt_parm.5);
  dt_parm.5 ={v} {CLOBBER};
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 23>; [INV]
;;    succ:       23

;;   basic block 14, loop depth 0
;;    pred:       12
  _27 = (real(kind=8)) npts_47;
  _28 = sum_50 / _27;
  avg_92 = (real(kind=4)) _28;
  _93 = *jm_62(D);
  j_94 = 1;
;;    succ:       15

;;   basic block 15, loop depth 1
;;    pred:       14
;;                21
  # j_46 = PHI <j_94(14), j_101(21)>
  _95 = j_46 > _93;
  if (_95 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 16>; [INV]
;;    succ:       22
;;                16

;;   basic block 16, loop depth 1
;;    pred:       15
  _96 = *im_58(D);
  i_97 = 1;
;;    succ:       17

;;   basic block 17, loop depth 2
;;    pred:       16
;;                20
  # i_44 = PHI <i_97(16), i_100(20)>
  _98 = i_44 > _96;
  if (_98 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 18>; [INV]
;;    succ:       21
;;                18

;;   basic block 18, loop depth 2
;;    pred:       17
  _29 = (integer(kind=8)) j_46;
  _30 = stride.2_61 * _29;
  _31 = offset.3_69 + _30;
  _32 = (integer(kind=8)) i_44;
  _33 = _31 + _32;
  _34 = *egrid_70(D)[_33];
  _35 = options.spval;
  _36 = _34 - _35;
  _37 = ABS_EXPR <_36>;
  if (_37 < 9.999999960041972002500187954865396022796630859375e-13)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]
;;    succ:       19
;;                20

;;   basic block 19, loop depth 2
;;    pred:       18
  _38 = (integer(kind=8)) j_46;
  _39 = stride.2_61 * _38;
  _40 = offset.3_69 + _39;
  _41 = (integer(kind=8)) i_44;
  _42 = _40 + _41;
  *egrid_70(D)[_42] = avg_92;
;;    succ:       20

;;   basic block 20, loop depth 2
;;    pred:       18
;;                19
  i_100 = i_44 + 1;
  goto <bb 17>; [INV]
;;    succ:       17

;;   basic block 21, loop depth 1
;;    pred:       17
  j_101 = j_46 + 1;
  goto <bb 15>; [INV]
;;    succ:       15

;;   basic block 22, loop depth 0
;;    pred:       15
;;    succ:       23

;;   basic block 23, loop depth 0
;;    pred:       3
;;                13
;;                22
  fmax ={v} {CLOBBER};
  fmin ={v} {CLOBBER};
;;    succ:       24

;;   basic block 24, loop depth 0
;;    pred:       23
<L31>:
  return;
;;    succ:       EXIT

}


Partition 0: size 528 align 16
	dt_parm.5

;; Generating RTL for gimple basic block 2

;; _1 = *im_58(D);

(insn 8 7 9 (set (reg/f:DI 145)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])) "EFILL.f":1 -1
     (nil))

(insn 9 8 0 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 145) [1 *im_58(D)+0 S4 A32])) "EFILL.f":1 -1
     (nil))

;; ubound.0_59 = (integer(kind=8)) _1;

(insn 10 9 11 (set (reg:DI 146)
        (sign_extend:DI (reg:SI 87 [ _1 ]))) "EFILL.f":1 -1
     (nil))

(insn 11 10 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [3 ubound.0+0 S8 A64])
        (reg:DI 146)) "EFILL.f":1 -1
     (nil))

;; stride.2_60 = ubound.0_59;

(insn 12 11 0 (set (reg:DI 129 [ stride.2_60 ])
        (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [3 ubound.0+0 S8 A64])) "EFILL.f":1 -1
     (nil))

;; stride.2_61 = MAX_EXPR <stride.2_60, 0>;

(insn 14 12 13 (set (reg:DI 147)
        (const_int 0 [0])) "EFILL.f":1 -1
     (nil))

(insn 13 14 15 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 129 [ stride.2_60 ])
            (const_int 0 [0]))) "EFILL.f":1 -1
     (nil))

(insn 15 13 0 (set (reg:DI 130 [ stride.2_61 ])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 129 [ stride.2_60 ])
            (reg:DI 147))) "EFILL.f":1 -1
     (nil))

;; _2 = *jm_62(D);

(insn 16 15 17 (set (reg/f:DI 148)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])) "EFILL.f":1 -1
     (nil))

(insn 17 16 0 (set (reg:SI 88 [ _2 ])
        (mem:SI (reg/f:DI 148) [1 *jm_62(D)+0 S4 A32])) "EFILL.f":1 -1
     (nil))

;; ubound.1_63 = (integer(kind=8)) _2;

(insn 18 17 19 (set (reg:DI 149)
        (sign_extend:DI (reg:SI 88 [ _2 ]))) "EFILL.f":1 -1
     (nil))

(insn 19 18 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [3 ubound.1+0 S8 A64])
        (reg:DI 149)) "EFILL.f":1 -1
     (nil))

;; size.4_64 = stride.2_61 * ubound.1_63;

(insn 20 19 0 (parallel [
            (set (reg:DI 131 [ size.4_64 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -40 [0xffffffffffffffd8])) [3 ubound.1+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":1 -1
     (nil))

;; size.4_65 = MAX_EXPR <size.4_64, 0>;

(insn 22 20 21 (set (reg:DI 150)
        (const_int 0 [0])) "EFILL.f":1 -1
     (nil))

(insn 21 22 23 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 131 [ size.4_64 ])
            (const_int 0 [0]))) "EFILL.f":1 -1
     (nil))

(insn 23 21 0 (set (reg:DI 132 [ size.4_65 ])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 131 [ size.4_64 ])
            (reg:DI 150))) "EFILL.f":1 -1
     (nil))

;; _66 = size.4_65 + -1;

(insn 24 23 0 (parallel [
            (set (reg:DI 133 [ _66 ])
                (plus:DI (reg:DI 132 [ size.4_65 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":1 -1
     (nil))

;; size.6_3 = (sizetype) size.4_65;

(insn 25 24 0 (set (reg:DI 89 [ size.6_3 ])
        (reg:DI 132 [ size.4_65 ])) "EFILL.f":1 -1
     (nil))

;; _4 = (bitsizetype) size.6_3;

(insn 26 25 27 (set (subreg:DI (reg:TI 90 [ _4 ]) 0)
        (reg:DI 89 [ size.6_3 ])) "EFILL.f":1 -1
     (nil))

(insn 27 26 0 (set (subreg:DI (reg:TI 90 [ _4 ]) 8)
        (const_int 0 [0])) "EFILL.f":1 -1
     (nil))

;; _67 = _4 * 32;

(insn 28 27 0 (parallel [
            (set (reg:TI 134 [ _67 ])
                (ashift:TI (reg:TI 90 [ _4 ])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":1 -1
     (nil))

;; size.7_5 = (sizetype) size.4_65;

(insn 29 28 0 (set (reg:DI 91 [ size.7_5 ])
        (reg:DI 132 [ size.4_65 ])) "EFILL.f":1 -1
     (nil))

;; _68 = size.7_5 * 4;

(insn 30 29 0 (parallel [
            (set (reg:DI 135 [ _68 ])
                (ashift:DI (reg:DI 91 [ size.7_5 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":1 -1
     (nil))

;; offset.3_69 = ~stride.2_61;

(insn 31 30 0 (set (reg:DI 136 [ offset.3_69 ])
        (not:DI (reg:DI 130 [ stride.2_61 ]))) "EFILL.f":1 -1
     (nil))

;; minmax (egrid_70(D), im_58(D), jm_62(D), &fmin, &fmax);

(insn 32 31 33 (parallel [
            (set (reg:DI 151)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":60 -1
     (nil))

(insn 33 32 34 (parallel [
            (set (reg:DI 152)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":60 -1
     (nil))

(insn 34 33 35 (set (reg:DI 153)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])) "EFILL.f":60 -1
     (nil))

(insn 35 34 36 (set (reg:DI 154)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])) "EFILL.f":60 -1
     (nil))

(insn 36 35 37 (set (reg:DI 155)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":60 -1
     (nil))

(insn 37 36 38 (set (reg:DI 37 r8)
        (reg:DI 151)) "EFILL.f":60 -1
     (nil))

(insn 38 37 39 (set (reg:DI 2 cx)
        (reg:DI 152)) "EFILL.f":60 -1
     (nil))

(insn 39 38 40 (set (reg:DI 1 dx)
        (reg:DI 153)) "EFILL.f":60 -1
     (nil))

(insn 40 39 41 (set (reg:DI 4 si)
        (reg:DI 154)) "EFILL.f":60 -1
     (nil))

(insn 41 40 42 (set (reg:DI 5 di)
        (reg:DI 155)) "EFILL.f":60 -1
     (nil))

(insn 42 41 43 (set (reg:QI 0 ax)
        (const_int 0 [0])) "EFILL.f":60 -1
     (nil))

(call_insn 43 42 0 (call (mem:QI (symbol_ref:DI ("minmax_") [flags 0x41]  <function_decl 0x7f09ef033600 minmax>) [0 minmax S1 A8])
        (const_int 0 [0])) "EFILL.f":60 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (nil))))))))

;; fmax.8_6 = fmax;

(insn 44 43 0 (set (reg:SF 92 [ fmax.8_6 ])
        (mem/c:SF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [4 fmax+0 S4 A128])) "EFILL.f":61 -1
     (nil))

;; _7 = options.spval;

(insn 45 44 0 (set (reg:SF 93 [ _7 ])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f09f60a6e10 options>) [4 options.spval+0 S4 A128])) "EFILL.f":1 -1
     (nil))

;; _8 = fmax.8_6 - _7;

(insn 46 45 0 (set (reg:SF 94 [ _8 ])
        (minus:SF (reg:SF 92 [ fmax.8_6 ])
            (reg:SF 93 [ _7 ]))) "EFILL.f":61 -1
     (nil))

;; _9 = ABS_EXPR <_8>;

(insn 47 46 48 (set (reg:V4SF 156)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S16 A128])) "EFILL.f":61 -1
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))

(insn 48 47 0 (parallel [
            (set (reg:SF 95 [ _9 ])
                (abs:SF (reg:SF 94 [ _8 ])))
            (use (reg:V4SF 156))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":61 -1
     (expr_list:REG_EQUAL (abs:SF (reg:SF 94 [ _8 ]))
        (nil)))

;; if (_9 > 9.999999960041972002500187954865396022796630859375e-13)

(insn 49 48 50 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 95 [ _9 ])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32]))) "EFILL.f":61 -1
     (nil))

(jump_insn 50 49 51 (set (pc)
        (if_then_else (gt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "EFILL.f":61 -1
     (nil))

(jump_insn 51 50 52 (set (pc)
        (label_ref 0)) "EFILL.f":61 -1
     (nil))

(barrier 52 51 53)

(code_label 53 52 0 3 (nil) [0 uses])

;; Generating RTL for gimple basic block 3

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 4

;; 

(code_label 57 56 58 2 (nil) [0 uses])

(note 58 57 0 NOTE_INSN_BASIC_BLOCK)

;; npts_72 = 0;

(insn 59 58 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32])
        (const_int 0 [0])) "EFILL.f":65 -1
     (nil))

;; sum_73 = 0.0;

(insn 60 59 61 (set (reg:DF 157)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64])) "EFILL.f":66 -1
     (nil))

(insn 61 60 0 (set (mem/c:DF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 sum+0 S8 A64])
        (reg:DF 157)) "EFILL.f":66 -1
     (nil))

;; _74 = *jm_62(D);

(insn 62 61 63 (set (reg/f:DI 158)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])) "EFILL.f":68 -1
     (nil))

(insn 63 62 0 (set (reg:SI 137 [ _74 ])
        (mem:SI (reg/f:DI 158) [1 *jm_62(D)+0 S4 A32])) "EFILL.f":68 -1
     (nil))

;; j_75 = 1;

(insn 64 63 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":68 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; _76 = j_45 > _74;

(insn 66 65 67 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 137 [ _74 ]))) "EFILL.f":68 -1
     (nil))

(insn 67 66 68 (set (reg:QI 159)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":68 -1
     (nil))

(insn 68 67 0 (set (reg:SI 138 [ _76 ])
        (zero_extend:SI (reg:QI 159))) "EFILL.f":68 -1
     (nil))

;; if (_76 != 0)

(insn 69 68 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 138 [ _76 ])
            (const_int 0 [0]))) "EFILL.f":68 -1
     (nil))

(jump_insn 70 69 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "EFILL.f":68 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; _77 = *im_58(D);

(insn 72 71 73 (set (reg/f:DI 160)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])) "EFILL.f":69 -1
     (nil))

(insn 73 72 0 (set (reg:SI 139 [ _77 ])
        (mem:SI (reg/f:DI 160) [1 *im_58(D)+0 S4 A32])) "EFILL.f":69 -1
     (nil))

;; i_78 = 1;

(insn 74 73 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":69 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; _79 = i_43 > _77;

(insn 76 75 77 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (reg:SI 139 [ _77 ]))) "EFILL.f":69 -1
     (nil))

(insn 77 76 78 (set (reg:QI 161)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":69 -1
     (nil))

(insn 78 77 0 (set (reg:SI 140 [ _79 ])
        (zero_extend:SI (reg:QI 161))) "EFILL.f":69 -1
     (nil))

;; if (_79 != 0)

(insn 79 78 80 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 140 [ _79 ])
            (const_int 0 [0]))) "EFILL.f":69 -1
     (nil))

(jump_insn 80 79 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "EFILL.f":69 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; _10 = (integer(kind=8)) j_45;

(insn 82 81 83 (set (reg:SI 162)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILL.f":70 -1
     (nil))

(insn 83 82 0 (set (reg:DI 96 [ _10 ])
        (sign_extend:DI (reg:SI 162))) "EFILL.f":70 -1
     (nil))

;; _11 = stride.2_61 * _10;

(insn 84 83 0 (parallel [
            (set (reg:DI 97 [ _11 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (reg:DI 96 [ _10 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 -1
     (nil))

;; _12 = offset.3_69 + _11;

(insn 85 84 0 (parallel [
            (set (reg:DI 98 [ _12 ])
                (plus:DI (reg:DI 136 [ offset.3_69 ])
                    (reg:DI 97 [ _11 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 -1
     (nil))

;; _13 = (integer(kind=8)) i_43;

(insn 86 85 87 (set (reg:SI 163)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILL.f":70 -1
     (nil))

(insn 87 86 0 (set (reg:DI 99 [ _13 ])
        (sign_extend:DI (reg:SI 163))) "EFILL.f":70 -1
     (nil))

;; _14 = _12 + _13;

(insn 88 87 0 (parallel [
            (set (reg:DI 100 [ _14 ])
                (plus:DI (reg:DI 98 [ _12 ])
                    (reg:DI 99 [ _13 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 -1
     (nil))

;; _15 = *egrid_70(D)[_14];

(insn 89 88 90 (set (reg/f:DI 164)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":70 -1
     (nil))

(insn 90 89 0 (set (reg:SF 101 [ _15 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 100 [ _14 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 164)) [4 *egrid_70(D) S4 A32])) "EFILL.f":70 -1
     (nil))

;; _16 = options.spval;

(insn 91 90 0 (set (reg:SF 102 [ _16 ])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f09f60a6e10 options>) [4 options.spval+0 S4 A128])) "EFILL.f":1 -1
     (nil))

;; _17 = _15 - _16;

(insn 92 91 0 (set (reg:SF 103 [ _17 ])
        (minus:SF (reg:SF 101 [ _15 ])
            (reg:SF 102 [ _16 ]))) "EFILL.f":70 -1
     (nil))

;; _18 = ABS_EXPR <_17>;

(insn 93 92 94 (set (reg:V4SF 165)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S16 A128])) "EFILL.f":70 -1
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))

(insn 94 93 0 (parallel [
            (set (reg:SF 104 [ _18 ])
                (abs:SF (reg:SF 103 [ _17 ])))
            (use (reg:V4SF 165))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 -1
     (expr_list:REG_EQUAL (abs:SF (reg:SF 103 [ _17 ]))
        (nil)))

;; if (_18 >= 9.999999960041972002500187954865396022796630859375e-13)

(insn 95 94 96 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 104 [ _18 ])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32]))) "EFILL.f":70 -1
     (nil))

(jump_insn 96 95 97 (set (pc)
        (if_then_else (ge (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) "EFILL.f":70 -1
     (nil))

(jump_insn 97 96 98 (set (pc)
        (label_ref 0)) "EFILL.f":70 -1
     (nil))

(barrier 98 97 99)

(code_label 99 98 0 8 (nil) [0 uses])

;; Generating RTL for gimple basic block 9

;; npts_80 = npts_48 + 1;

(insn 101 100 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":71 -1
     (nil))

;; _19 = (integer(kind=8)) j_45;

(insn 102 101 103 (set (reg:SI 166)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILL.f":72 -1
     (nil))

(insn 103 102 0 (set (reg:DI 105 [ _19 ])
        (sign_extend:DI (reg:SI 166))) "EFILL.f":72 -1
     (nil))

;; _20 = stride.2_61 * _19;

(insn 104 103 0 (parallel [
            (set (reg:DI 106 [ _20 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (reg:DI 105 [ _19 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":72 -1
     (nil))

;; _21 = offset.3_69 + _20;

(insn 105 104 0 (parallel [
            (set (reg:DI 107 [ _21 ])
                (plus:DI (reg:DI 136 [ offset.3_69 ])
                    (reg:DI 106 [ _20 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":72 -1
     (nil))

;; _22 = (integer(kind=8)) i_43;

(insn 106 105 107 (set (reg:SI 167)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILL.f":72 -1
     (nil))

(insn 107 106 0 (set (reg:DI 108 [ _22 ])
        (sign_extend:DI (reg:SI 167))) "EFILL.f":72 -1
     (nil))

;; _23 = _21 + _22;

(insn 108 107 0 (parallel [
            (set (reg:DI 109 [ _23 ])
                (plus:DI (reg:DI 107 [ _21 ])
                    (reg:DI 108 [ _22 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":72 -1
     (nil))

;; _24 = *egrid_70(D)[_23];

(insn 109 108 110 (set (reg/f:DI 168)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":72 -1
     (nil))

(insn 110 109 0 (set (reg:SF 110 [ _24 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 109 [ _23 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 168)) [4 *egrid_70(D) S4 A32])) "EFILL.f":72 -1
     (nil))

;; _25 = (real(kind=8)) _24;

(insn 111 110 0 (set (reg:DF 111 [ _25 ])
        (float_extend:DF (reg:SF 110 [ _24 ]))) "EFILL.f":72 -1
     (nil))

;; sum_81 = sum_51 + _25;

(insn 112 111 113 (set (reg:DF 170)
        (mem/c:DF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 sum+0 S8 A64])) "EFILL.f":72 -1
     (nil))

(insn 113 112 114 (set (reg:DF 169)
        (plus:DF (reg:DF 170)
            (reg:DF 111 [ _25 ]))) "EFILL.f":72 -1
     (nil))

(insn 114 113 0 (set (mem/c:DF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 sum+0 S8 A64])
        (reg:DF 169)) "EFILL.f":72 -1
     (nil))

;; Generating RTL for gimple basic block 10

;; 

(code_label 115 114 116 7 (nil) [0 uses])

(note 116 115 0 NOTE_INSN_BASIC_BLOCK)

;; i_82 = i_43 + 1;

(insn 117 116 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":69 -1
     (nil))

;; Generating RTL for gimple basic block 11

;; 

(code_label 121 120 122 6 (nil) [0 uses])

(note 122 121 0 NOTE_INSN_BASIC_BLOCK)

;; j_83 = j_45 + 1;

(insn 123 122 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":68 -1
     (nil))

;; Generating RTL for gimple basic block 12

;; 

(code_label 127 126 128 5 (nil) [0 uses])

(note 128 127 0 NOTE_INSN_BASIC_BLOCK)

;; if (npts_47 == 0)

(insn 129 128 130 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32])
            (const_int 0 [0]))) "EFILL.f":76 -1
     (nil))

(jump_insn 130 129 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "EFILL.f":76 -1
     (nil))

;; Generating RTL for gimple basic block 13

;; dt_parm.5.common.filename = &"EFILL.f"[1]{lb: 1 sz: 1};

(insn 132 131 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -584 [0xfffffffffffffdb8])) [7 dt_parm.5.common.filename+0 S8 A64])
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f09ef0432d0 *.LC3>)) "EFILL.f":77 -1
     (nil))

;; dt_parm.5.common.line = 77;

(insn 133 132 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -576 [0xfffffffffffffdc0])) [1 dt_parm.5.common.line+0 S4 A128])
        (const_int 77 [0x4d])) "EFILL.f":77 -1
     (nil))

;; dt_parm.5.common.flags = 128;

(insn 134 133 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -592 [0xfffffffffffffdb0])) [1 dt_parm.5.common.flags+0 S4 A128])
        (const_int 128 [0x80])) "EFILL.f":77 -1
     (nil))

;; _26 = iounit.stdout;

(insn 135 134 0 (set (reg:SI 112 [ _26 ])
        (mem/c:SI (symbol_ref:DI ("iounit_") [flags 0x2]  <var_decl 0x7f09f60a6ab0 iounit>) [1 iounit.stdout+0 S4 A128])) "EFILL.f":1 -1
     (nil))

;; dt_parm.5.common.unit = _26;

(insn 136 135 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -588 [0xfffffffffffffdb4])) [1 dt_parm.5.common.unit+0 S4 A32])
        (reg:SI 112 [ _26 ])) "EFILL.f":77 -1
     (nil))

;; _gfortran_st_write (&dt_parm.5);

(insn 137 136 138 (parallel [
            (set (reg:DI 171)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":77 -1
     (nil))

(insn 138 137 139 (set (reg:DI 5 di)
        (reg:DI 171)) "EFILL.f":77 -1
     (nil))

(call_insn 139 138 0 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x7f09ef030400 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "EFILL.f":77 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; _gfortran_transfer_character_write (&dt_parm.5, &"EFILL:  ALL DATA ON EGRID EQUAL SPVAL"[1]{lb: 1 sz: 1}, 37);

(insn 140 139 141 (parallel [
            (set (reg:DI 172)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":77 -1
     (nil))

(insn 141 140 142 (set (reg:DI 1 dx)
        (const_int 37 [0x25])) "EFILL.f":77 -1
     (nil))

(insn 142 141 143 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f09ef043360 *.LC4>)) "EFILL.f":77 -1
     (nil))

(insn 143 142 144 (set (reg:DI 5 di)
        (reg:DI 172)) "EFILL.f":77 -1
     (nil))

(call_insn 144 143 0 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x7f09ef02d500 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "EFILL.f":77 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))

;; _gfortran_st_write_done (&dt_parm.5);

(insn 145 144 146 (parallel [
            (set (reg:DI 173)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":77 -1
     (nil))

(insn 146 145 147 (set (reg:DI 5 di)
        (reg:DI 173)) "EFILL.f":77 -1
     (nil))

(call_insn 147 146 0 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x7f09ef030f00 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "EFILL.f":77 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; dt_parm.5 ={v} {CLOBBER};

(nil)

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 14

;; 

(code_label 150 149 151 11 (nil) [0 uses])

(note 151 150 0 NOTE_INSN_BASIC_BLOCK)

;; _27 = (real(kind=8)) npts_47;

(insn 152 151 0 (set (reg:DF 113 [ _27 ])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32]))) "EFILL.f":80 -1
     (nil))

;; _28 = sum_50 / _27;

(insn 153 152 154 (set (reg:DF 174)
        (mem/c:DF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 sum+0 S8 A64])) "EFILL.f":80 -1
     (nil))

(insn 154 153 0 (set (reg:DF 114 [ _28 ])
        (div:DF (reg:DF 174)
            (reg:DF 113 [ _27 ]))) "EFILL.f":80 -1
     (nil))

;; avg_92 = (real(kind=4)) _28;

(insn 155 154 0 (set (mem/c:SF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -44 [0xffffffffffffffd4])) [4 avg+0 S4 A32])
        (float_truncate:SF (reg:DF 114 [ _28 ]))) "EFILL.f":80 -1
     (nil))

;; _93 = *jm_62(D);

(insn 156 155 157 (set (reg/f:DI 175)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])) "EFILL.f":85 -1
     (nil))

(insn 157 156 0 (set (reg:SI 141 [ _93 ])
        (mem:SI (reg/f:DI 175) [1 *jm_62(D)+0 S4 A32])) "EFILL.f":85 -1
     (nil))

;; j_94 = 1;

(insn 158 157 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":85 -1
     (nil))

;; Generating RTL for gimple basic block 15

;; _95 = j_46 > _93;

(insn 160 159 161 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 141 [ _93 ]))) "EFILL.f":85 -1
     (nil))

(insn 161 160 162 (set (reg:QI 176)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":85 -1
     (nil))

(insn 162 161 0 (set (reg:SI 142 [ _95 ])
        (zero_extend:SI (reg:QI 176))) "EFILL.f":85 -1
     (nil))

;; if (_95 != 0)

(insn 163 162 164 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 142 [ _95 ])
            (const_int 0 [0]))) "EFILL.f":85 -1
     (nil))

(jump_insn 164 163 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "EFILL.f":85 -1
     (nil))

;; Generating RTL for gimple basic block 16

;; _96 = *im_58(D);

(insn 166 165 167 (set (reg/f:DI 177)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])) "EFILL.f":86 -1
     (nil))

(insn 167 166 0 (set (reg:SI 143 [ _96 ])
        (mem:SI (reg/f:DI 177) [1 *im_58(D)+0 S4 A32])) "EFILL.f":86 -1
     (nil))

;; i_97 = 1;

(insn 168 167 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":86 -1
     (nil))

;; Generating RTL for gimple basic block 17

;; _98 = i_44 > _96;

(insn 170 169 171 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (reg:SI 143 [ _96 ]))) "EFILL.f":86 -1
     (nil))

(insn 171 170 172 (set (reg:QI 178)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":86 -1
     (nil))

(insn 172 171 0 (set (reg:SI 144 [ _98 ])
        (zero_extend:SI (reg:QI 178))) "EFILL.f":86 -1
     (nil))

;; if (_98 != 0)

(insn 173 172 174 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 144 [ _98 ])
            (const_int 0 [0]))) "EFILL.f":86 -1
     (nil))

(jump_insn 174 173 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "EFILL.f":86 -1
     (nil))

;; Generating RTL for gimple basic block 18

;; _29 = (integer(kind=8)) j_46;

(insn 176 175 177 (set (reg:SI 179)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILL.f":87 -1
     (nil))

(insn 177 176 0 (set (reg:DI 115 [ _29 ])
        (sign_extend:DI (reg:SI 179))) "EFILL.f":87 -1
     (nil))

;; _30 = stride.2_61 * _29;

(insn 178 177 0 (parallel [
            (set (reg:DI 116 [ _30 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (reg:DI 115 [ _29 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (nil))

;; _31 = offset.3_69 + _30;

(insn 179 178 0 (parallel [
            (set (reg:DI 117 [ _31 ])
                (plus:DI (reg:DI 136 [ offset.3_69 ])
                    (reg:DI 116 [ _30 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (nil))

;; _32 = (integer(kind=8)) i_44;

(insn 180 179 181 (set (reg:SI 180)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILL.f":87 -1
     (nil))

(insn 181 180 0 (set (reg:DI 118 [ _32 ])
        (sign_extend:DI (reg:SI 180))) "EFILL.f":87 -1
     (nil))

;; _33 = _31 + _32;

(insn 182 181 0 (parallel [
            (set (reg:DI 119 [ _33 ])
                (plus:DI (reg:DI 117 [ _31 ])
                    (reg:DI 118 [ _32 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (nil))

;; _34 = *egrid_70(D)[_33];

(insn 183 182 184 (set (reg/f:DI 181)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":87 -1
     (nil))

(insn 184 183 0 (set (reg:SF 120 [ _34 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 119 [ _33 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 181)) [4 *egrid_70(D) S4 A32])) "EFILL.f":87 -1
     (nil))

;; _35 = options.spval;

(insn 185 184 0 (set (reg:SF 121 [ _35 ])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f09f60a6e10 options>) [4 options.spval+0 S4 A128])) "EFILL.f":1 -1
     (nil))

;; _36 = _34 - _35;

(insn 186 185 0 (set (reg:SF 122 [ _36 ])
        (minus:SF (reg:SF 120 [ _34 ])
            (reg:SF 121 [ _35 ]))) "EFILL.f":87 -1
     (nil))

;; _37 = ABS_EXPR <_36>;

(insn 187 186 188 (set (reg:V4SF 182)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S16 A128])) "EFILL.f":87 -1
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))

(insn 188 187 0 (parallel [
            (set (reg:SF 123 [ _37 ])
                (abs:SF (reg:SF 122 [ _36 ])))
            (use (reg:V4SF 182))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (expr_list:REG_EQUAL (abs:SF (reg:SF 122 [ _36 ]))
        (nil)))

;; if (_37 < 9.999999960041972002500187954865396022796630859375e-13)

(insn 189 188 190 (set (reg:SF 183)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "EFILL.f":87 -1
     (expr_list:REG_EQUAL (const_double:SF 9.999999960041972002500187954865396022796630859375e-13 [0x0.8cbcccp-39])
        (nil)))

(insn 190 189 191 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 183)
            (reg:SF 123 [ _37 ]))) "EFILL.f":87 -1
     (nil))

(jump_insn 191 190 192 (set (pc)
        (if_then_else (gt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref 194)
            (pc))) "EFILL.f":87 -1
     (nil))

(jump_insn 192 191 193 (set (pc)
        (label_ref 0)) "EFILL.f":87 -1
     (nil))

(barrier 193 192 194)

(code_label 194 193 0 15 (nil) [0 uses])

;; Generating RTL for gimple basic block 19

;; _38 = (integer(kind=8)) j_46;

(insn 196 195 197 (set (reg:SI 184)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILL.f":87 -1
     (nil))

(insn 197 196 0 (set (reg:DI 124 [ _38 ])
        (sign_extend:DI (reg:SI 184))) "EFILL.f":87 -1
     (nil))

;; _39 = stride.2_61 * _38;

(insn 198 197 0 (parallel [
            (set (reg:DI 125 [ _39 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (reg:DI 124 [ _38 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (nil))

;; _40 = offset.3_69 + _39;

(insn 199 198 0 (parallel [
            (set (reg:DI 126 [ _40 ])
                (plus:DI (reg:DI 136 [ offset.3_69 ])
                    (reg:DI 125 [ _39 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (nil))

;; _41 = (integer(kind=8)) i_44;

(insn 200 199 201 (set (reg:SI 185)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILL.f":87 -1
     (nil))

(insn 201 200 0 (set (reg:DI 127 [ _41 ])
        (sign_extend:DI (reg:SI 185))) "EFILL.f":87 -1
     (nil))

;; _42 = _40 + _41;

(insn 202 201 0 (parallel [
            (set (reg:DI 128 [ _42 ])
                (plus:DI (reg:DI 126 [ _40 ])
                    (reg:DI 127 [ _41 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (nil))

;; *egrid_70(D)[_42] = avg_92;

(insn 203 202 204 (set (reg/f:DI 186)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":87 -1
     (nil))

(insn 204 203 205 (set (reg:SF 187)
        (mem/c:SF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -44 [0xffffffffffffffd4])) [4 avg+0 S4 A32])) "EFILL.f":87 -1
     (nil))

(insn 205 204 0 (set (mem:SF (plus:DI (mult:DI (reg:DI 128 [ _42 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 186)) [4 *egrid_70(D) S4 A32])
        (reg:SF 187)) "EFILL.f":87 -1
     (nil))

;; Generating RTL for gimple basic block 20

;; 

(code_label 206 205 207 14 (nil) [0 uses])

(note 207 206 0 NOTE_INSN_BASIC_BLOCK)

;; i_100 = i_44 + 1;

(insn 208 207 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":86 -1
     (nil))

;; Generating RTL for gimple basic block 21

;; 

(code_label 212 211 213 13 (nil) [0 uses])

(note 213 212 0 NOTE_INSN_BASIC_BLOCK)

;; j_101 = j_46 + 1;

(insn 214 213 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":85 -1
     (nil))

;; Generating RTL for gimple basic block 22

;; 

(code_label 218 217 219 12 (nil) [0 uses])

(note 219 218 0 NOTE_INSN_BASIC_BLOCK)

;; Generating RTL for gimple basic block 23

;; 

(code_label 220 219 221 4 (nil) [0 uses])

(note 221 220 0 NOTE_INSN_BASIC_BLOCK)

;; fmax ={v} {CLOBBER};

(nil)

;; fmin ={v} {CLOBBER};

(nil)

;; Generating RTL for gimple basic block 24

;; <L31>:

(code_label 222 221 223 18 (nil) [0 uses])

(note 223 222 0 NOTE_INSN_BASIC_BLOCK)
Purged non-fallthru edges from bb 28
Purged non-fallthru edges from bb 30
Purged non-fallthru edges from bb 32


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 2->5 redirected to 32
Forwarding edge 2->4 to 7 failed.
Forwarding edge 2->4 to 7 failed.
deleting block 5
deleting block 6
Removing jump 51.
Merging block 7 into block 4...
Merged blocks 4 and 7.
Merged 4 and 7 without moving.
Edge 11->13 redirected to 14
Forwarding edge 11->12 to 15 failed.
Forwarding edge 11->12 to 15 failed.
deleting block 13
Redirecting jump 148 from 30 to 32.
Edge 23->25 redirected to 26
Forwarding edge 23->24 to 27 failed.
Forwarding edge 23->24 to 27 failed.
deleting block 25
Merging block 30 into block 29...
Merged blocks 29 and 30.
Merged 29 and 30 without moving.
Merging block 31 into block 29...
Merged blocks 29 and 31.
Merged 29 and 31 without moving.


try_optimize_cfg iteration 2

Forwarding edge 11->12 to 15 failed.
Forwarding edge 23->24 to 27 failed.
fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])
        (reg:DI 5 di [ egrid ])) "EFILL.f":1 -1
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])
        (reg:DI 4 si [ im ])) "EFILL.f":1 -1
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])
        (reg:DI 1 dx [ jm ])) "EFILL.f":1 -1
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 145)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])) "EFILL.f":1 -1
     (nil))
(insn 9 8 10 2 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 145) [1 *im_58(D)+0 S4 A32])) "EFILL.f":1 -1
     (nil))
(insn 10 9 11 2 (set (reg:DI 146)
        (sign_extend:DI (reg:SI 87 [ _1 ]))) "EFILL.f":1 -1
     (nil))
(insn 11 10 12 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [3 ubound.0+0 S8 A64])
        (reg:DI 146)) "EFILL.f":1 -1
     (nil))
(insn 12 11 14 2 (set (reg:DI 129 [ stride.2_60 ])
        (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [3 ubound.0+0 S8 A64])) "EFILL.f":1 -1
     (nil))
(insn 14 12 13 2 (set (reg:DI 147)
        (const_int 0 [0])) "EFILL.f":1 -1
     (nil))
(insn 13 14 15 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 129 [ stride.2_60 ])
            (const_int 0 [0]))) "EFILL.f":1 -1
     (nil))
(insn 15 13 16 2 (set (reg:DI 130 [ stride.2_61 ])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 129 [ stride.2_60 ])
            (reg:DI 147))) "EFILL.f":1 -1
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 148)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])) "EFILL.f":1 -1
     (nil))
(insn 17 16 18 2 (set (reg:SI 88 [ _2 ])
        (mem:SI (reg/f:DI 148) [1 *jm_62(D)+0 S4 A32])) "EFILL.f":1 -1
     (nil))
(insn 18 17 19 2 (set (reg:DI 149)
        (sign_extend:DI (reg:SI 88 [ _2 ]))) "EFILL.f":1 -1
     (nil))
(insn 19 18 20 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [3 ubound.1+0 S8 A64])
        (reg:DI 149)) "EFILL.f":1 -1
     (nil))
(insn 20 19 22 2 (parallel [
            (set (reg:DI 131 [ size.4_64 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -40 [0xffffffffffffffd8])) [3 ubound.1+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":1 -1
     (nil))
(insn 22 20 21 2 (set (reg:DI 150)
        (const_int 0 [0])) "EFILL.f":1 -1
     (nil))
(insn 21 22 23 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 131 [ size.4_64 ])
            (const_int 0 [0]))) "EFILL.f":1 -1
     (nil))
(insn 23 21 24 2 (set (reg:DI 132 [ size.4_65 ])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 131 [ size.4_64 ])
            (reg:DI 150))) "EFILL.f":1 -1
     (nil))
(insn 24 23 25 2 (parallel [
            (set (reg:DI 133 [ _66 ])
                (plus:DI (reg:DI 132 [ size.4_65 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":1 -1
     (nil))
(insn 25 24 26 2 (set (reg:DI 89 [ size.6_3 ])
        (reg:DI 132 [ size.4_65 ])) "EFILL.f":1 -1
     (nil))
(insn 26 25 27 2 (set (subreg:DI (reg:TI 90 [ _4 ]) 0)
        (reg:DI 89 [ size.6_3 ])) "EFILL.f":1 -1
     (nil))
(insn 27 26 28 2 (set (subreg:DI (reg:TI 90 [ _4 ]) 8)
        (const_int 0 [0])) "EFILL.f":1 -1
     (nil))
(insn 28 27 29 2 (parallel [
            (set (reg:TI 134 [ _67 ])
                (ashift:TI (reg:TI 90 [ _4 ])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":1 -1
     (nil))
(insn 29 28 30 2 (set (reg:DI 91 [ size.7_5 ])
        (reg:DI 132 [ size.4_65 ])) "EFILL.f":1 -1
     (nil))
(insn 30 29 31 2 (parallel [
            (set (reg:DI 135 [ _68 ])
                (ashift:DI (reg:DI 91 [ size.7_5 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":1 -1
     (nil))
(insn 31 30 32 2 (set (reg:DI 136 [ offset.3_69 ])
        (not:DI (reg:DI 130 [ stride.2_61 ]))) "EFILL.f":1 -1
     (nil))
(insn 32 31 33 2 (parallel [
            (set (reg:DI 151)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":60 -1
     (nil))
(insn 33 32 34 2 (parallel [
            (set (reg:DI 152)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":60 -1
     (nil))
(insn 34 33 35 2 (set (reg:DI 153)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])) "EFILL.f":60 -1
     (nil))
(insn 35 34 36 2 (set (reg:DI 154)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])) "EFILL.f":60 -1
     (nil))
(insn 36 35 37 2 (set (reg:DI 155)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":60 -1
     (nil))
(insn 37 36 38 2 (set (reg:DI 37 r8)
        (reg:DI 151)) "EFILL.f":60 -1
     (nil))
(insn 38 37 39 2 (set (reg:DI 2 cx)
        (reg:DI 152)) "EFILL.f":60 -1
     (nil))
(insn 39 38 40 2 (set (reg:DI 1 dx)
        (reg:DI 153)) "EFILL.f":60 -1
     (nil))
(insn 40 39 41 2 (set (reg:DI 4 si)
        (reg:DI 154)) "EFILL.f":60 -1
     (nil))
(insn 41 40 42 2 (set (reg:DI 5 di)
        (reg:DI 155)) "EFILL.f":60 -1
     (nil))
(insn 42 41 43 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "EFILL.f":60 -1
     (nil))
(call_insn 43 42 44 2 (call (mem:QI (symbol_ref:DI ("minmax_") [flags 0x41]  <function_decl 0x7f09ef033600 minmax>) [0 minmax S1 A8])
        (const_int 0 [0])) "EFILL.f":60 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (nil))))))))
(insn 44 43 45 2 (set (reg:SF 92 [ fmax.8_6 ])
        (mem/c:SF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [4 fmax+0 S4 A128])) "EFILL.f":61 -1
     (nil))
(insn 45 44 46 2 (set (reg:SF 93 [ _7 ])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f09f60a6e10 options>) [4 options.spval+0 S4 A128])) "EFILL.f":1 -1
     (nil))
(insn 46 45 47 2 (set (reg:SF 94 [ _8 ])
        (minus:SF (reg:SF 92 [ fmax.8_6 ])
            (reg:SF 93 [ _7 ]))) "EFILL.f":61 -1
     (nil))
(insn 47 46 48 2 (set (reg:V4SF 156)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S16 A128])) "EFILL.f":61 -1
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 48 47 49 2 (parallel [
            (set (reg:SF 95 [ _9 ])
                (abs:SF (reg:SF 94 [ _8 ])))
            (use (reg:V4SF 156))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":61 -1
     (expr_list:REG_EQUAL (abs:SF (reg:SF 94 [ _8 ]))
        (nil)))
(insn 49 48 50 2 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 95 [ _9 ])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32]))) "EFILL.f":61 -1
     (nil))
(jump_insn 50 49 226 2 (set (pc)
        (if_then_else (gt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 224)
            (pc))) "EFILL.f":61 682 {*jcc}
     (nil)
 -> 224)
;;  succ:       32
;;              4 (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
(note 226 50 59 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 59 226 60 4 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32])
        (const_int 0 [0])) "EFILL.f":65 -1
     (nil))
(insn 60 59 61 4 (set (reg:DF 157)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64])) "EFILL.f":66 -1
     (nil))
(insn 61 60 62 4 (set (mem/c:DF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 sum+0 S8 A64])
        (reg:DF 157)) "EFILL.f":66 -1
     (nil))
(insn 62 61 63 4 (set (reg/f:DI 158)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])) "EFILL.f":68 -1
     (nil))
(insn 63 62 64 4 (set (reg:SI 137 [ _74 ])
        (mem:SI (reg/f:DI 158) [1 *jm_62(D)+0 S4 A32])) "EFILL.f":68 -1
     (nil))
(insn 64 63 124 4 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":68 -1
     (nil))
;;  succ:       8 (FALLTHRU)

;; basic block 8, loop depth 1, maybe hot
;;  prev block 4, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
;;              16 (DFS_BACK)
(code_label 124 64 65 8 10 (nil) [1 uses])
(note 65 124 66 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 137 [ _74 ]))) "EFILL.f":68 -1
     (nil))
(insn 67 66 68 8 (set (reg:QI 159)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":68 -1
     (nil))
(insn 68 67 69 8 (set (reg:SI 138 [ _76 ])
        (zero_extend:SI (reg:QI 159))) "EFILL.f":68 -1
     (nil))
(insn 69 68 70 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 138 [ _76 ])
            (const_int 0 [0]))) "EFILL.f":68 -1
     (nil))
(jump_insn 70 69 71 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) "EFILL.f":68 -1
     (nil)
 -> 127)
;;  succ:       17
;;              9 (FALLTHRU)

;; basic block 9, loop depth 1, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 (FALLTHRU)
(note 71 70 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 9 (set (reg/f:DI 160)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])) "EFILL.f":69 -1
     (nil))
(insn 73 72 74 9 (set (reg:SI 139 [ _77 ])
        (mem:SI (reg/f:DI 160) [1 *im_58(D)+0 S4 A32])) "EFILL.f":69 -1
     (nil))
(insn 74 73 118 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":69 -1
     (nil))
;;  succ:       10 (FALLTHRU)

;; basic block 10, loop depth 2, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 (FALLTHRU)
;;              15 (DFS_BACK)
(code_label 118 74 75 10 9 (nil) [1 uses])
(note 75 118 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (reg:SI 139 [ _77 ]))) "EFILL.f":69 -1
     (nil))
(insn 77 76 78 10 (set (reg:QI 161)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":69 -1
     (nil))
(insn 78 77 79 10 (set (reg:SI 140 [ _79 ])
        (zero_extend:SI (reg:QI 161))) "EFILL.f":69 -1
     (nil))
(insn 79 78 80 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 140 [ _79 ])
            (const_int 0 [0]))) "EFILL.f":69 -1
     (nil))
(jump_insn 80 79 81 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) "EFILL.f":69 -1
     (nil)
 -> 121)
;;  succ:       16
;;              11 (FALLTHRU)

;; basic block 11, loop depth 2, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
(note 81 80 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 11 (set (reg:SI 162)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILL.f":70 -1
     (nil))
(insn 83 82 84 11 (set (reg:DI 96 [ _10 ])
        (sign_extend:DI (reg:SI 162))) "EFILL.f":70 -1
     (nil))
(insn 84 83 85 11 (parallel [
            (set (reg:DI 97 [ _11 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (reg:DI 96 [ _10 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 -1
     (nil))
(insn 85 84 86 11 (parallel [
            (set (reg:DI 98 [ _12 ])
                (plus:DI (reg:DI 136 [ offset.3_69 ])
                    (reg:DI 97 [ _11 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 -1
     (nil))
(insn 86 85 87 11 (set (reg:SI 163)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILL.f":70 -1
     (nil))
(insn 87 86 88 11 (set (reg:DI 99 [ _13 ])
        (sign_extend:DI (reg:SI 163))) "EFILL.f":70 -1
     (nil))
(insn 88 87 89 11 (parallel [
            (set (reg:DI 100 [ _14 ])
                (plus:DI (reg:DI 98 [ _12 ])
                    (reg:DI 99 [ _13 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 -1
     (nil))
(insn 89 88 90 11 (set (reg/f:DI 164)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":70 -1
     (nil))
(insn 90 89 91 11 (set (reg:SF 101 [ _15 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 100 [ _14 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 164)) [4 *egrid_70(D) S4 A32])) "EFILL.f":70 -1
     (nil))
(insn 91 90 92 11 (set (reg:SF 102 [ _16 ])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f09f60a6e10 options>) [4 options.spval+0 S4 A128])) "EFILL.f":1 -1
     (nil))
(insn 92 91 93 11 (set (reg:SF 103 [ _17 ])
        (minus:SF (reg:SF 101 [ _15 ])
            (reg:SF 102 [ _16 ]))) "EFILL.f":70 -1
     (nil))
(insn 93 92 94 11 (set (reg:V4SF 165)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S16 A128])) "EFILL.f":70 -1
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 94 93 95 11 (parallel [
            (set (reg:SF 104 [ _18 ])
                (abs:SF (reg:SF 103 [ _17 ])))
            (use (reg:V4SF 165))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 -1
     (expr_list:REG_EQUAL (abs:SF (reg:SF 103 [ _17 ]))
        (nil)))
(insn 95 94 96 11 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 104 [ _18 ])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32]))) "EFILL.f":70 -1
     (nil))
(jump_insn 96 95 228 11 (set (pc)
        (if_then_else (ge (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 232)
            (pc))) "EFILL.f":70 682 {*jcc}
     (nil)
 -> 232)
;;  succ:       14
;;              12 (FALLTHRU)

;; basic block 12, loop depth 2, maybe hot
;;  prev block 11, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
(note 228 96 97 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(jump_insn 97 228 98 12 (set (pc)
        (label_ref 115)) "EFILL.f":70 -1
     (nil)
 -> 115)
;;  succ:       15

(barrier 98 97 232)
;; basic block 14, loop depth 2, maybe hot
;;  prev block 12, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
(code_label 232 98 100 14 19 (nil) [1 uses])
(note 100 232 101 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":71 -1
     (nil))
(insn 102 101 103 14 (set (reg:SI 166)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILL.f":72 -1
     (nil))
(insn 103 102 104 14 (set (reg:DI 105 [ _19 ])
        (sign_extend:DI (reg:SI 166))) "EFILL.f":72 -1
     (nil))
(insn 104 103 105 14 (parallel [
            (set (reg:DI 106 [ _20 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (reg:DI 105 [ _19 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":72 -1
     (nil))
(insn 105 104 106 14 (parallel [
            (set (reg:DI 107 [ _21 ])
                (plus:DI (reg:DI 136 [ offset.3_69 ])
                    (reg:DI 106 [ _20 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":72 -1
     (nil))
(insn 106 105 107 14 (set (reg:SI 167)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILL.f":72 -1
     (nil))
(insn 107 106 108 14 (set (reg:DI 108 [ _22 ])
        (sign_extend:DI (reg:SI 167))) "EFILL.f":72 -1
     (nil))
(insn 108 107 109 14 (parallel [
            (set (reg:DI 109 [ _23 ])
                (plus:DI (reg:DI 107 [ _21 ])
                    (reg:DI 108 [ _22 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":72 -1
     (nil))
(insn 109 108 110 14 (set (reg/f:DI 168)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":72 -1
     (nil))
(insn 110 109 111 14 (set (reg:SF 110 [ _24 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 109 [ _23 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 168)) [4 *egrid_70(D) S4 A32])) "EFILL.f":72 -1
     (nil))
(insn 111 110 112 14 (set (reg:DF 111 [ _25 ])
        (float_extend:DF (reg:SF 110 [ _24 ]))) "EFILL.f":72 -1
     (nil))
(insn 112 111 113 14 (set (reg:DF 170)
        (mem/c:DF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 sum+0 S8 A64])) "EFILL.f":72 -1
     (nil))
(insn 113 112 114 14 (set (reg:DF 169)
        (plus:DF (reg:DF 170)
            (reg:DF 111 [ _25 ]))) "EFILL.f":72 -1
     (nil))
(insn 114 113 115 14 (set (mem/c:DF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 sum+0 S8 A64])
        (reg:DF 169)) "EFILL.f":72 -1
     (nil))
;;  succ:       15 (FALLTHRU)

;; basic block 15, loop depth 2, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       14 (FALLTHRU)
;;              12
(code_label 115 114 116 15 7 (nil) [1 uses])
(note 116 115 117 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 119 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":69 -1
     (nil))
(jump_insn 119 117 120 15 (set (pc)
        (label_ref 118)) "EFILL.f":69 -1
     (nil)
 -> 118)
;;  succ:       10 (DFS_BACK)

(barrier 120 119 121)
;; basic block 16, loop depth 1, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL)
;;  pred:       10
(code_label 121 120 122 16 6 (nil) [1 uses])
(note 122 121 123 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 125 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":68 -1
     (nil))
(jump_insn 125 123 126 16 (set (pc)
        (label_ref 124)) "EFILL.f":68 -1
     (nil)
 -> 124)
;;  succ:       8 (DFS_BACK)

(barrier 126 125 127)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 127 126 128 17 5 (nil) [1 uses])
(note 128 127 129 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32])
            (const_int 0 [0]))) "EFILL.f":76 -1
     (nil))
(jump_insn 130 129 131 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 150)
            (pc))) "EFILL.f":76 -1
     (nil)
 -> 150)
;;  succ:       18 (FALLTHRU)
;;              19

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
(note 131 130 132 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 133 18 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -584 [0xfffffffffffffdb8])) [7 dt_parm.5.common.filename+0 S8 A64])
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f09ef0432d0 *.LC3>)) "EFILL.f":77 -1
     (nil))
(insn 133 132 134 18 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -576 [0xfffffffffffffdc0])) [1 dt_parm.5.common.line+0 S4 A128])
        (const_int 77 [0x4d])) "EFILL.f":77 -1
     (nil))
(insn 134 133 135 18 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -592 [0xfffffffffffffdb0])) [1 dt_parm.5.common.flags+0 S4 A128])
        (const_int 128 [0x80])) "EFILL.f":77 -1
     (nil))
(insn 135 134 136 18 (set (reg:SI 112 [ _26 ])
        (mem/c:SI (symbol_ref:DI ("iounit_") [flags 0x2]  <var_decl 0x7f09f60a6ab0 iounit>) [1 iounit.stdout+0 S4 A128])) "EFILL.f":1 -1
     (nil))
(insn 136 135 137 18 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -588 [0xfffffffffffffdb4])) [1 dt_parm.5.common.unit+0 S4 A32])
        (reg:SI 112 [ _26 ])) "EFILL.f":77 -1
     (nil))
(insn 137 136 138 18 (parallel [
            (set (reg:DI 171)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":77 -1
     (nil))
(insn 138 137 139 18 (set (reg:DI 5 di)
        (reg:DI 171)) "EFILL.f":77 -1
     (nil))
(call_insn 139 138 140 18 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x7f09ef030400 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "EFILL.f":77 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 140 139 141 18 (parallel [
            (set (reg:DI 172)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":77 -1
     (nil))
(insn 141 140 142 18 (set (reg:DI 1 dx)
        (const_int 37 [0x25])) "EFILL.f":77 -1
     (nil))
(insn 142 141 143 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f09ef043360 *.LC4>)) "EFILL.f":77 -1
     (nil))
(insn 143 142 144 18 (set (reg:DI 5 di)
        (reg:DI 172)) "EFILL.f":77 -1
     (nil))
(call_insn 144 143 145 18 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x7f09ef02d500 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "EFILL.f":77 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 145 144 146 18 (parallel [
            (set (reg:DI 173)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":77 -1
     (nil))
(insn 146 145 147 18 (set (reg:DI 5 di)
        (reg:DI 173)) "EFILL.f":77 -1
     (nil))
(call_insn 147 146 148 18 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x7f09ef030f00 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "EFILL.f":77 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 148 147 149 18 (set (pc)
        (label_ref:DI 224)) "EFILL.f":78 683 {jump}
     (nil)
 -> 224)
;;  succ:       32 [always] 

(barrier 149 148 150)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL)
;;  pred:       17
(code_label 150 149 151 19 11 (nil) [1 uses])
(note 151 150 152 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 153 19 (set (reg:DF 113 [ _27 ])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32]))) "EFILL.f":80 -1
     (nil))
(insn 153 152 154 19 (set (reg:DF 174)
        (mem/c:DF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 sum+0 S8 A64])) "EFILL.f":80 -1
     (nil))
(insn 154 153 155 19 (set (reg:DF 114 [ _28 ])
        (div:DF (reg:DF 174)
            (reg:DF 113 [ _27 ]))) "EFILL.f":80 -1
     (nil))
(insn 155 154 156 19 (set (mem/c:SF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -44 [0xffffffffffffffd4])) [4 avg+0 S4 A32])
        (float_truncate:SF (reg:DF 114 [ _28 ]))) "EFILL.f":80 -1
     (nil))
(insn 156 155 157 19 (set (reg/f:DI 175)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])) "EFILL.f":85 -1
     (nil))
(insn 157 156 158 19 (set (reg:SI 141 [ _93 ])
        (mem:SI (reg/f:DI 175) [1 *jm_62(D)+0 S4 A32])) "EFILL.f":85 -1
     (nil))
(insn 158 157 215 19 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":85 -1
     (nil))
;;  succ:       20 (FALLTHRU)

;; basic block 20, loop depth 1, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL)
;;  pred:       19 (FALLTHRU)
;;              28 (DFS_BACK)
(code_label 215 158 159 20 17 (nil) [1 uses])
(note 159 215 160 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 20 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 141 [ _93 ]))) "EFILL.f":85 -1
     (nil))
(insn 161 160 162 20 (set (reg:QI 176)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":85 -1
     (nil))
(insn 162 161 163 20 (set (reg:SI 142 [ _95 ])
        (zero_extend:SI (reg:QI 176))) "EFILL.f":85 -1
     (nil))
(insn 163 162 164 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 142 [ _95 ])
            (const_int 0 [0]))) "EFILL.f":85 -1
     (nil))
(jump_insn 164 163 165 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 218)
            (pc))) "EFILL.f":85 -1
     (nil)
 -> 218)
;;  succ:       29
;;              21 (FALLTHRU)

;; basic block 21, loop depth 1, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL)
;;  pred:       20 (FALLTHRU)
(note 165 164 166 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 167 21 (set (reg/f:DI 177)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])) "EFILL.f":86 -1
     (nil))
(insn 167 166 168 21 (set (reg:SI 143 [ _96 ])
        (mem:SI (reg/f:DI 177) [1 *im_58(D)+0 S4 A32])) "EFILL.f":86 -1
     (nil))
(insn 168 167 209 21 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":86 -1
     (nil))
;;  succ:       22 (FALLTHRU)

;; basic block 22, loop depth 2, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL)
;;  pred:       21 (FALLTHRU)
;;              27 (DFS_BACK)
(code_label 209 168 169 22 16 (nil) [1 uses])
(note 169 209 170 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 171 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (reg:SI 143 [ _96 ]))) "EFILL.f":86 -1
     (nil))
(insn 171 170 172 22 (set (reg:QI 178)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":86 -1
     (nil))
(insn 172 171 173 22 (set (reg:SI 144 [ _98 ])
        (zero_extend:SI (reg:QI 178))) "EFILL.f":86 -1
     (nil))
(insn 173 172 174 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 144 [ _98 ])
            (const_int 0 [0]))) "EFILL.f":86 -1
     (nil))
(jump_insn 174 173 175 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 212)
            (pc))) "EFILL.f":86 -1
     (nil)
 -> 212)
;;  succ:       28
;;              23 (FALLTHRU)

;; basic block 23, loop depth 2, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
(note 175 174 176 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 23 (set (reg:SI 179)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILL.f":87 -1
     (nil))
(insn 177 176 178 23 (set (reg:DI 115 [ _29 ])
        (sign_extend:DI (reg:SI 179))) "EFILL.f":87 -1
     (nil))
(insn 178 177 179 23 (parallel [
            (set (reg:DI 116 [ _30 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (reg:DI 115 [ _29 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (nil))
(insn 179 178 180 23 (parallel [
            (set (reg:DI 117 [ _31 ])
                (plus:DI (reg:DI 136 [ offset.3_69 ])
                    (reg:DI 116 [ _30 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (nil))
(insn 180 179 181 23 (set (reg:SI 180)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILL.f":87 -1
     (nil))
(insn 181 180 182 23 (set (reg:DI 118 [ _32 ])
        (sign_extend:DI (reg:SI 180))) "EFILL.f":87 -1
     (nil))
(insn 182 181 183 23 (parallel [
            (set (reg:DI 119 [ _33 ])
                (plus:DI (reg:DI 117 [ _31 ])
                    (reg:DI 118 [ _32 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (nil))
(insn 183 182 184 23 (set (reg/f:DI 181)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":87 -1
     (nil))
(insn 184 183 185 23 (set (reg:SF 120 [ _34 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 119 [ _33 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 181)) [4 *egrid_70(D) S4 A32])) "EFILL.f":87 -1
     (nil))
(insn 185 184 186 23 (set (reg:SF 121 [ _35 ])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f09f60a6e10 options>) [4 options.spval+0 S4 A128])) "EFILL.f":1 -1
     (nil))
(insn 186 185 187 23 (set (reg:SF 122 [ _36 ])
        (minus:SF (reg:SF 120 [ _34 ])
            (reg:SF 121 [ _35 ]))) "EFILL.f":87 -1
     (nil))
(insn 187 186 188 23 (set (reg:V4SF 182)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S16 A128])) "EFILL.f":87 -1
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 188 187 189 23 (parallel [
            (set (reg:SF 123 [ _37 ])
                (abs:SF (reg:SF 122 [ _36 ])))
            (use (reg:V4SF 182))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (expr_list:REG_EQUAL (abs:SF (reg:SF 122 [ _36 ]))
        (nil)))
(insn 189 188 190 23 (set (reg:SF 183)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "EFILL.f":87 -1
     (expr_list:REG_EQUAL (const_double:SF 9.999999960041972002500187954865396022796630859375e-13 [0x0.8cbcccp-39])
        (nil)))
(insn 190 189 191 23 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 183)
            (reg:SF 123 [ _37 ]))) "EFILL.f":87 -1
     (nil))
(jump_insn 191 190 230 23 (set (pc)
        (if_then_else (gt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 233)
            (pc))) "EFILL.f":87 682 {*jcc}
     (nil)
 -> 233)
;;  succ:       26
;;              24 (FALLTHRU)

;; basic block 24, loop depth 2, maybe hot
;;  prev block 23, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
(note 230 191 192 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(jump_insn 192 230 193 24 (set (pc)
        (label_ref 206)) "EFILL.f":87 -1
     (nil)
 -> 206)
;;  succ:       27

(barrier 193 192 233)
;; basic block 26, loop depth 2, maybe hot
;;  prev block 24, next block 27, flags: (NEW, REACHABLE, RTL)
;;  pred:       23
(code_label 233 193 195 26 20 (nil) [1 uses])
(note 195 233 196 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 26 (set (reg:SI 184)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILL.f":87 -1
     (nil))
(insn 197 196 198 26 (set (reg:DI 124 [ _38 ])
        (sign_extend:DI (reg:SI 184))) "EFILL.f":87 -1
     (nil))
(insn 198 197 199 26 (parallel [
            (set (reg:DI 125 [ _39 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (reg:DI 124 [ _38 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (nil))
(insn 199 198 200 26 (parallel [
            (set (reg:DI 126 [ _40 ])
                (plus:DI (reg:DI 136 [ offset.3_69 ])
                    (reg:DI 125 [ _39 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (nil))
(insn 200 199 201 26 (set (reg:SI 185)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILL.f":87 -1
     (nil))
(insn 201 200 202 26 (set (reg:DI 127 [ _41 ])
        (sign_extend:DI (reg:SI 185))) "EFILL.f":87 -1
     (nil))
(insn 202 201 203 26 (parallel [
            (set (reg:DI 128 [ _42 ])
                (plus:DI (reg:DI 126 [ _40 ])
                    (reg:DI 127 [ _41 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 -1
     (nil))
(insn 203 202 204 26 (set (reg/f:DI 186)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":87 -1
     (nil))
(insn 204 203 205 26 (set (reg:SF 187)
        (mem/c:SF (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -44 [0xffffffffffffffd4])) [4 avg+0 S4 A32])) "EFILL.f":87 -1
     (nil))
(insn 205 204 206 26 (set (mem:SF (plus:DI (mult:DI (reg:DI 128 [ _42 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 186)) [4 *egrid_70(D) S4 A32])
        (reg:SF 187)) "EFILL.f":87 -1
     (nil))
;;  succ:       27 (FALLTHRU)

;; basic block 27, loop depth 2, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL)
;;  pred:       26 (FALLTHRU)
;;              24
(code_label 206 205 207 27 14 (nil) [1 uses])
(note 207 206 208 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 210 27 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":86 -1
     (nil))
(jump_insn 210 208 211 27 (set (pc)
        (label_ref 209)) "EFILL.f":86 -1
     (nil)
 -> 209)
;;  succ:       22 (DFS_BACK)

(barrier 211 210 212)
;; basic block 28, loop depth 1, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL)
;;  pred:       22
(code_label 212 211 213 28 13 (nil) [1 uses])
(note 213 212 214 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 216 28 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":85 -1
     (nil))
(jump_insn 216 214 217 28 (set (pc)
        (label_ref 215)) "EFILL.f":85 -1
     (nil)
 -> 215)
;;  succ:       20 (DFS_BACK)

(barrier 217 216 218)
;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 32, flags: (NEW, REACHABLE, RTL)
;;  pred:       20
(code_label 218 217 219 29 12 (nil) [1 uses])
(note 219 218 234 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 234 219 224 29 (const_int 0 [0]) "EFILL.f":95 -1
     (nil))
;;  succ:       32 (FALLTHRU)

;; basic block 32, loop depth 0, maybe hot
;;  prev block 29, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       29 (FALLTHRU)
;;              2
;;              18 [always] 
(code_label 224 234 225 32 1 (nil) [2 uses])
(note 225 224 0 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)

