
;; Function bound (bound_, funcdef_no=0, decl_uid=3768, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) m  (1) re {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 24:  (0) r  (1) 0  (2) mr {*muldi3_1}
      Creating newreg=164 from oldreg=123, assigning class GENERAL_REGS to r164
   24: {r164:DI=r164:DI*[frame:DI-0x18];clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  159: r164:DI=r122:DI
    Inserting insn reload after:
  160: r123:DI=r164:DI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 26:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0 {*one_cmpldi2_1}
      Creating newreg=165 from oldreg=128, assigning class GENERAL_REGS to r165
   35: r165:DI=~r165:DI
    Inserting insn reload before:
  161: r165:DI=r122:DI
    Inserting insn reload after:
  162: r128:DI=r165:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 61:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 64
	 Choosing alt 2 in insn 64:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 70:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*iorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 85
	 Choosing alt 2 in insn 85:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 91:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 94
	 Choosing alt 2 in insn 94:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 100:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 102:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 109
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*iorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 117
	 Choosing alt 2 in insn 117:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 123:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 124:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 130:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6 7 8
EBB 9 10
EBB 11
EBB 17
EBB 12
EBB 16
EBB 13
EBB 15
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
  BB 15
   Insn 151: point = 0, n_alt = -1
  BB 13
   Insn 142: point = 0, n_alt = -1
  BB 16
   Insn 154: point = 0, n_alt = -1
  BB 4
   Insn 48: point = 0, n_alt = -1
   Insn 47: point = 0, n_alt = 0
   Insn 46: point = 1, n_alt = 0
   Insn 45: point = 3, n_alt = 0
   Insn 44: point = 4, n_alt = 0
  BB 12
   Insn 145: point = 5, n_alt = -1
   Insn 130: point = 5, n_alt = 1
  BB 17
   Insn 157: point = 6, n_alt = -1
  BB 6
   Insn 58: point = 7, n_alt = -1
   Insn 57: point = 7, n_alt = 0
   Insn 56: point = 8, n_alt = 0
   Insn 55: point = 10, n_alt = 0
   Insn 54: point = 11, n_alt = 0
  BB 11
   Insn 143: point = 12, n_alt = -1
   Insn 124: point = 12, n_alt = 1
   Insn 123: point = 12, n_alt = 8
   Insn 122: point = 13, n_alt = 3
   Insn 121: point = 14, n_alt = 0
   Insn 120: point = 16, n_alt = 1
   Insn 119: point = 18, n_alt = 0
   Insn 118: point = 19, n_alt = 3
   Insn 117: point = 21, n_alt = 2
   Insn 116: point = 23, n_alt = 1
   Insn 115: point = 25, n_alt = 0
  BB 10
   Insn 9: point = 27, n_alt = -2
  BB 9
   Insn 111: point = 30, n_alt = -1
   Insn 110: point = 30, n_alt = 0
   Insn 109: point = 31, n_alt = 0
   Insn 108: point = 33, n_alt = 0
   Insn 107: point = 35, n_alt = 0
   Insn 106: point = 36, n_alt = 1
   Insn 105: point = 36, n_alt = 0
   Insn 104: point = 38, n_alt = 0
   Insn 103: point = 39, n_alt = 1
   Insn 102: point = 39, n_alt = 7
   Insn 101: point = 41, n_alt = 3
   Insn 100: point = 42, n_alt = 7
   Insn 99: point = 44, n_alt = 3
   Insn 98: point = 45, n_alt = 0
   Insn 97: point = 47, n_alt = 1
   Insn 96: point = 49, n_alt = 0
   Insn 95: point = 50, n_alt = 3
   Insn 94: point = 52, n_alt = 2
   Insn 93: point = 54, n_alt = 1
   Insn 92: point = 56, n_alt = 0
   Insn 91: point = 57, n_alt = 8
   Insn 90: point = 58, n_alt = 3
   Insn 89: point = 59, n_alt = 0
   Insn 88: point = 61, n_alt = 1
   Insn 87: point = 63, n_alt = 0
   Insn 86: point = 64, n_alt = 3
   Insn 85: point = 66, n_alt = 2
   Insn 84: point = 68, n_alt = 1
   Insn 83: point = 70, n_alt = 0
  BB 8
   Insn 8: point = 72, n_alt = -2
  BB 7
   Insn 79: point = 75, n_alt = -1
   Insn 78: point = 75, n_alt = 0
   Insn 77: point = 76, n_alt = 0
   Insn 76: point = 78, n_alt = 0
   Insn 75: point = 80, n_alt = 0
   Insn 74: point = 81, n_alt = 1
   Insn 73: point = 81, n_alt = 0
   Insn 72: point = 83, n_alt = 0
   Insn 71: point = 84, n_alt = 1
   Insn 70: point = 84, n_alt = 7
   Insn 69: point = 86, n_alt = 3
   Insn 68: point = 87, n_alt = 0
   Insn 67: point = 89, n_alt = 1
   Insn 66: point = 91, n_alt = 0
   Insn 65: point = 92, n_alt = 3
   Insn 64: point = 94, n_alt = 2
   Insn 63: point = 96, n_alt = 1
   Insn 62: point = 98, n_alt = 0
   Insn 61: point = 99, n_alt = 7
   Insn 60: point = 101, n_alt = 3
  BB 5
   Insn 52: point = 103, n_alt = 1
   Insn 51: point = 103, n_alt = 0
   Insn 50: point = 105, n_alt = 3
  BB 3
   Insn 42: point = 107, n_alt = 1
   Insn 41: point = 107, n_alt = 0
   Insn 40: point = 109, n_alt = 3
  BB 2
   Insn 38: point = 111, n_alt = -1
   Insn 37: point = 111, n_alt = 0
   Insn 36: point = 112, n_alt = 0
   Insn 162: point = 113, n_alt = -2
	Hard reg 1 is preferable by r165 with profit 1000
   Insn 35: point = 115, n_alt = 0
   Insn 161: point = 115, n_alt = -2
   Insn 31: point = 116, n_alt = 2
   Insn 30: point = 117, n_alt = 3
   Insn 29: point = 118, n_alt = -2
   Insn 27: point = 120, n_alt = 1
   Insn 25: point = 122, n_alt = 0
   Insn 26: point = 122, n_alt = 2
   Insn 160: point = 123, n_alt = -2
	Hard reg 1 is preferable by r164 with profit 1000
   Insn 24: point = 125, n_alt = 2
   Insn 159: point = 125, n_alt = -2
   Insn 23: point = 126, n_alt = 5
   Insn 22: point = 127, n_alt = 1
   Insn 21: point = 129, n_alt = 0
   Insn 20: point = 131, n_alt = 3
   Insn 19: point = 132, n_alt = 1
   Insn 17: point = 134, n_alt = 0
   Insn 18: point = 134, n_alt = 2
   Insn 16: point = 135, n_alt = 3
   Insn 15: point = 136, n_alt = 5
   Insn 14: point = 137, n_alt = 0
   Insn 13: point = 139, n_alt = 0
   Insn 12: point = 141, n_alt = 3
   Insn 6: point = 142, n_alt = 5
   Insn 5: point = 142, n_alt = 5
   Insn 4: point = 142, n_alt = 5
   Insn 3: point = 142, n_alt = 5
   Insn 2: point = 142, n_alt = 5
 r87: [138..139]
 r88: [128..129]
 r89: [117..118]
 r90: [116..142]
 r92: [111..112]
 r93: [95..96]
 r94: [93..94]
 r95: [88..92]
 r96: [88..89]
 r97: [85..87]
 r98: [77..81]
 r99: [77..78]
 r100: [75..76]
 r101: [67..68]
 r102: [65..66]
 r103: [60..64]
 r104: [60..61]
 r105: [57..59]
 r106: [53..54]
 r107: [51..52]
 r108: [46..50]
 r109: [46..47]
 r110: [43..45]
 r111: [32..36]
 r112: [32..33]
 r113: [30..31]
 r114: [22..23]
 r115: [20..21]
 r116: [15..19]
 r117: [15..16]
 r118: [12..14]
 r119: [75..99] [57..72]
 r120: [30..42] [12..27]
 r121: [133..135]
 r122: [0..132]
 r123: [121..123]
 r124: [119..120]
 r128: [0..113]
 r129: [0..107]
 r130: [0..1]
 r131: [7..103]
 r132: [7..8]
 r133: [73..84]
 r134: [28..39]
 r135: [140..141]
 r136: [136..137]
 r137: [133..134]
 r138: [130..131]
 r139: [126..127]
 r140: [121..122]
 r141: [108..109]
 r142: [2..3]
 r143: [104..105]
 r144: [9..10]
 r145: [100..101]
 r146: [97..98]
 r147: [90..91]
 r148: [85..86]
 r149: [82..83]
 r150: [79..80]
 r151: [69..70]
 r152: [62..63]
 r153: [57..58]
 r154: [55..56]
 r155: [48..49]
 r156: [43..44]
 r157: [40..41]
 r159: [37..38]
 r160: [34..35]
 r161: [24..25]
 r162: [17..18]
 r163: [12..13]
 r164: [124..125]
 r165: [114..115]
Compressing live ranges: from 143 to 106 - 74%
Ranges after the compression:
 r87: [102..103]
 r88: [94..95]
 r89: [84..85]
 r90: [84..105]
 r92: [80..81]
 r93: [70..71]
 r94: [68..69]
 r95: [64..67]
 r96: [64..65]
 r97: [62..63]
 r98: [56..59]
 r99: [56..57]
 r100: [54..55]
 r101: [50..51]
 r102: [48..49]
 r103: [44..47]
 r104: [44..45]
 r105: [42..43]
 r106: [38..39]
 r107: [36..37]
 r108: [32..35]
 r109: [32..33]
 r110: [30..31]
 r111: [22..25]
 r112: [22..23]
 r113: [20..21]
 r114: [16..17]
 r115: [14..15]
 r116: [10..13]
 r117: [10..11]
 r118: [8..9]
 r119: [42..73]
 r120: [8..29]
 r121: [98..99]
 r122: [0..97]
 r123: [88..89]
 r124: [86..87]
 r128: [0..81]
 r129: [0..77]
 r130: [0..1]
 r131: [4..75]
 r132: [4..5]
 r133: [54..61]
 r134: [20..27]
 r135: [104..105]
 r136: [100..101]
 r137: [98..99]
 r138: [96..97]
 r139: [92..93]
 r140: [88..89]
 r141: [78..79]
 r142: [2..3]
 r143: [76..77]
 r144: [6..7]
 r145: [74..75]
 r146: [72..73]
 r147: [66..67]
 r148: [62..63]
 r149: [60..61]
 r150: [58..59]
 r151: [52..53]
 r152: [46..47]
 r153: [42..43]
 r154: [40..41]
 r155: [34..35]
 r156: [30..31]
 r157: [28..29]
 r159: [26..27]
 r160: [24..25]
 r161: [18..19]
 r162: [12..13]
 r163: [8..9]
 r164: [90..91]
 r165: [82..83]

********** Assignment #1: **********

	 Assigning to 164 (cl=GENERAL_REGS, orig=123, freq=3000, tfirst=164, tfreq=3000)...
	   Assign 1 to reload r164 (freq=3000)
	 Assigning to 165 (cl=GENERAL_REGS, orig=128, freq=3000, tfirst=165, tfreq=3000)...
	   Assign 1 to reload r165 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 21
changing reg in insn 22
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 30
changing reg in insn 36
changing reg in insn 37
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 68
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 73
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 89
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 98
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 100
changing reg in insn 105
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 121
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 8
changing reg in insn 61
changing reg in insn 91
changing reg in insn 74
changing reg in insn 74
changing reg in insn 71
changing reg in insn 9
changing reg in insn 100
changing reg in insn 123
changing reg in insn 106
changing reg in insn 106
changing reg in insn 103
changing reg in insn 16
changing reg in insn 19
changing reg in insn 17
changing reg in insn 19
changing reg in insn 27
changing reg in insn 25
changing reg in insn 27
changing reg in insn 29
changing reg in insn 118
changing reg in insn 95
changing reg in insn 86
changing reg in insn 65
changing reg in insn 41
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 51
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 70
changing reg in insn 8
changing reg in insn 71
changing reg in insn 102
changing reg in insn 9
changing reg in insn 103
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 40
changing reg in insn 41
changing reg in insn 45
changing reg in insn 46
changing reg in insn 50
changing reg in insn 51
changing reg in insn 55
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 83
changing reg in insn 84
changing reg in insn 87
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 104
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 120
changing reg in insn 122
changing reg in insn 123
deleting insn with uid = 160.
deleting insn with uid = 29.
deleting insn with uid = 162.
starting the processing of deferred insns
ending the processing of deferred insns


bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9] 39 [r10]
;;  ref usage 	r0={6d,11u} r1={10d,14u} r2={5d,5u} r4={40d,40u} r5={2d,2u} r6={1d,52u} r7={1d,17u} r17={30d,13u} r20={1d,1u} r21={5d,8u} r22={3d,4u} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={11d,11u} r38={2d} r39={1d} 
;;    total ref usage 302{124d,178u,0e} in 113{113 regular + 0 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 90
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 90
;; lr  def 	 17 [flags] 87 88 89 92 121 122 123 124 128 135 136 137 138 139 140
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])
        (reg:DI 5 di [ fld ])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [4 fmin+0 S8 A64])
        (reg:DI 4 si [ fmin ])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [4 fmax+0 S8 A64])
        (reg:DI 1 dx [ fmax ])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [5 im+0 S8 A64])
        (reg:DI 2 cx [ im ])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [5 jm+0 S8 A64])
        (reg:DI 37 r8 [ jm ])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(note 7 6 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 7 13 2 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [5 im+0 S8 A64])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [135]) [1 *im_41(D)+0 S4 A32])) "BOUND.f":1 86 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 0 ax [136])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "BOUND.f":1 149 {*extendsidi2_rex64}
     (nil))
(insn 15 14 16 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 ubound.0+0 S8 A64])
        (reg:DI 0 ax [136])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 16 15 18 2 (set (reg:DI 0 ax [orig:121 stride.2_43 ] [121])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 ubound.0+0 S8 A64])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 18 16 17 2 (set (reg:DI 1 dx [137])
        (const_int 0 [0])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 17 18 19 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:121 stride.2_43 ] [121])
            (const_int 0 [0]))) "BOUND.f":1 8 {*cmpdi_ccno_1}
     (nil))
(insn 19 17 20 2 (set (reg:DI 0 ax [orig:122 stride.2_44 ] [122])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:121 stride.2_43 ] [121])
            (reg:DI 1 dx [137]))) "BOUND.f":1 1003 {*movdicc_noc}
     (nil))
(insn 20 19 21 2 (set (reg/f:DI 1 dx [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [5 jm+0 S8 A64])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 1 dx [orig:88 _2 ] [88])
        (mem:SI (reg/f:DI 1 dx [138]) [1 *jm_45(D)+0 S4 A32])) "BOUND.f":1 86 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 1 dx [139])
        (sign_extend:DI (reg:SI 1 dx [orig:88 _2 ] [88]))) "BOUND.f":1 149 {*extendsidi2_rex64}
     (nil))
(insn 23 22 159 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 ubound.1+0 S8 A64])
        (reg:DI 1 dx [139])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 159 23 24 2 (set (reg:DI 1 dx [orig:123 size.4_47 ] [123])
        (reg:DI 0 ax [orig:122 stride.2_44 ] [122])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 24 159 26 2 (parallel [
            (set (reg:DI 1 dx [orig:123 size.4_47 ] [123])
                (mult:DI (reg:DI 1 dx [orig:123 size.4_47 ] [123])
                    (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [2 ubound.1+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":1 349 {*muldi3_1}
     (nil))
(insn 26 24 25 2 (set (reg:DI 2 cx [140])
        (const_int 0 [0])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 25 26 27 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 1 dx [orig:123 size.4_47 ] [123])
            (const_int 0 [0]))) "BOUND.f":1 8 {*cmpdi_ccno_1}
     (nil))
(insn 27 25 30 2 (set (reg:DI 1 dx [orig:124 size.4_48 ] [124])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 1 dx [orig:123 size.4_47 ] [123])
            (reg:DI 2 cx [140]))) "BOUND.f":1 1003 {*movdicc_noc}
     (nil))
(insn 30 27 31 2 (set (reg:DI 38 r9 [orig:90 _4 ] [90])
        (reg:DI 1 dx [orig:89 size.7_3 ] [89])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 31 30 161 2 (set (reg:DI 39 r10 [ _4+8 ])
        (const_int 0 [0])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 161 31 35 2 (set (reg:DI 1 dx [orig:128 offset.3_52 ] [128])
        (reg:DI 0 ax [orig:122 stride.2_44 ] [122])) "BOUND.f":1 85 {*movdi_internal}
     (nil))
(insn 35 161 36 2 (set (reg:DI 1 dx [orig:128 offset.3_52 ] [128])
        (not:DI (reg:DI 1 dx [orig:128 offset.3_52 ] [128]))) "BOUND.f":1 532 {*one_cmpldi2_1}
     (nil))
(insn 36 35 37 2 (set (reg:SI 2 cx [orig:92 _6 ] [92])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f4161f76870 parallel>)
                    (const_int 4 [0x4]))) [1 parallel.me+0 S4 A32])) "BOUND.f":1 86 {*movsi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 2 cx [orig:92 _6 ] [92])
            (const_int 0 [0]))) "BOUND.f":56 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 38 37 39 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 150)
            (pc))) "BOUND.f":56 682 {*jcc}
     (nil)
 -> 150)
;;  succ:       3 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 129 141
(note 39 38 40 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 3 (set (reg/f:DI 2 cx [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [5 jm+0 S8 A64])) "BOUND.f":58 85 {*movdi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:SI 2 cx [orig:129 _53 ] [129])
        (mem:SI (reg/f:DI 2 cx [141]) [1 *jm_45(D)+0 S4 A32])) "BOUND.f":58 86 {*movsi_internal}
     (nil))
(insn 42 41 131 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "BOUND.f":58 86 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              12 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 129
;; lr  def 	 17 [flags] 130 142
(code_label 131 42 43 4 8 (nil) [1 uses])
(note 43 131 44 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 2 cx [orig:129 _53 ] [129]))) "BOUND.f":58 11 {*cmpsi_1}
     (nil))
(insn 45 44 46 4 (set (reg:QI 4 si [142])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "BOUND.f":58 678 {*setcc_qi}
     (nil))
(insn 46 45 47 4 (set (reg:SI 4 si [orig:130 _55 ] [130])
        (zero_extend:SI (reg:QI 4 si [142]))) "BOUND.f":58 140 {*zero_extendqisi2}
     (nil))
(insn 47 46 48 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [orig:130 _55 ] [130])
            (const_int 0 [0]))) "BOUND.f":58 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 48 47 49 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 153)
            (pc))) "BOUND.f":58 682 {*jcc}
     (nil)
 -> 153)
;;  succ:       16
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 131 143
(note 49 48 50 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 5 (set (reg/f:DI 4 si [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [5 im+0 S8 A64])) "BOUND.f":59 85 {*movdi_internal}
     (nil))
(insn 51 50 52 5 (set (reg:SI 5 di [orig:131 _56 ] [131])
        (mem:SI (reg/f:DI 4 si [143]) [1 *im_41(D)+0 S4 A32])) "BOUND.f":59 86 {*movsi_internal}
     (nil))
(insn 52 51 125 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "BOUND.f":59 86 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              11 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
;; lr  def 	 17 [flags] 132 144
(code_label 125 52 53 6 7 (nil) [1 uses])
(note 53 125 54 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (reg:SI 5 di [orig:131 _56 ] [131]))) "BOUND.f":59 11 {*cmpsi_1}
     (nil))
(insn 55 54 56 6 (set (reg:QI 4 si [144])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "BOUND.f":59 678 {*setcc_qi}
     (nil))
(insn 56 55 57 6 (set (reg:SI 4 si [orig:132 _58 ] [132])
        (zero_extend:SI (reg:QI 4 si [144]))) "BOUND.f":59 140 {*zero_extendqisi2}
     (nil))
(insn 57 56 58 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [orig:132 _58 ] [132])
            (const_int 0 [0]))) "BOUND.f":59 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 58 57 59 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 156)
            (pc))) "BOUND.f":59 682 {*jcc}
     (nil)
 -> 156)
;;  succ:       17
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128
;; lr  def 	 17 [flags] 93 94 95 96 97 98 99 100 119 133 145 146 147 148 149 150
(note 59 58 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 7 (set (reg/f:DI 4 si [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [4 fmin+0 S8 A64])) "BOUND.f":60 85 {*movdi_internal}
     (nil))
(insn 61 60 62 7 (set (reg:SF 21 xmm0 [orig:119 M.5_35 ] [119])
        (mem:SF (reg/f:DI 4 si [145]) [7 *fmin_59(D)+0 S4 A32])) "BOUND.f":60 131 {*movsf_internal}
     (nil))
(insn 62 61 63 7 (set (reg:SI 4 si [146])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUND.f":60 86 {*movsi_internal}
     (nil))
(insn 63 62 64 7 (set (reg:DI 4 si [orig:93 _7 ] [93])
        (sign_extend:DI (reg:SI 4 si [146]))) "BOUND.f":60 149 {*extendsidi2_rex64}
     (nil))
(insn 64 63 65 7 (parallel [
            (set (reg:DI 4 si [orig:94 _8 ] [94])
                (mult:DI (reg:DI 4 si [orig:93 _7 ] [93])
                    (reg:DI 0 ax [orig:122 stride.2_44 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 349 {*muldi3_1}
     (nil))
(insn 65 64 66 7 (parallel [
            (set (reg:DI 37 r8 [orig:95 _9 ] [95])
                (plus:DI (reg:DI 1 dx [orig:128 offset.3_52 ] [128])
                    (reg:DI 4 si [orig:94 _8 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 222 {*adddi_1}
     (nil))
(insn 66 65 67 7 (set (reg:SI 4 si [147])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUND.f":60 86 {*movsi_internal}
     (nil))
(insn 67 66 68 7 (set (reg:DI 4 si [orig:96 _10 ] [96])
        (sign_extend:DI (reg:SI 4 si [147]))) "BOUND.f":60 149 {*extendsidi2_rex64}
     (nil))
(insn 68 67 69 7 (parallel [
            (set (reg:DI 37 r8 [orig:97 _11 ] [97])
                (plus:DI (reg:DI 37 r8 [orig:95 _9 ] [95])
                    (reg:DI 4 si [orig:96 _10 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 222 {*adddi_1}
     (nil))
(insn 69 68 70 7 (set (reg/f:DI 4 si [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUND.f":60 85 {*movdi_internal}
     (nil))
(insn 70 69 71 7 (set (reg:SF 22 xmm1 [orig:133 _63 ] [133])
        (mem:SF (plus:DI (mult:DI (reg:DI 37 r8 [orig:97 _11 ] [97])
                    (const_int 4 [0x4]))
                (reg/f:DI 4 si [148])) [7 *fld_62(D) S4 A32])) "BOUND.f":60 131 {*movsf_internal}
     (nil))
(insn 71 70 72 7 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 22 xmm1 [orig:133 _63 ] [133])
            (reg:SF 21 xmm0 [orig:119 M.5_35 ] [119]))) "BOUND.f":60 53 {*cmpisf}
     (nil))
(insn 72 71 73 7 (set (reg:QI 4 si [149])
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUND.f":60 678 {*setcc_qi}
     (nil))
(insn 73 72 74 7 (set (reg:SI 37 r8 [orig:98 _12 ] [98])
        (zero_extend:SI (reg:QI 4 si [149]))) "BOUND.f":60 140 {*zero_extendqisi2}
     (nil))
(insn 74 73 75 7 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [orig:119 M.5_35 ] [119])
                    (reg:SF 21 xmm0 [orig:119 M.5_35 ] [119]))
            ] UNSPEC_NOTRAP)) "BOUND.f":60 54 {*cmpiusf}
     (nil))
(insn 75 74 76 7 (set (reg:QI 4 si [150])
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUND.f":60 678 {*setcc_qi}
     (nil))
(insn 76 75 77 7 (set (reg:SI 4 si [orig:99 _13 ] [99])
        (zero_extend:SI (reg:QI 4 si [150]))) "BOUND.f":60 140 {*zero_extendqisi2}
     (nil))
(insn 77 76 78 7 (parallel [
            (set (reg:SI 4 si [orig:100 _14 ] [100])
                (ior:SI (reg:SI 4 si [orig:99 _13 ] [99])
                    (reg:SI 37 r8 [orig:98 _12 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 450 {*iorsi_1}
     (nil))
(insn 78 77 79 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [orig:100 _14 ] [100])
            (const_int 0 [0]))) "BOUND.f":60 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 79 78 80 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) "BOUND.f":60 682 {*jcc}
     (nil)
 -> 81)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 122 128 129 131 133

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131 133
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 133
;; lr  def 	 119
(note 80 79 8 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 8 80 81 8 (set (reg:SF 21 xmm0 [orig:119 M.5_35 ] [119])
        (reg:SF 22 xmm1 [orig:133 _63 ] [133])) "BOUND.f":60 131 {*movsf_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 122 128 129 131

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 122 128 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 122 128
;; lr  def 	 17 [flags] 101 102 103 104 105 106 107 108 109 110 111 112 113 120 134 151 152 153 154 155 156 157 159 160
(code_label 81 8 82 9 5 (nil) [1 uses])
(note 82 81 83 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 9 (set (reg:SI 4 si [151])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUND.f":60 86 {*movsi_internal}
     (nil))
(insn 84 83 85 9 (set (reg:DI 4 si [orig:101 _15 ] [101])
        (sign_extend:DI (reg:SI 4 si [151]))) "BOUND.f":60 149 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 9 (parallel [
            (set (reg:DI 4 si [orig:102 _16 ] [102])
                (mult:DI (reg:DI 4 si [orig:101 _15 ] [101])
                    (reg:DI 0 ax [orig:122 stride.2_44 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 349 {*muldi3_1}
     (nil))
(insn 86 85 87 9 (parallel [
            (set (reg:DI 37 r8 [orig:103 _17 ] [103])
                (plus:DI (reg:DI 1 dx [orig:128 offset.3_52 ] [128])
                    (reg:DI 4 si [orig:102 _16 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 222 {*adddi_1}
     (nil))
(insn 87 86 88 9 (set (reg:SI 4 si [152])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUND.f":60 86 {*movsi_internal}
     (nil))
(insn 88 87 89 9 (set (reg:DI 4 si [orig:104 _18 ] [104])
        (sign_extend:DI (reg:SI 4 si [152]))) "BOUND.f":60 149 {*extendsidi2_rex64}
     (nil))
(insn 89 88 90 9 (parallel [
            (set (reg:DI 37 r8 [orig:105 _19 ] [105])
                (plus:DI (reg:DI 37 r8 [orig:103 _17 ] [103])
                    (reg:DI 4 si [orig:104 _18 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":60 222 {*adddi_1}
     (nil))
(insn 90 89 91 9 (set (reg/f:DI 4 si [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUND.f":60 85 {*movdi_internal}
     (nil))
(insn 91 90 92 9 (set (mem:SF (plus:DI (mult:DI (reg:DI 37 r8 [orig:105 _19 ] [105])
                    (const_int 4 [0x4]))
                (reg/f:DI 4 si [153])) [7 *fld_62(D) S4 A32])
        (reg:SF 21 xmm0 [orig:119 M.5_35 ] [119])) "BOUND.f":60 131 {*movsf_internal}
     (nil))
(insn 92 91 93 9 (set (reg:SI 4 si [154])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUND.f":61 86 {*movsi_internal}
     (nil))
(insn 93 92 94 9 (set (reg:DI 4 si [orig:106 _20 ] [106])
        (sign_extend:DI (reg:SI 4 si [154]))) "BOUND.f":61 149 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 9 (parallel [
            (set (reg:DI 4 si [orig:107 _21 ] [107])
                (mult:DI (reg:DI 4 si [orig:106 _20 ] [106])
                    (reg:DI 0 ax [orig:122 stride.2_44 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 349 {*muldi3_1}
     (nil))
(insn 95 94 96 9 (parallel [
            (set (reg:DI 37 r8 [orig:108 _22 ] [108])
                (plus:DI (reg:DI 1 dx [orig:128 offset.3_52 ] [128])
                    (reg:DI 4 si [orig:107 _21 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 222 {*adddi_1}
     (nil))
(insn 96 95 97 9 (set (reg:SI 4 si [155])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUND.f":61 86 {*movsi_internal}
     (nil))
(insn 97 96 98 9 (set (reg:DI 4 si [orig:109 _23 ] [109])
        (sign_extend:DI (reg:SI 4 si [155]))) "BOUND.f":61 149 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 9 (parallel [
            (set (reg:DI 37 r8 [orig:110 _24 ] [110])
                (plus:DI (reg:DI 37 r8 [orig:108 _22 ] [108])
                    (reg:DI 4 si [orig:109 _23 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 222 {*adddi_1}
     (nil))
(insn 99 98 100 9 (set (reg/f:DI 4 si [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUND.f":61 85 {*movdi_internal}
     (nil))
(insn 100 99 101 9 (set (reg:SF 21 xmm0 [orig:120 M.6_36 ] [120])
        (mem:SF (plus:DI (mult:DI (reg:DI 37 r8 [orig:110 _24 ] [110])
                    (const_int 4 [0x4]))
                (reg/f:DI 4 si [156])) [7 *fld_62(D) S4 A32])) "BOUND.f":61 131 {*movsf_internal}
     (nil))
(insn 101 100 102 9 (set (reg/f:DI 4 si [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [4 fmax+0 S8 A64])) "BOUND.f":61 85 {*movdi_internal}
     (nil))
(insn 102 101 103 9 (set (reg:SF 22 xmm1 [orig:134 _69 ] [134])
        (mem:SF (reg/f:DI 4 si [157]) [7 *fmax_68(D)+0 S4 A32])) "BOUND.f":61 131 {*movsf_internal}
     (nil))
(insn 103 102 104 9 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [orig:120 M.6_36 ] [120])
            (reg:SF 22 xmm1 [orig:134 _69 ] [134]))) "BOUND.f":61 53 {*cmpisf}
     (nil))
(insn 104 103 105 9 (set (reg:QI 4 si [159])
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUND.f":61 678 {*setcc_qi}
     (nil))
(insn 105 104 106 9 (set (reg:SI 37 r8 [orig:111 _25 ] [111])
        (zero_extend:SI (reg:QI 4 si [159]))) "BOUND.f":61 140 {*zero_extendqisi2}
     (nil))
(insn 106 105 107 9 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [orig:120 M.6_36 ] [120])
                    (reg:SF 21 xmm0 [orig:120 M.6_36 ] [120]))
            ] UNSPEC_NOTRAP)) "BOUND.f":61 54 {*cmpiusf}
     (nil))
(insn 107 106 108 9 (set (reg:QI 4 si [160])
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUND.f":61 678 {*setcc_qi}
     (nil))
(insn 108 107 109 9 (set (reg:SI 4 si [orig:112 _26 ] [112])
        (zero_extend:SI (reg:QI 4 si [160]))) "BOUND.f":61 140 {*zero_extendqisi2}
     (nil))
(insn 109 108 110 9 (parallel [
            (set (reg:SI 4 si [orig:113 _27 ] [113])
                (ior:SI (reg:SI 4 si [orig:112 _26 ] [112])
                    (reg:SI 37 r8 [orig:111 _25 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 450 {*iorsi_1}
     (nil))
(insn 110 109 111 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [orig:113 _27 ] [113])
            (const_int 0 [0]))) "BOUND.f":61 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 111 110 112 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "BOUND.f":61 682 {*jcc}
     (nil)
 -> 113)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120 122 128 129 131 134

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131 134
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 134
;; lr  def 	 120
(note 112 111 9 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 9 112 113 10 (set (reg:SF 21 xmm0 [orig:120 M.6_36 ] [120])
        (reg:SF 22 xmm1 [orig:134 _69 ] [134])) "BOUND.f":61 131 {*movsf_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120 122 128 129 131

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 17, flags: (RTL, MODIFIED)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120 122 128 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120 122 128
;; lr  def 	 17 [flags] 114 115 116 117 118 161 162 163
(code_label 113 9 114 11 6 (nil) [1 uses])
(note 114 113 115 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 11 (set (reg:SI 4 si [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUND.f":61 86 {*movsi_internal}
     (nil))
(insn 116 115 117 11 (set (reg:DI 4 si [orig:114 _28 ] [114])
        (sign_extend:DI (reg:SI 4 si [161]))) "BOUND.f":61 149 {*extendsidi2_rex64}
     (nil))
(insn 117 116 118 11 (parallel [
            (set (reg:DI 4 si [orig:115 _29 ] [115])
                (mult:DI (reg:DI 4 si [orig:114 _28 ] [114])
                    (reg:DI 0 ax [orig:122 stride.2_44 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 349 {*muldi3_1}
     (nil))
(insn 118 117 119 11 (parallel [
            (set (reg:DI 37 r8 [orig:116 _30 ] [116])
                (plus:DI (reg:DI 1 dx [orig:128 offset.3_52 ] [128])
                    (reg:DI 4 si [orig:115 _29 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 222 {*adddi_1}
     (nil))
(insn 119 118 120 11 (set (reg:SI 4 si [162])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUND.f":61 86 {*movsi_internal}
     (nil))
(insn 120 119 121 11 (set (reg:DI 4 si [orig:117 _31 ] [117])
        (sign_extend:DI (reg:SI 4 si [162]))) "BOUND.f":61 149 {*extendsidi2_rex64}
     (nil))
(insn 121 120 122 11 (parallel [
            (set (reg:DI 37 r8 [orig:118 _32 ] [118])
                (plus:DI (reg:DI 37 r8 [orig:116 _30 ] [116])
                    (reg:DI 4 si [orig:117 _31 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":61 222 {*adddi_1}
     (nil))
(insn 122 121 123 11 (set (reg/f:DI 4 si [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUND.f":61 85 {*movdi_internal}
     (nil))
(insn 123 122 124 11 (set (mem:SF (plus:DI (mult:DI (reg:DI 37 r8 [orig:118 _32 ] [118])
                    (const_int 4 [0x4]))
                (reg/f:DI 4 si [163])) [7 *fld_62(D) S4 A32])
        (reg:SF 21 xmm0 [orig:120 M.6_36 ] [120])) "BOUND.f":61 131 {*movsf_internal}
     (nil))
(insn 124 123 143 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":59 221 {*addsi_1}
     (nil))
(jump_insn 143 124 144 11 (set (pc)
        (label_ref 125)) "BOUND.f":59 683 {jump}
     (nil)
 -> 125)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129 131

(barrier 144 143 156)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 11, next block 12, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 156 144 155 17 12 (nil) [1 uses])
(note 155 156 157 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 157 155 128 17 (const_int 0 [0]) "BOUND.f":61 718 {nop}
     (nil))
;;  succ:       12 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129

;; basic block 12, loop depth 0, maybe hot
;;  prev block 17, next block 16, flags: (RTL, MODIFIED)
;;  pred:       17 [always]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 128 157 129 12 4 (nil) [0 uses])
(note 129 128 130 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 145 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "BOUND.f":58 221 {*addsi_1}
     (nil))
(jump_insn 145 130 146 12 (set (pc)
        (label_ref 131)) "BOUND.f":58 683 {jump}
     (nil)
 -> 131)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 128 129

(barrier 146 145 153)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 153 146 152 16 11 (nil) [1 uses])
(note 152 153 154 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 154 152 136 16 (const_int 0 [0]) "BOUND.f":59 718 {nop}
     (nil))
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 16, next block 15, flags: (RTL, MODIFIED)
;;  pred:       16 [always]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 136 154 137 13 2 (nil) [0 uses])
(note 137 136 142 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 142 137 150 13 (const_int 0 [0]) "BOUND.f":69 718 {nop}
     (nil))
;;  succ:       15 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 13, next block 14, flags: (RTL, MODIFIED)
;;  pred:       2
;;              13 [always]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 150 142 149 15 10 (nil) [1 uses])
(note 149 150 151 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 151 149 140 15 (const_int 0 [0]) "BOUND.f":69 718 {nop}
     (nil))
;;  succ:       14 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 15, next block 1, flags: (RTL, MODIFIED)
;;  pred:       15 [always]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 140 151 141 14 1 (nil) [0 uses])
(note 141 140 158 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 158 141 0 NOTE_INSN_DELETED)
