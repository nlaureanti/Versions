
;; Function callcl (callcl_, funcdef_no=0, decl_uid=3773, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 34
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 35:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 36:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 38:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 41:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 45:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 46:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 47:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 48:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 55:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 56:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 58:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 59:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 65:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 94
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 95:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 97:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 104:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 106:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 1 in insn 107:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 110:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 113
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 114:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 116:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 117:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 118:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 119:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 120
	 Choosing alt 1 in insn 120:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 122:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 123:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 124:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 125:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 126
	 Choosing alt 1 in insn 126:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 129:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 132
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 133:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 135:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 136:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 138:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 139:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 140:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 141:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 142:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 143:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 144:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 146:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 147
	 Choosing alt 1 in insn 147:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 148:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 149:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 150:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 151:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 152:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 153:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 154
	 Choosing alt 1 in insn 154:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 155:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 156:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 157:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 161:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 164
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*iorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) r {*cmpsi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 168:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 171:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 174:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 177
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 178:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 180:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 184:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=2
	 Choosing alt 1 in insn 185:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=459 from oldreg=148, assigning class SSE_REGS to r459
  185: r459:SF=r459:SF*r363:SF
      REG_DEAD r363:SF
      REG_DEAD r148:SF
    Inserting insn reload before:
  535: r459:SF=r148:SF
    Inserting insn reload after:
  536: r149:SF=r459:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 536:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 186:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (1) rBwBz {*call_value}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 190:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=460 from oldreg=149, assigning class SSE_REGS to r460
  190: r460:SF=r460:SF-r150:SF
      REG_DEAD r150:SF
      REG_DEAD r149:SF
    Inserting insn reload before:
  537: r460:SF=r149:SF
    Inserting insn reload after:
  538: r151:SF=r460:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=622,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 537:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 191:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 192:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 193:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 194:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 195:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=461 from oldreg=367, assigning class SSE_REGS to r461
  195: r461:SF=r461:SF/[frame:DI-0x34]
      REG_DEAD r367:SF
    Inserting insn reload before:
  539: r461:SF=r367:SF
    Inserting insn reload after:
  540: r152:SF=r461:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 201
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 202:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 203:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 204
	 Choosing alt 1 in insn 204:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 205:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 206:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 209:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 212
	 Choosing alt 0 in insn 212:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 213:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 214:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 215:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 218:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 221
	 Choosing alt 0 in insn 221:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 222:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 223:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 224:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 225:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 229:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 232
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 233:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 234:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 235:  (0) v  (1) m {*movsf_internal}
      Creating newreg=462 from oldreg=177, assigning class ALL_SSE_REGS to r462
  235: r462:SF=[r176:DI*0x4+r380:DI]
      REG_DEAD r380:DI
      REG_DEAD r176:DI
    Inserting insn reload after:
  541: r177:SF=r462:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 541:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 236:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 243:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 246
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 247:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 248
	 Choosing alt 1 in insn 248:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=463 from oldreg=177, assigning class SSE_REGS to r463
      Making reload reg 463 for reg 177 optional
  248: r184:SF=r178:SF*r463:SF
      REG_DEAD r178:SF
      REG_DEAD r177:SF
    Inserting insn reload before:
  542: r463:SF=r177:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=622,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 542:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 249:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 250:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 253:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 256
	 Choosing alt 0 in insn 256:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 257:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 258:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 259:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 262:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 263:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 266:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 269
	 Choosing alt 0 in insn 269:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 270:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 271:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 274:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 276:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 278:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 286:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 289:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 293
	 Choosing alt 0 in insn 293:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 294:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 295:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 296:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 297:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 298:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 299:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 306:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 308:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 311:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 315
	 Choosing alt 0 in insn 315:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 316:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 317:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 318:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 319:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 320:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 321:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 322:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 325:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 327:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 328:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 332
	 Choosing alt 0 in insn 332:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 333:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 334:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 335:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 336:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 338:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 340:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 343:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 347
	 Choosing alt 0 in insn 347:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 348:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 349:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 350:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 351:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 352:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 353:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 356:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 359:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 363
	 Choosing alt 0 in insn 363:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 364:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 365:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 366:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 367:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 369:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 371:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 374:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 378
	 Choosing alt 0 in insn 378:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 379:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 380:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 381:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 382:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 383:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 384:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 386:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 388:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 391:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 395
	 Choosing alt 0 in insn 395:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 396:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 397:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 398:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 399:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 400:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 401:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 402:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 405:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 406:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 408
	 Choosing alt 0 in insn 408:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 409:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 410
	 Choosing alt 1 in insn 410:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 411:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 412:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 415:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 417:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 418
	 Choosing alt 0 in insn 418:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 419:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 420:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 421:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 422:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 423:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 424
	 Choosing alt 1 in insn 424:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 425:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 428:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 431
	 Choosing alt 0 in insn 431:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 432:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 433:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 434:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 437:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 440
	 Choosing alt 0 in insn 440:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 441:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 442:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 443:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 444:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 445:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 448:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 451
	 Choosing alt 0 in insn 451:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 452:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 453:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 454:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 455:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 458:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 461
	 Choosing alt 0 in insn 461:  (0) =r  (1) %0  (2) rme {*iorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 469:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 472
	 Choosing alt 0 in insn 472:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 473:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 474:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 475:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 480:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 486:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 492:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 25
EBB 7
EBB 24
EBB 8
EBB 9 10
EBB 11 12 13
EBB 14
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=464 from oldreg=177, assigning class ALL_SSE_REGS to inheritance r464
    Original reg change 177->464 (bb14):
  541: r464:SF=r462:SF
    Add original<-inheritance after:
  543: r177:SF=r464:SF

    Inheritance reuse change 177->464 (bb14):
  542: r463:SF=r464:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=465 from oldreg=149, assigning class SSE_REGS to inheritance r465
    Original reg change 149->465 (bb14):
  536: r465:SF=r459:SF
    Add original<-inheritance after:
  544: r149:SF=r465:SF

    Inheritance reuse change 149->465 (bb14):
  537: r460:SF=r465:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   543: r177:SF=r464:SF
deleting insn with uid = 543.
	    Removing dead insn:
   544: r149:SF=r465:SF
deleting insn with uid = 544.
EBB 15 16 17 18
EBB 19
EBB 20
EBB 28
EBB 21
EBB 27
EBB 22
EBB 26
EBB 23

********** Pseudo live ranges #1: **********

  BB 23
   Insn 505: point = 0, n_alt = -1
  BB 26
   Insn 527: point = 0, n_alt = -1
  BB 9
   Insn 79: point = 0, n_alt = -1
   Insn 78: point = 0, n_alt = 0
   Insn 77: point = 1, n_alt = 0
   Insn 76: point = 3, n_alt = 0
   Insn 75: point = 4, n_alt = 0
  BB 22
   Insn 517: point = 5, n_alt = -1
   Insn 492: point = 5, n_alt = 1
  BB 27
   Insn 530: point = 6, n_alt = -1
  BB 11
   Insn 87: point = 7, n_alt = -1
   Insn 86: point = 7, n_alt = 0
   Insn 85: point = 8, n_alt = 0
   Insn 84: point = 10, n_alt = 0
   Insn 83: point = 11, n_alt = 0
  BB 21
   Insn 515: point = 12, n_alt = -1
   Insn 486: point = 12, n_alt = 1
  BB 19
   Insn 511: point = 13, n_alt = -1
   Insn 475: point = 13, n_alt = 8
   Insn 474: point = 14, n_alt = 3
   Insn 473: point = 15, n_alt = 3
   Insn 472: point = 17, n_alt = 0
   Insn 471: point = 19, n_alt = 0
   Insn 470: point = 21, n_alt = 0
   Insn 469: point = 22, n_alt = 0
   Insn 468: point = 24, n_alt = 0
   Insn 467: point = 26, n_alt = 0
  BB 18
   Insn 8: point = 28, n_alt = -2
  BB 17
   Insn 463: point = 31, n_alt = -1
   Insn 462: point = 31, n_alt = 0
   Insn 461: point = 32, n_alt = 0
   Insn 460: point = 34, n_alt = 0
   Insn 459: point = 36, n_alt = 0
   Insn 458: point = 37, n_alt = 1
   Insn 457: point = 37, n_alt = 0
   Insn 456: point = 39, n_alt = 0
   Insn 455: point = 40, n_alt = 1
   Insn 454: point = 40, n_alt = 7
   Insn 453: point = 42, n_alt = 3
   Insn 452: point = 43, n_alt = 3
   Insn 451: point = 45, n_alt = 0
   Insn 450: point = 47, n_alt = 0
   Insn 449: point = 49, n_alt = 0
   Insn 448: point = 50, n_alt = 0
   Insn 447: point = 52, n_alt = 0
   Insn 446: point = 54, n_alt = 0
   Insn 445: point = 55, n_alt = 7
   Insn 444: point = 56, n_alt = 8
   Insn 443: point = 57, n_alt = 3
   Insn 442: point = 58, n_alt = 2
   Insn 441: point = 60, n_alt = 3
   Insn 440: point = 62, n_alt = 0
   Insn 439: point = 64, n_alt = 0
   Insn 438: point = 66, n_alt = 0
   Insn 437: point = 67, n_alt = 0
   Insn 436: point = 69, n_alt = 0
   Insn 435: point = 71, n_alt = 0
   Insn 434: point = 72, n_alt = 7
   Insn 433: point = 74, n_alt = 3
   Insn 432: point = 75, n_alt = 3
   Insn 431: point = 77, n_alt = 0
   Insn 430: point = 79, n_alt = 0
   Insn 429: point = 81, n_alt = 0
   Insn 428: point = 82, n_alt = 0
   Insn 427: point = 84, n_alt = 0
   Insn 426: point = 86, n_alt = 0
   Insn 425: point = 87, n_alt = 8
   Insn 424: point = 88, n_alt = 1
   Insn 423: point = 90, n_alt = 7
   Insn 422: point = 91, n_alt = 7
   Insn 421: point = 93, n_alt = 0
   Insn 420: point = 95, n_alt = 4
   Insn 419: point = 96, n_alt = 3
   Insn 418: point = 98, n_alt = 0
   Insn 417: point = 100, n_alt = 0
   Insn 416: point = 102, n_alt = 0
   Insn 415: point = 103, n_alt = 0
   Insn 414: point = 105, n_alt = 0
   Insn 413: point = 107, n_alt = 0
   Insn 412: point = 108, n_alt = 8
   Insn 411: point = 109, n_alt = 3
   Insn 410: point = 110, n_alt = 1
   Insn 409: point = 112, n_alt = 3
   Insn 408: point = 114, n_alt = 0
   Insn 407: point = 116, n_alt = 0
   Insn 406: point = 118, n_alt = 0
   Insn 405: point = 119, n_alt = 0
   Insn 404: point = 121, n_alt = 0
   Insn 403: point = 123, n_alt = 0
   Insn 402: point = 124, n_alt = 2
   Insn 401: point = 126, n_alt = 1
   Insn 400: point = 128, n_alt = 7
   Insn 399: point = 129, n_alt = 7
   Insn 398: point = 131, n_alt = 0
   Insn 397: point = 133, n_alt = 4
   Insn 396: point = 134, n_alt = 3
   Insn 395: point = 136, n_alt = 0
   Insn 394: point = 138, n_alt = 0
   Insn 393: point = 140, n_alt = 0
   Insn 392: point = 141, n_alt = 0
   Insn 391: point = 143, n_alt = 0
   Insn 390: point = 145, n_alt = 0
   Insn 389: point = 147, n_alt = 0
   Insn 388: point = 148, n_alt = 1
   Insn 387: point = 150, n_alt = 0
   Insn 386: point = 152, n_alt = 0
   Insn 385: point = 154, n_alt = 0
   Insn 384: point = 155, n_alt = 8
   Insn 383: point = 156, n_alt = 2
   Insn 382: point = 158, n_alt = 7
   Insn 381: point = 160, n_alt = 0
   Insn 380: point = 162, n_alt = 4
   Insn 379: point = 163, n_alt = 3
   Insn 378: point = 165, n_alt = 0
   Insn 377: point = 167, n_alt = 0
   Insn 376: point = 169, n_alt = 0
   Insn 375: point = 170, n_alt = 0
   Insn 374: point = 172, n_alt = 0
   Insn 373: point = 174, n_alt = 0
   Insn 372: point = 176, n_alt = 0
   Insn 371: point = 177, n_alt = 1
   Insn 370: point = 179, n_alt = 0
   Insn 369: point = 181, n_alt = 0
   Insn 368: point = 183, n_alt = 0
   Insn 367: point = 184, n_alt = 7
   Insn 366: point = 186, n_alt = 0
   Insn 365: point = 188, n_alt = 4
   Insn 364: point = 189, n_alt = 3
   Insn 363: point = 191, n_alt = 0
   Insn 362: point = 193, n_alt = 0
   Insn 361: point = 195, n_alt = 0
   Insn 360: point = 196, n_alt = 0
   Insn 359: point = 198, n_alt = 0
   Insn 358: point = 200, n_alt = 0
   Insn 357: point = 202, n_alt = 0
   Insn 356: point = 203, n_alt = 1
   Insn 355: point = 205, n_alt = 0
   Insn 354: point = 207, n_alt = 0
   Insn 353: point = 208, n_alt = 8
   Insn 352: point = 209, n_alt = 2
   Insn 351: point = 211, n_alt = 7
   Insn 350: point = 213, n_alt = 0
   Insn 349: point = 215, n_alt = 4
   Insn 348: point = 216, n_alt = 3
   Insn 347: point = 218, n_alt = 0
   Insn 346: point = 220, n_alt = 0
   Insn 345: point = 222, n_alt = 0
   Insn 344: point = 223, n_alt = 0
   Insn 343: point = 225, n_alt = 0
   Insn 342: point = 227, n_alt = 0
   Insn 341: point = 229, n_alt = 0
   Insn 340: point = 230, n_alt = 1
   Insn 339: point = 232, n_alt = 0
   Insn 338: point = 234, n_alt = 0
   Insn 337: point = 236, n_alt = 0
   Insn 336: point = 237, n_alt = 7
   Insn 335: point = 239, n_alt = 0
   Insn 334: point = 241, n_alt = 4
   Insn 333: point = 242, n_alt = 3
   Insn 332: point = 244, n_alt = 0
   Insn 331: point = 246, n_alt = 0
   Insn 330: point = 248, n_alt = 0
   Insn 329: point = 249, n_alt = 0
   Insn 328: point = 251, n_alt = 0
   Insn 327: point = 253, n_alt = 0
   Insn 326: point = 255, n_alt = 0
   Insn 325: point = 256, n_alt = 1
   Insn 324: point = 258, n_alt = 0
   Insn 323: point = 260, n_alt = 0
   Insn 322: point = 261, n_alt = 8
   Insn 321: point = 262, n_alt = 2
   Insn 320: point = 264, n_alt = 7
   Insn 319: point = 265, n_alt = 7
   Insn 318: point = 267, n_alt = 0
   Insn 317: point = 269, n_alt = 4
   Insn 316: point = 270, n_alt = 3
   Insn 315: point = 272, n_alt = 0
   Insn 314: point = 274, n_alt = 0
   Insn 313: point = 276, n_alt = 0
   Insn 312: point = 277, n_alt = 0
   Insn 311: point = 279, n_alt = 0
   Insn 310: point = 281, n_alt = 0
   Insn 309: point = 283, n_alt = 0
   Insn 308: point = 284, n_alt = 1
   Insn 307: point = 286, n_alt = 0
   Insn 306: point = 288, n_alt = 0
   Insn 305: point = 290, n_alt = 0
  BB 28
   Insn 533: point = 292, n_alt = -1
  BB 15
   Insn 282: point = 293, n_alt = -1
   Insn 281: point = 293, n_alt = 0
   Insn 280: point = 294, n_alt = 0
   Insn 279: point = 296, n_alt = 0
   Insn 278: point = 297, n_alt = 1
  BB 20
   Insn 513: point = 298, n_alt = -1
   Insn 480: point = 298, n_alt = 1
  BB 16
   Insn 300: point = 299, n_alt = -1
   Insn 299: point = 299, n_alt = 1
   Insn 298: point = 300, n_alt = 7
   Insn 297: point = 301, n_alt = 7
   Insn 296: point = 303, n_alt = 0
   Insn 295: point = 305, n_alt = 4
   Insn 294: point = 306, n_alt = 3
   Insn 293: point = 308, n_alt = 0
   Insn 292: point = 310, n_alt = 0
   Insn 291: point = 312, n_alt = 0
   Insn 290: point = 313, n_alt = 0
   Insn 289: point = 315, n_alt = 0
   Insn 288: point = 317, n_alt = 0
   Insn 287: point = 319, n_alt = 0
   Insn 286: point = 320, n_alt = 1
   Insn 285: point = 322, n_alt = 0
   Insn 284: point = 324, n_alt = 0
  BB 14
   Insn 276: point = 326, n_alt = 1
   Insn 275: point = 327, n_alt = 0
   Insn 274: point = 328, n_alt = 1
   Insn 273: point = 329, n_alt = 0
   Insn 272: point = 331, n_alt = 0
   Insn 271: point = 333, n_alt = 4
   Insn 270: point = 334, n_alt = 3
   Insn 269: point = 336, n_alt = 0
   Insn 268: point = 338, n_alt = 0
   Insn 267: point = 340, n_alt = 0
   Insn 266: point = 341, n_alt = 0
   Insn 265: point = 343, n_alt = 0
   Insn 264: point = 345, n_alt = 0
   Insn 263: point = 346, n_alt = 4
   Insn 262: point = 347, n_alt = 9
   Insn 261: point = 348, n_alt = 0
   Insn 260: point = 348, n_alt = -2
   Insn 259: point = 349, n_alt = 7
   Insn 258: point = 351, n_alt = 3
   Insn 257: point = 352, n_alt = 3
   Insn 256: point = 354, n_alt = 0
   Insn 255: point = 356, n_alt = 0
   Insn 254: point = 358, n_alt = 0
   Insn 253: point = 359, n_alt = 0
   Insn 252: point = 361, n_alt = 0
   Insn 251: point = 363, n_alt = 0
   Insn 250: point = 364, n_alt = 8
   Insn 249: point = 365, n_alt = 3
   Insn 248: point = 366, n_alt = 1
   Insn 542: point = 368, n_alt = 7
	   Creating copy r463<-r464@1000
   Insn 247: point = 370, n_alt = 3
   Insn 246: point = 372, n_alt = 0
   Insn 245: point = 374, n_alt = 0
   Insn 244: point = 376, n_alt = 0
   Insn 243: point = 377, n_alt = 0
   Insn 242: point = 379, n_alt = 0
   Insn 241: point = 381, n_alt = 0
   Insn 240: point = 382, n_alt = -2
   Insn 239: point = 383, n_alt = 0
   Insn 238: point = 383, n_alt = -2
   Insn 237: point = 384, n_alt = -2
   Insn 236: point = 385, n_alt = 7
   Insn 541: point = 386, n_alt = 8
	   Creating copy r462->r464@1000
   Insn 235: point = 388, n_alt = 7
   Insn 234: point = 390, n_alt = 3
   Insn 233: point = 391, n_alt = 3
   Insn 232: point = 393, n_alt = 0
   Insn 231: point = 395, n_alt = 0
   Insn 230: point = 397, n_alt = 0
   Insn 229: point = 398, n_alt = 0
   Insn 228: point = 400, n_alt = 0
   Insn 227: point = 402, n_alt = 0
   Insn 226: point = 403, n_alt = -2
   Insn 225: point = 405, n_alt = 2
   Insn 224: point = 407, n_alt = 7
   Insn 223: point = 409, n_alt = 3
   Insn 222: point = 410, n_alt = 3
   Insn 221: point = 412, n_alt = 0
   Insn 220: point = 414, n_alt = 0
   Insn 219: point = 416, n_alt = 0
   Insn 218: point = 417, n_alt = 0
   Insn 217: point = 419, n_alt = 0
   Insn 216: point = 421, n_alt = 0
   Insn 215: point = 422, n_alt = 7
   Insn 214: point = 424, n_alt = 4
   Insn 213: point = 425, n_alt = 3
   Insn 212: point = 427, n_alt = 0
   Insn 211: point = 429, n_alt = 0
   Insn 210: point = 431, n_alt = 0
   Insn 209: point = 432, n_alt = 0
   Insn 208: point = 434, n_alt = 0
   Insn 207: point = 436, n_alt = 0
   Insn 206: point = 437, n_alt = 8
   Insn 205: point = 438, n_alt = 4
   Insn 204: point = 439, n_alt = 1
   Insn 203: point = 441, n_alt = 7
   Insn 202: point = 442, n_alt = 3
   Insn 201: point = 444, n_alt = 0
   Insn 200: point = 446, n_alt = 0
   Insn 199: point = 448, n_alt = 0
   Insn 198: point = 449, n_alt = 0
   Insn 197: point = 451, n_alt = 0
   Insn 196: point = 453, n_alt = 0
   Insn 540: point = 454, n_alt = -2
	Hard reg 22 is preferable by r461 with profit 1000
   Insn 195: point = 456, n_alt = 2
   Insn 539: point = 456, n_alt = -2
	Hard reg 22 is preferable by r461 with profit 1000
	Hard reg 21 is preferable by r461 with profit 1000
   Insn 194: point = 458, n_alt = 7
   Insn 193: point = 459, n_alt = 8
   Insn 192: point = 460, n_alt = 2
   Insn 191: point = 462, n_alt = 7
   Insn 538: point = 463, n_alt = -2
	Hard reg 21 is preferable by r460 with profit 1000
   Insn 190: point = 465, n_alt = 2
   Insn 537: point = 466, n_alt = 7
	   Creating copy r460<-r465@1000
   Insn 189: point = 468, n_alt = -2
   Insn 188: point = 469, n_alt = 0
   Insn 187: point = 469, n_alt = -2
   Insn 186: point = 470, n_alt = 7
   Insn 536: point = 471, n_alt = 8
	   Creating copy r459->r465@1000
   Insn 185: point = 473, n_alt = 1
   Insn 535: point = 474, n_alt = -2
	Hard reg 22 is preferable by r459 with profit 1000
   Insn 184: point = 476, n_alt = 7
   Insn 183: point = 477, n_alt = -2
   Insn 182: point = 478, n_alt = 0
   Insn 181: point = 478, n_alt = -2
   Insn 180: point = 479, n_alt = 7
   Insn 179: point = 481, n_alt = 3
   Insn 178: point = 482, n_alt = 3
   Insn 177: point = 484, n_alt = 0
   Insn 176: point = 486, n_alt = 0
   Insn 175: point = 488, n_alt = 0
   Insn 174: point = 489, n_alt = 0
   Insn 173: point = 491, n_alt = 0
   Insn 172: point = 493, n_alt = 0
   Insn 171: point = 494, n_alt = 8
  BB 13
   Insn 168: point = 496, n_alt = 7
  BB 12
   Insn 166: point = 498, n_alt = -1
   Insn 165: point = 498, n_alt = 0
   Insn 164: point = 499, n_alt = 0
   Insn 163: point = 501, n_alt = 0
   Insn 162: point = 503, n_alt = 0
   Insn 161: point = 504, n_alt = 1
   Insn 160: point = 504, n_alt = 0
   Insn 159: point = 506, n_alt = 0
   Insn 158: point = 507, n_alt = 1
   Insn 157: point = 508, n_alt = 7
   Insn 156: point = 509, n_alt = 7
   Insn 155: point = 510, n_alt = 8
   Insn 154: point = 511, n_alt = 1
   Insn 153: point = 513, n_alt = 7
   Insn 152: point = 514, n_alt = 7
   Insn 151: point = 515, n_alt = 8
   Insn 150: point = 516, n_alt = 2
   Insn 149: point = 518, n_alt = 7
   Insn 148: point = 519, n_alt = 8
   Insn 147: point = 520, n_alt = 1
   Insn 146: point = 522, n_alt = 7
   Insn 145: point = 523, n_alt = -2
   Insn 144: point = 525, n_alt = 2
   Insn 143: point = 527, n_alt = 7
   Insn 142: point = 528, n_alt = 1
   Insn 141: point = 530, n_alt = 7
   Insn 140: point = 531, n_alt = 7
   Insn 139: point = 532, n_alt = 8
   Insn 138: point = 533, n_alt = 2
   Insn 137: point = 535, n_alt = -2
   Insn 136: point = 537, n_alt = 2
   Insn 135: point = 539, n_alt = 7
   Insn 134: point = 541, n_alt = 3
   Insn 133: point = 542, n_alt = 3
   Insn 132: point = 544, n_alt = 0
   Insn 131: point = 546, n_alt = 0
   Insn 130: point = 548, n_alt = 0
   Insn 129: point = 549, n_alt = 0
   Insn 128: point = 551, n_alt = 0
   Insn 127: point = 553, n_alt = 0
   Insn 126: point = 554, n_alt = 1
   Insn 125: point = 556, n_alt = 7
   Insn 124: point = 557, n_alt = 7
   Insn 123: point = 558, n_alt = 8
   Insn 122: point = 559, n_alt = 2
   Insn 121: point = 561, n_alt = -2
   Insn 120: point = 563, n_alt = 1
   Insn 119: point = 565, n_alt = 7
   Insn 118: point = 566, n_alt = 1
   Insn 117: point = 568, n_alt = 7
   Insn 116: point = 569, n_alt = 7
   Insn 115: point = 571, n_alt = 3
   Insn 114: point = 572, n_alt = 3
   Insn 113: point = 574, n_alt = 0
   Insn 112: point = 576, n_alt = 0
   Insn 111: point = 578, n_alt = 0
   Insn 110: point = 579, n_alt = 0
   Insn 109: point = 581, n_alt = 0
   Insn 108: point = 583, n_alt = 0
   Insn 107: point = 584, n_alt = 1
   Insn 106: point = 586, n_alt = 7
   Insn 105: point = 588, n_alt = 3
   Insn 104: point = 589, n_alt = 3
   Insn 103: point = 591, n_alt = 0
   Insn 102: point = 593, n_alt = 0
   Insn 101: point = 595, n_alt = 0
   Insn 100: point = 596, n_alt = 0
   Insn 99: point = 598, n_alt = 0
   Insn 98: point = 600, n_alt = 0
   Insn 97: point = 601, n_alt = 7
   Insn 96: point = 603, n_alt = 3
   Insn 95: point = 604, n_alt = 3
   Insn 94: point = 606, n_alt = 0
   Insn 93: point = 608, n_alt = 0
   Insn 92: point = 610, n_alt = 0
   Insn 91: point = 611, n_alt = 0
   Insn 90: point = 613, n_alt = 0
   Insn 89: point = 615, n_alt = 0
  BB 10
   Insn 81: point = 617, n_alt = 1
  BB 8
   Insn 73: point = 618, n_alt = 1
   Insn 72: point = 619, n_alt = 0
   Insn 71: point = 620, n_alt = 0
  BB 24
   Insn 521: point = 621, n_alt = -1
  BB 3
   Insn 19: point = 621, n_alt = -1
   Insn 18: point = 621, n_alt = 0
   Insn 17: point = 622, n_alt = 0
   Insn 16: point = 624, n_alt = 0
   Insn 15: point = 625, n_alt = 0
  BB 7
   Insn 508: point = 626, n_alt = -1
   Insn 65: point = 626, n_alt = 1
  BB 25
   Insn 524: point = 627, n_alt = -1
  BB 5
   Insn 27: point = 628, n_alt = -1
   Insn 26: point = 628, n_alt = 0
   Insn 25: point = 629, n_alt = 0
   Insn 24: point = 631, n_alt = 0
   Insn 23: point = 632, n_alt = 0
  BB 6
   Insn 506: point = 633, n_alt = -1
   Insn 59: point = 633, n_alt = 1
   Insn 58: point = 633, n_alt = 8
   Insn 57: point = 634, n_alt = 3
   Insn 56: point = 635, n_alt = 7
   Insn 55: point = 636, n_alt = 3
   Insn 54: point = 638, n_alt = 0
   Insn 53: point = 640, n_alt = 1
   Insn 52: point = 642, n_alt = 0
   Insn 51: point = 643, n_alt = 0
   Insn 50: point = 645, n_alt = 1
   Insn 49: point = 647, n_alt = 0
   Insn 48: point = 648, n_alt = 8
   Insn 47: point = 649, n_alt = 4
   Insn 46: point = 650, n_alt = 7
   Insn 45: point = 651, n_alt = 3
   Insn 44: point = 653, n_alt = 0
   Insn 43: point = 655, n_alt = 1
   Insn 42: point = 657, n_alt = 0
   Insn 41: point = 658, n_alt = 0
   Insn 40: point = 660, n_alt = 1
   Insn 39: point = 662, n_alt = 0
   Insn 38: point = 663, n_alt = 8
   Insn 37: point = 664, n_alt = 3
   Insn 36: point = 665, n_alt = 7
   Insn 35: point = 666, n_alt = 3
   Insn 34: point = 668, n_alt = 0
   Insn 33: point = 670, n_alt = 1
   Insn 32: point = 672, n_alt = 0
   Insn 31: point = 673, n_alt = 0
   Insn 30: point = 675, n_alt = 1
   Insn 29: point = 677, n_alt = 0
  BB 4
   Insn 21: point = 679, n_alt = 1
  BB 2
   Insn 13: point = 680, n_alt = 1
   Insn 12: point = 681, n_alt = 0
   Insn 11: point = 682, n_alt = 0
   Insn 6: point = 683, n_alt = 5
   Insn 5: point = 683, n_alt = 5
   Insn 4: point = 683, n_alt = 5
   Insn 3: point = 683, n_alt = 5
   Insn 2: point = 683, n_alt = 5
 r87: [674..675]
 r88: [669..673]
 r89: [669..670]
 r90: [667..668]
 r91: [663..666]
 r92: [663..665]
 r93: [659..660]
 r94: [654..658]
 r95: [654..655]
 r96: [652..653]
 r97: [648..651]
 r98: [648..650]
 r99: [644..645]
 r100: [639..643]
 r101: [639..640]
 r102: [637..638]
 r103: [633..636]
 r104: [633..635]
 r105: [612..613]
 r106: [607..611]
 r107: [607..608]
 r108: [605..606]
 r109: [602..604]
 r110: [585..601]
 r111: [597..598]
 r112: [592..596]
 r113: [592..593]
 r114: [590..591]
 r115: [587..589]
 r116: [585..586]
 r117: [560..584]
 r118: [580..581]
 r119: [575..579]
 r120: [575..576]
 r121: [573..574]
 r122: [570..572]
 r123: [567..569]
 r124: [564..566]
 r125: [562..563]
 r126: [560..561]
 r127: [534..554]
 r128: [550..551]
 r129: [545..549]
 r130: [545..546]
 r131: [543..544]
 r132: [540..542]
 r133: [538..539]
 r134: [536..537]
 r135: [534..535]
 r136: [526..528]
 r137: [524..525]
 r138: [521..523]
 r139: [500..504]
 r140: [500..501]
 r141: [498..499]
 r142: [490..491]
 r143: [485..489]
 r144: [485..486]
 r145: [483..484]
 r146: [480..482]
 r147: [478..479]
 r148: [475..477]
 r150: [465..468]
 r151: [461..463]
 r152: [440..454]
 r153: [450..451]
 r154: [445..449]
 r155: [445..446]
 r156: [443..444]
 r157: [437..442]
 r158: [437..439]
 r159: [433..434]
 r160: [428..432]
 r161: [428..429]
 r162: [426..427]
 r163: [423..425]
 r164: [406..422]
 r165: [418..419]
 r166: [413..417]
 r167: [413..414]
 r168: [411..412]
 r169: [408..410]
 r170: [406..407]
 r171: [404..405]
 r172: [399..400]
 r173: [394..398]
 r174: [394..395]
 r175: [392..393]
 r176: [389..391]
 r178: [367..382]
 r179: [378..379]
 r180: [373..377]
 r181: [373..374]
 r182: [371..372]
 r183: [364..370]
 r184: [364..366]
 r185: [360..361]
 r186: [355..359]
 r187: [355..356]
 r188: [353..354]
 r189: [350..352]
 r190: [348..349]
 r191: [342..343]
 r192: [337..341]
 r193: [337..338]
 r194: [335..336]
 r195: [332..334]
 r196: [321..322]
 r197: [314..320]
 r198: [316..317]
 r199: [314..315]
 r200: [309..313]
 r201: [309..310]
 r202: [307..308]
 r203: [304..306]
 r204: [299..301]
 r205: [287..288]
 r206: [285..286]
 r207: [278..284]
 r208: [280..281]
 r209: [278..279]
 r210: [273..277]
 r211: [273..274]
 r212: [271..272]
 r213: [268..270]
 r214: [263..265]
 r215: [257..258]
 r216: [250..256]
 r217: [252..253]
 r218: [250..251]
 r219: [245..249]
 r220: [245..246]
 r221: [243..244]
 r222: [240..242]
 r223: [210..237]
 r224: [233..234]
 r225: [231..232]
 r226: [224..230]
 r227: [226..227]
 r228: [224..225]
 r229: [219..223]
 r230: [219..220]
 r231: [217..218]
 r232: [214..216]
 r233: [210..211]
 r234: [204..205]
 r235: [197..203]
 r236: [199..200]
 r237: [197..198]
 r238: [192..196]
 r239: [192..193]
 r240: [190..191]
 r241: [187..189]
 r242: [157..184]
 r243: [180..181]
 r244: [178..179]
 r245: [171..177]
 r246: [173..174]
 r247: [171..172]
 r248: [166..170]
 r249: [166..167]
 r250: [164..165]
 r251: [161..163]
 r252: [157..158]
 r253: [151..152]
 r254: [149..150]
 r255: [142..148]
 r256: [144..145]
 r257: [142..143]
 r258: [137..141]
 r259: [137..138]
 r260: [135..136]
 r261: [132..134]
 r262: [111..129]
 r263: [125..126]
 r264: [111..124]
 r265: [120..121]
 r266: [115..119]
 r267: [115..116]
 r268: [113..114]
 r269: [108..112]
 r270: [108..110]
 r271: [104..105]
 r272: [99..103]
 r273: [99..100]
 r274: [97..98]
 r275: [94..96]
 r276: [89..91]
 r277: [83..84]
 r278: [78..82]
 r279: [78..79]
 r280: [76..77]
 r281: [73..75]
 r282: [59..72]
 r283: [68..69]
 r284: [63..67]
 r285: [63..64]
 r286: [61..62]
 r287: [56..60]
 r288: [56..58]
 r289: [51..52]
 r290: [46..50]
 r291: [46..47]
 r292: [44..45]
 r293: [41..43]
 r294: [33..37]
 r295: [33..34]
 r296: [31..32]
 r297: [23..24]
 r298: [18..22]
 r299: [18..19]
 r300: [16..17]
 r301: [13..15]
 r302: [498..509] [494..496]
 r303: [31..55] [13..28]
 r304: [680..682]
 r305: [621..681]
 r306: [621..622]
 r307: [628..629]
 r308: [618..620]
 r309: [0..619]
 r310: [0..1]
 r311: [7..8]
 r312: [383..403]
 r313: [326..327]
 r314: [293..294]
 r315: [29..40]
 r316: [623..624]
 r317: [630..631]
 r318: [676..677]
 r319: [671..672]
 r320: [663..664]
 r321: [661..662]
 r322: [656..657]
 r323: [648..649]
 r324: [646..647]
 r325: [641..642]
 r326: [633..634]
 r327: [2..3]
 r328: [9..10]
 r329: [614..615]
 r330: [609..610]
 r331: [602..603]
 r332: [599..600]
 r333: [594..595]
 r334: [587..588]
 r335: [582..583]
 r336: [577..578]
 r337: [570..571]
 r338: [567..568]
 r339: [564..565]
 r340: [558..559]
 r341: [555..557]
 r342: [555..556]
 r343: [552..553]
 r344: [547..548]
 r345: [540..541]
 r346: [532..533]
 r347: [529..531]
 r348: [529..530]
 r349: [526..527]
 r350: [519..520]
 r351: [521..522]
 r352: [515..516]
 r353: [517..518]
 r354: [510..511]
 r355: [512..514]
 r356: [512..513]
 r357: [505..506]
 r358: [507..508]
 r359: [502..503]
 r360: [492..493]
 r361: [487..488]
 r362: [480..481]
 r363: [473..476]
 r364: [469..470]
 r365: [459..460]
 r366: [461..462]
 r367: [457..458]
 r368: [452..453]
 r369: [447..448]
 r370: [440..441]
 r371: [437..438]
 r372: [435..436]
 r373: [430..431]
 r374: [423..424]
 r375: [420..421]
 r376: [415..416]
 r377: [408..409]
 r378: [401..402]
 r379: [396..397]
 r380: [389..390]
 r381: [384..385]
 r382: [380..381]
 r383: [375..376]
 r384: [364..365]
 r385: [362..363]
 r386: [357..358]
 r387: [350..351]
 r388: [346..347]
 r389: [344..345]
 r390: [339..340]
 r391: [330..333]
 r392: [330..331]
 r393: [328..329]
 r394: [295..296]
 r395: [323..324]
 r396: [318..319]
 r397: [311..312]
 r398: [302..305]
 r399: [302..303]
 r400: [299..300]
 r401: [289..290]
 r402: [282..283]
 r403: [275..276]
 r404: [266..269]
 r405: [266..267]
 r406: [261..262]
 r407: [263..264]
 r408: [259..260]
 r409: [254..255]
 r410: [247..248]
 r411: [238..241]
 r412: [238..239]
 r413: [235..236]
 r414: [228..229]
 r415: [221..222]
 r416: [212..215]
 r417: [212..213]
 r418: [208..209]
 r419: [206..207]
 r420: [201..202]
 r421: [194..195]
 r422: [185..188]
 r423: [185..186]
 r424: [182..183]
 r425: [175..176]
 r426: [168..169]
 r427: [159..162]
 r428: [159..160]
 r429: [155..156]
 r430: [153..154]
 r431: [146..147]
 r432: [139..140]
 r433: [130..133]
 r434: [130..131]
 r435: [127..128]
 r436: [122..123]
 r437: [117..118]
 r438: [108..109]
 r439: [106..107]
 r440: [101..102]
 r441: [92..95]
 r442: [92..93]
 r443: [87..88]
 r444: [89..90]
 r445: [85..86]
 r446: [80..81]
 r447: [73..74]
 r448: [70..71]
 r449: [65..66]
 r450: [56..57]
 r451: [53..54]
 r452: [48..49]
 r453: [41..42]
 r454: [38..39]
 r455: [35..36]
 r456: [25..26]
 r457: [20..21]
 r458: [13..14]
 r459: [472..474]
 r460: [464..466]
 r461: [455..456]
 r462: [387..388]
 r463: [367..368]
 r464: [369..386]
 r465: [467..471]
Compressing live ranges: from 683 to 556 - 81%
Ranges after the compression:
 r87: [550..551]
 r88: [546..549]
 r89: [546..547]
 r90: [544..545]
 r91: [542..543]
 r92: [542..543]
 r93: [538..539]
 r94: [534..537]
 r95: [534..535]
 r96: [532..533]
 r97: [530..531]
 r98: [530..531]
 r99: [526..527]
 r100: [522..525]
 r101: [522..523]
 r102: [520..521]
 r103: [518..519]
 r104: [518..519]
 r105: [504..505]
 r106: [500..503]
 r107: [500..501]
 r108: [498..499]
 r109: [496..497]
 r110: [482..495]
 r111: [492..493]
 r112: [488..491]
 r113: [488..489]
 r114: [486..487]
 r115: [484..485]
 r116: [482..483]
 r117: [462..481]
 r118: [478..479]
 r119: [474..477]
 r120: [474..475]
 r121: [472..473]
 r122: [470..471]
 r123: [468..469]
 r124: [466..467]
 r125: [464..465]
 r126: [462..463]
 r127: [440..457]
 r128: [454..455]
 r129: [450..453]
 r130: [450..451]
 r131: [448..449]
 r132: [446..447]
 r133: [444..445]
 r134: [442..443]
 r135: [440..441]
 r136: [434..435]
 r137: [432..433]
 r138: [430..431]
 r139: [412..415]
 r140: [412..413]
 r141: [410..411]
 r142: [404..405]
 r143: [400..403]
 r144: [400..401]
 r145: [398..399]
 r146: [396..397]
 r147: [394..395]
 r148: [392..393]
 r150: [384..387]
 r151: [382..383]
 r152: [364..375]
 r153: [372..373]
 r154: [368..371]
 r155: [368..369]
 r156: [366..367]
 r157: [362..365]
 r158: [362..363]
 r159: [358..359]
 r160: [354..357]
 r161: [354..355]
 r162: [352..353]
 r163: [350..351]
 r164: [336..349]
 r165: [346..347]
 r166: [342..345]
 r167: [342..343]
 r168: [340..341]
 r169: [338..339]
 r170: [336..337]
 r171: [334..335]
 r172: [330..331]
 r173: [326..329]
 r174: [326..327]
 r175: [324..325]
 r176: [322..323]
 r178: [304..317]
 r179: [314..315]
 r180: [310..313]
 r181: [310..311]
 r182: [308..309]
 r183: [302..307]
 r184: [302..303]
 r185: [298..299]
 r186: [294..297]
 r187: [294..295]
 r188: [292..293]
 r189: [290..291]
 r190: [288..289]
 r191: [282..283]
 r192: [278..281]
 r193: [278..279]
 r194: [276..277]
 r195: [274..275]
 r196: [264..265]
 r197: [258..263]
 r198: [260..261]
 r199: [258..259]
 r200: [254..257]
 r201: [254..255]
 r202: [252..253]
 r203: [250..251]
 r204: [246..247]
 r205: [238..239]
 r206: [236..237]
 r207: [230..235]
 r208: [232..233]
 r209: [230..231]
 r210: [226..229]
 r211: [226..227]
 r212: [224..225]
 r213: [222..223]
 r214: [218..219]
 r215: [212..213]
 r216: [206..211]
 r217: [208..209]
 r218: [206..207]
 r219: [202..205]
 r220: [202..203]
 r221: [200..201]
 r222: [198..199]
 r223: [172..195]
 r224: [192..193]
 r225: [190..191]
 r226: [184..189]
 r227: [186..187]
 r228: [184..185]
 r229: [180..183]
 r230: [180..181]
 r231: [178..179]
 r232: [176..177]
 r233: [172..173]
 r234: [166..167]
 r235: [160..165]
 r236: [162..163]
 r237: [160..161]
 r238: [156..159]
 r239: [156..157]
 r240: [154..155]
 r241: [152..153]
 r242: [126..149]
 r243: [146..147]
 r244: [144..145]
 r245: [138..143]
 r246: [140..141]
 r247: [138..139]
 r248: [134..137]
 r249: [134..135]
 r250: [132..133]
 r251: [130..131]
 r252: [126..127]
 r253: [120..121]
 r254: [118..119]
 r255: [112..117]
 r256: [114..115]
 r257: [112..113]
 r258: [108..111]
 r259: [108..109]
 r260: [106..107]
 r261: [104..105]
 r262: [86..101]
 r263: [98..99]
 r264: [86..97]
 r265: [94..95]
 r266: [90..93]
 r267: [90..91]
 r268: [88..89]
 r269: [84..87]
 r270: [84..85]
 r271: [80..81]
 r272: [76..79]
 r273: [76..77]
 r274: [74..75]
 r275: [72..73]
 r276: [68..69]
 r277: [62..63]
 r278: [58..61]
 r279: [58..59]
 r280: [56..57]
 r281: [54..55]
 r282: [42..53]
 r283: [50..51]
 r284: [46..49]
 r285: [46..47]
 r286: [44..45]
 r287: [40..43]
 r288: [40..41]
 r289: [36..37]
 r290: [32..35]
 r291: [32..33]
 r292: [30..31]
 r293: [28..29]
 r294: [22..25]
 r295: [22..23]
 r296: [20..21]
 r297: [16..17]
 r298: [12..15]
 r299: [12..13]
 r300: [10..11]
 r301: [8..9]
 r302: [408..419]
 r303: [8..39]
 r304: [554..555]
 r305: [510..555]
 r306: [510..511]
 r307: [514..515]
 r308: [508..509]
 r309: [0..509]
 r310: [0..1]
 r311: [4..5]
 r312: [318..333]
 r313: [268..269]
 r314: [242..243]
 r315: [20..27]
 r316: [512..513]
 r317: [516..517]
 r318: [552..553]
 r319: [548..549]
 r320: [542..543]
 r321: [540..541]
 r322: [536..537]
 r323: [530..531]
 r324: [528..529]
 r325: [524..525]
 r326: [518..519]
 r327: [2..3]
 r328: [6..7]
 r329: [506..507]
 r330: [502..503]
 r331: [496..497]
 r332: [494..495]
 r333: [490..491]
 r334: [484..485]
 r335: [480..481]
 r336: [476..477]
 r337: [470..471]
 r338: [468..469]
 r339: [466..467]
 r340: [460..461]
 r341: [458..459]
 r342: [458..459]
 r343: [456..457]
 r344: [452..453]
 r345: [446..447]
 r346: [438..439]
 r347: [436..437]
 r348: [436..437]
 r349: [434..435]
 r350: [428..429]
 r351: [430..431]
 r352: [424..425]
 r353: [426..427]
 r354: [420..421]
 r355: [422..423]
 r356: [422..423]
 r357: [416..417]
 r358: [418..419]
 r359: [414..415]
 r360: [406..407]
 r361: [402..403]
 r362: [396..397]
 r363: [390..393]
 r364: [388..389]
 r365: [380..381]
 r366: [382..383]
 r367: [378..379]
 r368: [374..375]
 r369: [370..371]
 r370: [364..365]
 r371: [362..363]
 r372: [360..361]
 r373: [356..357]
 r374: [350..351]
 r375: [348..349]
 r376: [344..345]
 r377: [338..339]
 r378: [332..333]
 r379: [328..329]
 r380: [322..323]
 r381: [318..319]
 r382: [316..317]
 r383: [312..313]
 r384: [302..303]
 r385: [300..301]
 r386: [296..297]
 r387: [290..291]
 r388: [286..287]
 r389: [284..285]
 r390: [280..281]
 r391: [272..275]
 r392: [272..273]
 r393: [270..271]
 r394: [244..245]
 r395: [266..267]
 r396: [262..263]
 r397: [256..257]
 r398: [248..251]
 r399: [248..249]
 r400: [246..247]
 r401: [240..241]
 r402: [234..235]
 r403: [228..229]
 r404: [220..223]
 r405: [220..221]
 r406: [216..217]
 r407: [218..219]
 r408: [214..215]
 r409: [210..211]
 r410: [204..205]
 r411: [196..199]
 r412: [196..197]
 r413: [194..195]
 r414: [188..189]
 r415: [182..183]
 r416: [174..177]
 r417: [174..175]
 r418: [170..171]
 r419: [168..169]
 r420: [164..165]
 r421: [158..159]
 r422: [150..153]
 r423: [150..151]
 r424: [148..149]
 r425: [142..143]
 r426: [136..137]
 r427: [128..131]
 r428: [128..129]
 r429: [124..125]
 r430: [122..123]
 r431: [116..117]
 r432: [110..111]
 r433: [102..105]
 r434: [102..103]
 r435: [100..101]
 r436: [96..97]
 r437: [92..93]
 r438: [84..85]
 r439: [82..83]
 r440: [78..79]
 r441: [70..73]
 r442: [70..71]
 r443: [66..67]
 r444: [68..69]
 r445: [64..65]
 r446: [60..61]
 r447: [54..55]
 r448: [52..53]
 r449: [48..49]
 r450: [40..41]
 r451: [38..39]
 r452: [34..35]
 r453: [28..29]
 r454: [26..27]
 r455: [24..25]
 r456: [18..19]
 r457: [14..15]
 r458: [8..9]
 r459: [390..391]
 r460: [384..385]
 r461: [376..377]
 r462: [320..321]
 r463: [304..305]
 r464: [306..319]
 r465: [386..389]

********** Assignment #1: **********

	 Assigning to 465 (cl=SSE_REGS, orig=149, freq=2000, tfirst=459, tfreq=4000)...
	 Assigning to 459 (cl=SSE_REGS, orig=148, freq=3000, tfirst=459, tfreq=4000)...
	   Assign 22 to reload r459 (freq=3000)
	Hard reg 22 is preferable by r465 with profit 1000
	Hard reg 21 is preferable by r460 with profit 1000
	Hard reg 22 is preferable by r460 with profit 500
	 Assigning to 460 (cl=SSE_REGS, orig=149, freq=3000, tfirst=459, tfreq=4000)...
	   Assign 22 to reload r460 (freq=3000)
	Hard reg 22 is preferable by r465 with profit 2000
	 Assigning to 461 (cl=SSE_REGS, orig=367, freq=3000, tfirst=461, tfreq=3000)...
	   Assign 22 to reload r461 (freq=3000)
	 Assigning to 464 (cl=ALL_SSE_REGS, orig=177, freq=2000, tfirst=462, tfreq=2000)...
	 Assigning to 462 (cl=ALL_SSE_REGS, orig=177, freq=2000, tfirst=462, tfreq=2000)...
	   Assign 24 to reload r462 (freq=2000)
	Hard reg 24 is preferable by r464 with profit 1000
	Hard reg 24 is preferable by r463 with profit 500
	 Assigning to 463 (cl=SSE_REGS, orig=177, freq=2000, tfirst=462, tfreq=2000)...
	   Assign 24 to optional reload r463 (freq=2000)
	Hard reg 24 is preferable by r464 with profit 2000
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 2 (0.00%)
   Insn after restoring regs:
  542: r463:SF=r177:SF
      REG_DEAD r177:SF
   Insn after restoring regs:
  541: r177:SF=r462:SF
      REG_DEAD r462:SF
   Insn after restoring regs:
  537: r460:SF=r149:SF
      REG_DEAD r149:SF
   Insn after restoring regs:
  536: r149:SF=r459:SF
      REG_DEAD r459:SF
Remove optional reload reg 463
  Restoring original insn:
  248: r184:SF=r178:SF*r177:SF
      REG_DEAD r177:SF
      REG_DEAD r178:SF
  Deleting move 542
  542: r463:SF=r177:SF
      REG_DEAD r177:SF
deleting insn with uid = 542.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 248:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=466 from oldreg=177, assigning class SSE_REGS to r466
      Making reload reg 466 for reg 177 optional
  248: r184:SF=r178:SF*r466:SF
      REG_DEAD r177:SF
      REG_DEAD r178:SF
    Inserting insn reload before:
  545: r466:SF=r177:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=622,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 545:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 25
EBB 7
EBB 24
EBB 8
EBB 9 10
EBB 11 12 13
EBB 14
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=467 from oldreg=177, assigning class ALL_SSE_REGS to inheritance r467
    Original reg change 177->467 (bb14):
  541: r467:SF=r462:SF
      REG_DEAD r462:SF
    Add original<-inheritance after:
  546: r177:SF=r467:SF

    Inheritance reuse change 177->467 (bb14):
  545: r466:SF=r467:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=468 from oldreg=149, assigning class SSE_REGS to inheritance r468
    Original reg change 149->468 (bb14):
  536: r468:SF=r459:SF
      REG_DEAD r459:SF
    Add original<-inheritance after:
  547: r149:SF=r468:SF

    Inheritance reuse change 149->468 (bb14):
  537: r460:SF=r468:SF
      REG_DEAD r468:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   546: r177:SF=r467:SF
deleting insn with uid = 546.
	    Removing dead insn:
   547: r149:SF=r468:SF
deleting insn with uid = 547.
EBB 15 16 17 18
EBB 19
EBB 20
EBB 28
EBB 21
EBB 27
EBB 22
EBB 26
EBB 23

********** Pseudo live ranges #2: **********

  BB 23
   Insn 505: point = 0, n_alt = -1
  BB 26
   Insn 527: point = 0, n_alt = -1
  BB 9
   Insn 79: point = 0, n_alt = -1
   Insn 78: point = 0, n_alt = 0
   Insn 77: point = 1, n_alt = 0
   Insn 76: point = 3, n_alt = 0
   Insn 75: point = 4, n_alt = 0
  BB 22
   Insn 517: point = 5, n_alt = -1
   Insn 492: point = 5, n_alt = 1
  BB 27
   Insn 530: point = 6, n_alt = -1
  BB 11
   Insn 87: point = 7, n_alt = -1
   Insn 86: point = 7, n_alt = 0
   Insn 85: point = 8, n_alt = 0
   Insn 84: point = 10, n_alt = 0
   Insn 83: point = 11, n_alt = 0
  BB 21
   Insn 515: point = 12, n_alt = -1
   Insn 486: point = 12, n_alt = 1
  BB 19
   Insn 511: point = 13, n_alt = -1
   Insn 475: point = 13, n_alt = 8
   Insn 474: point = 14, n_alt = 3
   Insn 473: point = 15, n_alt = 3
   Insn 472: point = 17, n_alt = 0
   Insn 471: point = 19, n_alt = 0
   Insn 470: point = 21, n_alt = 0
   Insn 469: point = 22, n_alt = 0
   Insn 468: point = 24, n_alt = 0
   Insn 467: point = 26, n_alt = 0
  BB 18
   Insn 8: point = 28, n_alt = -2
  BB 17
   Insn 463: point = 31, n_alt = -1
   Insn 462: point = 31, n_alt = 0
   Insn 461: point = 32, n_alt = 0
   Insn 460: point = 34, n_alt = 0
   Insn 459: point = 36, n_alt = 0
   Insn 458: point = 37, n_alt = 1
   Insn 457: point = 37, n_alt = 0
   Insn 456: point = 39, n_alt = 0
   Insn 455: point = 40, n_alt = 1
   Insn 454: point = 40, n_alt = 7
   Insn 453: point = 42, n_alt = 3
   Insn 452: point = 43, n_alt = 3
   Insn 451: point = 45, n_alt = 0
   Insn 450: point = 47, n_alt = 0
   Insn 449: point = 49, n_alt = 0
   Insn 448: point = 50, n_alt = 0
   Insn 447: point = 52, n_alt = 0
   Insn 446: point = 54, n_alt = 0
   Insn 445: point = 55, n_alt = 7
   Insn 444: point = 56, n_alt = 8
   Insn 443: point = 57, n_alt = 3
   Insn 442: point = 58, n_alt = 2
   Insn 441: point = 60, n_alt = 3
   Insn 440: point = 62, n_alt = 0
   Insn 439: point = 64, n_alt = 0
   Insn 438: point = 66, n_alt = 0
   Insn 437: point = 67, n_alt = 0
   Insn 436: point = 69, n_alt = 0
   Insn 435: point = 71, n_alt = 0
   Insn 434: point = 72, n_alt = 7
   Insn 433: point = 74, n_alt = 3
   Insn 432: point = 75, n_alt = 3
   Insn 431: point = 77, n_alt = 0
   Insn 430: point = 79, n_alt = 0
   Insn 429: point = 81, n_alt = 0
   Insn 428: point = 82, n_alt = 0
   Insn 427: point = 84, n_alt = 0
   Insn 426: point = 86, n_alt = 0
   Insn 425: point = 87, n_alt = 8
   Insn 424: point = 88, n_alt = 1
   Insn 423: point = 90, n_alt = 7
   Insn 422: point = 91, n_alt = 7
   Insn 421: point = 93, n_alt = 0
   Insn 420: point = 95, n_alt = 4
   Insn 419: point = 96, n_alt = 3
   Insn 418: point = 98, n_alt = 0
   Insn 417: point = 100, n_alt = 0
   Insn 416: point = 102, n_alt = 0
   Insn 415: point = 103, n_alt = 0
   Insn 414: point = 105, n_alt = 0
   Insn 413: point = 107, n_alt = 0
   Insn 412: point = 108, n_alt = 8
   Insn 411: point = 109, n_alt = 3
   Insn 410: point = 110, n_alt = 1
   Insn 409: point = 112, n_alt = 3
   Insn 408: point = 114, n_alt = 0
   Insn 407: point = 116, n_alt = 0
   Insn 406: point = 118, n_alt = 0
   Insn 405: point = 119, n_alt = 0
   Insn 404: point = 121, n_alt = 0
   Insn 403: point = 123, n_alt = 0
   Insn 402: point = 124, n_alt = 2
   Insn 401: point = 126, n_alt = 1
   Insn 400: point = 128, n_alt = 7
   Insn 399: point = 129, n_alt = 7
   Insn 398: point = 131, n_alt = 0
   Insn 397: point = 133, n_alt = 4
   Insn 396: point = 134, n_alt = 3
   Insn 395: point = 136, n_alt = 0
   Insn 394: point = 138, n_alt = 0
   Insn 393: point = 140, n_alt = 0
   Insn 392: point = 141, n_alt = 0
   Insn 391: point = 143, n_alt = 0
   Insn 390: point = 145, n_alt = 0
   Insn 389: point = 147, n_alt = 0
   Insn 388: point = 148, n_alt = 1
   Insn 387: point = 150, n_alt = 0
   Insn 386: point = 152, n_alt = 0
   Insn 385: point = 154, n_alt = 0
   Insn 384: point = 155, n_alt = 8
   Insn 383: point = 156, n_alt = 2
   Insn 382: point = 158, n_alt = 7
   Insn 381: point = 160, n_alt = 0
   Insn 380: point = 162, n_alt = 4
   Insn 379: point = 163, n_alt = 3
   Insn 378: point = 165, n_alt = 0
   Insn 377: point = 167, n_alt = 0
   Insn 376: point = 169, n_alt = 0
   Insn 375: point = 170, n_alt = 0
   Insn 374: point = 172, n_alt = 0
   Insn 373: point = 174, n_alt = 0
   Insn 372: point = 176, n_alt = 0
   Insn 371: point = 177, n_alt = 1
   Insn 370: point = 179, n_alt = 0
   Insn 369: point = 181, n_alt = 0
   Insn 368: point = 183, n_alt = 0
   Insn 367: point = 184, n_alt = 7
   Insn 366: point = 186, n_alt = 0
   Insn 365: point = 188, n_alt = 4
   Insn 364: point = 189, n_alt = 3
   Insn 363: point = 191, n_alt = 0
   Insn 362: point = 193, n_alt = 0
   Insn 361: point = 195, n_alt = 0
   Insn 360: point = 196, n_alt = 0
   Insn 359: point = 198, n_alt = 0
   Insn 358: point = 200, n_alt = 0
   Insn 357: point = 202, n_alt = 0
   Insn 356: point = 203, n_alt = 1
   Insn 355: point = 205, n_alt = 0
   Insn 354: point = 207, n_alt = 0
   Insn 353: point = 208, n_alt = 8
   Insn 352: point = 209, n_alt = 2
   Insn 351: point = 211, n_alt = 7
   Insn 350: point = 213, n_alt = 0
   Insn 349: point = 215, n_alt = 4
   Insn 348: point = 216, n_alt = 3
   Insn 347: point = 218, n_alt = 0
   Insn 346: point = 220, n_alt = 0
   Insn 345: point = 222, n_alt = 0
   Insn 344: point = 223, n_alt = 0
   Insn 343: point = 225, n_alt = 0
   Insn 342: point = 227, n_alt = 0
   Insn 341: point = 229, n_alt = 0
   Insn 340: point = 230, n_alt = 1
   Insn 339: point = 232, n_alt = 0
   Insn 338: point = 234, n_alt = 0
   Insn 337: point = 236, n_alt = 0
   Insn 336: point = 237, n_alt = 7
   Insn 335: point = 239, n_alt = 0
   Insn 334: point = 241, n_alt = 4
   Insn 333: point = 242, n_alt = 3
   Insn 332: point = 244, n_alt = 0
   Insn 331: point = 246, n_alt = 0
   Insn 330: point = 248, n_alt = 0
   Insn 329: point = 249, n_alt = 0
   Insn 328: point = 251, n_alt = 0
   Insn 327: point = 253, n_alt = 0
   Insn 326: point = 255, n_alt = 0
   Insn 325: point = 256, n_alt = 1
   Insn 324: point = 258, n_alt = 0
   Insn 323: point = 260, n_alt = 0
   Insn 322: point = 261, n_alt = 8
   Insn 321: point = 262, n_alt = 2
   Insn 320: point = 264, n_alt = 7
   Insn 319: point = 265, n_alt = 7
   Insn 318: point = 267, n_alt = 0
   Insn 317: point = 269, n_alt = 4
   Insn 316: point = 270, n_alt = 3
   Insn 315: point = 272, n_alt = 0
   Insn 314: point = 274, n_alt = 0
   Insn 313: point = 276, n_alt = 0
   Insn 312: point = 277, n_alt = 0
   Insn 311: point = 279, n_alt = 0
   Insn 310: point = 281, n_alt = 0
   Insn 309: point = 283, n_alt = 0
   Insn 308: point = 284, n_alt = 1
   Insn 307: point = 286, n_alt = 0
   Insn 306: point = 288, n_alt = 0
   Insn 305: point = 290, n_alt = 0
  BB 28
   Insn 533: point = 292, n_alt = -1
  BB 15
   Insn 282: point = 293, n_alt = -1
   Insn 281: point = 293, n_alt = 0
   Insn 280: point = 294, n_alt = 0
   Insn 279: point = 296, n_alt = 0
   Insn 278: point = 297, n_alt = 1
  BB 20
   Insn 513: point = 298, n_alt = -1
   Insn 480: point = 298, n_alt = 1
  BB 16
   Insn 300: point = 299, n_alt = -1
   Insn 299: point = 299, n_alt = 1
   Insn 298: point = 300, n_alt = 7
   Insn 297: point = 301, n_alt = 7
   Insn 296: point = 303, n_alt = 0
   Insn 295: point = 305, n_alt = 4
   Insn 294: point = 306, n_alt = 3
   Insn 293: point = 308, n_alt = 0
   Insn 292: point = 310, n_alt = 0
   Insn 291: point = 312, n_alt = 0
   Insn 290: point = 313, n_alt = 0
   Insn 289: point = 315, n_alt = 0
   Insn 288: point = 317, n_alt = 0
   Insn 287: point = 319, n_alt = 0
   Insn 286: point = 320, n_alt = 1
   Insn 285: point = 322, n_alt = 0
   Insn 284: point = 324, n_alt = 0
  BB 14
   Insn 276: point = 326, n_alt = 1
   Insn 275: point = 327, n_alt = 0
   Insn 274: point = 328, n_alt = 1
   Insn 273: point = 329, n_alt = 0
   Insn 272: point = 331, n_alt = 0
   Insn 271: point = 333, n_alt = 4
   Insn 270: point = 334, n_alt = 3
   Insn 269: point = 336, n_alt = 0
   Insn 268: point = 338, n_alt = 0
   Insn 267: point = 340, n_alt = 0
   Insn 266: point = 341, n_alt = 0
   Insn 265: point = 343, n_alt = 0
   Insn 264: point = 345, n_alt = 0
   Insn 263: point = 346, n_alt = 4
   Insn 262: point = 347, n_alt = 9
   Insn 261: point = 348, n_alt = 0
   Insn 260: point = 348, n_alt = -2
   Insn 259: point = 349, n_alt = 7
   Insn 258: point = 351, n_alt = 3
   Insn 257: point = 352, n_alt = 3
   Insn 256: point = 354, n_alt = 0
   Insn 255: point = 356, n_alt = 0
   Insn 254: point = 358, n_alt = 0
   Insn 253: point = 359, n_alt = 0
   Insn 252: point = 361, n_alt = 0
   Insn 251: point = 363, n_alt = 0
   Insn 250: point = 364, n_alt = 8
   Insn 249: point = 365, n_alt = 3
   Insn 248: point = 366, n_alt = 1
   Insn 545: point = 368, n_alt = 7
	   Creating copy r466<-r467@1000
   Insn 247: point = 370, n_alt = 3
   Insn 246: point = 372, n_alt = 0
   Insn 245: point = 374, n_alt = 0
   Insn 244: point = 376, n_alt = 0
   Insn 243: point = 377, n_alt = 0
   Insn 242: point = 379, n_alt = 0
   Insn 241: point = 381, n_alt = 0
   Insn 240: point = 382, n_alt = -2
   Insn 239: point = 383, n_alt = 0
   Insn 238: point = 383, n_alt = -2
   Insn 237: point = 384, n_alt = -2
   Insn 236: point = 385, n_alt = 7
   Insn 541: point = 386, n_alt = 8
	   Creating copy r462->r467@1000
   Insn 235: point = 388, n_alt = 7
   Insn 234: point = 390, n_alt = 3
   Insn 233: point = 391, n_alt = 3
   Insn 232: point = 393, n_alt = 0
   Insn 231: point = 395, n_alt = 0
   Insn 230: point = 397, n_alt = 0
   Insn 229: point = 398, n_alt = 0
   Insn 228: point = 400, n_alt = 0
   Insn 227: point = 402, n_alt = 0
   Insn 226: point = 403, n_alt = -2
   Insn 225: point = 405, n_alt = 2
   Insn 224: point = 407, n_alt = 7
   Insn 223: point = 409, n_alt = 3
   Insn 222: point = 410, n_alt = 3
   Insn 221: point = 412, n_alt = 0
   Insn 220: point = 414, n_alt = 0
   Insn 219: point = 416, n_alt = 0
   Insn 218: point = 417, n_alt = 0
   Insn 217: point = 419, n_alt = 0
   Insn 216: point = 421, n_alt = 0
   Insn 215: point = 422, n_alt = 7
   Insn 214: point = 424, n_alt = 4
   Insn 213: point = 425, n_alt = 3
   Insn 212: point = 427, n_alt = 0
   Insn 211: point = 429, n_alt = 0
   Insn 210: point = 431, n_alt = 0
   Insn 209: point = 432, n_alt = 0
   Insn 208: point = 434, n_alt = 0
   Insn 207: point = 436, n_alt = 0
   Insn 206: point = 437, n_alt = 8
   Insn 205: point = 438, n_alt = 4
   Insn 204: point = 439, n_alt = 1
   Insn 203: point = 441, n_alt = 7
   Insn 202: point = 442, n_alt = 3
   Insn 201: point = 444, n_alt = 0
   Insn 200: point = 446, n_alt = 0
   Insn 199: point = 448, n_alt = 0
   Insn 198: point = 449, n_alt = 0
   Insn 197: point = 451, n_alt = 0
   Insn 196: point = 453, n_alt = 0
   Insn 540: point = 454, n_alt = -2
	Hard reg 22 is preferable by r461 with profit 1000
   Insn 195: point = 456, n_alt = 2
   Insn 539: point = 456, n_alt = -2
	Hard reg 22 is preferable by r461 with profit 1000
	Hard reg 21 is preferable by r461 with profit 1000
   Insn 194: point = 458, n_alt = 7
   Insn 193: point = 459, n_alt = 8
   Insn 192: point = 460, n_alt = 2
   Insn 191: point = 462, n_alt = 7
   Insn 538: point = 463, n_alt = -2
	Hard reg 21 is preferable by r460 with profit 1000
   Insn 190: point = 465, n_alt = 2
   Insn 537: point = 466, n_alt = 7
	   Creating copy r460<-r468@1000
   Insn 189: point = 468, n_alt = -2
   Insn 188: point = 469, n_alt = 0
   Insn 187: point = 469, n_alt = -2
   Insn 186: point = 470, n_alt = 7
   Insn 536: point = 471, n_alt = 8
	   Creating copy r459->r468@1000
   Insn 185: point = 473, n_alt = 1
   Insn 535: point = 474, n_alt = -2
	Hard reg 22 is preferable by r459 with profit 1000
   Insn 184: point = 476, n_alt = 7
   Insn 183: point = 477, n_alt = -2
   Insn 182: point = 478, n_alt = 0
   Insn 181: point = 478, n_alt = -2
   Insn 180: point = 479, n_alt = 7
   Insn 179: point = 481, n_alt = 3
   Insn 178: point = 482, n_alt = 3
   Insn 177: point = 484, n_alt = 0
   Insn 176: point = 486, n_alt = 0
   Insn 175: point = 488, n_alt = 0
   Insn 174: point = 489, n_alt = 0
   Insn 173: point = 491, n_alt = 0
   Insn 172: point = 493, n_alt = 0
   Insn 171: point = 494, n_alt = 8
  BB 13
   Insn 168: point = 496, n_alt = 7
  BB 12
   Insn 166: point = 498, n_alt = -1
   Insn 165: point = 498, n_alt = 0
   Insn 164: point = 499, n_alt = 0
   Insn 163: point = 501, n_alt = 0
   Insn 162: point = 503, n_alt = 0
   Insn 161: point = 504, n_alt = 1
   Insn 160: point = 504, n_alt = 0
   Insn 159: point = 506, n_alt = 0
   Insn 158: point = 507, n_alt = 1
   Insn 157: point = 508, n_alt = 7
   Insn 156: point = 509, n_alt = 7
   Insn 155: point = 510, n_alt = 8
   Insn 154: point = 511, n_alt = 1
   Insn 153: point = 513, n_alt = 7
   Insn 152: point = 514, n_alt = 7
   Insn 151: point = 515, n_alt = 8
   Insn 150: point = 516, n_alt = 2
   Insn 149: point = 518, n_alt = 7
   Insn 148: point = 519, n_alt = 8
   Insn 147: point = 520, n_alt = 1
   Insn 146: point = 522, n_alt = 7
   Insn 145: point = 523, n_alt = -2
   Insn 144: point = 525, n_alt = 2
   Insn 143: point = 527, n_alt = 7
   Insn 142: point = 528, n_alt = 1
   Insn 141: point = 530, n_alt = 7
   Insn 140: point = 531, n_alt = 7
   Insn 139: point = 532, n_alt = 8
   Insn 138: point = 533, n_alt = 2
   Insn 137: point = 535, n_alt = -2
   Insn 136: point = 537, n_alt = 2
   Insn 135: point = 539, n_alt = 7
   Insn 134: point = 541, n_alt = 3
   Insn 133: point = 542, n_alt = 3
   Insn 132: point = 544, n_alt = 0
   Insn 131: point = 546, n_alt = 0
   Insn 130: point = 548, n_alt = 0
   Insn 129: point = 549, n_alt = 0
   Insn 128: point = 551, n_alt = 0
   Insn 127: point = 553, n_alt = 0
   Insn 126: point = 554, n_alt = 1
   Insn 125: point = 556, n_alt = 7
   Insn 124: point = 557, n_alt = 7
   Insn 123: point = 558, n_alt = 8
   Insn 122: point = 559, n_alt = 2
   Insn 121: point = 561, n_alt = -2
   Insn 120: point = 563, n_alt = 1
   Insn 119: point = 565, n_alt = 7
   Insn 118: point = 566, n_alt = 1
   Insn 117: point = 568, n_alt = 7
   Insn 116: point = 569, n_alt = 7
   Insn 115: point = 571, n_alt = 3
   Insn 114: point = 572, n_alt = 3
   Insn 113: point = 574, n_alt = 0
   Insn 112: point = 576, n_alt = 0
   Insn 111: point = 578, n_alt = 0
   Insn 110: point = 579, n_alt = 0
   Insn 109: point = 581, n_alt = 0
   Insn 108: point = 583, n_alt = 0
   Insn 107: point = 584, n_alt = 1
   Insn 106: point = 586, n_alt = 7
   Insn 105: point = 588, n_alt = 3
   Insn 104: point = 589, n_alt = 3
   Insn 103: point = 591, n_alt = 0
   Insn 102: point = 593, n_alt = 0
   Insn 101: point = 595, n_alt = 0
   Insn 100: point = 596, n_alt = 0
   Insn 99: point = 598, n_alt = 0
   Insn 98: point = 600, n_alt = 0
   Insn 97: point = 601, n_alt = 7
   Insn 96: point = 603, n_alt = 3
   Insn 95: point = 604, n_alt = 3
   Insn 94: point = 606, n_alt = 0
   Insn 93: point = 608, n_alt = 0
   Insn 92: point = 610, n_alt = 0
   Insn 91: point = 611, n_alt = 0
   Insn 90: point = 613, n_alt = 0
   Insn 89: point = 615, n_alt = 0
  BB 10
   Insn 81: point = 617, n_alt = 1
  BB 8
   Insn 73: point = 618, n_alt = 1
   Insn 72: point = 619, n_alt = 0
   Insn 71: point = 620, n_alt = 0
  BB 24
   Insn 521: point = 621, n_alt = -1
  BB 3
   Insn 19: point = 621, n_alt = -1
   Insn 18: point = 621, n_alt = 0
   Insn 17: point = 622, n_alt = 0
   Insn 16: point = 624, n_alt = 0
   Insn 15: point = 625, n_alt = 0
  BB 7
   Insn 508: point = 626, n_alt = -1
   Insn 65: point = 626, n_alt = 1
  BB 25
   Insn 524: point = 627, n_alt = -1
  BB 5
   Insn 27: point = 628, n_alt = -1
   Insn 26: point = 628, n_alt = 0
   Insn 25: point = 629, n_alt = 0
   Insn 24: point = 631, n_alt = 0
   Insn 23: point = 632, n_alt = 0
  BB 6
   Insn 506: point = 633, n_alt = -1
   Insn 59: point = 633, n_alt = 1
   Insn 58: point = 633, n_alt = 8
   Insn 57: point = 634, n_alt = 3
   Insn 56: point = 635, n_alt = 7
   Insn 55: point = 636, n_alt = 3
   Insn 54: point = 638, n_alt = 0
   Insn 53: point = 640, n_alt = 1
   Insn 52: point = 642, n_alt = 0
   Insn 51: point = 643, n_alt = 0
   Insn 50: point = 645, n_alt = 1
   Insn 49: point = 647, n_alt = 0
   Insn 48: point = 648, n_alt = 8
   Insn 47: point = 649, n_alt = 4
   Insn 46: point = 650, n_alt = 7
   Insn 45: point = 651, n_alt = 3
   Insn 44: point = 653, n_alt = 0
   Insn 43: point = 655, n_alt = 1
   Insn 42: point = 657, n_alt = 0
   Insn 41: point = 658, n_alt = 0
   Insn 40: point = 660, n_alt = 1
   Insn 39: point = 662, n_alt = 0
   Insn 38: point = 663, n_alt = 8
   Insn 37: point = 664, n_alt = 3
   Insn 36: point = 665, n_alt = 7
   Insn 35: point = 666, n_alt = 3
   Insn 34: point = 668, n_alt = 0
   Insn 33: point = 670, n_alt = 1
   Insn 32: point = 672, n_alt = 0
   Insn 31: point = 673, n_alt = 0
   Insn 30: point = 675, n_alt = 1
   Insn 29: point = 677, n_alt = 0
  BB 4
   Insn 21: point = 679, n_alt = 1
  BB 2
   Insn 13: point = 680, n_alt = 1
   Insn 12: point = 681, n_alt = 0
   Insn 11: point = 682, n_alt = 0
   Insn 6: point = 683, n_alt = 5
   Insn 5: point = 683, n_alt = 5
   Insn 4: point = 683, n_alt = 5
   Insn 3: point = 683, n_alt = 5
   Insn 2: point = 683, n_alt = 5
 r87: [674..675]
 r88: [669..673]
 r89: [669..670]
 r90: [667..668]
 r91: [663..666]
 r92: [663..665]
 r93: [659..660]
 r94: [654..658]
 r95: [654..655]
 r96: [652..653]
 r97: [648..651]
 r98: [648..650]
 r99: [644..645]
 r100: [639..643]
 r101: [639..640]
 r102: [637..638]
 r103: [633..636]
 r104: [633..635]
 r105: [612..613]
 r106: [607..611]
 r107: [607..608]
 r108: [605..606]
 r109: [602..604]
 r110: [585..601]
 r111: [597..598]
 r112: [592..596]
 r113: [592..593]
 r114: [590..591]
 r115: [587..589]
 r116: [585..586]
 r117: [560..584]
 r118: [580..581]
 r119: [575..579]
 r120: [575..576]
 r121: [573..574]
 r122: [570..572]
 r123: [567..569]
 r124: [564..566]
 r125: [562..563]
 r126: [560..561]
 r127: [534..554]
 r128: [550..551]
 r129: [545..549]
 r130: [545..546]
 r131: [543..544]
 r132: [540..542]
 r133: [538..539]
 r134: [536..537]
 r135: [534..535]
 r136: [526..528]
 r137: [524..525]
 r138: [521..523]
 r139: [500..504]
 r140: [500..501]
 r141: [498..499]
 r142: [490..491]
 r143: [485..489]
 r144: [485..486]
 r145: [483..484]
 r146: [480..482]
 r147: [478..479]
 r148: [475..477]
 r150: [465..468]
 r151: [461..463]
 r152: [440..454]
 r153: [450..451]
 r154: [445..449]
 r155: [445..446]
 r156: [443..444]
 r157: [437..442]
 r158: [437..439]
 r159: [433..434]
 r160: [428..432]
 r161: [428..429]
 r162: [426..427]
 r163: [423..425]
 r164: [406..422]
 r165: [418..419]
 r166: [413..417]
 r167: [413..414]
 r168: [411..412]
 r169: [408..410]
 r170: [406..407]
 r171: [404..405]
 r172: [399..400]
 r173: [394..398]
 r174: [394..395]
 r175: [392..393]
 r176: [389..391]
 r178: [367..382]
 r179: [378..379]
 r180: [373..377]
 r181: [373..374]
 r182: [371..372]
 r183: [364..370]
 r184: [364..366]
 r185: [360..361]
 r186: [355..359]
 r187: [355..356]
 r188: [353..354]
 r189: [350..352]
 r190: [348..349]
 r191: [342..343]
 r192: [337..341]
 r193: [337..338]
 r194: [335..336]
 r195: [332..334]
 r196: [321..322]
 r197: [314..320]
 r198: [316..317]
 r199: [314..315]
 r200: [309..313]
 r201: [309..310]
 r202: [307..308]
 r203: [304..306]
 r204: [299..301]
 r205: [287..288]
 r206: [285..286]
 r207: [278..284]
 r208: [280..281]
 r209: [278..279]
 r210: [273..277]
 r211: [273..274]
 r212: [271..272]
 r213: [268..270]
 r214: [263..265]
 r215: [257..258]
 r216: [250..256]
 r217: [252..253]
 r218: [250..251]
 r219: [245..249]
 r220: [245..246]
 r221: [243..244]
 r222: [240..242]
 r223: [210..237]
 r224: [233..234]
 r225: [231..232]
 r226: [224..230]
 r227: [226..227]
 r228: [224..225]
 r229: [219..223]
 r230: [219..220]
 r231: [217..218]
 r232: [214..216]
 r233: [210..211]
 r234: [204..205]
 r235: [197..203]
 r236: [199..200]
 r237: [197..198]
 r238: [192..196]
 r239: [192..193]
 r240: [190..191]
 r241: [187..189]
 r242: [157..184]
 r243: [180..181]
 r244: [178..179]
 r245: [171..177]
 r246: [173..174]
 r247: [171..172]
 r248: [166..170]
 r249: [166..167]
 r250: [164..165]
 r251: [161..163]
 r252: [157..158]
 r253: [151..152]
 r254: [149..150]
 r255: [142..148]
 r256: [144..145]
 r257: [142..143]
 r258: [137..141]
 r259: [137..138]
 r260: [135..136]
 r261: [132..134]
 r262: [111..129]
 r263: [125..126]
 r264: [111..124]
 r265: [120..121]
 r266: [115..119]
 r267: [115..116]
 r268: [113..114]
 r269: [108..112]
 r270: [108..110]
 r271: [104..105]
 r272: [99..103]
 r273: [99..100]
 r274: [97..98]
 r275: [94..96]
 r276: [89..91]
 r277: [83..84]
 r278: [78..82]
 r279: [78..79]
 r280: [76..77]
 r281: [73..75]
 r282: [59..72]
 r283: [68..69]
 r284: [63..67]
 r285: [63..64]
 r286: [61..62]
 r287: [56..60]
 r288: [56..58]
 r289: [51..52]
 r290: [46..50]
 r291: [46..47]
 r292: [44..45]
 r293: [41..43]
 r294: [33..37]
 r295: [33..34]
 r296: [31..32]
 r297: [23..24]
 r298: [18..22]
 r299: [18..19]
 r300: [16..17]
 r301: [13..15]
 r302: [498..509] [494..496]
 r303: [31..55] [13..28]
 r304: [680..682]
 r305: [621..681]
 r306: [621..622]
 r307: [628..629]
 r308: [618..620]
 r309: [0..619]
 r310: [0..1]
 r311: [7..8]
 r312: [383..403]
 r313: [326..327]
 r314: [293..294]
 r315: [29..40]
 r316: [623..624]
 r317: [630..631]
 r318: [676..677]
 r319: [671..672]
 r320: [663..664]
 r321: [661..662]
 r322: [656..657]
 r323: [648..649]
 r324: [646..647]
 r325: [641..642]
 r326: [633..634]
 r327: [2..3]
 r328: [9..10]
 r329: [614..615]
 r330: [609..610]
 r331: [602..603]
 r332: [599..600]
 r333: [594..595]
 r334: [587..588]
 r335: [582..583]
 r336: [577..578]
 r337: [570..571]
 r338: [567..568]
 r339: [564..565]
 r340: [558..559]
 r341: [555..557]
 r342: [555..556]
 r343: [552..553]
 r344: [547..548]
 r345: [540..541]
 r346: [532..533]
 r347: [529..531]
 r348: [529..530]
 r349: [526..527]
 r350: [519..520]
 r351: [521..522]
 r352: [515..516]
 r353: [517..518]
 r354: [510..511]
 r355: [512..514]
 r356: [512..513]
 r357: [505..506]
 r358: [507..508]
 r359: [502..503]
 r360: [492..493]
 r361: [487..488]
 r362: [480..481]
 r363: [473..476]
 r364: [469..470]
 r365: [459..460]
 r366: [461..462]
 r367: [457..458]
 r368: [452..453]
 r369: [447..448]
 r370: [440..441]
 r371: [437..438]
 r372: [435..436]
 r373: [430..431]
 r374: [423..424]
 r375: [420..421]
 r376: [415..416]
 r377: [408..409]
 r378: [401..402]
 r379: [396..397]
 r380: [389..390]
 r381: [384..385]
 r382: [380..381]
 r383: [375..376]
 r384: [364..365]
 r385: [362..363]
 r386: [357..358]
 r387: [350..351]
 r388: [346..347]
 r389: [344..345]
 r390: [339..340]
 r391: [330..333]
 r392: [330..331]
 r393: [328..329]
 r394: [295..296]
 r395: [323..324]
 r396: [318..319]
 r397: [311..312]
 r398: [302..305]
 r399: [302..303]
 r400: [299..300]
 r401: [289..290]
 r402: [282..283]
 r403: [275..276]
 r404: [266..269]
 r405: [266..267]
 r406: [261..262]
 r407: [263..264]
 r408: [259..260]
 r409: [254..255]
 r410: [247..248]
 r411: [238..241]
 r412: [238..239]
 r413: [235..236]
 r414: [228..229]
 r415: [221..222]
 r416: [212..215]
 r417: [212..213]
 r418: [208..209]
 r419: [206..207]
 r420: [201..202]
 r421: [194..195]
 r422: [185..188]
 r423: [185..186]
 r424: [182..183]
 r425: [175..176]
 r426: [168..169]
 r427: [159..162]
 r428: [159..160]
 r429: [155..156]
 r430: [153..154]
 r431: [146..147]
 r432: [139..140]
 r433: [130..133]
 r434: [130..131]
 r435: [127..128]
 r436: [122..123]
 r437: [117..118]
 r438: [108..109]
 r439: [106..107]
 r440: [101..102]
 r441: [92..95]
 r442: [92..93]
 r443: [87..88]
 r444: [89..90]
 r445: [85..86]
 r446: [80..81]
 r447: [73..74]
 r448: [70..71]
 r449: [65..66]
 r450: [56..57]
 r451: [53..54]
 r452: [48..49]
 r453: [41..42]
 r454: [38..39]
 r455: [35..36]
 r456: [25..26]
 r457: [20..21]
 r458: [13..14]
 r459: [472..474]
 r460: [464..466]
 r461: [455..456]
 r462: [387..388]
 r466: [367..368]
 r467: [369..386]
 r468: [467..471]
Compressing live ranges: from 683 to 556 - 81%
Ranges after the compression:
 r87: [550..551]
 r88: [546..549]
 r89: [546..547]
 r90: [544..545]
 r91: [542..543]
 r92: [542..543]
 r93: [538..539]
 r94: [534..537]
 r95: [534..535]
 r96: [532..533]
 r97: [530..531]
 r98: [530..531]
 r99: [526..527]
 r100: [522..525]
 r101: [522..523]
 r102: [520..521]
 r103: [518..519]
 r104: [518..519]
 r105: [504..505]
 r106: [500..503]
 r107: [500..501]
 r108: [498..499]
 r109: [496..497]
 r110: [482..495]
 r111: [492..493]
 r112: [488..491]
 r113: [488..489]
 r114: [486..487]
 r115: [484..485]
 r116: [482..483]
 r117: [462..481]
 r118: [478..479]
 r119: [474..477]
 r120: [474..475]
 r121: [472..473]
 r122: [470..471]
 r123: [468..469]
 r124: [466..467]
 r125: [464..465]
 r126: [462..463]
 r127: [440..457]
 r128: [454..455]
 r129: [450..453]
 r130: [450..451]
 r131: [448..449]
 r132: [446..447]
 r133: [444..445]
 r134: [442..443]
 r135: [440..441]
 r136: [434..435]
 r137: [432..433]
 r138: [430..431]
 r139: [412..415]
 r140: [412..413]
 r141: [410..411]
 r142: [404..405]
 r143: [400..403]
 r144: [400..401]
 r145: [398..399]
 r146: [396..397]
 r147: [394..395]
 r148: [392..393]
 r150: [384..387]
 r151: [382..383]
 r152: [364..375]
 r153: [372..373]
 r154: [368..371]
 r155: [368..369]
 r156: [366..367]
 r157: [362..365]
 r158: [362..363]
 r159: [358..359]
 r160: [354..357]
 r161: [354..355]
 r162: [352..353]
 r163: [350..351]
 r164: [336..349]
 r165: [346..347]
 r166: [342..345]
 r167: [342..343]
 r168: [340..341]
 r169: [338..339]
 r170: [336..337]
 r171: [334..335]
 r172: [330..331]
 r173: [326..329]
 r174: [326..327]
 r175: [324..325]
 r176: [322..323]
 r178: [304..317]
 r179: [314..315]
 r180: [310..313]
 r181: [310..311]
 r182: [308..309]
 r183: [302..307]
 r184: [302..303]
 r185: [298..299]
 r186: [294..297]
 r187: [294..295]
 r188: [292..293]
 r189: [290..291]
 r190: [288..289]
 r191: [282..283]
 r192: [278..281]
 r193: [278..279]
 r194: [276..277]
 r195: [274..275]
 r196: [264..265]
 r197: [258..263]
 r198: [260..261]
 r199: [258..259]
 r200: [254..257]
 r201: [254..255]
 r202: [252..253]
 r203: [250..251]
 r204: [246..247]
 r205: [238..239]
 r206: [236..237]
 r207: [230..235]
 r208: [232..233]
 r209: [230..231]
 r210: [226..229]
 r211: [226..227]
 r212: [224..225]
 r213: [222..223]
 r214: [218..219]
 r215: [212..213]
 r216: [206..211]
 r217: [208..209]
 r218: [206..207]
 r219: [202..205]
 r220: [202..203]
 r221: [200..201]
 r222: [198..199]
 r223: [172..195]
 r224: [192..193]
 r225: [190..191]
 r226: [184..189]
 r227: [186..187]
 r228: [184..185]
 r229: [180..183]
 r230: [180..181]
 r231: [178..179]
 r232: [176..177]
 r233: [172..173]
 r234: [166..167]
 r235: [160..165]
 r236: [162..163]
 r237: [160..161]
 r238: [156..159]
 r239: [156..157]
 r240: [154..155]
 r241: [152..153]
 r242: [126..149]
 r243: [146..147]
 r244: [144..145]
 r245: [138..143]
 r246: [140..141]
 r247: [138..139]
 r248: [134..137]
 r249: [134..135]
 r250: [132..133]
 r251: [130..131]
 r252: [126..127]
 r253: [120..121]
 r254: [118..119]
 r255: [112..117]
 r256: [114..115]
 r257: [112..113]
 r258: [108..111]
 r259: [108..109]
 r260: [106..107]
 r261: [104..105]
 r262: [86..101]
 r263: [98..99]
 r264: [86..97]
 r265: [94..95]
 r266: [90..93]
 r267: [90..91]
 r268: [88..89]
 r269: [84..87]
 r270: [84..85]
 r271: [80..81]
 r272: [76..79]
 r273: [76..77]
 r274: [74..75]
 r275: [72..73]
 r276: [68..69]
 r277: [62..63]
 r278: [58..61]
 r279: [58..59]
 r280: [56..57]
 r281: [54..55]
 r282: [42..53]
 r283: [50..51]
 r284: [46..49]
 r285: [46..47]
 r286: [44..45]
 r287: [40..43]
 r288: [40..41]
 r289: [36..37]
 r290: [32..35]
 r291: [32..33]
 r292: [30..31]
 r293: [28..29]
 r294: [22..25]
 r295: [22..23]
 r296: [20..21]
 r297: [16..17]
 r298: [12..15]
 r299: [12..13]
 r300: [10..11]
 r301: [8..9]
 r302: [408..419]
 r303: [8..39]
 r304: [554..555]
 r305: [510..555]
 r306: [510..511]
 r307: [514..515]
 r308: [508..509]
 r309: [0..509]
 r310: [0..1]
 r311: [4..5]
 r312: [318..333]
 r313: [268..269]
 r314: [242..243]
 r315: [20..27]
 r316: [512..513]
 r317: [516..517]
 r318: [552..553]
 r319: [548..549]
 r320: [542..543]
 r321: [540..541]
 r322: [536..537]
 r323: [530..531]
 r324: [528..529]
 r325: [524..525]
 r326: [518..519]
 r327: [2..3]
 r328: [6..7]
 r329: [506..507]
 r330: [502..503]
 r331: [496..497]
 r332: [494..495]
 r333: [490..491]
 r334: [484..485]
 r335: [480..481]
 r336: [476..477]
 r337: [470..471]
 r338: [468..469]
 r339: [466..467]
 r340: [460..461]
 r341: [458..459]
 r342: [458..459]
 r343: [456..457]
 r344: [452..453]
 r345: [446..447]
 r346: [438..439]
 r347: [436..437]
 r348: [436..437]
 r349: [434..435]
 r350: [428..429]
 r351: [430..431]
 r352: [424..425]
 r353: [426..427]
 r354: [420..421]
 r355: [422..423]
 r356: [422..423]
 r357: [416..417]
 r358: [418..419]
 r359: [414..415]
 r360: [406..407]
 r361: [402..403]
 r362: [396..397]
 r363: [390..393]
 r364: [388..389]
 r365: [380..381]
 r366: [382..383]
 r367: [378..379]
 r368: [374..375]
 r369: [370..371]
 r370: [364..365]
 r371: [362..363]
 r372: [360..361]
 r373: [356..357]
 r374: [350..351]
 r375: [348..349]
 r376: [344..345]
 r377: [338..339]
 r378: [332..333]
 r379: [328..329]
 r380: [322..323]
 r381: [318..319]
 r382: [316..317]
 r383: [312..313]
 r384: [302..303]
 r385: [300..301]
 r386: [296..297]
 r387: [290..291]
 r388: [286..287]
 r389: [284..285]
 r390: [280..281]
 r391: [272..275]
 r392: [272..273]
 r393: [270..271]
 r394: [244..245]
 r395: [266..267]
 r396: [262..263]
 r397: [256..257]
 r398: [248..251]
 r399: [248..249]
 r400: [246..247]
 r401: [240..241]
 r402: [234..235]
 r403: [228..229]
 r404: [220..223]
 r405: [220..221]
 r406: [216..217]
 r407: [218..219]
 r408: [214..215]
 r409: [210..211]
 r410: [204..205]
 r411: [196..199]
 r412: [196..197]
 r413: [194..195]
 r414: [188..189]
 r415: [182..183]
 r416: [174..177]
 r417: [174..175]
 r418: [170..171]
 r419: [168..169]
 r420: [164..165]
 r421: [158..159]
 r422: [150..153]
 r423: [150..151]
 r424: [148..149]
 r425: [142..143]
 r426: [136..137]
 r427: [128..131]
 r428: [128..129]
 r429: [124..125]
 r430: [122..123]
 r431: [116..117]
 r432: [110..111]
 r433: [102..105]
 r434: [102..103]
 r435: [100..101]
 r436: [96..97]
 r437: [92..93]
 r438: [84..85]
 r439: [82..83]
 r440: [78..79]
 r441: [70..73]
 r442: [70..71]
 r443: [66..67]
 r444: [68..69]
 r445: [64..65]
 r446: [60..61]
 r447: [54..55]
 r448: [52..53]
 r449: [48..49]
 r450: [40..41]
 r451: [38..39]
 r452: [34..35]
 r453: [28..29]
 r454: [26..27]
 r455: [24..25]
 r456: [18..19]
 r457: [14..15]
 r458: [8..9]
 r459: [390..391]
 r460: [384..385]
 r461: [376..377]
 r462: [320..321]
 r466: [304..305]
 r467: [306..319]
 r468: [386..389]

********** Assignment #2: **********

	 Assigning to 467 (cl=ALL_SSE_REGS, orig=177, freq=2000, tfirst=466, tfreq=2000)...
	 Assigning to 466 (cl=SSE_REGS, orig=177, freq=2000, tfirst=466, tfreq=2000)...
	   Assign 25 to optional reload r466 (freq=2000)
	Hard reg 25 is preferable by r467 with profit 1000
	 Assigning to 468 (cl=SSE_REGS, orig=149, freq=2000, tfirst=468, tfreq=2000)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 2 (0.00%)
   Insn after restoring regs:
  545: r466:SF=r177:SF
      REG_DEAD r177:SF
   Insn after restoring regs:
  541: r177:SF=r462:SF
      REG_DEAD r462:SF
   Insn after restoring regs:
  537: r460:SF=r149:SF
      REG_DEAD r149:SF
   Insn after restoring regs:
  536: r149:SF=r459:SF
      REG_DEAD r459:SF
Keep optional reload reg 463
Remove optional reload reg 466
  Restoring original insn:
  248: r184:SF=r178:SF*r177:SF
      REG_DEAD r177:SF
      REG_DEAD r178:SF
  Deleting move 545
  545: r466:SF=r177:SF
      REG_DEAD r177:SF
deleting insn with uid = 545.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 248:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
	   Spilling non-eliminable hard regs: 6

********** Pseudo live ranges #3: **********

  BB 23
   Insn 505: point = 0, n_alt = -1
  BB 26
   Insn 527: point = 0, n_alt = -1
  BB 9
   Insn 79: point = 0, n_alt = -1
   Insn 78: point = 0, n_alt = 0
   Insn 77: point = 1, n_alt = 0
   Insn 76: point = 3, n_alt = 0
   Insn 75: point = 4, n_alt = 0
  BB 22
   Insn 517: point = 5, n_alt = -1
   Insn 492: point = 5, n_alt = 1
  BB 27
   Insn 530: point = 6, n_alt = -1
  BB 11
   Insn 87: point = 7, n_alt = -1
   Insn 86: point = 7, n_alt = 0
   Insn 85: point = 8, n_alt = 0
   Insn 84: point = 10, n_alt = 0
   Insn 83: point = 11, n_alt = 0
  BB 21
   Insn 515: point = 12, n_alt = -1
   Insn 486: point = 12, n_alt = 1
  BB 19
   Insn 511: point = 13, n_alt = -1
   Insn 475: point = 13, n_alt = 8
   Insn 474: point = 14, n_alt = 3
   Insn 473: point = 15, n_alt = 3
   Insn 472: point = 17, n_alt = 0
   Insn 471: point = 19, n_alt = 0
   Insn 470: point = 21, n_alt = 0
   Insn 469: point = 22, n_alt = 0
   Insn 468: point = 24, n_alt = 0
   Insn 467: point = 26, n_alt = 0
  BB 18
   Insn 8: point = 28, n_alt = -2
  BB 17
   Insn 463: point = 31, n_alt = -1
   Insn 462: point = 31, n_alt = 0
   Insn 461: point = 32, n_alt = 0
   Insn 460: point = 34, n_alt = 0
   Insn 459: point = 36, n_alt = 0
   Insn 458: point = 37, n_alt = 1
   Insn 457: point = 37, n_alt = 0
   Insn 456: point = 39, n_alt = 0
   Insn 455: point = 40, n_alt = 1
   Insn 454: point = 40, n_alt = 7
   Insn 453: point = 42, n_alt = 3
   Insn 452: point = 43, n_alt = 3
   Insn 451: point = 45, n_alt = 0
   Insn 450: point = 47, n_alt = 0
   Insn 449: point = 49, n_alt = 0
   Insn 448: point = 50, n_alt = 0
   Insn 447: point = 52, n_alt = 0
   Insn 446: point = 54, n_alt = 0
   Insn 445: point = 55, n_alt = 7
   Insn 444: point = 56, n_alt = 8
   Insn 443: point = 57, n_alt = 3
   Insn 442: point = 58, n_alt = 2
   Insn 441: point = 60, n_alt = 3
   Insn 440: point = 62, n_alt = 0
   Insn 439: point = 64, n_alt = 0
   Insn 438: point = 66, n_alt = 0
   Insn 437: point = 67, n_alt = 0
   Insn 436: point = 69, n_alt = 0
   Insn 435: point = 71, n_alt = 0
   Insn 434: point = 72, n_alt = 7
   Insn 433: point = 74, n_alt = 3
   Insn 432: point = 75, n_alt = 3
   Insn 431: point = 77, n_alt = 0
   Insn 430: point = 79, n_alt = 0
   Insn 429: point = 81, n_alt = 0
   Insn 428: point = 82, n_alt = 0
   Insn 427: point = 84, n_alt = 0
   Insn 426: point = 86, n_alt = 0
   Insn 425: point = 87, n_alt = 8
   Insn 424: point = 88, n_alt = 1
   Insn 423: point = 90, n_alt = 7
   Insn 422: point = 91, n_alt = 7
   Insn 421: point = 93, n_alt = 0
   Insn 420: point = 95, n_alt = 4
   Insn 419: point = 96, n_alt = 3
   Insn 418: point = 98, n_alt = 0
   Insn 417: point = 100, n_alt = 0
   Insn 416: point = 102, n_alt = 0
   Insn 415: point = 103, n_alt = 0
   Insn 414: point = 105, n_alt = 0
   Insn 413: point = 107, n_alt = 0
   Insn 412: point = 108, n_alt = 8
   Insn 411: point = 109, n_alt = 3
   Insn 410: point = 110, n_alt = 1
   Insn 409: point = 112, n_alt = 3
   Insn 408: point = 114, n_alt = 0
   Insn 407: point = 116, n_alt = 0
   Insn 406: point = 118, n_alt = 0
   Insn 405: point = 119, n_alt = 0
   Insn 404: point = 121, n_alt = 0
   Insn 403: point = 123, n_alt = 0
   Insn 402: point = 124, n_alt = 2
   Insn 401: point = 126, n_alt = 1
   Insn 400: point = 128, n_alt = 7
   Insn 399: point = 129, n_alt = 7
   Insn 398: point = 131, n_alt = 0
   Insn 397: point = 133, n_alt = 4
   Insn 396: point = 134, n_alt = 3
   Insn 395: point = 136, n_alt = 0
   Insn 394: point = 138, n_alt = 0
   Insn 393: point = 140, n_alt = 0
   Insn 392: point = 141, n_alt = 0
   Insn 391: point = 143, n_alt = 0
   Insn 390: point = 145, n_alt = 0
   Insn 389: point = 147, n_alt = 0
   Insn 388: point = 148, n_alt = 1
   Insn 387: point = 150, n_alt = 0
   Insn 386: point = 152, n_alt = 0
   Insn 385: point = 154, n_alt = 0
   Insn 384: point = 155, n_alt = 8
   Insn 383: point = 156, n_alt = 2
   Insn 382: point = 158, n_alt = 7
   Insn 381: point = 160, n_alt = 0
   Insn 380: point = 162, n_alt = 4
   Insn 379: point = 163, n_alt = 3
   Insn 378: point = 165, n_alt = 0
   Insn 377: point = 167, n_alt = 0
   Insn 376: point = 169, n_alt = 0
   Insn 375: point = 170, n_alt = 0
   Insn 374: point = 172, n_alt = 0
   Insn 373: point = 174, n_alt = 0
   Insn 372: point = 176, n_alt = 0
   Insn 371: point = 177, n_alt = 1
   Insn 370: point = 179, n_alt = 0
   Insn 369: point = 181, n_alt = 0
   Insn 368: point = 183, n_alt = 0
   Insn 367: point = 184, n_alt = 7
   Insn 366: point = 186, n_alt = 0
   Insn 365: point = 188, n_alt = 4
   Insn 364: point = 189, n_alt = 3
   Insn 363: point = 191, n_alt = 0
   Insn 362: point = 193, n_alt = 0
   Insn 361: point = 195, n_alt = 0
   Insn 360: point = 196, n_alt = 0
   Insn 359: point = 198, n_alt = 0
   Insn 358: point = 200, n_alt = 0
   Insn 357: point = 202, n_alt = 0
   Insn 356: point = 203, n_alt = 1
   Insn 355: point = 205, n_alt = 0
   Insn 354: point = 207, n_alt = 0
   Insn 353: point = 208, n_alt = 8
   Insn 352: point = 209, n_alt = 2
   Insn 351: point = 211, n_alt = 7
   Insn 350: point = 213, n_alt = 0
   Insn 349: point = 215, n_alt = 4
   Insn 348: point = 216, n_alt = 3
   Insn 347: point = 218, n_alt = 0
   Insn 346: point = 220, n_alt = 0
   Insn 345: point = 222, n_alt = 0
   Insn 344: point = 223, n_alt = 0
   Insn 343: point = 225, n_alt = 0
   Insn 342: point = 227, n_alt = 0
   Insn 341: point = 229, n_alt = 0
   Insn 340: point = 230, n_alt = 1
   Insn 339: point = 232, n_alt = 0
   Insn 338: point = 234, n_alt = 0
   Insn 337: point = 236, n_alt = 0
   Insn 336: point = 237, n_alt = 7
   Insn 335: point = 239, n_alt = 0
   Insn 334: point = 241, n_alt = 4
   Insn 333: point = 242, n_alt = 3
   Insn 332: point = 244, n_alt = 0
   Insn 331: point = 246, n_alt = 0
   Insn 330: point = 248, n_alt = 0
   Insn 329: point = 249, n_alt = 0
   Insn 328: point = 251, n_alt = 0
   Insn 327: point = 253, n_alt = 0
   Insn 326: point = 255, n_alt = 0
   Insn 325: point = 256, n_alt = 1
   Insn 324: point = 258, n_alt = 0
   Insn 323: point = 260, n_alt = 0
   Insn 322: point = 261, n_alt = 8
   Insn 321: point = 262, n_alt = 2
   Insn 320: point = 264, n_alt = 7
   Insn 319: point = 265, n_alt = 7
   Insn 318: point = 267, n_alt = 0
   Insn 317: point = 269, n_alt = 4
   Insn 316: point = 270, n_alt = 3
   Insn 315: point = 272, n_alt = 0
   Insn 314: point = 274, n_alt = 0
   Insn 313: point = 276, n_alt = 0
   Insn 312: point = 277, n_alt = 0
   Insn 311: point = 279, n_alt = 0
   Insn 310: point = 281, n_alt = 0
   Insn 309: point = 283, n_alt = 0
   Insn 308: point = 284, n_alt = 1
   Insn 307: point = 286, n_alt = 0
   Insn 306: point = 288, n_alt = 0
   Insn 305: point = 290, n_alt = 0
  BB 28
   Insn 533: point = 292, n_alt = -1
  BB 15
   Insn 282: point = 293, n_alt = -1
   Insn 281: point = 293, n_alt = 0
   Insn 280: point = 294, n_alt = 0
   Insn 279: point = 296, n_alt = 0
   Insn 278: point = 297, n_alt = 1
  BB 20
   Insn 513: point = 298, n_alt = -1
   Insn 480: point = 298, n_alt = 1
  BB 16
   Insn 300: point = 299, n_alt = -1
   Insn 299: point = 299, n_alt = 1
   Insn 298: point = 300, n_alt = 7
   Insn 297: point = 301, n_alt = 7
   Insn 296: point = 303, n_alt = 0
   Insn 295: point = 305, n_alt = 4
   Insn 294: point = 306, n_alt = 3
   Insn 293: point = 308, n_alt = 0
   Insn 292: point = 310, n_alt = 0
   Insn 291: point = 312, n_alt = 0
   Insn 290: point = 313, n_alt = 0
   Insn 289: point = 315, n_alt = 0
   Insn 288: point = 317, n_alt = 0
   Insn 287: point = 319, n_alt = 0
   Insn 286: point = 320, n_alt = 1
   Insn 285: point = 322, n_alt = 0
   Insn 284: point = 324, n_alt = 0
  BB 14
   Insn 276: point = 326, n_alt = 1
   Insn 275: point = 327, n_alt = 0
   Insn 274: point = 328, n_alt = 1
   Insn 273: point = 329, n_alt = 0
   Insn 272: point = 331, n_alt = 0
   Insn 271: point = 333, n_alt = 4
   Insn 270: point = 334, n_alt = 3
   Insn 269: point = 336, n_alt = 0
   Insn 268: point = 338, n_alt = 0
   Insn 267: point = 340, n_alt = 0
   Insn 266: point = 341, n_alt = 0
   Insn 265: point = 343, n_alt = 0
   Insn 264: point = 345, n_alt = 0
   Insn 263: point = 346, n_alt = 4
   Insn 262: point = 347, n_alt = 9
   Insn 261: point = 348, n_alt = 0
   Insn 260: point = 348, n_alt = -2
   Insn 259: point = 349, n_alt = 7
   Insn 258: point = 351, n_alt = 3
   Insn 257: point = 352, n_alt = 3
   Insn 256: point = 354, n_alt = 0
   Insn 255: point = 356, n_alt = 0
   Insn 254: point = 358, n_alt = 0
   Insn 253: point = 359, n_alt = 0
   Insn 252: point = 361, n_alt = 0
   Insn 251: point = 363, n_alt = 0
   Insn 250: point = 364, n_alt = 8
   Insn 249: point = 365, n_alt = 3
   Insn 248: point = 366, n_alt = 1
   Insn 247: point = 368, n_alt = 3
   Insn 246: point = 370, n_alt = 0
   Insn 245: point = 372, n_alt = 0
   Insn 244: point = 374, n_alt = 0
   Insn 243: point = 375, n_alt = 0
   Insn 242: point = 377, n_alt = 0
   Insn 241: point = 379, n_alt = 0
   Insn 240: point = 380, n_alt = -2
   Insn 239: point = 381, n_alt = 0
   Insn 238: point = 381, n_alt = -2
   Insn 237: point = 382, n_alt = -2
   Insn 236: point = 383, n_alt = 7
   Insn 541: point = 384, n_alt = 8
   Insn 235: point = 386, n_alt = 7
   Insn 234: point = 388, n_alt = 3
   Insn 233: point = 389, n_alt = 3
   Insn 232: point = 391, n_alt = 0
   Insn 231: point = 393, n_alt = 0
   Insn 230: point = 395, n_alt = 0
   Insn 229: point = 396, n_alt = 0
   Insn 228: point = 398, n_alt = 0
   Insn 227: point = 400, n_alt = 0
   Insn 226: point = 401, n_alt = -2
   Insn 225: point = 403, n_alt = 2
   Insn 224: point = 405, n_alt = 7
   Insn 223: point = 407, n_alt = 3
   Insn 222: point = 408, n_alt = 3
   Insn 221: point = 410, n_alt = 0
   Insn 220: point = 412, n_alt = 0
   Insn 219: point = 414, n_alt = 0
   Insn 218: point = 415, n_alt = 0
   Insn 217: point = 417, n_alt = 0
   Insn 216: point = 419, n_alt = 0
   Insn 215: point = 420, n_alt = 7
   Insn 214: point = 422, n_alt = 4
   Insn 213: point = 423, n_alt = 3
   Insn 212: point = 425, n_alt = 0
   Insn 211: point = 427, n_alt = 0
   Insn 210: point = 429, n_alt = 0
   Insn 209: point = 430, n_alt = 0
   Insn 208: point = 432, n_alt = 0
   Insn 207: point = 434, n_alt = 0
   Insn 206: point = 435, n_alt = 8
   Insn 205: point = 436, n_alt = 4
   Insn 204: point = 437, n_alt = 1
   Insn 203: point = 439, n_alt = 7
   Insn 202: point = 440, n_alt = 3
   Insn 201: point = 442, n_alt = 0
   Insn 200: point = 444, n_alt = 0
   Insn 199: point = 446, n_alt = 0
   Insn 198: point = 447, n_alt = 0
   Insn 197: point = 449, n_alt = 0
   Insn 196: point = 451, n_alt = 0
   Insn 540: point = 452, n_alt = -2
   Insn 195: point = 454, n_alt = 2
   Insn 539: point = 454, n_alt = -2
   Insn 194: point = 456, n_alt = 7
   Insn 193: point = 457, n_alt = 8
   Insn 192: point = 458, n_alt = 2
   Insn 191: point = 460, n_alt = 7
   Insn 538: point = 461, n_alt = -2
   Insn 190: point = 463, n_alt = 2
   Insn 537: point = 464, n_alt = 7
   Insn 189: point = 466, n_alt = -2
   Insn 188: point = 467, n_alt = 0
   Insn 187: point = 467, n_alt = -2
   Insn 186: point = 468, n_alt = 7
   Insn 536: point = 469, n_alt = 8
   Insn 185: point = 471, n_alt = 1
   Insn 535: point = 472, n_alt = -2
   Insn 184: point = 474, n_alt = 7
   Insn 183: point = 475, n_alt = -2
   Insn 182: point = 476, n_alt = 0
   Insn 181: point = 476, n_alt = -2
   Insn 180: point = 477, n_alt = 7
   Insn 179: point = 479, n_alt = 3
   Insn 178: point = 480, n_alt = 3
   Insn 177: point = 482, n_alt = 0
   Insn 176: point = 484, n_alt = 0
   Insn 175: point = 486, n_alt = 0
   Insn 174: point = 487, n_alt = 0
   Insn 173: point = 489, n_alt = 0
   Insn 172: point = 491, n_alt = 0
   Insn 171: point = 492, n_alt = 8
  BB 13
   Insn 168: point = 494, n_alt = 7
  BB 12
   Insn 166: point = 496, n_alt = -1
   Insn 165: point = 496, n_alt = 0
   Insn 164: point = 497, n_alt = 0
   Insn 163: point = 499, n_alt = 0
   Insn 162: point = 501, n_alt = 0
   Insn 161: point = 502, n_alt = 1
   Insn 160: point = 502, n_alt = 0
   Insn 159: point = 504, n_alt = 0
   Insn 158: point = 505, n_alt = 1
   Insn 157: point = 506, n_alt = 7
   Insn 156: point = 507, n_alt = 7
   Insn 155: point = 508, n_alt = 8
   Insn 154: point = 509, n_alt = 1
   Insn 153: point = 511, n_alt = 7
   Insn 152: point = 512, n_alt = 7
   Insn 151: point = 513, n_alt = 8
   Insn 150: point = 514, n_alt = 2
   Insn 149: point = 516, n_alt = 7
   Insn 148: point = 517, n_alt = 8
   Insn 147: point = 518, n_alt = 1
   Insn 146: point = 520, n_alt = 7
   Insn 145: point = 521, n_alt = -2
   Insn 144: point = 523, n_alt = 2
   Insn 143: point = 525, n_alt = 7
   Insn 142: point = 526, n_alt = 1
   Insn 141: point = 528, n_alt = 7
   Insn 140: point = 529, n_alt = 7
   Insn 139: point = 530, n_alt = 8
   Insn 138: point = 531, n_alt = 2
   Insn 137: point = 533, n_alt = -2
   Insn 136: point = 535, n_alt = 2
   Insn 135: point = 537, n_alt = 7
   Insn 134: point = 539, n_alt = 3
   Insn 133: point = 540, n_alt = 3
   Insn 132: point = 542, n_alt = 0
   Insn 131: point = 544, n_alt = 0
   Insn 130: point = 546, n_alt = 0
   Insn 129: point = 547, n_alt = 0
   Insn 128: point = 549, n_alt = 0
   Insn 127: point = 551, n_alt = 0
   Insn 126: point = 552, n_alt = 1
   Insn 125: point = 554, n_alt = 7
   Insn 124: point = 555, n_alt = 7
   Insn 123: point = 556, n_alt = 8
   Insn 122: point = 557, n_alt = 2
   Insn 121: point = 559, n_alt = -2
   Insn 120: point = 561, n_alt = 1
   Insn 119: point = 563, n_alt = 7
   Insn 118: point = 564, n_alt = 1
   Insn 117: point = 566, n_alt = 7
   Insn 116: point = 567, n_alt = 7
   Insn 115: point = 569, n_alt = 3
   Insn 114: point = 570, n_alt = 3
   Insn 113: point = 572, n_alt = 0
   Insn 112: point = 574, n_alt = 0
   Insn 111: point = 576, n_alt = 0
   Insn 110: point = 577, n_alt = 0
   Insn 109: point = 579, n_alt = 0
   Insn 108: point = 581, n_alt = 0
   Insn 107: point = 582, n_alt = 1
   Insn 106: point = 584, n_alt = 7
   Insn 105: point = 586, n_alt = 3
   Insn 104: point = 587, n_alt = 3
   Insn 103: point = 589, n_alt = 0
   Insn 102: point = 591, n_alt = 0
   Insn 101: point = 593, n_alt = 0
   Insn 100: point = 594, n_alt = 0
   Insn 99: point = 596, n_alt = 0
   Insn 98: point = 598, n_alt = 0
   Insn 97: point = 599, n_alt = 7
   Insn 96: point = 601, n_alt = 3
   Insn 95: point = 602, n_alt = 3
   Insn 94: point = 604, n_alt = 0
   Insn 93: point = 606, n_alt = 0
   Insn 92: point = 608, n_alt = 0
   Insn 91: point = 609, n_alt = 0
   Insn 90: point = 611, n_alt = 0
   Insn 89: point = 613, n_alt = 0
  BB 10
   Insn 81: point = 615, n_alt = 1
  BB 8
   Insn 73: point = 616, n_alt = 1
   Insn 72: point = 617, n_alt = 0
   Insn 71: point = 618, n_alt = 0
  BB 24
   Insn 521: point = 619, n_alt = -1
  BB 3
   Insn 19: point = 619, n_alt = -1
   Insn 18: point = 619, n_alt = 0
   Insn 17: point = 620, n_alt = 0
   Insn 16: point = 622, n_alt = 0
   Insn 15: point = 623, n_alt = 0
  BB 7
   Insn 508: point = 624, n_alt = -1
   Insn 65: point = 624, n_alt = 1
  BB 25
   Insn 524: point = 625, n_alt = -1
  BB 5
   Insn 27: point = 626, n_alt = -1
   Insn 26: point = 626, n_alt = 0
   Insn 25: point = 627, n_alt = 0
   Insn 24: point = 629, n_alt = 0
   Insn 23: point = 630, n_alt = 0
  BB 6
   Insn 506: point = 631, n_alt = -1
   Insn 59: point = 631, n_alt = 1
   Insn 58: point = 631, n_alt = 8
   Insn 57: point = 632, n_alt = 3
   Insn 56: point = 633, n_alt = 7
   Insn 55: point = 634, n_alt = 3
   Insn 54: point = 636, n_alt = 0
   Insn 53: point = 638, n_alt = 1
   Insn 52: point = 640, n_alt = 0
   Insn 51: point = 641, n_alt = 0
   Insn 50: point = 643, n_alt = 1
   Insn 49: point = 645, n_alt = 0
   Insn 48: point = 646, n_alt = 8
   Insn 47: point = 647, n_alt = 4
   Insn 46: point = 648, n_alt = 7
   Insn 45: point = 649, n_alt = 3
   Insn 44: point = 651, n_alt = 0
   Insn 43: point = 653, n_alt = 1
   Insn 42: point = 655, n_alt = 0
   Insn 41: point = 656, n_alt = 0
   Insn 40: point = 658, n_alt = 1
   Insn 39: point = 660, n_alt = 0
   Insn 38: point = 661, n_alt = 8
   Insn 37: point = 662, n_alt = 3
   Insn 36: point = 663, n_alt = 7
   Insn 35: point = 664, n_alt = 3
   Insn 34: point = 666, n_alt = 0
   Insn 33: point = 668, n_alt = 1
   Insn 32: point = 670, n_alt = 0
   Insn 31: point = 671, n_alt = 0
   Insn 30: point = 673, n_alt = 1
   Insn 29: point = 675, n_alt = 0
  BB 4
   Insn 21: point = 677, n_alt = 1
  BB 2
   Insn 13: point = 678, n_alt = 1
   Insn 12: point = 679, n_alt = 0
   Insn 11: point = 680, n_alt = 0
   Insn 6: point = 681, n_alt = 5
   Insn 5: point = 681, n_alt = 5
   Insn 4: point = 681, n_alt = 5
   Insn 3: point = 681, n_alt = 5
   Insn 2: point = 681, n_alt = 5
 r149: [465..469]
 r177: [367..384]
Compressing live ranges: from 681 to 4 - 0%
Ranges after the compression:
 r149: [2..3]
 r177: [0..1]
  Slot 0 regnos (width = 0):	 149	 177
Changing spilled pseudos to memory in insn #536
Changing spilled pseudos to memory in insn #537
Changing spilled pseudos to memory in insn #541
Changing spilled pseudos to memory in insn #248
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 1 for insn #248
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 248:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
Reusing alternative 8 for insn #541
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 541:  (0) m  (1) v {*movsf_internal}
Reusing alternative 7 for insn #537
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 537:  (0) v  (1) m {*movsf_internal}
Reusing alternative 8 for insn #536
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 536:  (0) m  (1) v {*movsf_internal}
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 38
changing reg in insn 36
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 48
changing reg in insn 46
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 58
changing reg in insn 56
changing reg in insn 58
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 97
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 122
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 116
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 126
changing reg in insn 138
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 142
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 160
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 180
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 189
changing reg in insn 190
changing reg in insn 192
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 206
changing reg in insn 204
changing reg in insn 206
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 211
changing reg in insn 212
changing reg in insn 213
changing reg in insn 213
changing reg in insn 215
changing reg in insn 215
changing reg in insn 225
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 220
changing reg in insn 221
changing reg in insn 222
changing reg in insn 222
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 225
changing reg in insn 226
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 231
changing reg in insn 232
changing reg in insn 233
changing reg in insn 233
changing reg in insn 235
changing reg in insn 240
changing reg in insn 242
changing reg in insn 243
changing reg in insn 243
changing reg in insn 245
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 250
changing reg in insn 248
changing reg in insn 250
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 257
changing reg in insn 259
changing reg in insn 259
changing reg in insn 260
changing reg in insn 265
changing reg in insn 266
changing reg in insn 266
changing reg in insn 268
changing reg in insn 269
changing reg in insn 270
changing reg in insn 270
changing reg in insn 272
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 290
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 290
changing reg in insn 290
changing reg in insn 292
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 296
changing reg in insn 297
changing reg in insn 299
changing reg in insn 306
changing reg in insn 307
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 312
changing reg in insn 310
changing reg in insn 311
changing reg in insn 311
changing reg in insn 312
changing reg in insn 312
changing reg in insn 314
changing reg in insn 315
changing reg in insn 316
changing reg in insn 316
changing reg in insn 318
changing reg in insn 319
changing reg in insn 321
changing reg in insn 324
changing reg in insn 325
changing reg in insn 325
changing reg in insn 329
changing reg in insn 327
changing reg in insn 328
changing reg in insn 328
changing reg in insn 329
changing reg in insn 329
changing reg in insn 331
changing reg in insn 332
changing reg in insn 333
changing reg in insn 333
changing reg in insn 335
changing reg in insn 336
changing reg in insn 352
changing reg in insn 338
changing reg in insn 339
changing reg in insn 339
changing reg in insn 340
changing reg in insn 340
changing reg in insn 344
changing reg in insn 342
changing reg in insn 343
changing reg in insn 343
changing reg in insn 344
changing reg in insn 344
changing reg in insn 346
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 350
changing reg in insn 351
changing reg in insn 352
changing reg in insn 355
changing reg in insn 356
changing reg in insn 356
changing reg in insn 360
changing reg in insn 358
changing reg in insn 359
changing reg in insn 359
changing reg in insn 360
changing reg in insn 360
changing reg in insn 362
changing reg in insn 363
changing reg in insn 364
changing reg in insn 364
changing reg in insn 366
changing reg in insn 367
changing reg in insn 383
changing reg in insn 369
changing reg in insn 370
changing reg in insn 370
changing reg in insn 371
changing reg in insn 371
changing reg in insn 375
changing reg in insn 373
changing reg in insn 374
changing reg in insn 374
changing reg in insn 375
changing reg in insn 375
changing reg in insn 377
changing reg in insn 378
changing reg in insn 379
changing reg in insn 379
changing reg in insn 381
changing reg in insn 382
changing reg in insn 383
changing reg in insn 386
changing reg in insn 387
changing reg in insn 387
changing reg in insn 388
changing reg in insn 388
changing reg in insn 392
changing reg in insn 390
changing reg in insn 391
changing reg in insn 391
changing reg in insn 392
changing reg in insn 392
changing reg in insn 394
changing reg in insn 395
changing reg in insn 396
changing reg in insn 396
changing reg in insn 398
changing reg in insn 399
changing reg in insn 401
changing reg in insn 402
changing reg in insn 402
changing reg in insn 404
changing reg in insn 405
changing reg in insn 405
changing reg in insn 407
changing reg in insn 408
changing reg in insn 409
changing reg in insn 409
changing reg in insn 412
changing reg in insn 410
changing reg in insn 412
changing reg in insn 414
changing reg in insn 415
changing reg in insn 415
changing reg in insn 417
changing reg in insn 418
changing reg in insn 419
changing reg in insn 419
changing reg in insn 421
changing reg in insn 422
changing reg in insn 427
changing reg in insn 428
changing reg in insn 428
changing reg in insn 430
changing reg in insn 431
changing reg in insn 432
changing reg in insn 432
changing reg in insn 434
changing reg in insn 434
changing reg in insn 442
changing reg in insn 436
changing reg in insn 437
changing reg in insn 437
changing reg in insn 439
changing reg in insn 440
changing reg in insn 441
changing reg in insn 441
changing reg in insn 444
changing reg in insn 442
changing reg in insn 444
changing reg in insn 447
changing reg in insn 448
changing reg in insn 448
changing reg in insn 450
changing reg in insn 451
changing reg in insn 452
changing reg in insn 452
changing reg in insn 454
changing reg in insn 457
changing reg in insn 460
changing reg in insn 461
changing reg in insn 462
changing reg in insn 468
changing reg in insn 469
changing reg in insn 469
changing reg in insn 471
changing reg in insn 472
changing reg in insn 473
changing reg in insn 473
changing reg in insn 475
changing reg in insn 168
changing reg in insn 156
changing reg in insn 171
changing reg in insn 161
changing reg in insn 161
changing reg in insn 158
changing reg in insn 8
changing reg in insn 445
changing reg in insn 475
changing reg in insn 458
changing reg in insn 458
changing reg in insn 455
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 25
changing reg in insn 26
changing reg in insn 71
changing reg in insn 73
changing reg in insn 72
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 85
changing reg in insn 86
changing reg in insn 226
changing reg in insn 238
changing reg in insn 275
changing reg in insn 276
changing reg in insn 280
changing reg in insn 281
changing reg in insn 454
changing reg in insn 8
changing reg in insn 455
changing reg in insn 16
changing reg in insn 17
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 57
changing reg in insn 58
changing reg in insn 76
changing reg in insn 77
changing reg in insn 84
changing reg in insn 85
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 101
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 130
changing reg in insn 131
changing reg in insn 134
changing reg in insn 135
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 142
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 147
changing reg in insn 148
changing reg in insn 146
changing reg in insn 150
changing reg in insn 151
changing reg in insn 149
changing reg in insn 150
changing reg in insn 154
changing reg in insn 155
changing reg in insn 152
changing reg in insn 153
changing reg in insn 159
changing reg in insn 160
changing reg in insn 157
changing reg in insn 158
changing reg in insn 162
changing reg in insn 163
changing reg in insn 172
changing reg in insn 173
changing reg in insn 175
changing reg in insn 176
changing reg in insn 179
changing reg in insn 180
changing reg in insn 184
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 192
changing reg in insn 193
changing reg in insn 191
changing reg in insn 192
changing reg in insn 194
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 200
changing reg in insn 203
changing reg in insn 205
changing reg in insn 206
changing reg in insn 207
changing reg in insn 208
changing reg in insn 210
changing reg in insn 211
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 219
changing reg in insn 220
changing reg in insn 223
changing reg in insn 224
changing reg in insn 227
changing reg in insn 228
changing reg in insn 230
changing reg in insn 231
changing reg in insn 234
changing reg in insn 235
changing reg in insn 236
changing reg in insn 237
changing reg in insn 241
changing reg in insn 242
changing reg in insn 244
changing reg in insn 245
changing reg in insn 249
changing reg in insn 250
changing reg in insn 251
changing reg in insn 252
changing reg in insn 254
changing reg in insn 255
changing reg in insn 258
changing reg in insn 259
changing reg in insn 262
changing reg in insn 263
changing reg in insn 264
changing reg in insn 265
changing reg in insn 267
changing reg in insn 268
changing reg in insn 271
changing reg in insn 273
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 274
changing reg in insn 279
changing reg in insn 280
changing reg in insn 284
changing reg in insn 285
changing reg in insn 287
changing reg in insn 288
changing reg in insn 291
changing reg in insn 292
changing reg in insn 295
changing reg in insn 297
changing reg in insn 296
changing reg in insn 297
changing reg in insn 298
changing reg in insn 299
changing reg in insn 305
changing reg in insn 306
changing reg in insn 309
changing reg in insn 310
changing reg in insn 313
changing reg in insn 314
changing reg in insn 317
changing reg in insn 319
changing reg in insn 318
changing reg in insn 319
changing reg in insn 321
changing reg in insn 322
changing reg in insn 320
changing reg in insn 321
changing reg in insn 323
changing reg in insn 324
changing reg in insn 326
changing reg in insn 327
changing reg in insn 330
changing reg in insn 331
changing reg in insn 334
changing reg in insn 336
changing reg in insn 335
changing reg in insn 336
changing reg in insn 337
changing reg in insn 338
changing reg in insn 341
changing reg in insn 342
changing reg in insn 345
changing reg in insn 346
changing reg in insn 349
changing reg in insn 351
changing reg in insn 350
changing reg in insn 351
changing reg in insn 352
changing reg in insn 353
changing reg in insn 354
changing reg in insn 355
changing reg in insn 357
changing reg in insn 358
changing reg in insn 361
changing reg in insn 362
changing reg in insn 365
changing reg in insn 367
changing reg in insn 366
changing reg in insn 367
changing reg in insn 368
changing reg in insn 369
changing reg in insn 372
changing reg in insn 373
changing reg in insn 376
changing reg in insn 377
changing reg in insn 380
changing reg in insn 382
changing reg in insn 381
changing reg in insn 382
changing reg in insn 383
changing reg in insn 384
changing reg in insn 385
changing reg in insn 386
changing reg in insn 389
changing reg in insn 390
changing reg in insn 393
changing reg in insn 394
changing reg in insn 397
changing reg in insn 399
changing reg in insn 398
changing reg in insn 399
changing reg in insn 400
changing reg in insn 401
changing reg in insn 403
changing reg in insn 404
changing reg in insn 406
changing reg in insn 407
changing reg in insn 411
changing reg in insn 412
changing reg in insn 413
changing reg in insn 414
changing reg in insn 416
changing reg in insn 417
changing reg in insn 420
changing reg in insn 422
changing reg in insn 421
changing reg in insn 422
changing reg in insn 424
changing reg in insn 425
changing reg in insn 423
changing reg in insn 426
changing reg in insn 427
changing reg in insn 429
changing reg in insn 430
changing reg in insn 433
changing reg in insn 434
changing reg in insn 435
changing reg in insn 436
changing reg in insn 438
changing reg in insn 439
changing reg in insn 443
changing reg in insn 444
changing reg in insn 446
changing reg in insn 447
changing reg in insn 449
changing reg in insn 450
changing reg in insn 453
changing reg in insn 454
changing reg in insn 456
changing reg in insn 457
changing reg in insn 459
changing reg in insn 460
changing reg in insn 467
changing reg in insn 468
changing reg in insn 470
changing reg in insn 471
changing reg in insn 474
changing reg in insn 475
deleting insn with uid = 121.
deleting insn with uid = 137.
deleting insn with uid = 181.
deleting insn with uid = 535.
deleting insn with uid = 187.
deleting insn with uid = 189.
deleting insn with uid = 540.
deleting insn with uid = 240.
deleting insn with uid = 260.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 182.
verify found no changes in insn with uid = 188.
verify found no changes in insn with uid = 239.
verify found no changes in insn with uid = 261.


callcl

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 37 [r8]
;;  ref usage 	r0={199d,194u} r1={96d,92u} r2={11d,7u} r3={1d,1u} r4={5d,1u} r5={5d,1u} r6={1d,166u} r7={1d,32u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={139d,17u} r18={4d} r19={4d} r20={1d,1u,4e} r21={56d,59u} r22={33d,29u} r23={8d,3u} r24={6d,1u} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d,1u} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 1425{816d,605u,4e} in 454{450 regular + 4 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 304 305
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 p1d+0 S8 A64])
        (reg:DI 5 di [ p1d ])) "CALLCL.f":1 85 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 t1d+0 S8 A64])
        (reg:DI 4 si [ t1d ])) "CALLCL.f":1 85 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [3 q1d+0 S8 A64])
        (reg:DI 1 dx [ q1d ])) "CALLCL.f":1 85 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [3 plcl+0 S8 A64])
        (reg:DI 2 cx [ plcl ])) "CALLCL.f":1 85 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 zlcl+0 S8 A64])
        (reg:DI 37 r8 [ zlcl ])) "CALLCL.f":1 85 {*movdi_internal}
     (nil))
(note 7 6 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 7 12 2 (set (reg:SI 1 dx [orig:304 _229 ] [304])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f3d6bcc1ea0 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "CALLCL.f":81 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:305 _230 ] [305])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f3d6bcc1ea0 parallel>)
                    (const_int 12 [0xc]))) [1 parallel.jend+0 S4 A32])) "CALLCL.f":81 86 {*movsi_internal}
     (nil))
(insn 13 12 66 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
        (reg:SI 1 dx [orig:304 _229 ] [304])) "CALLCL.f":81 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305
;; lr  def 	 17 [flags] 306 316
(code_label 66 13 14 3 5 (nil) [1 uses])
(note 14 66 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:305 _230 ] [305]))) "CALLCL.f":81 11 {*cmpsi_1}
     (nil))
(insn 16 15 17 3 (set (reg:QI 1 dx [316])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALLCL.f":81 678 {*setcc_qi}
     (nil))
(insn 17 16 18 3 (set (reg:SI 1 dx [orig:306 _232 ] [306])
        (zero_extend:SI (reg:QI 1 dx [316]))) "CALLCL.f":81 140 {*zero_extendqisi2}
     (nil))
(insn 18 17 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:306 _232 ] [306])
            (const_int 0 [0]))) "CALLCL.f":81 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 520)
            (pc))) "CALLCL.f":81 682 {*jcc}
     (nil)
 -> 520)
;;  succ:       24
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 60 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALLCL.f":82 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 307 317
(code_label 60 21 22 5 4 (nil) [1 uses])
(note 22 60 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALLCL.f":82 11 {*cmpsi_1}
     (nil))
(insn 24 23 25 5 (set (reg:QI 1 dx [317])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALLCL.f":82 678 {*setcc_qi}
     (nil))
(insn 25 24 26 5 (set (reg:SI 1 dx [orig:307 _234 ] [307])
        (zero_extend:SI (reg:QI 1 dx [317]))) "CALLCL.f":82 140 {*zero_extendqisi2}
     (nil))
(insn 26 25 27 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:307 _234 ] [307])
            (const_int 0 [0]))) "CALLCL.f":82 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 27 26 28 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 523)
            (pc))) "CALLCL.f":82 682 {*jcc}
     (nil)
 -> 523)
;;  succ:       25
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 25, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 318 319 320 321 322 323 324 325 326
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (set (reg:SI 1 dx [318])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":83 86 {*movsi_internal}
     (nil))
(insn 30 29 31 6 (set (reg:DI 1 dx [orig:87 _1 ] [87])
        (sign_extend:DI (reg:SI 1 dx [318]))) "CALLCL.f":83 149 {*extendsidi2_rex64}
     (nil))
(insn 31 30 32 6 (parallel [
            (set (reg:DI 2 cx [orig:88 _2 ] [88])
                (mult:DI (reg:DI 1 dx [orig:87 _1 ] [87])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":83 349 {*muldi3_1}
     (nil))
(insn 32 31 33 6 (set (reg:SI 1 dx [319])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":83 86 {*movsi_internal}
     (nil))
(insn 33 32 34 6 (set (reg:DI 1 dx [orig:89 _3 ] [89])
        (sign_extend:DI (reg:SI 1 dx [319]))) "CALLCL.f":83 149 {*extendsidi2_rex64}
     (nil))
(insn 34 33 35 6 (parallel [
            (set (reg:DI 1 dx [orig:90 _4 ] [90])
                (plus:DI (reg:DI 1 dx [orig:89 _3 ] [89])
                    (reg:DI 2 cx [orig:88 _2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":83 222 {*adddi_1}
     (nil))
(insn 35 34 36 6 (parallel [
            (set (reg:DI 2 cx [orig:91 _5 ] [91])
                (plus:DI (reg:DI 1 dx [orig:90 _4 ] [90])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":83 222 {*adddi_1}
     (nil))
(insn 36 35 37 6 (set (reg:SF 21 xmm0 [orig:92 _6 ] [92])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f3d6bcc1ab0 options>) [2 options.spval+0 S4 A128])) "CALLCL.f":1 131 {*movsf_internal}
     (nil))
(insn 37 36 38 6 (set (reg/f:DI 1 dx [320])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [3 plcl+0 S8 A64])) "CALLCL.f":83 85 {*movdi_internal}
     (nil))
(insn 38 37 39 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:91 _5 ] [91])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [320])) [2 *plcl_235(D) S4 A32])
        (reg:SF 21 xmm0 [orig:92 _6 ] [92])) "CALLCL.f":83 131 {*movsf_internal}
     (nil))
(insn 39 38 40 6 (set (reg:SI 1 dx [321])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":84 86 {*movsi_internal}
     (nil))
(insn 40 39 41 6 (set (reg:DI 1 dx [orig:93 _7 ] [93])
        (sign_extend:DI (reg:SI 1 dx [321]))) "CALLCL.f":84 149 {*extendsidi2_rex64}
     (nil))
(insn 41 40 42 6 (parallel [
            (set (reg:DI 2 cx [orig:94 _8 ] [94])
                (mult:DI (reg:DI 1 dx [orig:93 _7 ] [93])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":84 349 {*muldi3_1}
     (nil))
(insn 42 41 43 6 (set (reg:SI 1 dx [322])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":84 86 {*movsi_internal}
     (nil))
(insn 43 42 44 6 (set (reg:DI 1 dx [orig:95 _9 ] [95])
        (sign_extend:DI (reg:SI 1 dx [322]))) "CALLCL.f":84 149 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 6 (parallel [
            (set (reg:DI 1 dx [orig:96 _10 ] [96])
                (plus:DI (reg:DI 1 dx [orig:95 _9 ] [95])
                    (reg:DI 2 cx [orig:94 _8 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":84 222 {*adddi_1}
     (nil))
(insn 45 44 46 6 (parallel [
            (set (reg:DI 2 cx [orig:97 _11 ] [97])
                (plus:DI (reg:DI 1 dx [orig:96 _10 ] [96])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":84 222 {*adddi_1}
     (nil))
(insn 46 45 47 6 (set (reg:SF 21 xmm0 [orig:98 _12 ] [98])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f3d6bcc1ab0 options>) [2 options.spval+0 S4 A128])) "CALLCL.f":1 131 {*movsf_internal}
     (nil))
(insn 47 46 48 6 (set (reg/f:DI 1 dx [323])
        (symbol_ref:DI ("tlcl.3999") [flags 0x202]  <var_decl 0x7f3d6bcc83f0 tlcl>)) "CALLCL.f":84 85 {*movdi_internal}
     (nil))
(insn 48 47 49 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:97 _11 ] [97])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [323])) [2 tlcl S4 A32])
        (reg:SF 21 xmm0 [orig:98 _12 ] [98])) "CALLCL.f":84 131 {*movsf_internal}
     (nil))
(insn 49 48 50 6 (set (reg:SI 1 dx [324])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":85 86 {*movsi_internal}
     (nil))
(insn 50 49 51 6 (set (reg:DI 1 dx [orig:99 _13 ] [99])
        (sign_extend:DI (reg:SI 1 dx [324]))) "CALLCL.f":85 149 {*extendsidi2_rex64}
     (nil))
(insn 51 50 52 6 (parallel [
            (set (reg:DI 2 cx [orig:100 _14 ] [100])
                (mult:DI (reg:DI 1 dx [orig:99 _13 ] [99])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":85 349 {*muldi3_1}
     (nil))
(insn 52 51 53 6 (set (reg:SI 1 dx [325])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":85 86 {*movsi_internal}
     (nil))
(insn 53 52 54 6 (set (reg:DI 1 dx [orig:101 _15 ] [101])
        (sign_extend:DI (reg:SI 1 dx [325]))) "CALLCL.f":85 149 {*extendsidi2_rex64}
     (nil))
(insn 54 53 55 6 (parallel [
            (set (reg:DI 1 dx [orig:102 _16 ] [102])
                (plus:DI (reg:DI 1 dx [orig:101 _15 ] [101])
                    (reg:DI 2 cx [orig:100 _14 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":85 222 {*adddi_1}
     (nil))
(insn 55 54 56 6 (parallel [
            (set (reg:DI 2 cx [orig:103 _17 ] [103])
                (plus:DI (reg:DI 1 dx [orig:102 _16 ] [102])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":85 222 {*adddi_1}
     (nil))
(insn 56 55 57 6 (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f3d6bcc1ab0 options>) [2 options.spval+0 S4 A128])) "CALLCL.f":1 131 {*movsf_internal}
     (nil))
(insn 57 56 58 6 (set (reg/f:DI 1 dx [326])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 zlcl+0 S8 A64])) "CALLCL.f":85 85 {*movdi_internal}
     (nil))
(insn 58 57 59 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:103 _17 ] [103])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [326])) [2 *zlcl_238(D) S4 A32])
        (reg:SF 21 xmm0 [orig:104 _18 ] [104])) "CALLCL.f":85 131 {*movsf_internal}
     (nil))
(insn 59 58 506 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":82 221 {*addsi_1}
     (nil))
(jump_insn 506 59 507 6 (set (pc)
        (label_ref 60)) "CALLCL.f":82 683 {jump}
     (nil)
 -> 60)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305

(barrier 507 506 523)
;; basic block 25, loop depth 0, maybe hot
;;  prev block 6, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 523 507 522 25 20 (nil) [1 uses])
(note 522 523 524 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 524 522 63 25 (const_int 0 [0]) "CALLCL.f":85 718 {nop}
     (nil))
;;  succ:       7 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305

;; basic block 7, loop depth 0, maybe hot
;;  prev block 25, next block 24, flags: (RTL, MODIFIED)
;;  pred:       25 [always]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 63 524 64 7 3 (nil) [0 uses])
(note 64 63 65 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 508 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":81 221 {*addsi_1}
     (nil))
(jump_insn 508 65 509 7 (set (pc)
        (label_ref 66)) "CALLCL.f":81 683 {jump}
     (nil)
 -> 66)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305

(barrier 509 508 520)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 520 509 519 24 19 (nil) [1 uses])
(note 519 520 521 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 521 519 69 24 (const_int 0 [0]) "CALLCL.f":82 718 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 24, next block 9, flags: (RTL, MODIFIED)
;;  pred:       24 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 308 309
(code_label 69 521 70 8 2 (nil) [0 uses])
(note 70 69 71 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 8 (set (reg:SI 0 ax [orig:308 _242 ] [308])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f3d6bcc1ea0 parallel>)
                    (const_int 16 [0x10]))) [1 parallel.jsta_m+0 S4 A128])) "CALLCL.f":109 86 {*movsi_internal}
     (nil))
(insn 72 71 73 8 (set (reg:SI 3 bx [orig:309 _243 ] [309])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f3d6bcc1ea0 parallel>)
                    (const_int 20 [0x14]))) [1 parallel.jend_m+0 S4 A32])) "CALLCL.f":109 86 {*movsi_internal}
     (nil))
(insn 73 72 493 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
        (reg:SI 0 ax [orig:308 _242 ] [308])) "CALLCL.f":109 86 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              22 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  def 	 17 [flags] 310 327
(code_label 493 73 74 9 15 (nil) [1 uses])
(note 74 493 75 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
            (reg:SI 3 bx [orig:309 _243 ] [309]))) "CALLCL.f":109 11 {*cmpsi_1}
     (nil))
(insn 76 75 77 9 (set (reg:QI 0 ax [327])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALLCL.f":109 678 {*setcc_qi}
     (nil))
(insn 77 76 78 9 (set (reg:SI 0 ax [orig:310 _245 ] [310])
        (zero_extend:SI (reg:QI 0 ax [327]))) "CALLCL.f":109 140 {*zero_extendqisi2}
     (nil))
(insn 78 77 79 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:310 _245 ] [310])
            (const_int 0 [0]))) "CALLCL.f":109 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 79 78 80 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 526)
            (pc))) "CALLCL.f":109 682 {*jcc}
     (nil)
 -> 526)
;;  succ:       26
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 80 79 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 487 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 2 [0x2])) "CALLCL.f":110 86 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              21 [always] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 311 328
(code_label 487 81 82 11 14 (nil) [1 uses])
(note 82 487 83 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (const_int 118 [0x76]))) "CALLCL.f":110 11 {*cmpsi_1}
     (nil))
(insn 84 83 85 11 (set (reg:QI 0 ax [328])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALLCL.f":110 678 {*setcc_qi}
     (nil))
(insn 85 84 86 11 (set (reg:SI 0 ax [orig:311 _247 ] [311])
        (zero_extend:SI (reg:QI 0 ax [328]))) "CALLCL.f":110 140 {*zero_extendqisi2}
     (nil))
(insn 86 85 87 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:311 _247 ] [311])
            (const_int 0 [0]))) "CALLCL.f":110 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 87 86 88 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 529)
            (pc))) "CALLCL.f":110 682 {*jcc}
     (nil)
 -> 529)
;;  succ:       27
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 302 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359
(note 88 87 89 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 12 (set (reg:SI 0 ax [329])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":111 86 {*movsi_internal}
     (nil))
(insn 90 89 91 12 (set (reg:DI 0 ax [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 0 ax [329]))) "CALLCL.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 91 90 92 12 (parallel [
            (set (reg:DI 1 dx [orig:106 _20 ] [106])
                (mult:DI (reg:DI 0 ax [orig:105 _19 ] [105])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":111 349 {*muldi3_1}
     (nil))
(insn 92 91 93 12 (set (reg:SI 0 ax [330])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":111 86 {*movsi_internal}
     (nil))
(insn 93 92 94 12 (set (reg:DI 0 ax [orig:107 _21 ] [107])
        (sign_extend:DI (reg:SI 0 ax [330]))) "CALLCL.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 12 (parallel [
            (set (reg:DI 0 ax [orig:108 _22 ] [108])
                (plus:DI (reg:DI 0 ax [orig:107 _21 ] [107])
                    (reg:DI 1 dx [orig:106 _20 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":111 222 {*adddi_1}
     (nil))
(insn 95 94 96 12 (parallel [
            (set (reg:DI 1 dx [orig:109 _23 ] [109])
                (plus:DI (reg:DI 0 ax [orig:108 _22 ] [108])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":111 222 {*adddi_1}
     (nil))
(insn 96 95 97 12 (set (reg/f:DI 0 ax [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 p1d+0 S8 A64])) "CALLCL.f":111 85 {*movdi_internal}
     (nil))
(insn 97 96 98 12 (set (reg:SF 22 xmm1 [orig:110 _24 ] [110])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:109 _23 ] [109])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [331])) [2 *p1d_248(D) S4 A32])) "CALLCL.f":111 131 {*movsf_internal}
     (nil))
(insn 98 97 99 12 (set (reg:SI 0 ax [332])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":111 86 {*movsi_internal}
     (nil))
(insn 99 98 100 12 (set (reg:DI 0 ax [orig:111 _25 ] [111])
        (sign_extend:DI (reg:SI 0 ax [332]))) "CALLCL.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 100 99 101 12 (parallel [
            (set (reg:DI 1 dx [orig:112 _26 ] [112])
                (mult:DI (reg:DI 0 ax [orig:111 _25 ] [111])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":111 349 {*muldi3_1}
     (nil))
(insn 101 100 102 12 (set (reg:SI 0 ax [333])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":111 86 {*movsi_internal}
     (nil))
(insn 102 101 103 12 (set (reg:DI 0 ax [orig:113 _27 ] [113])
        (sign_extend:DI (reg:SI 0 ax [333]))) "CALLCL.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 103 102 104 12 (parallel [
            (set (reg:DI 0 ax [orig:114 _28 ] [114])
                (plus:DI (reg:DI 0 ax [orig:113 _27 ] [113])
                    (reg:DI 1 dx [orig:112 _26 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":111 222 {*adddi_1}
     (nil))
(insn 104 103 105 12 (parallel [
            (set (reg:DI 1 dx [orig:115 _29 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 _28 ] [114])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":111 222 {*adddi_1}
     (nil))
(insn 105 104 106 12 (set (reg/f:DI 0 ax [334])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [3 q1d+0 S8 A64])) "CALLCL.f":111 85 {*movdi_internal}
     (nil))
(insn 106 105 107 12 (set (reg:SF 21 xmm0 [orig:116 _30 ] [116])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:115 _29 ] [115])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [334])) [2 *q1d_249(D) S4 A32])) "CALLCL.f":111 131 {*movsf_internal}
     (nil))
(insn 107 106 108 12 (set (reg:SF 21 xmm0 [orig:117 _31 ] [117])
        (mult:SF (reg:SF 21 xmm0 [orig:116 _30 ] [116])
            (reg:SF 22 xmm1 [orig:110 _24 ] [110]))) "CALLCL.f":111 838 {*fop_sf_comm}
     (nil))
(insn 108 107 109 12 (set (reg:SI 0 ax [335])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":111 86 {*movsi_internal}
     (nil))
(insn 109 108 110 12 (set (reg:DI 0 ax [orig:118 _32 ] [118])
        (sign_extend:DI (reg:SI 0 ax [335]))) "CALLCL.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 110 109 111 12 (parallel [
            (set (reg:DI 1 dx [orig:119 _33 ] [119])
                (mult:DI (reg:DI 0 ax [orig:118 _32 ] [118])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":111 349 {*muldi3_1}
     (nil))
(insn 111 110 112 12 (set (reg:SI 0 ax [336])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":111 86 {*movsi_internal}
     (nil))
(insn 112 111 113 12 (set (reg:DI 0 ax [orig:120 _34 ] [120])
        (sign_extend:DI (reg:SI 0 ax [336]))) "CALLCL.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 12 (parallel [
            (set (reg:DI 0 ax [orig:121 _35 ] [121])
                (plus:DI (reg:DI 0 ax [orig:120 _34 ] [120])
                    (reg:DI 1 dx [orig:119 _33 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":111 222 {*adddi_1}
     (nil))
(insn 114 113 115 12 (parallel [
            (set (reg:DI 1 dx [orig:122 _36 ] [122])
                (plus:DI (reg:DI 0 ax [orig:121 _35 ] [121])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":111 222 {*adddi_1}
     (nil))
(insn 115 114 116 12 (set (reg/f:DI 0 ax [337])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [3 q1d+0 S8 A64])) "CALLCL.f":111 85 {*movdi_internal}
     (nil))
(insn 116 115 117 12 (set (reg:SF 23 xmm2 [orig:123 _37 ] [123])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:122 _36 ] [122])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [337])) [2 *q1d_249(D) S4 A32])) "CALLCL.f":111 131 {*movsf_internal}
     (nil))
(insn 117 116 118 12 (set (reg:SF 22 xmm1 [338])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALLCL.f":111 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.780210018157958984375e-1 [0x0.c18bf8p-1])
        (nil)))
(insn 118 117 119 12 (set (reg:SF 23 xmm2 [orig:124 _38 ] [124])
        (mult:SF (reg:SF 23 xmm2 [orig:123 _37 ] [123])
            (reg:SF 22 xmm1 [338]))) "CALLCL.f":111 838 {*fop_sf_comm}
     (nil))
(insn 119 118 120 12 (set (reg:SF 22 xmm1 [339])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALLCL.f":111 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.219789981842041015625e-1 [0x0.9f3a04p+0])
        (nil)))
(insn 120 119 122 12 (set (reg:SF 22 xmm1 [orig:125 _39 ] [125])
        (plus:SF (reg:SF 22 xmm1 [339])
            (reg:SF 23 xmm2 [orig:124 _38 ] [124]))) "CALLCL.f":111 838 {*fop_sf_comm}
     (nil))
(insn 122 120 123 12 (set (reg:SF 21 xmm0 [340])
        (div:SF (reg:SF 21 xmm0 [orig:117 _31 ] [117])
            (reg:SF 22 xmm1 [orig:126 _40 ] [126]))) "CALLCL.f":111 841 {*fop_sf_1}
     (nil))
(insn 123 122 124 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 evp+0 S4 A32])
        (reg:SF 21 xmm0 [340])) "CALLCL.f":111 131 {*movsf_internal}
     (nil))
(insn 124 123 125 12 (set (reg:SF 22 xmm1 [341])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 evp+0 S4 A32])) "CALLCL.f":112 131 {*movsf_internal}
     (nil))
(insn 125 124 126 12 (set (reg:SF 21 xmm0 [342])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALLCL.f":112 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.219789981842041015625e-1 [0x0.9f3a04p+0])
        (nil)))
(insn 126 125 127 12 (set (reg:SF 21 xmm0 [orig:127 _41 ] [127])
        (mult:SF (reg:SF 21 xmm0 [342])
            (reg:SF 22 xmm1 [341]))) "CALLCL.f":112 838 {*fop_sf_comm}
     (nil))
(insn 127 126 128 12 (set (reg:SI 0 ax [343])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":112 86 {*movsi_internal}
     (nil))
(insn 128 127 129 12 (set (reg:DI 0 ax [orig:128 _42 ] [128])
        (sign_extend:DI (reg:SI 0 ax [343]))) "CALLCL.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 129 128 130 12 (parallel [
            (set (reg:DI 1 dx [orig:129 _43 ] [129])
                (mult:DI (reg:DI 0 ax [orig:128 _42 ] [128])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":112 349 {*muldi3_1}
     (nil))
(insn 130 129 131 12 (set (reg:SI 0 ax [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":112 86 {*movsi_internal}
     (nil))
(insn 131 130 132 12 (set (reg:DI 0 ax [orig:130 _44 ] [130])
        (sign_extend:DI (reg:SI 0 ax [344]))) "CALLCL.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 132 131 133 12 (parallel [
            (set (reg:DI 0 ax [orig:131 _45 ] [131])
                (plus:DI (reg:DI 0 ax [orig:130 _44 ] [130])
                    (reg:DI 1 dx [orig:129 _43 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":112 222 {*adddi_1}
     (nil))
(insn 133 132 134 12 (parallel [
            (set (reg:DI 1 dx [orig:132 _46 ] [132])
                (plus:DI (reg:DI 0 ax [orig:131 _45 ] [131])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":112 222 {*adddi_1}
     (nil))
(insn 134 133 135 12 (set (reg/f:DI 0 ax [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 p1d+0 S8 A64])) "CALLCL.f":112 85 {*movdi_internal}
     (nil))
(insn 135 134 136 12 (set (reg:SF 22 xmm1 [orig:133 _47 ] [133])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:132 _46 ] [132])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [345])) [2 *p1d_248(D) S4 A32])) "CALLCL.f":112 131 {*movsf_internal}
     (nil))
(insn 136 135 138 12 (set (reg:SF 22 xmm1 [orig:134 _48 ] [134])
        (minus:SF (reg:SF 22 xmm1 [orig:133 _47 ] [133])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 evp+0 S4 A32]))) "CALLCL.f":112 841 {*fop_sf_1}
     (nil))
(insn 138 136 139 12 (set (reg:SF 21 xmm0 [346])
        (div:SF (reg:SF 21 xmm0 [orig:127 _41 ] [127])
            (reg:SF 22 xmm1 [orig:135 _49 ] [135]))) "CALLCL.f":112 841 {*fop_sf_1}
     (nil))
(insn 139 138 140 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 rmx+0 S4 A32])
        (reg:SF 21 xmm0 [346])) "CALLCL.f":112 131 {*movsf_internal}
     (nil))
(insn 140 139 141 12 (set (reg:SF 22 xmm1 [347])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 rmx+0 S4 A32])) "CALLCL.f":113 131 {*movsf_internal}
     (nil))
(insn 141 140 142 12 (set (reg:SF 21 xmm0 [348])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "CALLCL.f":113 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.800000011920928955078125e-1 [0x0.8f5c29p-1])
        (nil)))
(insn 142 141 143 12 (set (reg:SF 22 xmm1 [orig:136 _50 ] [136])
        (mult:SF (reg:SF 22 xmm1 [347])
            (reg:SF 21 xmm0 [348]))) "CALLCL.f":113 838 {*fop_sf_comm}
     (nil))
(insn 143 142 144 12 (set (reg:SF 21 xmm0 [349])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) "CALLCL.f":113 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 144 143 145 12 (set (reg:SF 21 xmm0 [orig:137 _51 ] [137])
        (minus:SF (reg:SF 21 xmm0 [349])
            (reg:SF 22 xmm1 [orig:136 _50 ] [136]))) "CALLCL.f":113 841 {*fop_sf_1}
     (nil))
(insn 145 144 146 12 (set (reg:SF 22 xmm1 [orig:138 _52 ] [138])
        (reg:SF 21 xmm0 [orig:137 _51 ] [137])) "CALLCL.f":113 131 {*movsf_internal}
     (nil))
(insn 146 145 147 12 (set (reg:SF 21 xmm0 [351])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S4 A32])) "CALLCL.f":113 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.8450000286102294921875e-1 [0x0.91a9fcp-1])
        (nil)))
(insn 147 146 148 12 (set (reg:SF 21 xmm0 [350])
        (mult:SF (reg:SF 21 xmm0 [351])
            (reg:SF 22 xmm1 [orig:138 _52 ] [138]))) "CALLCL.f":113 838 {*fop_sf_comm}
     (nil))
(insn 148 147 149 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 ckapa+0 S4 A32])
        (reg:SF 21 xmm0 [350])) "CALLCL.f":113 131 {*movsf_internal}
     (nil))
(insn 149 148 150 12 (set (reg:SF 21 xmm0 [353])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) "CALLCL.f":114 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 150 149 151 12 (set (reg:SF 21 xmm0 [352])
        (div:SF (reg:SF 21 xmm0 [353])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [2 ckapa+0 S4 A32]))) "CALLCL.f":114 841 {*fop_sf_1}
     (nil))
(insn 151 150 152 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [2 rkapa+0 S4 A32])
        (reg:SF 21 xmm0 [352])) "CALLCL.f":114 131 {*movsf_internal}
     (nil))
(insn 152 151 153 12 (set (reg:SF 22 xmm1 [355])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 evp+0 S4 A32])) "CALLCL.f":115 131 {*movsf_internal}
     (nil))
(insn 153 152 154 12 (set (reg:SF 21 xmm0 [356])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) "CALLCL.f":115 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.99999977648258209228515625e-3 [0x0.a3d70ap-6])
        (nil)))
(insn 154 153 155 12 (set (reg:SF 21 xmm0 [354])
        (mult:SF (reg:SF 21 xmm0 [356])
            (reg:SF 22 xmm1 [355]))) "CALLCL.f":115 838 {*fop_sf_comm}
     (nil))
(insn 155 154 156 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 arg+0 S4 A32])
        (reg:SF 21 xmm0 [354])) "CALLCL.f":115 131 {*movsf_internal}
     (nil))
(insn 156 155 157 12 (set (reg:SF 21 xmm0 [orig:302 M.0_221 ] [302])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S4 A32])) "CALLCL.f":116 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.999999960041972002500187954865396022796630859375e-13 [0x0.8cbcccp-39])
        (nil)))
(insn 157 156 158 12 (set (reg:SF 22 xmm1 [358])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 arg+0 S4 A32])) "CALLCL.f":116 131 {*movsf_internal}
     (nil))
(insn 158 157 159 12 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 22 xmm1 [358])
            (reg:SF 21 xmm0 [orig:302 M.0_221 ] [302]))) "CALLCL.f":116 53 {*cmpisf}
     (nil))
(insn 159 158 160 12 (set (reg:QI 0 ax [357])
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "CALLCL.f":116 678 {*setcc_qi}
     (nil))
(insn 160 159 161 12 (set (reg:SI 1 dx [orig:139 _53 ] [139])
        (zero_extend:SI (reg:QI 0 ax [357]))) "CALLCL.f":116 140 {*zero_extendqisi2}
     (nil))
(insn 161 160 162 12 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [orig:302 M.0_221 ] [302])
                    (reg:SF 21 xmm0 [orig:302 M.0_221 ] [302]))
            ] UNSPEC_NOTRAP)) "CALLCL.f":116 54 {*cmpiusf}
     (nil))
(insn 162 161 163 12 (set (reg:QI 0 ax [359])
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "CALLCL.f":116 678 {*setcc_qi}
     (nil))
(insn 163 162 164 12 (set (reg:SI 0 ax [orig:140 _54 ] [140])
        (zero_extend:SI (reg:QI 0 ax [359]))) "CALLCL.f":116 140 {*zero_extendqisi2}
     (nil))
(insn 164 163 165 12 (parallel [
            (set (reg:SI 0 ax [orig:141 _55 ] [141])
                (ior:SI (reg:SI 0 ax [orig:140 _54 ] [140])
                    (reg:SI 1 dx [orig:139 _53 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":116 450 {*iorsi_1}
     (nil))
(insn 165 164 166 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:141 _55 ] [141])
            (const_int 0 [0]))) "CALLCL.f":116 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 166 165 167 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 169)
            (pc))) "CALLCL.f":116 682 {*jcc}
     (nil)
 -> 169)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 302 309

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 302
(note 167 166 168 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 13 (set (reg:SF 21 xmm0 [orig:302 M.0_221 ] [302])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 arg+0 S4 A32])) "CALLCL.f":116 131 {*movsf_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 302 309

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 302 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 302
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 312 313 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393
(code_label 169 168 170 14 8 (nil) [1 uses])
(note 170 169 171 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 172 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 arg+0 S4 A32])
        (reg:SF 21 xmm0 [orig:302 M.0_221 ] [302])) "CALLCL.f":116 131 {*movsf_internal}
     (nil))
(insn 172 171 173 14 (set (reg:SI 0 ax [360])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":117 86 {*movsi_internal}
     (nil))
(insn 173 172 174 14 (set (reg:DI 0 ax [orig:142 _56 ] [142])
        (sign_extend:DI (reg:SI 0 ax [360]))) "CALLCL.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 174 173 175 14 (parallel [
            (set (reg:DI 1 dx [orig:143 _57 ] [143])
                (mult:DI (reg:DI 0 ax [orig:142 _56 ] [142])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":117 349 {*muldi3_1}
     (nil))
(insn 175 174 176 14 (set (reg:SI 0 ax [361])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":117 86 {*movsi_internal}
     (nil))
(insn 176 175 177 14 (set (reg:DI 0 ax [orig:144 _58 ] [144])
        (sign_extend:DI (reg:SI 0 ax [361]))) "CALLCL.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 177 176 178 14 (parallel [
            (set (reg:DI 0 ax [orig:145 _59 ] [145])
                (plus:DI (reg:DI 0 ax [orig:144 _58 ] [144])
                    (reg:DI 1 dx [orig:143 _57 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":117 222 {*adddi_1}
     (nil))
(insn 178 177 179 14 (parallel [
            (set (reg:DI 1 dx [orig:146 _60 ] [146])
                (plus:DI (reg:DI 0 ax [orig:145 _59 ] [145])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":117 222 {*adddi_1}
     (nil))
(insn 179 178 180 14 (set (reg/f:DI 0 ax [362])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 t1d+0 S8 A64])) "CALLCL.f":117 85 {*movdi_internal}
     (nil))
(insn 180 179 182 14 (set (reg:SF 21 xmm0 [orig:147 _61 ] [147])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:146 _60 ] [146])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [362])) [2 *t1d_258(D) S4 A32])) "CALLCL.f":117 131 {*movsf_internal}
     (nil))
(call_insn/u 182 180 183 14 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("logf") [flags 0x41]  <function_decl 0x7f3d6bb28900 __builtin_logf>) [0 __builtin_logf S1 A8])
            (const_int 0 [0]))) "CALLCL.f":117 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 183 182 184 14 (set (reg:SF 22 xmm1 [orig:148 _62 ] [148])
        (reg:SF 21 xmm0)) "CALLCL.f":117 131 {*movsf_internal}
     (nil))
(insn 184 183 185 14 (set (reg:SF 21 xmm0 [363])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S4 A32])) "CALLCL.f":117 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.5e+0 [0x0.ep+2])
        (nil)))
(insn 185 184 536 14 (set (reg:SF 22 xmm1 [orig:148 _62 ] [148])
        (mult:SF (reg:SF 22 xmm1 [orig:148 _62 ] [148])
            (reg:SF 21 xmm0 [363]))) "CALLCL.f":117 838 {*fop_sf_comm}
     (nil))
(insn 536 185 547 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [10 %sfp+-108 S4 A32])
        (reg:SF 22 xmm1 [orig:148 _62 ] [148])) "CALLCL.f":117 131 {*movsf_internal}
     (nil))
(note 547 536 544 14 NOTE_INSN_DELETED)
(note 544 547 186 14 NOTE_INSN_DELETED)
(insn 186 544 188 14 (set (reg:SF 21 xmm0 [364])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 arg+0 S4 A32])) "CALLCL.f":117 131 {*movsf_internal}
     (nil))
(call_insn/u 188 186 537 14 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("logf") [flags 0x41]  <function_decl 0x7f3d6bb28900 __builtin_logf>) [0 __builtin_logf S1 A8])
            (const_int 0 [0]))) "CALLCL.f":117 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 537 188 190 14 (set (reg:SF 22 xmm1 [orig:149 _63 ] [149])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [10 %sfp+-108 S4 A32])) "CALLCL.f":117 131 {*movsf_internal}
     (nil))
(insn 190 537 538 14 (set (reg:SF 22 xmm1 [orig:149 _63 ] [149])
        (minus:SF (reg:SF 22 xmm1 [orig:149 _63 ] [149])
            (reg:SF 21 xmm0 [orig:150 _64 ] [150]))) "CALLCL.f":117 841 {*fop_sf_1}
     (nil))
(insn 538 190 191 14 (set (reg:SF 21 xmm0 [orig:151 _65 ] [151])
        (reg:SF 22 xmm1 [orig:149 _63 ] [149])) "CALLCL.f":117 131 {*movsf_internal}
     (nil))
(insn 191 538 192 14 (set (reg:SF 22 xmm1 [366])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S4 A32])) "CALLCL.f":117 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 4.804999828338623046875e+0 [0x0.99c28fp+3])
        (nil)))
(insn 192 191 193 14 (set (reg:SF 21 xmm0 [365])
        (minus:SF (reg:SF 21 xmm0 [orig:151 _65 ] [151])
            (reg:SF 22 xmm1 [366]))) "CALLCL.f":117 841 {*fop_sf_1}
     (nil))
(insn 193 192 194 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 denom+0 S4 A32])
        (reg:SF 21 xmm0 [365])) "CALLCL.f":117 131 {*movsf_internal}
     (nil))
(insn 194 193 539 14 (set (reg:SF 21 xmm0 [367])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S4 A32])) "CALLCL.f":118 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.84e+3 [0x0.b18p+12])
        (nil)))
(insn 539 194 195 14 (set (reg:SF 22 xmm1 [367])
        (reg:SF 21 xmm0 [367])) "CALLCL.f":118 131 {*movsf_internal}
     (nil))
(insn 195 539 196 14 (set (reg:SF 22 xmm1 [367])
        (div:SF (reg:SF 22 xmm1 [367])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [2 denom+0 S4 A32]))) "CALLCL.f":118 841 {*fop_sf_1}
     (nil))
(insn 196 195 197 14 (set (reg:SI 0 ax [368])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":118 86 {*movsi_internal}
     (nil))
(insn 197 196 198 14 (set (reg:DI 0 ax [orig:153 _67 ] [153])
        (sign_extend:DI (reg:SI 0 ax [368]))) "CALLCL.f":118 149 {*extendsidi2_rex64}
     (nil))
(insn 198 197 199 14 (parallel [
            (set (reg:DI 1 dx [orig:154 _68 ] [154])
                (mult:DI (reg:DI 0 ax [orig:153 _67 ] [153])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":118 349 {*muldi3_1}
     (nil))
(insn 199 198 200 14 (set (reg:SI 0 ax [369])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":118 86 {*movsi_internal}
     (nil))
(insn 200 199 201 14 (set (reg:DI 0 ax [orig:155 _69 ] [155])
        (sign_extend:DI (reg:SI 0 ax [369]))) "CALLCL.f":118 149 {*extendsidi2_rex64}
     (nil))
(insn 201 200 202 14 (parallel [
            (set (reg:DI 0 ax [orig:156 _70 ] [156])
                (plus:DI (reg:DI 0 ax [orig:155 _69 ] [155])
                    (reg:DI 1 dx [orig:154 _68 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":118 222 {*adddi_1}
     (nil))
(insn 202 201 203 14 (parallel [
            (set (reg:DI 1 dx [orig:157 _71 ] [157])
                (plus:DI (reg:DI 0 ax [orig:156 _70 ] [156])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":118 222 {*adddi_1}
     (nil))
(insn 203 202 204 14 (set (reg:SF 21 xmm0 [370])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC10") [flags 0x2]) [0  S4 A32])) "CALLCL.f":118 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.5e+1 [0x0.dcp+6])
        (nil)))
(insn 204 203 205 14 (set (reg:SF 21 xmm0 [orig:158 _72 ] [158])
        (plus:SF (reg:SF 21 xmm0 [370])
            (reg:SF 22 xmm1 [orig:152 _66 ] [152]))) "CALLCL.f":118 838 {*fop_sf_comm}
     (nil))
(insn 205 204 206 14 (set (reg/f:DI 0 ax [371])
        (symbol_ref:DI ("tlcl.3999") [flags 0x202]  <var_decl 0x7f3d6bcc83f0 tlcl>)) "CALLCL.f":118 85 {*movdi_internal}
     (nil))
(insn 206 205 207 14 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:157 _71 ] [157])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [371])) [2 tlcl S4 A32])
        (reg:SF 21 xmm0 [orig:158 _72 ] [158])) "CALLCL.f":118 131 {*movsf_internal}
     (nil))
(insn 207 206 208 14 (set (reg:SI 0 ax [372])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":119 86 {*movsi_internal}
     (nil))
(insn 208 207 209 14 (set (reg:DI 0 ax [orig:159 _73 ] [159])
        (sign_extend:DI (reg:SI 0 ax [372]))) "CALLCL.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 209 208 210 14 (parallel [
            (set (reg:DI 1 dx [orig:160 _74 ] [160])
                (mult:DI (reg:DI 0 ax [orig:159 _73 ] [159])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":119 349 {*muldi3_1}
     (nil))
(insn 210 209 211 14 (set (reg:SI 0 ax [373])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":119 86 {*movsi_internal}
     (nil))
(insn 211 210 212 14 (set (reg:DI 0 ax [orig:161 _75 ] [161])
        (sign_extend:DI (reg:SI 0 ax [373]))) "CALLCL.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 212 211 213 14 (parallel [
            (set (reg:DI 0 ax [orig:162 _76 ] [162])
                (plus:DI (reg:DI 0 ax [orig:161 _75 ] [161])
                    (reg:DI 1 dx [orig:160 _74 ] [160])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":119 222 {*adddi_1}
     (nil))
(insn 213 212 214 14 (parallel [
            (set (reg:DI 1 dx [orig:163 _77 ] [163])
                (plus:DI (reg:DI 0 ax [orig:162 _76 ] [162])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":119 222 {*adddi_1}
     (nil))
(insn 214 213 215 14 (set (reg/f:DI 0 ax [374])
        (symbol_ref:DI ("tlcl.3999") [flags 0x202]  <var_decl 0x7f3d6bcc83f0 tlcl>)) "CALLCL.f":119 85 {*movdi_internal}
     (nil))
(insn 215 214 216 14 (set (reg:SF 21 xmm0 [orig:164 _78 ] [164])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:163 _77 ] [163])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [374])) [2 tlcl S4 A32])) "CALLCL.f":119 131 {*movsf_internal}
     (nil))
(insn 216 215 217 14 (set (reg:SI 0 ax [375])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":119 86 {*movsi_internal}
     (nil))
(insn 217 216 218 14 (set (reg:DI 0 ax [orig:165 _79 ] [165])
        (sign_extend:DI (reg:SI 0 ax [375]))) "CALLCL.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 218 217 219 14 (parallel [
            (set (reg:DI 1 dx [orig:166 _80 ] [166])
                (mult:DI (reg:DI 0 ax [orig:165 _79 ] [165])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":119 349 {*muldi3_1}
     (nil))
(insn 219 218 220 14 (set (reg:SI 0 ax [376])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":119 86 {*movsi_internal}
     (nil))
(insn 220 219 221 14 (set (reg:DI 0 ax [orig:167 _81 ] [167])
        (sign_extend:DI (reg:SI 0 ax [376]))) "CALLCL.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 221 220 222 14 (parallel [
            (set (reg:DI 0 ax [orig:168 _82 ] [168])
                (plus:DI (reg:DI 0 ax [orig:167 _81 ] [167])
                    (reg:DI 1 dx [orig:166 _80 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":119 222 {*adddi_1}
     (nil))
(insn 222 221 223 14 (parallel [
            (set (reg:DI 1 dx [orig:169 _83 ] [169])
                (plus:DI (reg:DI 0 ax [orig:168 _82 ] [168])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":119 222 {*adddi_1}
     (nil))
(insn 223 222 224 14 (set (reg/f:DI 0 ax [377])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 t1d+0 S8 A64])) "CALLCL.f":119 85 {*movdi_internal}
     (nil))
(insn 224 223 225 14 (set (reg:SF 22 xmm1 [orig:170 _84 ] [170])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:169 _83 ] [169])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [377])) [2 *t1d_258(D) S4 A32])) "CALLCL.f":119 131 {*movsf_internal}
     (nil))
(insn 225 224 226 14 (set (reg:SF 21 xmm0 [orig:171 _85 ] [171])
        (div:SF (reg:SF 21 xmm0 [orig:164 _78 ] [164])
            (reg:SF 22 xmm1 [orig:170 _84 ] [170]))) "CALLCL.f":119 841 {*fop_sf_1}
     (nil))
(insn 226 225 227 14 (set (reg:SF 23 xmm2 [orig:312 _261 ] [312])
        (reg:SF 21 xmm0 [orig:171 _85 ] [171])) "CALLCL.f":119 131 {*movsf_internal}
     (nil))
(insn 227 226 228 14 (set (reg:SI 0 ax [378])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":119 86 {*movsi_internal}
     (nil))
(insn 228 227 229 14 (set (reg:DI 0 ax [orig:172 _86 ] [172])
        (sign_extend:DI (reg:SI 0 ax [378]))) "CALLCL.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 229 228 230 14 (parallel [
            (set (reg:DI 1 dx [orig:173 _87 ] [173])
                (mult:DI (reg:DI 0 ax [orig:172 _86 ] [172])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":119 349 {*muldi3_1}
     (nil))
(insn 230 229 231 14 (set (reg:SI 0 ax [379])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":119 86 {*movsi_internal}
     (nil))
(insn 231 230 232 14 (set (reg:DI 0 ax [orig:174 _88 ] [174])
        (sign_extend:DI (reg:SI 0 ax [379]))) "CALLCL.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 232 231 233 14 (parallel [
            (set (reg:DI 0 ax [orig:175 _89 ] [175])
                (plus:DI (reg:DI 0 ax [orig:174 _88 ] [174])
                    (reg:DI 1 dx [orig:173 _87 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":119 222 {*adddi_1}
     (nil))
(insn 233 232 234 14 (parallel [
            (set (reg:DI 1 dx [orig:176 _90 ] [176])
                (plus:DI (reg:DI 0 ax [orig:175 _89 ] [175])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":119 222 {*adddi_1}
     (nil))
(insn 234 233 235 14 (set (reg/f:DI 0 ax [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 p1d+0 S8 A64])) "CALLCL.f":119 85 {*movdi_internal}
     (nil))
(insn 235 234 541 14 (set (reg:SF 24 xmm3 [orig:177 _91 ] [177])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:176 _90 ] [176])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [380])) [2 *p1d_248(D) S4 A32])) "CALLCL.f":119 131 {*movsf_internal}
     (nil))
(insn 541 235 546 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [10 %sfp+-108 S4 A32])
        (reg:SF 24 xmm3 [orig:177 _91 ] [177])) "CALLCL.f":119 131 {*movsf_internal}
     (nil))
(note 546 541 543 14 NOTE_INSN_DELETED)
(note 543 546 236 14 NOTE_INSN_DELETED)
(insn 236 543 237 14 (set (reg:SF 21 xmm0 [381])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [2 rkapa+0 S4 A32])) "CALLCL.f":119 131 {*movsf_internal}
     (nil))
(insn 237 236 238 14 (set (reg:SF 22 xmm1)
        (reg:SF 21 xmm0 [381])) "CALLCL.f":119 131 {*movsf_internal}
     (nil))
(insn 238 237 239 14 (set (reg:SF 21 xmm0)
        (reg:SF 23 xmm2 [orig:312 _261 ] [312])) "CALLCL.f":119 131 {*movsf_internal}
     (nil))
(call_insn/u 239 238 241 14 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("powf") [flags 0x41]  <function_decl 0x7f3d6bb35100 __builtin_powf>) [0 __builtin_powf S1 A8])
            (const_int 0 [0]))) "CALLCL.f":119 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (expr_list:SF (use (reg:SF 22 xmm1))
            (nil))))
(insn 241 239 242 14 (set (reg:SI 0 ax [382])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":119 86 {*movsi_internal}
     (nil))
(insn 242 241 243 14 (set (reg:DI 0 ax [orig:179 _93 ] [179])
        (sign_extend:DI (reg:SI 0 ax [382]))) "CALLCL.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 243 242 244 14 (parallel [
            (set (reg:DI 1 dx [orig:180 _94 ] [180])
                (mult:DI (reg:DI 0 ax [orig:179 _93 ] [179])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":119 349 {*muldi3_1}
     (nil))
(insn 244 243 245 14 (set (reg:SI 0 ax [383])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":119 86 {*movsi_internal}
     (nil))
(insn 245 244 246 14 (set (reg:DI 0 ax [orig:181 _95 ] [181])
        (sign_extend:DI (reg:SI 0 ax [383]))) "CALLCL.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 246 245 247 14 (parallel [
            (set (reg:DI 0 ax [orig:182 _96 ] [182])
                (plus:DI (reg:DI 0 ax [orig:181 _95 ] [181])
                    (reg:DI 1 dx [orig:180 _94 ] [180])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":119 222 {*adddi_1}
     (nil))
(insn 247 246 542 14 (parallel [
            (set (reg:DI 1 dx [orig:183 _97 ] [183])
                (plus:DI (reg:DI 0 ax [orig:182 _96 ] [182])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":119 222 {*adddi_1}
     (nil))
(note 542 247 545 14 NOTE_INSN_DELETED)
(note 545 542 248 14 NOTE_INSN_DELETED)
(insn 248 545 249 14 (set (reg:SF 21 xmm0 [orig:184 _98 ] [184])
        (mult:SF (reg:SF 21 xmm0 [orig:178 _92 ] [178])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -124 [0xffffffffffffff84])) [10 %sfp+-108 S4 A32]))) "CALLCL.f":119 838 {*fop_sf_comm}
     (nil))
(insn 249 248 250 14 (set (reg/f:DI 0 ax [384])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [3 plcl+0 S8 A64])) "CALLCL.f":119 85 {*movdi_internal}
     (nil))
(insn 250 249 251 14 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:183 _97 ] [183])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [384])) [2 *plcl_235(D) S4 A32])
        (reg:SF 21 xmm0 [orig:184 _98 ] [184])) "CALLCL.f":119 131 {*movsf_internal}
     (nil))
(insn 251 250 252 14 (set (reg:SI 0 ax [385])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":120 86 {*movsi_internal}
     (nil))
(insn 252 251 253 14 (set (reg:DI 0 ax [orig:185 _99 ] [185])
        (sign_extend:DI (reg:SI 0 ax [385]))) "CALLCL.f":120 149 {*extendsidi2_rex64}
     (nil))
(insn 253 252 254 14 (parallel [
            (set (reg:DI 1 dx [orig:186 _100 ] [186])
                (mult:DI (reg:DI 0 ax [orig:185 _99 ] [185])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":120 349 {*muldi3_1}
     (nil))
(insn 254 253 255 14 (set (reg:SI 0 ax [386])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":120 86 {*movsi_internal}
     (nil))
(insn 255 254 256 14 (set (reg:DI 0 ax [orig:187 _101 ] [187])
        (sign_extend:DI (reg:SI 0 ax [386]))) "CALLCL.f":120 149 {*extendsidi2_rex64}
     (nil))
(insn 256 255 257 14 (parallel [
            (set (reg:DI 0 ax [orig:188 _102 ] [188])
                (plus:DI (reg:DI 0 ax [orig:187 _101 ] [187])
                    (reg:DI 1 dx [orig:186 _100 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":120 222 {*adddi_1}
     (nil))
(insn 257 256 258 14 (parallel [
            (set (reg:DI 1 dx [orig:189 _103 ] [189])
                (plus:DI (reg:DI 0 ax [orig:188 _102 ] [188])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":120 222 {*adddi_1}
     (nil))
(insn 258 257 259 14 (set (reg/f:DI 0 ax [387])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [3 plcl+0 S8 A64])) "CALLCL.f":120 85 {*movdi_internal}
     (nil))
(insn 259 258 261 14 (set (reg:SF 21 xmm0 [orig:190 _104 ] [190])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:189 _103 ] [189])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [387])) [2 *plcl_235(D) S4 A32])) "CALLCL.f":120 131 {*movsf_internal}
     (nil))
(call_insn/u 261 259 262 14 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("logf") [flags 0x41]  <function_decl 0x7f3d6bb28900 __builtin_logf>) [0 __builtin_logf S1 A8])
            (const_int 0 [0]))) "CALLCL.f":120 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 262 261 263 14 (set (reg:SF 0 ax [388])
        (reg:SF 21 xmm0)) "CALLCL.f":120 131 {*movsf_internal}
     (nil))
(insn 263 262 264 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 alplcl+0 S4 A32])
        (reg:SF 0 ax [388])) "CALLCL.f":120 131 {*movsf_internal}
     (nil))
(insn 264 263 265 14 (set (reg:SI 0 ax [389])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":121 86 {*movsi_internal}
     (nil))
(insn 265 264 266 14 (set (reg:DI 0 ax [orig:191 _105 ] [191])
        (sign_extend:DI (reg:SI 0 ax [389]))) "CALLCL.f":121 149 {*extendsidi2_rex64}
     (nil))
(insn 266 265 267 14 (parallel [
            (set (reg:DI 1 dx [orig:192 _106 ] [192])
                (mult:DI (reg:DI 0 ax [orig:191 _105 ] [191])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":121 349 {*muldi3_1}
     (nil))
(insn 267 266 268 14 (set (reg:SI 0 ax [390])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":121 86 {*movsi_internal}
     (nil))
(insn 268 267 269 14 (set (reg:DI 0 ax [orig:193 _107 ] [193])
        (sign_extend:DI (reg:SI 0 ax [390]))) "CALLCL.f":121 149 {*extendsidi2_rex64}
     (nil))
(insn 269 268 270 14 (parallel [
            (set (reg:DI 0 ax [orig:194 _108 ] [194])
                (plus:DI (reg:DI 0 ax [orig:193 _107 ] [193])
                    (reg:DI 1 dx [orig:192 _106 ] [192])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":121 222 {*adddi_1}
     (nil))
(insn 270 269 271 14 (parallel [
            (set (reg:DI 1 dx [orig:195 _109 ] [195])
                (plus:DI (reg:DI 0 ax [orig:194 _108 ] [194])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":121 222 {*adddi_1}
     (nil))
(insn 271 270 272 14 (set (reg/f:DI 0 ax [391])
        (symbol_ref:DI ("loops_") [flags 0x202]  <var_decl 0x7f3d6bcc1630 loops>)) "CALLCL.f":121 85 {*movdi_internal}
     (nil))
(insn 272 271 273 14 (parallel [
            (set (reg:DI 1 dx [392])
                (plus:DI (reg:DI 1 dx [orig:195 _109 ] [195])
                    (const_int 2420 [0x974])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":121 222 {*adddi_1}
     (nil))
(insn 273 272 274 14 (set (reg:SI 0 ax [393])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [392])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [391])) [1 loops.lmh S4 A32])) "CALLCL.f":121 86 {*movsi_internal}
     (nil))
(insn 274 273 275 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [1 llmh+0 S4 A32])
        (reg:SI 0 ax [393])) "CALLCL.f":121 86 {*movsi_internal}
     (nil))
(insn 275 274 276 14 (set (reg:SI 0 ax [orig:313 _265 ] [313])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [1 llmh+0 S4 A32])) "CALLCL.f":123 86 {*movsi_internal}
     (nil))
(insn 276 275 481 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
        (reg:SI 0 ax [orig:313 _265 ] [313])) "CALLCL.f":123 86 {*movsi_internal}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;;              20 [always] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 314 394
(code_label 481 276 277 15 13 (nil) [1 uses])
(note 277 481 278 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 278 277 279 15 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
            (const_int 0 [0]))) "CALLCL.f":123 7 {*cmpsi_ccno_1}
     (nil))
(insn 279 278 280 15 (set (reg:QI 0 ax [394])
        (le:QI (reg:CCNO 17 flags)
            (const_int 0 [0]))) "CALLCL.f":123 678 {*setcc_qi}
     (nil))
(insn 280 279 281 15 (set (reg:SI 0 ax [orig:314 _267 ] [314])
        (zero_extend:SI (reg:QI 0 ax [394]))) "CALLCL.f":123 140 {*zero_extendqisi2}
     (nil))
(insn 281 280 282 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:314 _267 ] [314])
            (const_int 0 [0]))) "CALLCL.f":123 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 282 281 283 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 532)
            (pc))) "CALLCL.f":123 682 {*jcc}
     (nil)
 -> 532)
;;  succ:       28
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 196 197 198 199 200 201 202 203 204 395 396 397 398 399 400
(note 283 282 284 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 284 283 285 16 (set (reg:SI 0 ax [395])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALLCL.f":124 86 {*movsi_internal}
     (nil))
(insn 285 284 286 16 (set (reg:DI 0 ax [orig:196 _110 ] [196])
        (sign_extend:DI (reg:SI 0 ax [395]))) "CALLCL.f":124 149 {*extendsidi2_rex64}
     (nil))
(insn 286 285 287 16 (parallel [
            (set (reg:DI 1 dx [orig:197 _111 ] [197])
                (mult:DI (reg:DI 0 ax [orig:196 _110 ] [196])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":124 349 {*muldi3_1}
     (nil))
(insn 287 286 288 16 (set (reg:SI 0 ax [396])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":124 86 {*movsi_internal}
     (nil))
(insn 288 287 289 16 (set (reg:DI 0 ax [orig:198 _112 ] [198])
        (sign_extend:DI (reg:SI 0 ax [396]))) "CALLCL.f":124 149 {*extendsidi2_rex64}
     (nil))
(insn 289 288 290 16 (parallel [
            (set (reg:DI 0 ax [orig:199 _113 ] [199])
                (mult:DI (reg:DI 0 ax [orig:198 _112 ] [198])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":124 349 {*muldi3_1}
     (nil))
(insn 290 289 291 16 (parallel [
            (set (reg:DI 1 dx [orig:200 _114 ] [200])
                (plus:DI (reg:DI 1 dx [orig:197 _111 ] [197])
                    (reg:DI 0 ax [orig:199 _113 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":124 222 {*adddi_1}
     (nil))
(insn 291 290 292 16 (set (reg:SI 0 ax [397])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":124 86 {*movsi_internal}
     (nil))
(insn 292 291 293 16 (set (reg:DI 0 ax [orig:201 _115 ] [201])
        (sign_extend:DI (reg:SI 0 ax [397]))) "CALLCL.f":124 149 {*extendsidi2_rex64}
     (nil))
(insn 293 292 294 16 (parallel [
            (set (reg:DI 0 ax [orig:202 _116 ] [202])
                (plus:DI (reg:DI 0 ax [orig:201 _115 ] [201])
                    (reg:DI 1 dx [orig:200 _114 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":124 222 {*adddi_1}
     (nil))
(insn 294 293 295 16 (parallel [
            (set (reg:DI 1 dx [orig:203 _117 ] [203])
                (plus:DI (reg:DI 0 ax [orig:202 _116 ] [202])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":124 222 {*adddi_1}
     (nil))
(insn 295 294 296 16 (set (reg/f:DI 0 ax [398])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f3d6bcb8870 extra>)) "CALLCL.f":124 85 {*movdi_internal}
     (nil))
(insn 296 295 297 16 (parallel [
            (set (reg:DI 1 dx [399])
                (plus:DI (reg:DI 1 dx [orig:203 _117 ] [203])
                    (const_int 1155609 [0x11a219])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":124 222 {*adddi_1}
     (nil))
(insn 297 296 298 16 (set (reg:SF 22 xmm1 [orig:204 _118 ] [204])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [399])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [398])) [2 extra.alpint S4 A32])) "CALLCL.f":124 131 {*movsf_internal}
     (nil))
(insn 298 297 299 16 (set (reg:SF 21 xmm0 [400])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 alplcl+0 S4 A32])) "CALLCL.f":124 131 {*movsf_internal}
     (nil))
(insn 299 298 300 16 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [400])
            (reg:SF 22 xmm1 [orig:204 _118 ] [204]))) "CALLCL.f":124 53 {*cmpisf}
     (nil))
(jump_insn 300 299 304 16 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 510)
            (pc))) "CALLCL.f":124 682 {*jcc}
     (nil)
 -> 510)
;;  succ:       17 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 303 315 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455
(note 304 300 305 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 305 304 306 17 (set (reg:SI 0 ax [401])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALLCL.f":125 86 {*movsi_internal}
     (nil))
(insn 306 305 307 17 (parallel [
            (set (reg:SI 0 ax [orig:205 _119 ] [205])
                (plus:SI (reg:SI 0 ax [401])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":125 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 307 306 308 17 (set (reg:DI 0 ax [orig:206 _120 ] [206])
        (sign_extend:DI (reg:SI 0 ax [orig:205 _119 ] [205]))) "CALLCL.f":125 149 {*extendsidi2_rex64}
     (nil))
(insn 308 307 309 17 (parallel [
            (set (reg:DI 1 dx [orig:207 _121 ] [207])
                (mult:DI (reg:DI 0 ax [orig:206 _120 ] [206])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":125 349 {*muldi3_1}
     (nil))
(insn 309 308 310 17 (set (reg:SI 0 ax [402])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":125 86 {*movsi_internal}
     (nil))
(insn 310 309 311 17 (set (reg:DI 0 ax [orig:208 _122 ] [208])
        (sign_extend:DI (reg:SI 0 ax [402]))) "CALLCL.f":125 149 {*extendsidi2_rex64}
     (nil))
(insn 311 310 312 17 (parallel [
            (set (reg:DI 0 ax [orig:209 _123 ] [209])
                (mult:DI (reg:DI 0 ax [orig:208 _122 ] [208])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":125 349 {*muldi3_1}
     (nil))
(insn 312 311 313 17 (parallel [
            (set (reg:DI 1 dx [orig:210 _124 ] [210])
                (plus:DI (reg:DI 1 dx [orig:207 _121 ] [207])
                    (reg:DI 0 ax [orig:209 _123 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":125 222 {*adddi_1}
     (nil))
(insn 313 312 314 17 (set (reg:SI 0 ax [403])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":125 86 {*movsi_internal}
     (nil))
(insn 314 313 315 17 (set (reg:DI 0 ax [orig:211 _125 ] [211])
        (sign_extend:DI (reg:SI 0 ax [403]))) "CALLCL.f":125 149 {*extendsidi2_rex64}
     (nil))
(insn 315 314 316 17 (parallel [
            (set (reg:DI 0 ax [orig:212 _126 ] [212])
                (plus:DI (reg:DI 0 ax [orig:211 _125 ] [211])
                    (reg:DI 1 dx [orig:210 _124 ] [210])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":125 222 {*adddi_1}
     (nil))
(insn 316 315 317 17 (parallel [
            (set (reg:DI 1 dx [orig:213 _127 ] [213])
                (plus:DI (reg:DI 0 ax [orig:212 _126 ] [212])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":125 222 {*adddi_1}
     (nil))
(insn 317 316 318 17 (set (reg/f:DI 0 ax [404])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f3d6bcb8870 extra>)) "CALLCL.f":125 85 {*movdi_internal}
     (nil))
(insn 318 317 319 17 (parallel [
            (set (reg:DI 1 dx [405])
                (plus:DI (reg:DI 1 dx [orig:213 _127 ] [213])
                    (const_int 1155609 [0x11a219])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":125 222 {*adddi_1}
     (nil))
(insn 319 318 320 17 (set (reg:SF 22 xmm1 [orig:214 _128 ] [214])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [405])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [404])) [2 extra.alpint S4 A32])) "CALLCL.f":125 131 {*movsf_internal}
     (nil))
(insn 320 319 321 17 (set (reg:SF 21 xmm0 [407])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 alplcl+0 S4 A32])) "CALLCL.f":125 131 {*movsf_internal}
     (nil))
(insn 321 320 322 17 (set (reg:SF 21 xmm0 [406])
        (minus:SF (reg:SF 21 xmm0 [407])
            (reg:SF 22 xmm1 [orig:214 _128 ] [214]))) "CALLCL.f":125 841 {*fop_sf_1}
     (nil))
(insn 322 321 323 17 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 dlplcl+0 S4 A32])
        (reg:SF 21 xmm0 [406])) "CALLCL.f":125 131 {*movsf_internal}
     (nil))
(insn 323 322 324 17 (set (reg:SI 0 ax [408])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALLCL.f":126 86 {*movsi_internal}
     (nil))
(insn 324 323 325 17 (set (reg:DI 0 ax [orig:215 _129 ] [215])
        (sign_extend:DI (reg:SI 0 ax [408]))) "CALLCL.f":126 149 {*extendsidi2_rex64}
     (nil))
(insn 325 324 326 17 (parallel [
            (set (reg:DI 1 dx [orig:216 _130 ] [216])
                (mult:DI (reg:DI 0 ax [orig:215 _129 ] [215])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":126 349 {*muldi3_1}
     (nil))
(insn 326 325 327 17 (set (reg:SI 0 ax [409])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":126 86 {*movsi_internal}
     (nil))
(insn 327 326 328 17 (set (reg:DI 0 ax [orig:217 _131 ] [217])
        (sign_extend:DI (reg:SI 0 ax [409]))) "CALLCL.f":126 149 {*extendsidi2_rex64}
     (nil))
(insn 328 327 329 17 (parallel [
            (set (reg:DI 0 ax [orig:218 _132 ] [218])
                (mult:DI (reg:DI 0 ax [orig:217 _131 ] [217])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":126 349 {*muldi3_1}
     (nil))
(insn 329 328 330 17 (parallel [
            (set (reg:DI 1 dx [orig:219 _133 ] [219])
                (plus:DI (reg:DI 1 dx [orig:216 _130 ] [216])
                    (reg:DI 0 ax [orig:218 _132 ] [218])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":126 222 {*adddi_1}
     (nil))
(insn 330 329 331 17 (set (reg:SI 0 ax [410])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":126 86 {*movsi_internal}
     (nil))
(insn 331 330 332 17 (set (reg:DI 0 ax [orig:220 _134 ] [220])
        (sign_extend:DI (reg:SI 0 ax [410]))) "CALLCL.f":126 149 {*extendsidi2_rex64}
     (nil))
(insn 332 331 333 17 (parallel [
            (set (reg:DI 0 ax [orig:221 _135 ] [221])
                (plus:DI (reg:DI 0 ax [orig:220 _134 ] [220])
                    (reg:DI 1 dx [orig:219 _133 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":126 222 {*adddi_1}
     (nil))
(insn 333 332 334 17 (parallel [
            (set (reg:DI 1 dx [orig:222 _136 ] [222])
                (plus:DI (reg:DI 0 ax [orig:221 _135 ] [221])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":126 222 {*adddi_1}
     (nil))
(insn 334 333 335 17 (set (reg/f:DI 0 ax [411])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f3d6bcb8870 extra>)) "CALLCL.f":126 85 {*movdi_internal}
     (nil))
(insn 335 334 336 17 (parallel [
            (set (reg:DI 1 dx [412])
                (plus:DI (reg:DI 1 dx [orig:222 _136 ] [222])
                    (const_int 1155609 [0x11a219])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":126 222 {*adddi_1}
     (nil))
(insn 336 335 337 17 (set (reg:SF 21 xmm0 [orig:223 _137 ] [223])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [412])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [411])) [2 extra.alpint S4 A32])) "CALLCL.f":126 131 {*movsf_internal}
     (nil))
(insn 337 336 338 17 (set (reg:SI 0 ax [413])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALLCL.f":126 86 {*movsi_internal}
     (nil))
(insn 338 337 339 17 (parallel [
            (set (reg:SI 0 ax [orig:224 _138 ] [224])
                (plus:SI (reg:SI 0 ax [413])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":126 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 339 338 340 17 (set (reg:DI 0 ax [orig:225 _139 ] [225])
        (sign_extend:DI (reg:SI 0 ax [orig:224 _138 ] [224]))) "CALLCL.f":126 149 {*extendsidi2_rex64}
     (nil))
(insn 340 339 341 17 (parallel [
            (set (reg:DI 1 dx [orig:226 _140 ] [226])
                (mult:DI (reg:DI 0 ax [orig:225 _139 ] [225])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":126 349 {*muldi3_1}
     (nil))
(insn 341 340 342 17 (set (reg:SI 0 ax [414])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":126 86 {*movsi_internal}
     (nil))
(insn 342 341 343 17 (set (reg:DI 0 ax [orig:227 _141 ] [227])
        (sign_extend:DI (reg:SI 0 ax [414]))) "CALLCL.f":126 149 {*extendsidi2_rex64}
     (nil))
(insn 343 342 344 17 (parallel [
            (set (reg:DI 0 ax [orig:228 _142 ] [228])
                (mult:DI (reg:DI 0 ax [orig:227 _141 ] [227])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":126 349 {*muldi3_1}
     (nil))
(insn 344 343 345 17 (parallel [
            (set (reg:DI 1 dx [orig:229 _143 ] [229])
                (plus:DI (reg:DI 1 dx [orig:226 _140 ] [226])
                    (reg:DI 0 ax [orig:228 _142 ] [228])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":126 222 {*adddi_1}
     (nil))
(insn 345 344 346 17 (set (reg:SI 0 ax [415])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":126 86 {*movsi_internal}
     (nil))
(insn 346 345 347 17 (set (reg:DI 0 ax [orig:230 _144 ] [230])
        (sign_extend:DI (reg:SI 0 ax [415]))) "CALLCL.f":126 149 {*extendsidi2_rex64}
     (nil))
(insn 347 346 348 17 (parallel [
            (set (reg:DI 0 ax [orig:231 _145 ] [231])
                (plus:DI (reg:DI 0 ax [orig:230 _144 ] [230])
                    (reg:DI 1 dx [orig:229 _143 ] [229])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":126 222 {*adddi_1}
     (nil))
(insn 348 347 349 17 (parallel [
            (set (reg:DI 1 dx [orig:232 _146 ] [232])
                (plus:DI (reg:DI 0 ax [orig:231 _145 ] [231])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":126 222 {*adddi_1}
     (nil))
(insn 349 348 350 17 (set (reg/f:DI 0 ax [416])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f3d6bcb8870 extra>)) "CALLCL.f":126 85 {*movdi_internal}
     (nil))
(insn 350 349 351 17 (parallel [
            (set (reg:DI 1 dx [417])
                (plus:DI (reg:DI 1 dx [orig:232 _146 ] [232])
                    (const_int 1155609 [0x11a219])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":126 222 {*adddi_1}
     (nil))
(insn 351 350 352 17 (set (reg:SF 22 xmm1 [orig:233 _147 ] [233])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [417])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [416])) [2 extra.alpint S4 A32])) "CALLCL.f":126 131 {*movsf_internal}
     (nil))
(insn 352 351 353 17 (set (reg:SF 21 xmm0 [418])
        (minus:SF (reg:SF 21 xmm0 [orig:223 _137 ] [223])
            (reg:SF 22 xmm1 [orig:233 _147 ] [233]))) "CALLCL.f":126 841 {*fop_sf_1}
     (nil))
(insn 353 352 354 17 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [2 dalp+0 S4 A32])
        (reg:SF 21 xmm0 [418])) "CALLCL.f":126 131 {*movsf_internal}
     (nil))
(insn 354 353 355 17 (set (reg:SI 0 ax [419])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALLCL.f":127 86 {*movsi_internal}
     (nil))
(insn 355 354 356 17 (set (reg:DI 0 ax [orig:234 _148 ] [234])
        (sign_extend:DI (reg:SI 0 ax [419]))) "CALLCL.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 356 355 357 17 (parallel [
            (set (reg:DI 1 dx [orig:235 _149 ] [235])
                (mult:DI (reg:DI 0 ax [orig:234 _148 ] [234])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":127 349 {*muldi3_1}
     (nil))
(insn 357 356 358 17 (set (reg:SI 0 ax [420])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":127 86 {*movsi_internal}
     (nil))
(insn 358 357 359 17 (set (reg:DI 0 ax [orig:236 _150 ] [236])
        (sign_extend:DI (reg:SI 0 ax [420]))) "CALLCL.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 359 358 360 17 (parallel [
            (set (reg:DI 0 ax [orig:237 _151 ] [237])
                (mult:DI (reg:DI 0 ax [orig:236 _150 ] [236])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":127 349 {*muldi3_1}
     (nil))
(insn 360 359 361 17 (parallel [
            (set (reg:DI 1 dx [orig:238 _152 ] [238])
                (plus:DI (reg:DI 1 dx [orig:235 _149 ] [235])
                    (reg:DI 0 ax [orig:237 _151 ] [237])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":127 222 {*adddi_1}
     (nil))
(insn 361 360 362 17 (set (reg:SI 0 ax [421])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":127 86 {*movsi_internal}
     (nil))
(insn 362 361 363 17 (set (reg:DI 0 ax [orig:239 _153 ] [239])
        (sign_extend:DI (reg:SI 0 ax [421]))) "CALLCL.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 363 362 364 17 (parallel [
            (set (reg:DI 0 ax [orig:240 _154 ] [240])
                (plus:DI (reg:DI 0 ax [orig:239 _153 ] [239])
                    (reg:DI 1 dx [orig:238 _152 ] [238])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":127 222 {*adddi_1}
     (nil))
(insn 364 363 365 17 (parallel [
            (set (reg:DI 1 dx [orig:241 _155 ] [241])
                (plus:DI (reg:DI 0 ax [orig:240 _154 ] [240])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":127 222 {*adddi_1}
     (nil))
(insn 365 364 366 17 (set (reg/f:DI 0 ax [422])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f3d6bcb8870 extra>)) "CALLCL.f":127 85 {*movdi_internal}
     (nil))
(insn 366 365 367 17 (parallel [
            (set (reg:DI 1 dx [423])
                (plus:DI (reg:DI 1 dx [orig:241 _155 ] [241])
                    (const_int 2311218 [0x234432])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":127 222 {*adddi_1}
     (nil))
(insn 367 366 368 17 (set (reg:SF 21 xmm0 [orig:242 _156 ] [242])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [423])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [422])) [2 extra.zint S4 A32])) "CALLCL.f":127 131 {*movsf_internal}
     (nil))
(insn 368 367 369 17 (set (reg:SI 0 ax [424])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALLCL.f":127 86 {*movsi_internal}
     (nil))
(insn 369 368 370 17 (parallel [
            (set (reg:SI 0 ax [orig:243 _157 ] [243])
                (plus:SI (reg:SI 0 ax [424])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":127 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 370 369 371 17 (set (reg:DI 0 ax [orig:244 _158 ] [244])
        (sign_extend:DI (reg:SI 0 ax [orig:243 _157 ] [243]))) "CALLCL.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 371 370 372 17 (parallel [
            (set (reg:DI 1 dx [orig:245 _159 ] [245])
                (mult:DI (reg:DI 0 ax [orig:244 _158 ] [244])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":127 349 {*muldi3_1}
     (nil))
(insn 372 371 373 17 (set (reg:SI 0 ax [425])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":127 86 {*movsi_internal}
     (nil))
(insn 373 372 374 17 (set (reg:DI 0 ax [orig:246 _160 ] [246])
        (sign_extend:DI (reg:SI 0 ax [425]))) "CALLCL.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 374 373 375 17 (parallel [
            (set (reg:DI 0 ax [orig:247 _161 ] [247])
                (mult:DI (reg:DI 0 ax [orig:246 _160 ] [246])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":127 349 {*muldi3_1}
     (nil))
(insn 375 374 376 17 (parallel [
            (set (reg:DI 1 dx [orig:248 _162 ] [248])
                (plus:DI (reg:DI 1 dx [orig:245 _159 ] [245])
                    (reg:DI 0 ax [orig:247 _161 ] [247])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":127 222 {*adddi_1}
     (nil))
(insn 376 375 377 17 (set (reg:SI 0 ax [426])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":127 86 {*movsi_internal}
     (nil))
(insn 377 376 378 17 (set (reg:DI 0 ax [orig:249 _163 ] [249])
        (sign_extend:DI (reg:SI 0 ax [426]))) "CALLCL.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 378 377 379 17 (parallel [
            (set (reg:DI 0 ax [orig:250 _164 ] [250])
                (plus:DI (reg:DI 0 ax [orig:249 _163 ] [249])
                    (reg:DI 1 dx [orig:248 _162 ] [248])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":127 222 {*adddi_1}
     (nil))
(insn 379 378 380 17 (parallel [
            (set (reg:DI 1 dx [orig:251 _165 ] [251])
                (plus:DI (reg:DI 0 ax [orig:250 _164 ] [250])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":127 222 {*adddi_1}
     (nil))
(insn 380 379 381 17 (set (reg/f:DI 0 ax [427])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f3d6bcb8870 extra>)) "CALLCL.f":127 85 {*movdi_internal}
     (nil))
(insn 381 380 382 17 (parallel [
            (set (reg:DI 1 dx [428])
                (plus:DI (reg:DI 1 dx [orig:251 _165 ] [251])
                    (const_int 2311218 [0x234432])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":127 222 {*adddi_1}
     (nil))
(insn 382 381 383 17 (set (reg:SF 22 xmm1 [orig:252 _166 ] [252])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [428])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [427])) [2 extra.zint S4 A32])) "CALLCL.f":127 131 {*movsf_internal}
     (nil))
(insn 383 382 384 17 (set (reg:SF 21 xmm0 [429])
        (minus:SF (reg:SF 21 xmm0 [orig:242 _156 ] [242])
            (reg:SF 22 xmm1 [orig:252 _166 ] [252]))) "CALLCL.f":127 841 {*fop_sf_1}
     (nil))
(insn 384 383 385 17 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 dz+0 S4 A32])
        (reg:SF 21 xmm0 [429])) "CALLCL.f":127 131 {*movsf_internal}
     (nil))
(insn 385 384 386 17 (set (reg:SI 0 ax [430])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALLCL.f":128 86 {*movsi_internal}
     (nil))
(insn 386 385 387 17 (parallel [
            (set (reg:SI 0 ax [orig:253 _167 ] [253])
                (plus:SI (reg:SI 0 ax [430])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":128 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 387 386 388 17 (set (reg:DI 0 ax [orig:254 _168 ] [254])
        (sign_extend:DI (reg:SI 0 ax [orig:253 _167 ] [253]))) "CALLCL.f":128 149 {*extendsidi2_rex64}
     (nil))
(insn 388 387 389 17 (parallel [
            (set (reg:DI 1 dx [orig:255 _169 ] [255])
                (mult:DI (reg:DI 0 ax [orig:254 _168 ] [254])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":128 349 {*muldi3_1}
     (nil))
(insn 389 388 390 17 (set (reg:SI 0 ax [431])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":128 86 {*movsi_internal}
     (nil))
(insn 390 389 391 17 (set (reg:DI 0 ax [orig:256 _170 ] [256])
        (sign_extend:DI (reg:SI 0 ax [431]))) "CALLCL.f":128 149 {*extendsidi2_rex64}
     (nil))
(insn 391 390 392 17 (parallel [
            (set (reg:DI 0 ax [orig:257 _171 ] [257])
                (mult:DI (reg:DI 0 ax [orig:256 _170 ] [256])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":128 349 {*muldi3_1}
     (nil))
(insn 392 391 393 17 (parallel [
            (set (reg:DI 1 dx [orig:258 _172 ] [258])
                (plus:DI (reg:DI 1 dx [orig:255 _169 ] [255])
                    (reg:DI 0 ax [orig:257 _171 ] [257])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":128 222 {*adddi_1}
     (nil))
(insn 393 392 394 17 (set (reg:SI 0 ax [432])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":128 86 {*movsi_internal}
     (nil))
(insn 394 393 395 17 (set (reg:DI 0 ax [orig:259 _173 ] [259])
        (sign_extend:DI (reg:SI 0 ax [432]))) "CALLCL.f":128 149 {*extendsidi2_rex64}
     (nil))
(insn 395 394 396 17 (parallel [
            (set (reg:DI 0 ax [orig:260 _174 ] [260])
                (plus:DI (reg:DI 0 ax [orig:259 _173 ] [259])
                    (reg:DI 1 dx [orig:258 _172 ] [258])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":128 222 {*adddi_1}
     (nil))
(insn 396 395 397 17 (parallel [
            (set (reg:DI 1 dx [orig:261 _175 ] [261])
                (plus:DI (reg:DI 0 ax [orig:260 _174 ] [260])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":128 222 {*adddi_1}
     (nil))
(insn 397 396 398 17 (set (reg/f:DI 0 ax [433])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f3d6bcb8870 extra>)) "CALLCL.f":128 85 {*movdi_internal}
     (nil))
(insn 398 397 399 17 (parallel [
            (set (reg:DI 1 dx [434])
                (plus:DI (reg:DI 1 dx [orig:261 _175 ] [261])
                    (const_int 2311218 [0x234432])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":128 222 {*adddi_1}
     (nil))
(insn 399 398 400 17 (set (reg:SF 22 xmm1 [orig:262 _176 ] [262])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [434])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [433])) [2 extra.zint S4 A32])) "CALLCL.f":128 131 {*movsf_internal}
     (nil))
(insn 400 399 401 17 (set (reg:SF 21 xmm0 [435])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 dz+0 S4 A32])) "CALLCL.f":128 131 {*movsf_internal}
     (nil))
(insn 401 400 402 17 (set (reg:SF 21 xmm0 [orig:263 _177 ] [263])
        (mult:SF (reg:SF 21 xmm0 [435])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [2 dlplcl+0 S4 A32]))) "CALLCL.f":128 838 {*fop_sf_comm}
     (nil))
(insn 402 401 403 17 (set (reg:SF 21 xmm0 [orig:264 _178 ] [264])
        (div:SF (reg:SF 21 xmm0 [orig:263 _177 ] [263])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [2 dalp+0 S4 A32]))) "CALLCL.f":128 841 {*fop_sf_1}
     (nil))
(insn 403 402 404 17 (set (reg:SI 0 ax [436])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":128 86 {*movsi_internal}
     (nil))
(insn 404 403 405 17 (set (reg:DI 0 ax [orig:265 _179 ] [265])
        (sign_extend:DI (reg:SI 0 ax [436]))) "CALLCL.f":128 149 {*extendsidi2_rex64}
     (nil))
(insn 405 404 406 17 (parallel [
            (set (reg:DI 1 dx [orig:266 _180 ] [266])
                (mult:DI (reg:DI 0 ax [orig:265 _179 ] [265])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":128 349 {*muldi3_1}
     (nil))
(insn 406 405 407 17 (set (reg:SI 0 ax [437])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":128 86 {*movsi_internal}
     (nil))
(insn 407 406 408 17 (set (reg:DI 0 ax [orig:267 _181 ] [267])
        (sign_extend:DI (reg:SI 0 ax [437]))) "CALLCL.f":128 149 {*extendsidi2_rex64}
     (nil))
(insn 408 407 409 17 (parallel [
            (set (reg:DI 0 ax [orig:268 _182 ] [268])
                (plus:DI (reg:DI 0 ax [orig:267 _181 ] [267])
                    (reg:DI 1 dx [orig:266 _180 ] [266])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":128 222 {*adddi_1}
     (nil))
(insn 409 408 410 17 (parallel [
            (set (reg:DI 1 dx [orig:269 _183 ] [269])
                (plus:DI (reg:DI 0 ax [orig:268 _182 ] [268])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":128 222 {*adddi_1}
     (nil))
(insn 410 409 411 17 (set (reg:SF 21 xmm0 [orig:270 _184 ] [270])
        (plus:SF (reg:SF 21 xmm0 [orig:264 _178 ] [264])
            (reg:SF 22 xmm1 [orig:262 _176 ] [262]))) "CALLCL.f":128 838 {*fop_sf_comm}
     (nil))
(insn 411 410 412 17 (set (reg/f:DI 0 ax [438])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 zlcl+0 S8 A64])) "CALLCL.f":128 85 {*movdi_internal}
     (nil))
(insn 412 411 413 17 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:269 _183 ] [269])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [438])) [2 *zlcl_238(D) S4 A32])
        (reg:SF 21 xmm0 [orig:270 _184 ] [270])) "CALLCL.f":128 131 {*movsf_internal}
     (nil))
(insn 413 412 414 17 (set (reg:SI 0 ax [439])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":129 86 {*movsi_internal}
     (nil))
(insn 414 413 415 17 (set (reg:DI 0 ax [orig:271 _185 ] [271])
        (sign_extend:DI (reg:SI 0 ax [439]))) "CALLCL.f":129 149 {*extendsidi2_rex64}
     (nil))
(insn 415 414 416 17 (parallel [
            (set (reg:DI 1 dx [orig:272 _186 ] [272])
                (mult:DI (reg:DI 0 ax [orig:271 _185 ] [271])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":129 349 {*muldi3_1}
     (nil))
(insn 416 415 417 17 (set (reg:SI 0 ax [440])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":129 86 {*movsi_internal}
     (nil))
(insn 417 416 418 17 (set (reg:DI 0 ax [orig:273 _187 ] [273])
        (sign_extend:DI (reg:SI 0 ax [440]))) "CALLCL.f":129 149 {*extendsidi2_rex64}
     (nil))
(insn 418 417 419 17 (parallel [
            (set (reg:DI 0 ax [orig:274 _188 ] [274])
                (plus:DI (reg:DI 0 ax [orig:273 _187 ] [273])
                    (reg:DI 1 dx [orig:272 _186 ] [272])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":129 222 {*adddi_1}
     (nil))
(insn 419 418 420 17 (parallel [
            (set (reg:DI 1 dx [orig:275 _189 ] [275])
                (plus:DI (reg:DI 0 ax [orig:274 _188 ] [274])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":129 222 {*adddi_1}
     (nil))
(insn 420 419 421 17 (set (reg/f:DI 0 ax [441])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f3d6bcc6750 vrbls>)) "CALLCL.f":129 85 {*movdi_internal}
     (nil))
(insn 421 420 422 17 (parallel [
            (set (reg:DI 1 dx [442])
                (plus:DI (reg:DI 1 dx [orig:275 _189 ] [275])
                    (const_int 59262 [0xe77e])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":129 222 {*adddi_1}
     (nil))
(insn 422 421 423 17 (set (reg:SF 22 xmm1 [orig:276 _190 ] [276])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [442])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [441])) [2 vrbls.fis S4 A32])) "CALLCL.f":129 131 {*movsf_internal}
     (nil))
(insn 423 422 424 17 (set (reg:SF 21 xmm0 [444])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S4 A32])) "CALLCL.f":129 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0204081237316131591796875e-1 [0x0.d0fac6p-3])
        (nil)))
(insn 424 423 425 17 (set (reg:SF 21 xmm0 [443])
        (mult:SF (reg:SF 21 xmm0 [444])
            (reg:SF 22 xmm1 [orig:276 _190 ] [276]))) "CALLCL.f":129 838 {*fop_sf_comm}
     (nil))
(insn 425 424 426 17 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [2 zsfc+0 S4 A32])
        (reg:SF 21 xmm0 [443])) "CALLCL.f":129 131 {*movsf_internal}
     (nil))
(insn 426 425 427 17 (set (reg:SI 0 ax [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":130 86 {*movsi_internal}
     (nil))
(insn 427 426 428 17 (set (reg:DI 0 ax [orig:277 _191 ] [277])
        (sign_extend:DI (reg:SI 0 ax [445]))) "CALLCL.f":130 149 {*extendsidi2_rex64}
     (nil))
(insn 428 427 429 17 (parallel [
            (set (reg:DI 1 dx [orig:278 _192 ] [278])
                (mult:DI (reg:DI 0 ax [orig:277 _191 ] [277])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":130 349 {*muldi3_1}
     (nil))
(insn 429 428 430 17 (set (reg:SI 0 ax [446])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":130 86 {*movsi_internal}
     (nil))
(insn 430 429 431 17 (set (reg:DI 0 ax [orig:279 _193 ] [279])
        (sign_extend:DI (reg:SI 0 ax [446]))) "CALLCL.f":130 149 {*extendsidi2_rex64}
     (nil))
(insn 431 430 432 17 (parallel [
            (set (reg:DI 0 ax [orig:280 _194 ] [280])
                (plus:DI (reg:DI 0 ax [orig:279 _193 ] [279])
                    (reg:DI 1 dx [orig:278 _192 ] [278])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":130 222 {*adddi_1}
     (nil))
(insn 432 431 433 17 (parallel [
            (set (reg:DI 1 dx [orig:281 _195 ] [281])
                (plus:DI (reg:DI 0 ax [orig:280 _194 ] [280])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":130 222 {*adddi_1}
     (nil))
(insn 433 432 434 17 (set (reg/f:DI 0 ax [447])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 zlcl+0 S8 A64])) "CALLCL.f":130 85 {*movdi_internal}
     (nil))
(insn 434 433 435 17 (set (reg:SF 21 xmm0 [orig:282 _196 ] [282])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:281 _195 ] [281])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [447])) [2 *zlcl_238(D) S4 A32])) "CALLCL.f":130 131 {*movsf_internal}
     (nil))
(insn 435 434 436 17 (set (reg:SI 0 ax [448])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":130 86 {*movsi_internal}
     (nil))
(insn 436 435 437 17 (set (reg:DI 0 ax [orig:283 _197 ] [283])
        (sign_extend:DI (reg:SI 0 ax [448]))) "CALLCL.f":130 149 {*extendsidi2_rex64}
     (nil))
(insn 437 436 438 17 (parallel [
            (set (reg:DI 1 dx [orig:284 _198 ] [284])
                (mult:DI (reg:DI 0 ax [orig:283 _197 ] [283])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":130 349 {*muldi3_1}
     (nil))
(insn 438 437 439 17 (set (reg:SI 0 ax [449])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":130 86 {*movsi_internal}
     (nil))
(insn 439 438 440 17 (set (reg:DI 0 ax [orig:285 _199 ] [285])
        (sign_extend:DI (reg:SI 0 ax [449]))) "CALLCL.f":130 149 {*extendsidi2_rex64}
     (nil))
(insn 440 439 441 17 (parallel [
            (set (reg:DI 0 ax [orig:286 _200 ] [286])
                (plus:DI (reg:DI 0 ax [orig:285 _199 ] [285])
                    (reg:DI 1 dx [orig:284 _198 ] [284])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":130 222 {*adddi_1}
     (nil))
(insn 441 440 442 17 (parallel [
            (set (reg:DI 1 dx [orig:287 _201 ] [287])
                (plus:DI (reg:DI 0 ax [orig:286 _200 ] [286])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":130 222 {*adddi_1}
     (nil))
(insn 442 441 443 17 (set (reg:SF 21 xmm0 [orig:288 _202 ] [288])
        (minus:SF (reg:SF 21 xmm0 [orig:282 _196 ] [282])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [2 zsfc+0 S4 A32]))) "CALLCL.f":130 841 {*fop_sf_1}
     (nil))
(insn 443 442 444 17 (set (reg/f:DI 0 ax [450])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 zlcl+0 S8 A64])) "CALLCL.f":130 85 {*movdi_internal}
     (nil))
(insn 444 443 445 17 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:287 _201 ] [287])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [450])) [2 *zlcl_238(D) S4 A32])
        (reg:SF 21 xmm0 [orig:288 _202 ] [288])) "CALLCL.f":130 131 {*movsf_internal}
     (nil))
(insn 445 444 446 17 (set (reg:SF 21 xmm0 [orig:303 M.1_222 ] [303])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S4 A32])) "CALLCL.f":131 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 446 445 447 17 (set (reg:SI 0 ax [451])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":131 86 {*movsi_internal}
     (nil))
(insn 447 446 448 17 (set (reg:DI 0 ax [orig:289 _203 ] [289])
        (sign_extend:DI (reg:SI 0 ax [451]))) "CALLCL.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 448 447 449 17 (parallel [
            (set (reg:DI 1 dx [orig:290 _204 ] [290])
                (mult:DI (reg:DI 0 ax [orig:289 _203 ] [289])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":131 349 {*muldi3_1}
     (nil))
(insn 449 448 450 17 (set (reg:SI 0 ax [452])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":131 86 {*movsi_internal}
     (nil))
(insn 450 449 451 17 (set (reg:DI 0 ax [orig:291 _205 ] [291])
        (sign_extend:DI (reg:SI 0 ax [452]))) "CALLCL.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 451 450 452 17 (parallel [
            (set (reg:DI 0 ax [orig:292 _206 ] [292])
                (plus:DI (reg:DI 0 ax [orig:291 _205 ] [291])
                    (reg:DI 1 dx [orig:290 _204 ] [290])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":131 222 {*adddi_1}
     (nil))
(insn 452 451 453 17 (parallel [
            (set (reg:DI 1 dx [orig:293 _207 ] [293])
                (plus:DI (reg:DI 0 ax [orig:292 _206 ] [292])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":131 222 {*adddi_1}
     (nil))
(insn 453 452 454 17 (set (reg/f:DI 0 ax [453])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 zlcl+0 S8 A64])) "CALLCL.f":131 85 {*movdi_internal}
     (nil))
(insn 454 453 455 17 (set (reg:SF 22 xmm1 [orig:315 _275 ] [315])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:293 _207 ] [293])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [453])) [2 *zlcl_238(D) S4 A32])) "CALLCL.f":131 131 {*movsf_internal}
     (nil))
(insn 455 454 456 17 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 22 xmm1 [orig:315 _275 ] [315])
            (reg:SF 21 xmm0 [orig:303 M.1_222 ] [303]))) "CALLCL.f":131 53 {*cmpisf}
     (nil))
(insn 456 455 457 17 (set (reg:QI 0 ax [454])
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "CALLCL.f":131 678 {*setcc_qi}
     (nil))
(insn 457 456 458 17 (set (reg:SI 1 dx [orig:294 _208 ] [294])
        (zero_extend:SI (reg:QI 0 ax [454]))) "CALLCL.f":131 140 {*zero_extendqisi2}
     (nil))
(insn 458 457 459 17 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [orig:303 M.1_222 ] [303])
                    (reg:SF 21 xmm0 [orig:303 M.1_222 ] [303]))
            ] UNSPEC_NOTRAP)) "CALLCL.f":131 54 {*cmpiusf}
     (nil))
(insn 459 458 460 17 (set (reg:QI 0 ax [455])
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "CALLCL.f":131 678 {*setcc_qi}
     (nil))
(insn 460 459 461 17 (set (reg:SI 0 ax [orig:295 _209 ] [295])
        (zero_extend:SI (reg:QI 0 ax [455]))) "CALLCL.f":131 140 {*zero_extendqisi2}
     (nil))
(insn 461 460 462 17 (parallel [
            (set (reg:SI 0 ax [orig:296 _210 ] [296])
                (ior:SI (reg:SI 0 ax [orig:295 _209 ] [295])
                    (reg:SI 1 dx [orig:294 _208 ] [294])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":131 450 {*iorsi_1}
     (nil))
(insn 462 461 463 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:296 _210 ] [296])
            (const_int 0 [0]))) "CALLCL.f":131 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 463 462 464 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 465)
            (pc))) "CALLCL.f":131 682 {*jcc}
     (nil)
 -> 465)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 303 309 315

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309 315
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 315
;; lr  def 	 303
(note 464 463 8 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 8 464 465 18 (set (reg:SF 21 xmm0 [orig:303 M.1_222 ] [303])
        (reg:SF 22 xmm1 [orig:315 _275 ] [315])) "CALLCL.f":131 131 {*movsf_internal}
     (nil))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 303 309

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       17
;;              18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 303 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 303
;; lr  def 	 17 [flags] 297 298 299 300 301 456 457 458
(code_label 465 8 466 19 12 (nil) [1 uses])
(note 466 465 467 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 467 466 468 19 (set (reg:SI 0 ax [456])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALLCL.f":131 86 {*movsi_internal}
     (nil))
(insn 468 467 469 19 (set (reg:DI 0 ax [orig:297 _211 ] [297])
        (sign_extend:DI (reg:SI 0 ax [456]))) "CALLCL.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 469 468 470 19 (parallel [
            (set (reg:DI 1 dx [orig:298 _212 ] [298])
                (mult:DI (reg:DI 0 ax [orig:297 _211 ] [297])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":131 349 {*muldi3_1}
     (nil))
(insn 470 469 471 19 (set (reg:SI 0 ax [457])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALLCL.f":131 86 {*movsi_internal}
     (nil))
(insn 471 470 472 19 (set (reg:DI 0 ax [orig:299 _213 ] [299])
        (sign_extend:DI (reg:SI 0 ax [457]))) "CALLCL.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 472 471 473 19 (parallel [
            (set (reg:DI 0 ax [orig:300 _214 ] [300])
                (plus:DI (reg:DI 0 ax [orig:299 _213 ] [299])
                    (reg:DI 1 dx [orig:298 _212 ] [298])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":131 222 {*adddi_1}
     (nil))
(insn 473 472 474 19 (parallel [
            (set (reg:DI 1 dx [orig:301 _215 ] [301])
                (plus:DI (reg:DI 0 ax [orig:300 _214 ] [300])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":131 222 {*adddi_1}
     (nil))
(insn 474 473 475 19 (set (reg/f:DI 0 ax [458])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 zlcl+0 S8 A64])) "CALLCL.f":131 85 {*movdi_internal}
     (nil))
(insn 475 474 511 19 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:301 _215 ] [301])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [458])) [2 *zlcl_238(D) S4 A32])
        (reg:SF 21 xmm0 [orig:303 M.1_222 ] [303])) "CALLCL.f":131 131 {*movsf_internal}
     (nil))
(jump_insn 511 475 512 19 (set (pc)
        (label_ref 484)) "CALLCL.f":138 683 {jump}
     (nil)
 -> 484)
;;  succ:       21 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309

(barrier 512 511 510)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 28, flags: (RTL, MODIFIED)
;;  pred:       16
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 510 512 479 20 18 (nil) [1 uses])
(note 479 510 480 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 480 479 513 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":123 221 {*addsi_1}
     (nil))
(jump_insn 513 480 514 20 (set (pc)
        (label_ref 481)) "CALLCL.f":123 683 {jump}
     (nil)
 -> 481)
;;  succ:       15 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309

(barrier 514 513 532)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 20, next block 21, flags: (RTL, MODIFIED)
;;  pred:       15
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 532 514 531 28 23 (nil) [1 uses])
(note 531 532 533 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 533 531 484 28 (const_int 0 [0]) "CALLCL.f":124 718 {nop}
     (nil))
;;  succ:       21 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309

;; basic block 21, loop depth 0, maybe hot
;;  prev block 28, next block 27, flags: (RTL, MODIFIED)
;;  pred:       28 [always]  (FALLTHRU)
;;              19 [always] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 484 533 485 21 9 (nil) [1 uses])
(note 485 484 486 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 486 485 515 21 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":110 221 {*addsi_1}
     (nil))
(jump_insn 515 486 516 21 (set (pc)
        (label_ref 487)) "CALLCL.f":110 683 {jump}
     (nil)
 -> 487)
;;  succ:       11 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309

(barrier 516 515 529)
;; basic block 27, loop depth 0, maybe hot
;;  prev block 21, next block 22, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 529 516 528 27 22 (nil) [1 uses])
(note 528 529 530 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 530 528 490 27 (const_int 0 [0]) "CALLCL.f":123 718 {nop}
     (nil))
;;  succ:       22 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309

;; basic block 22, loop depth 0, maybe hot
;;  prev block 27, next block 26, flags: (RTL, MODIFIED)
;;  pred:       27 [always]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 490 530 491 22 7 (nil) [0 uses])
(note 491 490 492 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 492 491 517 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALLCL.f":109 221 {*addsi_1}
     (nil))
(jump_insn 517 492 518 22 (set (pc)
        (label_ref 493)) "CALLCL.f":109 683 {jump}
     (nil)
 -> 493)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 309

(barrier 518 517 526)
;; basic block 26, loop depth 0, maybe hot
;;  prev block 22, next block 23, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 526 518 525 26 21 (nil) [1 uses])
(note 525 526 527 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 527 525 496 26 (const_int 0 [0]) "CALLCL.f":110 718 {nop}
     (nil))
;;  succ:       23 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 26, next block 1, flags: (RTL, MODIFIED)
;;  pred:       26 [always]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 496 527 497 23 6 (nil) [0 uses])
(note 497 496 505 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 505 497 534 23 (const_int 0 [0]) "CALLCL.f":146 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 534 505 0 NOTE_INSN_DELETED)
