
;; Function calhpbl (calhpbl_, funcdef_no=0, decl_uid=3769, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 25:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 28
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 29:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 39:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=217 from oldreg=174, assigning class GENERAL_REGS to r217
   39: {r217:SI=r217:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  267: r217:SI=r173:SI
    Inserting insn reload after:
  268: r174:SI=r217:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 53:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 61:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 64:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 65:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 75:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 82:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 89
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 90:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 93:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 114:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 123:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 126:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 130
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 131:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 132:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 134:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 135:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) v  (1) vm {*cmpisf}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 142:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 147:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 150:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 154
	 Choosing alt 0 in insn 154:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 155:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 156:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 158:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 160:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 162:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 165:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 169
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 170:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 171:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 172:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 173:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 176:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 179
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 180:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 181:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 183:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 184:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 191:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 193:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 194:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 200
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*iorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 208:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 211
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 212:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 213:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 214:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 215:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 221:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 7 8 9 10
EBB 11 12
EBB 13
EBB 14
EBB 24
EBB 25
EBB 15 16
EBB 17 18
EBB 19
EBB 23
EBB 20
EBB 22
EBB 21

********** Pseudo live ranges #1: **********

  BB 21
   Insn 240: point = 0, n_alt = -1
  BB 22
   Insn 254: point = 0, n_alt = -1
  BB 3
   Insn 13: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 1, n_alt = 0
   Insn 10: point = 3, n_alt = 0
   Insn 9: point = 4, n_alt = 0
  BB 20
   Insn 250: point = 4, n_alt = -1
   Insn 221: point = 4, n_alt = 1
  BB 23
   Insn 257: point = 4, n_alt = -1
  BB 5
   Insn 21: point = 4, n_alt = -1
   Insn 20: point = 4, n_alt = 0
   Insn 19: point = 5, n_alt = 0
   Insn 18: point = 7, n_alt = 0
   Insn 17: point = 8, n_alt = 0
  BB 19
   Insn 248: point = 8, n_alt = -1
   Insn 215: point = 8, n_alt = 1
   Insn 214: point = 8, n_alt = 8
   Insn 213: point = 9, n_alt = 3
   Insn 212: point = 10, n_alt = 3
   Insn 211: point = 12, n_alt = 0
   Insn 210: point = 14, n_alt = 0
   Insn 209: point = 16, n_alt = 0
   Insn 208: point = 17, n_alt = 0
   Insn 207: point = 19, n_alt = 0
   Insn 206: point = 21, n_alt = 0
  BB 18
   Insn 4: point = 23, n_alt = -2
  BB 17
   Insn 202: point = 26, n_alt = -1
   Insn 201: point = 26, n_alt = 0
   Insn 200: point = 27, n_alt = 0
   Insn 199: point = 29, n_alt = 0
   Insn 198: point = 31, n_alt = 0
   Insn 197: point = 32, n_alt = 1
   Insn 196: point = 32, n_alt = 0
   Insn 195: point = 34, n_alt = 0
   Insn 194: point = 35, n_alt = 1
   Insn 193: point = 35, n_alt = 7
   Insn 192: point = 37, n_alt = 3
   Insn 191: point = 38, n_alt = 3
   Insn 190: point = 40, n_alt = 0
   Insn 189: point = 42, n_alt = 0
   Insn 188: point = 44, n_alt = 0
   Insn 187: point = 45, n_alt = 0
   Insn 186: point = 47, n_alt = 0
   Insn 185: point = 49, n_alt = 0
   Insn 184: point = 50, n_alt = 7
   Insn 183: point = 51, n_alt = 8
   Insn 182: point = 52, n_alt = 3
   Insn 181: point = 53, n_alt = 2
   Insn 180: point = 55, n_alt = 3
   Insn 179: point = 57, n_alt = 0
   Insn 178: point = 59, n_alt = 0
   Insn 177: point = 61, n_alt = 0
   Insn 176: point = 62, n_alt = 0
   Insn 175: point = 64, n_alt = 0
   Insn 174: point = 66, n_alt = 0
   Insn 173: point = 67, n_alt = 7
   Insn 172: point = 69, n_alt = 0
   Insn 171: point = 71, n_alt = 4
   Insn 170: point = 72, n_alt = 3
   Insn 169: point = 74, n_alt = 0
   Insn 168: point = 76, n_alt = 0
   Insn 167: point = 78, n_alt = 0
   Insn 166: point = 79, n_alt = 0
   Insn 165: point = 81, n_alt = 0
   Insn 164: point = 83, n_alt = 0
   Insn 163: point = 85, n_alt = 0
   Insn 162: point = 86, n_alt = 1
   Insn 161: point = 88, n_alt = 0
   Insn 160: point = 90, n_alt = 0
   Insn 159: point = 92, n_alt = 0
   Insn 158: point = 93, n_alt = 7
   Insn 157: point = 95, n_alt = 0
   Insn 156: point = 97, n_alt = 4
   Insn 155: point = 98, n_alt = 3
   Insn 154: point = 100, n_alt = 0
   Insn 153: point = 102, n_alt = 0
   Insn 152: point = 104, n_alt = 0
   Insn 151: point = 105, n_alt = 0
   Insn 150: point = 107, n_alt = 0
   Insn 149: point = 109, n_alt = 0
   Insn 148: point = 111, n_alt = 0
   Insn 147: point = 112, n_alt = 1
   Insn 146: point = 114, n_alt = 0
   Insn 145: point = 116, n_alt = 0
  BB 16
   Insn 142: point = 117, n_alt = 1
  BB 15
   Insn 137: point = 117, n_alt = -1
   Insn 136: point = 117, n_alt = 1
   Insn 135: point = 118, n_alt = 7
   Insn 134: point = 119, n_alt = 7
   Insn 133: point = 121, n_alt = 0
   Insn 132: point = 123, n_alt = 4
   Insn 131: point = 124, n_alt = 3
   Insn 130: point = 126, n_alt = 0
   Insn 129: point = 128, n_alt = 0
   Insn 128: point = 130, n_alt = 0
   Insn 127: point = 131, n_alt = 0
   Insn 126: point = 133, n_alt = 0
   Insn 125: point = 135, n_alt = 0
   Insn 124: point = 137, n_alt = 0
   Insn 123: point = 138, n_alt = 1
   Insn 122: point = 140, n_alt = 0
   Insn 121: point = 142, n_alt = 0
   Insn 120: point = 144, n_alt = 0
  BB 24
   Insn 261: point = 145, n_alt = -1
   Insn 260: point = 145, n_alt = -1
  BB 25
   Insn 265: point = 145, n_alt = -1
  BB 13
   Insn 108: point = 145, n_alt = -1
   Insn 107: point = 145, n_alt = 0
  BB 11
   Insn 95: point = 146, n_alt = -1
   Insn 94: point = 146, n_alt = 1
   Insn 93: point = 147, n_alt = 7
   Insn 92: point = 149, n_alt = 0
   Insn 91: point = 151, n_alt = 4
   Insn 90: point = 152, n_alt = 3
   Insn 89: point = 154, n_alt = 0
   Insn 88: point = 156, n_alt = 0
   Insn 87: point = 158, n_alt = 0
   Insn 86: point = 159, n_alt = 0
   Insn 85: point = 161, n_alt = 0
   Insn 84: point = 163, n_alt = 0
   Insn 83: point = 165, n_alt = 0
   Insn 82: point = 166, n_alt = 1
   Insn 81: point = 168, n_alt = 0
   Insn 80: point = 170, n_alt = 0
  BB 9
   Insn 73: point = 172, n_alt = -1
   Insn 72: point = 172, n_alt = 0
  BB 8
   Insn 67: point = 173, n_alt = -1
   Insn 66: point = 173, n_alt = 1
   Insn 65: point = 174, n_alt = 7
   Insn 64: point = 175, n_alt = 7
   Insn 63: point = 177, n_alt = 0
   Insn 62: point = 179, n_alt = 4
   Insn 61: point = 180, n_alt = 3
   Insn 60: point = 182, n_alt = 0
   Insn 59: point = 184, n_alt = 0
   Insn 58: point = 186, n_alt = 0
   Insn 57: point = 187, n_alt = 0
   Insn 56: point = 189, n_alt = 0
   Insn 55: point = 191, n_alt = 0
   Insn 54: point = 193, n_alt = 0
   Insn 53: point = 194, n_alt = 1
   Insn 52: point = 196, n_alt = 0
   Insn 51: point = 198, n_alt = 0
  BB 7
   Insn 49: point = 200, n_alt = -1
   Insn 48: point = 200, n_alt = 0
   Insn 47: point = 201, n_alt = 0
   Insn 46: point = 203, n_alt = 0
   Insn 45: point = 204, n_alt = 0
  BB 14
   Insn 246: point = 205, n_alt = -1
   Insn 114: point = 205, n_alt = 1
  BB 12
   Insn 244: point = 206, n_alt = -1
   Insn 102: point = 206, n_alt = 1
   Insn 101: point = 206, n_alt = 1
   Insn 100: point = 207, n_alt = 0
  BB 10
   Insn 241: point = 209, n_alt = -1
   Insn 75: point = 209, n_alt = 1
  BB 6
   Insn 43: point = 210, n_alt = 1
   Insn 42: point = 211, n_alt = -2
   Insn 41: point = 213, n_alt = 0
   Insn 40: point = 215, n_alt = 0
   Insn 268: point = 217, n_alt = -2
	Hard reg 2 is preferable by r217 with profit 1000
   Insn 39: point = 219, n_alt = 0
   Insn 267: point = 219, n_alt = -2
   Insn 38: point = 220, n_alt = 0
   Insn 37: point = 221, n_alt = 0
   Insn 36: point = 222, n_alt = 1
   Insn 35: point = 222, n_alt = 1
   Insn 34: point = 223, n_alt = 0
   Insn 33: point = 224, n_alt = 1
   Insn 32: point = 225, n_alt = 0
   Insn 31: point = 227, n_alt = 0
   Insn 30: point = 229, n_alt = 4
   Insn 29: point = 230, n_alt = 3
   Insn 28: point = 232, n_alt = 0
   Insn 27: point = 234, n_alt = 0
   Insn 26: point = 236, n_alt = 0
   Insn 25: point = 237, n_alt = 0
   Insn 24: point = 239, n_alt = 0
   Insn 23: point = 241, n_alt = 0
  BB 4
   Insn 15: point = 242, n_alt = 1
  BB 2
   Insn 7: point = 242, n_alt = 1
   Insn 2: point = 242, n_alt = 5
 r87: [238..239]
 r88: [233..237]
 r89: [233..234]
 r90: [231..232]
 r91: [228..230]
 r92: [195..196]
 r93: [188..194]
 r94: [190..191]
 r95: [188..189]
 r96: [183..187]
 r97: [183..184]
 r98: [181..182]
 r99: [178..180]
 r100: [173..175]
 r101: [167..168]
 r102: [160..166]
 r103: [162..163]
 r104: [160..161]
 r105: [155..159]
 r106: [155..156]
 r107: [153..154]
 r108: [150..152]
 r109: [146..147]
 r110: [141..142]
 r111: [139..140]
 r112: [132..138]
 r113: [134..135]
 r114: [132..133]
 r115: [127..131]
 r116: [127..128]
 r117: [125..126]
 r118: [122..124]
 r119: [117..119]
 r120: [113..114]
 r121: [106..112]
 r122: [108..109]
 r123: [106..107]
 r124: [101..105]
 r125: [101..102]
 r126: [99..100]
 r127: [96..98]
 r128: [54..93]
 r129: [89..90]
 r130: [87..88]
 r131: [80..86]
 r132: [82..83]
 r133: [80..81]
 r134: [75..79]
 r135: [75..76]
 r136: [73..74]
 r137: [70..72]
 r138: [54..67]
 r139: [63..64]
 r140: [58..62]
 r141: [58..59]
 r142: [56..57]
 r143: [51..55]
 r144: [51..53]
 r145: [46..47]
 r146: [41..45]
 r147: [41..42]
 r148: [39..40]
 r149: [36..38]
 r150: [28..32]
 r151: [28..29]
 r152: [26..27]
 r153: [18..19]
 r154: [13..17]
 r155: [13..14]
 r156: [11..12]
 r157: [8..10]
 r158: [26..50] [8..23]
 r159: [0..1]
 r160: [4..5]
 r161: [210..221]
 r162: [145..211]
 r163: [200..201]
 r164: [24..35]
 r165: [2..3]
 r166: [6..7]
 r167: [240..241]
 r168: [235..236]
 r169: [226..229]
 r170: [226..227]
 r171: [224..225]
 r172: [222..223]
 r173: [216..220]
 r174: [216..217]
 r175: [214..215]
 r176: [212..213]
 r177: [202..203]
 r178: [197..198]
 r179: [192..193]
 r180: [185..186]
 r181: [176..179]
 r182: [176..177]
 r183: [173..174]
 r184: [169..170]
 r185: [164..165]
 r186: [157..158]
 r187: [148..151]
 r188: [148..149]
 r189: [206..207]
 r190: [143..144]
 r191: [136..137]
 r192: [129..130]
 r193: [120..123]
 r194: [120..121]
 r195: [117..118]
 r196: [115..116]
 r197: [110..111]
 r198: [103..104]
 r199: [94..97]
 r200: [94..95]
 r201: [91..92]
 r202: [84..85]
 r203: [77..78]
 r204: [68..71]
 r205: [68..69]
 r206: [65..66]
 r207: [60..61]
 r208: [51..52]
 r209: [48..49]
 r210: [43..44]
 r211: [36..37]
 r212: [33..34]
 r213: [30..31]
 r214: [20..21]
 r215: [15..16]
 r216: [8..9]
 r217: [218..219]
Compressing live ranges: from 242 to 198 - 81%
Ranges after the compression:
 r87: [194..195]
 r88: [190..193]
 r89: [190..191]
 r90: [188..189]
 r91: [186..187]
 r92: [160..161]
 r93: [154..159]
 r94: [156..157]
 r95: [154..155]
 r96: [150..153]
 r97: [150..151]
 r98: [148..149]
 r99: [146..147]
 r100: [142..143]
 r101: [138..139]
 r102: [132..137]
 r103: [134..135]
 r104: [132..133]
 r105: [128..131]
 r106: [128..129]
 r107: [126..127]
 r108: [124..125]
 r109: [120..121]
 r110: [116..117]
 r111: [114..115]
 r112: [108..113]
 r113: [110..111]
 r114: [108..109]
 r115: [104..107]
 r116: [104..105]
 r117: [102..103]
 r118: [100..101]
 r119: [96..97]
 r120: [92..93]
 r121: [86..91]
 r122: [88..89]
 r123: [86..87]
 r124: [82..85]
 r125: [82..83]
 r126: [80..81]
 r127: [78..79]
 r128: [42..75]
 r129: [72..73]
 r130: [70..71]
 r131: [64..69]
 r132: [66..67]
 r133: [64..65]
 r134: [60..63]
 r135: [60..61]
 r136: [58..59]
 r137: [56..57]
 r138: [42..53]
 r139: [50..51]
 r140: [46..49]
 r141: [46..47]
 r142: [44..45]
 r143: [40..43]
 r144: [40..41]
 r145: [36..37]
 r146: [32..35]
 r147: [32..33]
 r148: [30..31]
 r149: [28..29]
 r150: [22..25]
 r151: [22..23]
 r152: [20..21]
 r153: [16..17]
 r154: [12..15]
 r155: [12..13]
 r156: [10..11]
 r157: [8..9]
 r158: [8..39]
 r159: [0..1]
 r160: [4..5]
 r161: [170..179]
 r162: [120..171]
 r163: [164..165]
 r164: [20..27]
 r165: [2..3]
 r166: [6..7]
 r167: [196..197]
 r168: [192..193]
 r169: [184..187]
 r170: [184..185]
 r171: [182..183]
 r172: [180..181]
 r173: [176..179]
 r174: [176..177]
 r175: [174..175]
 r176: [172..173]
 r177: [166..167]
 r178: [162..163]
 r179: [158..159]
 r180: [152..153]
 r181: [144..147]
 r182: [144..145]
 r183: [142..143]
 r184: [140..141]
 r185: [136..137]
 r186: [130..131]
 r187: [122..125]
 r188: [122..123]
 r189: [168..169]
 r190: [118..119]
 r191: [112..113]
 r192: [106..107]
 r193: [98..101]
 r194: [98..99]
 r195: [96..97]
 r196: [94..95]
 r197: [90..91]
 r198: [84..85]
 r199: [76..79]
 r200: [76..77]
 r201: [74..75]
 r202: [68..69]
 r203: [62..63]
 r204: [54..57]
 r205: [54..55]
 r206: [52..53]
 r207: [48..49]
 r208: [40..41]
 r209: [38..39]
 r210: [34..35]
 r211: [28..29]
 r212: [26..27]
 r213: [24..25]
 r214: [18..19]
 r215: [14..15]
 r216: [8..9]
 r217: [178..179]

********** Assignment #1: **********

	 Assigning to 217 (cl=GENERAL_REGS, orig=174, freq=3000, tfirst=217, tfreq=3000)...
	   Assign 2 to reload r217 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 31
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 57
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 86
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 127
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 151
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 157
changing reg in insn 158
changing reg in insn 181
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 166
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 172
changing reg in insn 173
changing reg in insn 181
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 180
changing reg in insn 183
changing reg in insn 181
changing reg in insn 183
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 193
changing reg in insn 196
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 210
changing reg in insn 211
changing reg in insn 212
changing reg in insn 212
changing reg in insn 214
changing reg in insn 4
changing reg in insn 184
changing reg in insn 214
changing reg in insn 197
changing reg in insn 197
changing reg in insn 194
changing reg in insn 11
changing reg in insn 12
changing reg in insn 19
changing reg in insn 20
changing reg in insn 37
changing reg in insn 43
changing reg in insn 42
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 193
changing reg in insn 4
changing reg in insn 194
changing reg in insn 10
changing reg in insn 11
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 32
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 64
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 84
changing reg in insn 87
changing reg in insn 88
changing reg in insn 91
changing reg in insn 93
changing reg in insn 92
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 120
changing reg in insn 121
changing reg in insn 124
changing reg in insn 125
changing reg in insn 128
changing reg in insn 129
changing reg in insn 132
changing reg in insn 134
changing reg in insn 133
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 145
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
changing reg in insn 152
changing reg in insn 153
changing reg in insn 156
changing reg in insn 158
changing reg in insn 157
changing reg in insn 158
changing reg in insn 159
changing reg in insn 160
changing reg in insn 163
changing reg in insn 164
changing reg in insn 167
changing reg in insn 168
changing reg in insn 171
changing reg in insn 173
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 177
changing reg in insn 178
changing reg in insn 182
changing reg in insn 183
changing reg in insn 185
changing reg in insn 186
changing reg in insn 188
changing reg in insn 189
changing reg in insn 192
changing reg in insn 193
changing reg in insn 195
changing reg in insn 196
changing reg in insn 198
changing reg in insn 199
changing reg in insn 206
changing reg in insn 207
changing reg in insn 209
changing reg in insn 210
changing reg in insn 213
changing reg in insn 214
deleting insn with uid = 268.
starting the processing of deferred insns
ending the processing of deferred insns


calhpbl

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 6 [bp] 17 [flags] 21 [xmm0] 22 [xmm1]
;;  ref usage 	r0={88d,88u} r1={32d,31u} r2={4d,3u} r4={1d} r5={1d,1u} r6={1d,79u} r7={1d,25u} r17={68d,14u} r20={1d,1u,2e} r21={8d,9u} r22={5d,5u} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 476{218d,256u,2e} in 182{182 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 hpbl+0 S8 A64])
        (reg:DI 5 di [ hpbl ])) "CALHPBL.f":1 85 {*movdi_internal}
     (nil))
(note 3 2 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 3 222 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "CALHPBL.f":40 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              20 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 159 165
(code_label 222 7 8 3 15 (nil) [1 uses])
(note 8 222 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "CALHPBL.f":40 11 {*cmpsi_1}
     (nil))
(insn 10 9 11 3 (set (reg:QI 0 ax [165])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALHPBL.f":40 678 {*setcc_qi}
     (nil))
(insn 11 10 12 3 (set (reg:SI 0 ax [orig:159 _85 ] [159])
        (zero_extend:SI (reg:QI 0 ax [165]))) "CALHPBL.f":40 140 {*zero_extendqisi2}
     (nil))
(insn 12 11 13 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:159 _85 ] [159])
            (const_int 0 [0]))) "CALHPBL.f":40 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 253)
            (pc))) "CALHPBL.f":40 682 {*jcc}
     (nil)
 -> 253)
;;  succ:       22
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 216 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALHPBL.f":41 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              19 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 166
(code_label 216 15 16 5 14 (nil) [1 uses])
(note 16 216 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALHPBL.f":41 11 {*cmpsi_1}
     (nil))
(insn 18 17 19 5 (set (reg:QI 0 ax [166])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALHPBL.f":41 678 {*setcc_qi}
     (nil))
(insn 19 18 20 5 (set (reg:SI 0 ax [orig:160 _87 ] [160])
        (zero_extend:SI (reg:QI 0 ax [166]))) "CALHPBL.f":41 140 {*zero_extendqisi2}
     (nil))
(insn 20 19 21 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:160 _87 ] [160])
            (const_int 0 [0]))) "CALHPBL.f":41 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 21 20 22 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 256)
            (pc))) "CALHPBL.f":41 682 {*jcc}
     (nil)
 -> 256)
;;  succ:       23
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 161 162 167 168 169 170 171 172 173 174 175 176
(note 22 21 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 6 (set (reg:SI 0 ax [167])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":43 86 {*movsi_internal}
     (nil))
(insn 24 23 25 6 (set (reg:DI 0 ax [orig:87 _1 ] [87])
        (sign_extend:DI (reg:SI 0 ax [167]))) "CALHPBL.f":43 149 {*extendsidi2_rex64}
     (nil))
(insn 25 24 26 6 (parallel [
            (set (reg:DI 1 dx [orig:88 _2 ] [88])
                (mult:DI (reg:DI 0 ax [orig:87 _1 ] [87])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":43 349 {*muldi3_1}
     (nil))
(insn 26 25 27 6 (set (reg:SI 0 ax [168])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":43 86 {*movsi_internal}
     (nil))
(insn 27 26 28 6 (set (reg:DI 0 ax [orig:89 _3 ] [89])
        (sign_extend:DI (reg:SI 0 ax [168]))) "CALHPBL.f":43 149 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 6 (parallel [
            (set (reg:DI 0 ax [orig:90 _4 ] [90])
                (plus:DI (reg:DI 0 ax [orig:89 _3 ] [89])
                    (reg:DI 1 dx [orig:88 _2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":43 222 {*adddi_1}
     (nil))
(insn 29 28 30 6 (parallel [
            (set (reg:DI 1 dx [orig:91 _5 ] [91])
                (plus:DI (reg:DI 0 ax [orig:90 _4 ] [90])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":43 222 {*adddi_1}
     (nil))
(insn 30 29 31 6 (set (reg/f:DI 0 ax [169])
        (symbol_ref:DI ("loops_") [flags 0x202]  <var_decl 0x7f59e6831630 loops>)) "CALHPBL.f":43 85 {*movdi_internal}
     (nil))
(insn 31 30 32 6 (parallel [
            (set (reg:DI 1 dx [170])
                (plus:DI (reg:DI 1 dx [orig:91 _5 ] [91])
                    (const_int 2420 [0x974])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":43 222 {*adddi_1}
     (nil))
(insn 32 31 33 6 (set (reg:SI 0 ax [171])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [170])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [169])) [1 loops.lmh S4 A32])) "CALHPBL.f":43 86 {*movsi_internal}
     (nil))
(insn 33 32 34 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])
        (reg:SI 0 ax [171])) "CALHPBL.f":43 86 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (set (reg:SI 0 ax [172])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])) "CALHPBL.f":44 86 {*movsi_internal}
     (nil))
(insn 35 34 36 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 lpbl+0 S4 A32])
        (reg:SI 0 ax [172])) "CALHPBL.f":44 86 {*movsi_internal}
     (nil))
(insn 36 35 37 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 nepsq2+0 S4 A32])
        (const_int 0 [0])) "CALHPBL.f":47 86 {*movsi_internal}
     (nil))
(insn 37 36 38 6 (set (reg:SI 1 dx [orig:161 _91 ] [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])) "CALHPBL.f":48 86 {*movsi_internal}
     (nil))
(insn 38 37 267 6 (set (reg:SI 0 ax [173])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])) "CALHPBL.f":48 86 {*movsi_internal}
     (nil))
(insn 267 38 39 6 (set (reg:SI 2 cx [174])
        (reg:SI 0 ax [173])) "CALHPBL.f":48 86 {*movsi_internal}
     (nil))
(insn 39 267 40 6 (parallel [
            (set (reg:SI 2 cx [174])
                (lshiftrt:SI (reg:SI 2 cx [174])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":48 587 {*lshrsi3_1}
     (nil))
(insn 40 39 41 6 (parallel [
            (set (reg:SI 0 ax [175])
                (plus:SI (reg:SI 0 ax [173])
                    (reg:SI 2 cx [174])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":48 221 {*addsi_1}
     (nil))
(insn 41 40 42 6 (parallel [
            (set (reg:SI 0 ax [176])
                (ashiftrt:SI (reg:SI 0 ax [175])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":48 588 {*ashrsi3_1}
     (nil))
(insn 42 41 43 6 (set (reg:SI 2 cx [orig:162 _92 ] [162])
        (reg:SI 0 ax [176])) "CALHPBL.f":48 86 {*movsi_internal}
     (nil))
(insn 43 42 115 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
        (reg:SI 1 dx [orig:161 _91 ] [161])) "CALHPBL.f":48 86 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              14 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  def 	 17 [flags] 163 177
(code_label 115 43 44 7 10 (nil) [1 uses])
(note 44 115 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (reg:SI 2 cx [orig:162 _92 ] [162]))) "CALHPBL.f":48 11 {*cmpsi_1}
     (nil))
(insn 46 45 47 7 (set (reg:QI 0 ax [177])
        (lt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALHPBL.f":48 678 {*setcc_qi}
     (nil))
(insn 47 46 48 7 (set (reg:SI 0 ax [orig:163 _94 ] [163])
        (zero_extend:SI (reg:QI 0 ax [177]))) "CALHPBL.f":48 140 {*zero_extendqisi2}
     (nil))
(insn 48 47 49 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:163 _94 ] [163])
            (const_int 0 [0]))) "CALHPBL.f":48 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 49 48 50 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 259)
            (pc))) "CALHPBL.f":48 682 {*jcc}
     (nil)
 -> 259)
;;  succ:       24
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 95 96 97 98 99 100 178 179 180 181 182 183
(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 8 (set (reg:SI 0 ax [178])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALHPBL.f":49 86 {*movsi_internal}
     (nil))
(insn 52 51 53 8 (set (reg:DI 0 ax [orig:92 _6 ] [92])
        (sign_extend:DI (reg:SI 0 ax [178]))) "CALHPBL.f":49 149 {*extendsidi2_rex64}
     (nil))
(insn 53 52 54 8 (parallel [
            (set (reg:DI 1 dx [orig:93 _7 ] [93])
                (mult:DI (reg:DI 0 ax [orig:92 _6 ] [92])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":49 349 {*muldi3_1}
     (nil))
(insn 54 53 55 8 (set (reg:SI 0 ax [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":49 86 {*movsi_internal}
     (nil))
(insn 55 54 56 8 (set (reg:DI 0 ax [orig:94 _8 ] [94])
        (sign_extend:DI (reg:SI 0 ax [179]))) "CALHPBL.f":49 149 {*extendsidi2_rex64}
     (nil))
(insn 56 55 57 8 (parallel [
            (set (reg:DI 0 ax [orig:95 _9 ] [95])
                (mult:DI (reg:DI 0 ax [orig:94 _8 ] [94])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":49 349 {*muldi3_1}
     (nil))
(insn 57 56 58 8 (parallel [
            (set (reg:DI 1 dx [orig:96 _10 ] [96])
                (plus:DI (reg:DI 1 dx [orig:93 _7 ] [93])
                    (reg:DI 0 ax [orig:95 _9 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":49 222 {*adddi_1}
     (nil))
(insn 58 57 59 8 (set (reg:SI 0 ax [180])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":49 86 {*movsi_internal}
     (nil))
(insn 59 58 60 8 (set (reg:DI 0 ax [orig:97 _11 ] [97])
        (sign_extend:DI (reg:SI 0 ax [180]))) "CALHPBL.f":49 149 {*extendsidi2_rex64}
     (nil))
(insn 60 59 61 8 (parallel [
            (set (reg:DI 0 ax [orig:98 _12 ] [98])
                (plus:DI (reg:DI 0 ax [orig:97 _11 ] [97])
                    (reg:DI 1 dx [orig:96 _10 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":49 222 {*adddi_1}
     (nil))
(insn 61 60 62 8 (parallel [
            (set (reg:DI 1 dx [orig:99 _13 ] [99])
                (plus:DI (reg:DI 0 ax [orig:98 _12 ] [98])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":49 222 {*adddi_1}
     (nil))
(insn 62 61 63 8 (set (reg/f:DI 0 ax [181])
        (symbol_ref:DI ("pvrbls_") [flags 0x202]  <var_decl 0x7f59e6835360 pvrbls>)) "CALHPBL.f":49 85 {*movdi_internal}
     (nil))
(insn 63 62 64 8 (parallel [
            (set (reg:DI 1 dx [182])
                (plus:DI (reg:DI 1 dx [orig:99 _13 ] [99])
                    (const_int 562989 [0x8972d])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":49 222 {*adddi_1}
     (nil))
(insn 64 63 65 8 (set (reg:SF 22 xmm1 [orig:100 _14 ] [100])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [182])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [181])) [5 pvrbls.q2 S4 A32])) "CALHPBL.f":49 131 {*movsf_internal}
     (nil))
(insn 65 64 66 8 (set (reg:SF 21 xmm0 [183])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALHPBL.f":49 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.211999952793121337890625e-1 [0x0.f837b4p-3])
        (nil)))
(insn 66 65 67 8 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [183])
            (reg:SF 22 xmm1 [orig:100 _14 ] [100]))) "CALHPBL.f":49 53 {*cmpisf}
     (nil))
(jump_insn 67 66 71 8 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 78)
            (pc))) "CALHPBL.f":49 682 {*jcc}
     (nil)
 -> 78)
;;  succ:       9 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 71 67 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 nepsq2+0 S4 A32])
            (const_int 1 [0x1]))) "CALHPBL.f":49 11 {*cmpsi_1}
     (nil))
(jump_insn 73 72 74 9 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) "CALHPBL.f":49 682 {*jcc}
     (nil)
 -> 78)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 74 73 75 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 241 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 nepsq2+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 nepsq2+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":50 221 {*addsi_1}
     (nil))
(jump_insn 241 75 242 10 (set (pc)
        (label_ref 112)) "CALHPBL.f":51 683 {jump}
     (nil)
 -> 112)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

(barrier 242 241 78)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9
;;              8
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 104 105 106 107 108 109 184 185 186 187 188
(code_label 78 242 79 11 5 (nil) [2 uses])
(note 79 78 80 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 11 (set (reg:SI 0 ax [184])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALHPBL.f":53 86 {*movsi_internal}
     (nil))
(insn 81 80 82 11 (set (reg:DI 0 ax [orig:101 _15 ] [101])
        (sign_extend:DI (reg:SI 0 ax [184]))) "CALHPBL.f":53 149 {*extendsidi2_rex64}
     (nil))
(insn 82 81 83 11 (parallel [
            (set (reg:DI 1 dx [orig:102 _16 ] [102])
                (mult:DI (reg:DI 0 ax [orig:101 _15 ] [101])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":53 349 {*muldi3_1}
     (nil))
(insn 83 82 84 11 (set (reg:SI 0 ax [185])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":53 86 {*movsi_internal}
     (nil))
(insn 84 83 85 11 (set (reg:DI 0 ax [orig:103 _17 ] [103])
        (sign_extend:DI (reg:SI 0 ax [185]))) "CALHPBL.f":53 149 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 11 (parallel [
            (set (reg:DI 0 ax [orig:104 _18 ] [104])
                (mult:DI (reg:DI 0 ax [orig:103 _17 ] [103])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":53 349 {*muldi3_1}
     (nil))
(insn 86 85 87 11 (parallel [
            (set (reg:DI 1 dx [orig:105 _19 ] [105])
                (plus:DI (reg:DI 1 dx [orig:102 _16 ] [102])
                    (reg:DI 0 ax [orig:104 _18 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":53 222 {*adddi_1}
     (nil))
(insn 87 86 88 11 (set (reg:SI 0 ax [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":53 86 {*movsi_internal}
     (nil))
(insn 88 87 89 11 (set (reg:DI 0 ax [orig:106 _20 ] [106])
        (sign_extend:DI (reg:SI 0 ax [186]))) "CALHPBL.f":53 149 {*extendsidi2_rex64}
     (nil))
(insn 89 88 90 11 (parallel [
            (set (reg:DI 0 ax [orig:107 _21 ] [107])
                (plus:DI (reg:DI 0 ax [orig:106 _20 ] [106])
                    (reg:DI 1 dx [orig:105 _19 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":53 222 {*adddi_1}
     (nil))
(insn 90 89 91 11 (parallel [
            (set (reg:DI 1 dx [orig:108 _22 ] [108])
                (plus:DI (reg:DI 0 ax [orig:107 _21 ] [107])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":53 222 {*adddi_1}
     (nil))
(insn 91 90 92 11 (set (reg/f:DI 0 ax [187])
        (symbol_ref:DI ("pvrbls_") [flags 0x202]  <var_decl 0x7f59e6835360 pvrbls>)) "CALHPBL.f":53 85 {*movdi_internal}
     (nil))
(insn 92 91 93 11 (parallel [
            (set (reg:DI 1 dx [188])
                (plus:DI (reg:DI 1 dx [orig:108 _22 ] [108])
                    (const_int 562989 [0x8972d])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":53 222 {*adddi_1}
     (nil))
(insn 93 92 94 11 (set (reg:SF 21 xmm0 [orig:109 _23 ] [109])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [188])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [187])) [5 pvrbls.q2 S4 A32])) "CALHPBL.f":53 131 {*movsf_internal}
     (nil))
(insn 94 93 95 11 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [orig:109 _23 ] [109])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32]))) "CALHPBL.f":53 53 {*cmpisf}
     (nil))
(jump_insn 95 94 99 11 (set (pc)
        (if_then_else (unlt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 243)
            (pc))) "CALHPBL.f":53 682 {*jcc}
     (nil)
 -> 243)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 189
(note 99 95 100 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 12 (set (reg:SI 0 ax [189])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALHPBL.f":54 86 {*movsi_internal}
     (nil))
(insn 101 100 102 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 lpbl+0 S4 A32])
        (reg:SI 0 ax [189])) "CALHPBL.f":54 86 {*movsi_internal}
     (nil))
(insn 102 101 244 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 nepsq2+0 S4 A32])
        (const_int 0 [0])) "CALHPBL.f":55 86 {*movsi_internal}
     (nil))
(jump_insn 244 102 245 12 (set (pc)
        (label_ref 112)) "CALHPBL.f":56 683 {jump}
     (nil)
 -> 112)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

(barrier 245 244 243)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 243 245 106 13 20 (nil) [1 uses])
(note 106 243 107 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 nepsq2+0 S4 A32])
            (const_int 1 [0x1]))) "CALHPBL.f":57 11 {*cmpsi_1}
     (nil))
(jump_insn 108 107 112 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 264)
            (pc))) "CALHPBL.f":57 682 {*jcc}
     (nil)
 -> 264)
;;  succ:       25
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 24, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              10 [always] 
;;              12 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 112 108 113 14 7 (nil) [2 uses])
(note 113 112 114 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 246 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":48 221 {*addsi_1}
     (nil))
(jump_insn 246 114 247 14 (set (pc)
        (label_ref 115)) "CALHPBL.f":48 683 {jump}
     (nil)
 -> 115)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

(barrier 247 246 259)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 14, next block 25, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 259 247 258 24 23 (nil) [1 uses])
(note 258 259 260 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 260 258 261 24 (const_int 0 [0]) "CALHPBL.f":60 718 {nop}
     (nil))
(jump_insn 261 260 262 24 (set (pc)
        (label_ref 118)) 683 {jump}
     (nil)
 -> 118)
;;  succ:       15 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 262 261 264)
;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 264 262 263 25 24 (nil) [1 uses])
(note 263 264 265 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 265 263 118 25 (const_int 0 [0]) "CALHPBL.f":58 718 {nop}
     (nil))
;;  succ:       15 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 25, next block 16, flags: (RTL, MODIFIED)
;;  pred:       25 [always]  (FALLTHRU)
;;              24 [always] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 111 112 113 114 115 116 117 118 119 190 191 192 193 194 195
(code_label 118 265 119 15 4 (nil) [1 uses])
(note 119 118 120 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 15 (set (reg:SI 0 ax [190])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])) "CALHPBL.f":61 86 {*movsi_internal}
     (nil))
(insn 121 120 122 15 (parallel [
            (set (reg:SI 0 ax [orig:110 _24 ] [110])
                (plus:SI (reg:SI 0 ax [190])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 122 121 123 15 (set (reg:DI 0 ax [orig:111 _25 ] [111])
        (sign_extend:DI (reg:SI 0 ax [orig:110 _24 ] [110]))) "CALHPBL.f":61 149 {*extendsidi2_rex64}
     (nil))
(insn 123 122 124 15 (parallel [
            (set (reg:DI 1 dx [orig:112 _26 ] [112])
                (mult:DI (reg:DI 0 ax [orig:111 _25 ] [111])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 349 {*muldi3_1}
     (nil))
(insn 124 123 125 15 (set (reg:SI 0 ax [191])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":61 86 {*movsi_internal}
     (nil))
(insn 125 124 126 15 (set (reg:DI 0 ax [orig:113 _27 ] [113])
        (sign_extend:DI (reg:SI 0 ax [191]))) "CALHPBL.f":61 149 {*extendsidi2_rex64}
     (nil))
(insn 126 125 127 15 (parallel [
            (set (reg:DI 0 ax [orig:114 _28 ] [114])
                (mult:DI (reg:DI 0 ax [orig:113 _27 ] [113])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 349 {*muldi3_1}
     (nil))
(insn 127 126 128 15 (parallel [
            (set (reg:DI 1 dx [orig:115 _29 ] [115])
                (plus:DI (reg:DI 1 dx [orig:112 _26 ] [112])
                    (reg:DI 0 ax [orig:114 _28 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 222 {*adddi_1}
     (nil))
(insn 128 127 129 15 (set (reg:SI 0 ax [192])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":61 86 {*movsi_internal}
     (nil))
(insn 129 128 130 15 (set (reg:DI 0 ax [orig:116 _30 ] [116])
        (sign_extend:DI (reg:SI 0 ax [192]))) "CALHPBL.f":61 149 {*extendsidi2_rex64}
     (nil))
(insn 130 129 131 15 (parallel [
            (set (reg:DI 0 ax [orig:117 _31 ] [117])
                (plus:DI (reg:DI 0 ax [orig:116 _30 ] [116])
                    (reg:DI 1 dx [orig:115 _29 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 222 {*adddi_1}
     (nil))
(insn 131 130 132 15 (parallel [
            (set (reg:DI 1 dx [orig:118 _32 ] [118])
                (plus:DI (reg:DI 0 ax [orig:117 _31 ] [117])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 222 {*adddi_1}
     (nil))
(insn 132 131 133 15 (set (reg/f:DI 0 ax [193])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f59e6829870 extra>)) "CALHPBL.f":61 85 {*movdi_internal}
     (nil))
(insn 133 132 134 15 (parallel [
            (set (reg:DI 1 dx [194])
                (plus:DI (reg:DI 1 dx [orig:118 _32 ] [118])
                    (const_int 2311218 [0x234432])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 222 {*adddi_1}
     (nil))
(insn 134 133 135 15 (set (reg:SF 22 xmm1 [orig:119 _33 ] [119])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [194])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [193])) [5 extra.zint S4 A32])) "CALHPBL.f":61 131 {*movsf_internal}
     (nil))
(insn 135 134 136 15 (set (reg:SF 21 xmm0 [195])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALHPBL.f":61 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.5e+3 [0x0.9c4p+12])
        (nil)))
(insn 136 135 137 15 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [195])
            (reg:SF 22 xmm1 [orig:119 _33 ] [119]))) "CALHPBL.f":61 53 {*cmpisf}
     (nil))
(jump_insn 137 136 141 15 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 143)
            (pc))) "CALHPBL.f":61 682 {*jcc}
     (nil)
 -> 143)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 141 137 142 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 143 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [1 lpbl+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [1 lpbl+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":61 221 {*addsi_1}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 158 164 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213
(code_label 143 142 144 17 11 (nil) [1 uses])
(note 144 143 145 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 17 (set (reg:SI 0 ax [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 lpbl+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 146 145 147 17 (set (reg:DI 0 ax [orig:120 _34 ] [120])
        (sign_extend:DI (reg:SI 0 ax [196]))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (nil))
(insn 147 146 148 17 (parallel [
            (set (reg:DI 1 dx [orig:121 _35 ] [121])
                (mult:DI (reg:DI 0 ax [orig:120 _34 ] [120])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 349 {*muldi3_1}
     (nil))
(insn 148 147 149 17 (set (reg:SI 0 ax [197])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 149 148 150 17 (set (reg:DI 0 ax [orig:122 _36 ] [122])
        (sign_extend:DI (reg:SI 0 ax [197]))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (nil))
(insn 150 149 151 17 (parallel [
            (set (reg:DI 0 ax [orig:123 _37 ] [123])
                (mult:DI (reg:DI 0 ax [orig:122 _36 ] [122])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 349 {*muldi3_1}
     (nil))
(insn 151 150 152 17 (parallel [
            (set (reg:DI 1 dx [orig:124 _38 ] [124])
                (plus:DI (reg:DI 1 dx [orig:121 _35 ] [121])
                    (reg:DI 0 ax [orig:123 _37 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (nil))
(insn 152 151 153 17 (set (reg:SI 0 ax [198])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 153 152 154 17 (set (reg:DI 0 ax [orig:125 _39 ] [125])
        (sign_extend:DI (reg:SI 0 ax [198]))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (nil))
(insn 154 153 155 17 (parallel [
            (set (reg:DI 0 ax [orig:126 _40 ] [126])
                (plus:DI (reg:DI 0 ax [orig:125 _39 ] [125])
                    (reg:DI 1 dx [orig:124 _38 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (nil))
(insn 155 154 156 17 (parallel [
            (set (reg:DI 1 dx [orig:127 _41 ] [127])
                (plus:DI (reg:DI 0 ax [orig:126 _40 ] [126])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (nil))
(insn 156 155 157 17 (set (reg/f:DI 0 ax [199])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f59e6829870 extra>)) "CALHPBL.f":66 85 {*movdi_internal}
     (nil))
(insn 157 156 158 17 (parallel [
            (set (reg:DI 1 dx [200])
                (plus:DI (reg:DI 1 dx [orig:127 _41 ] [127])
                    (const_int 2311218 [0x234432])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (nil))
(insn 158 157 159 17 (set (reg:SF 21 xmm0 [orig:128 _42 ] [128])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [200])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [199])) [5 extra.zint S4 A32])) "CALHPBL.f":66 131 {*movsf_internal}
     (nil))
(insn 159 158 160 17 (set (reg:SI 0 ax [201])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 160 159 161 17 (parallel [
            (set (reg:SI 0 ax [orig:129 _43 ] [129])
                (plus:SI (reg:SI 0 ax [201])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [1 lmhk+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 161 160 162 17 (set (reg:DI 0 ax [orig:130 _44 ] [130])
        (sign_extend:DI (reg:SI 0 ax [orig:129 _43 ] [129]))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (nil))
(insn 162 161 163 17 (parallel [
            (set (reg:DI 1 dx [orig:131 _45 ] [131])
                (mult:DI (reg:DI 0 ax [orig:130 _44 ] [130])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 349 {*muldi3_1}
     (nil))
(insn 163 162 164 17 (set (reg:SI 0 ax [202])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 164 163 165 17 (set (reg:DI 0 ax [orig:132 _46 ] [132])
        (sign_extend:DI (reg:SI 0 ax [202]))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (nil))
(insn 165 164 166 17 (parallel [
            (set (reg:DI 0 ax [orig:133 _47 ] [133])
                (mult:DI (reg:DI 0 ax [orig:132 _46 ] [132])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 349 {*muldi3_1}
     (nil))
(insn 166 165 167 17 (parallel [
            (set (reg:DI 1 dx [orig:134 _48 ] [134])
                (plus:DI (reg:DI 1 dx [orig:131 _45 ] [131])
                    (reg:DI 0 ax [orig:133 _47 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (nil))
(insn 167 166 168 17 (set (reg:SI 0 ax [203])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 168 167 169 17 (set (reg:DI 0 ax [orig:135 _49 ] [135])
        (sign_extend:DI (reg:SI 0 ax [203]))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (nil))
(insn 169 168 170 17 (parallel [
            (set (reg:DI 0 ax [orig:136 _50 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 _49 ] [135])
                    (reg:DI 1 dx [orig:134 _48 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (nil))
(insn 170 169 171 17 (parallel [
            (set (reg:DI 1 dx [orig:137 _51 ] [137])
                (plus:DI (reg:DI 0 ax [orig:136 _50 ] [136])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (nil))
(insn 171 170 172 17 (set (reg/f:DI 0 ax [204])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f59e6829870 extra>)) "CALHPBL.f":66 85 {*movdi_internal}
     (nil))
(insn 172 171 173 17 (parallel [
            (set (reg:DI 1 dx [205])
                (plus:DI (reg:DI 1 dx [orig:137 _51 ] [137])
                    (const_int 2311218 [0x234432])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (nil))
(insn 173 172 174 17 (set (reg:SF 22 xmm1 [orig:138 _52 ] [138])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [205])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [204])) [5 extra.zint S4 A32])) "CALHPBL.f":66 131 {*movsf_internal}
     (nil))
(insn 174 173 175 17 (set (reg:SI 0 ax [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 175 174 176 17 (set (reg:DI 0 ax [orig:139 _53 ] [139])
        (sign_extend:DI (reg:SI 0 ax [206]))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (nil))
(insn 176 175 177 17 (parallel [
            (set (reg:DI 1 dx [orig:140 _54 ] [140])
                (mult:DI (reg:DI 0 ax [orig:139 _53 ] [139])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 349 {*muldi3_1}
     (nil))
(insn 177 176 178 17 (set (reg:SI 0 ax [207])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":66 86 {*movsi_internal}
     (nil))
(insn 178 177 179 17 (set (reg:DI 0 ax [orig:141 _55 ] [141])
        (sign_extend:DI (reg:SI 0 ax [207]))) "CALHPBL.f":66 149 {*extendsidi2_rex64}
     (nil))
(insn 179 178 180 17 (parallel [
            (set (reg:DI 0 ax [orig:142 _56 ] [142])
                (plus:DI (reg:DI 0 ax [orig:141 _55 ] [141])
                    (reg:DI 1 dx [orig:140 _54 ] [140])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (nil))
(insn 180 179 181 17 (parallel [
            (set (reg:DI 1 dx [orig:143 _57 ] [143])
                (plus:DI (reg:DI 0 ax [orig:142 _56 ] [142])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":66 222 {*adddi_1}
     (nil))
(insn 181 180 182 17 (set (reg:SF 21 xmm0 [orig:144 _58 ] [144])
        (minus:SF (reg:SF 21 xmm0 [orig:128 _42 ] [128])
            (reg:SF 22 xmm1 [orig:138 _52 ] [138]))) "CALHPBL.f":66 841 {*fop_sf_1}
     (nil))
(insn 182 181 183 17 (set (reg/f:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 hpbl+0 S8 A64])) "CALHPBL.f":66 85 {*movdi_internal}
     (nil))
(insn 183 182 184 17 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:143 _57 ] [143])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [208])) [5 *hpbl_100(D) S4 A32])
        (reg:SF 21 xmm0 [orig:144 _58 ] [144])) "CALHPBL.f":66 131 {*movsf_internal}
     (nil))
(insn 184 183 185 17 (set (reg:SF 21 xmm0 [orig:158 M.0_80 ] [158])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "CALHPBL.f":67 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+2 [0x0.96p+9])
        (nil)))
(insn 185 184 186 17 (set (reg:SI 0 ax [209])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":67 86 {*movsi_internal}
     (nil))
(insn 186 185 187 17 (set (reg:DI 0 ax [orig:145 _59 ] [145])
        (sign_extend:DI (reg:SI 0 ax [209]))) "CALHPBL.f":67 149 {*extendsidi2_rex64}
     (nil))
(insn 187 186 188 17 (parallel [
            (set (reg:DI 1 dx [orig:146 _60 ] [146])
                (mult:DI (reg:DI 0 ax [orig:145 _59 ] [145])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 349 {*muldi3_1}
     (nil))
(insn 188 187 189 17 (set (reg:SI 0 ax [210])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":67 86 {*movsi_internal}
     (nil))
(insn 189 188 190 17 (set (reg:DI 0 ax [orig:147 _61 ] [147])
        (sign_extend:DI (reg:SI 0 ax [210]))) "CALHPBL.f":67 149 {*extendsidi2_rex64}
     (nil))
(insn 190 189 191 17 (parallel [
            (set (reg:DI 0 ax [orig:148 _62 ] [148])
                (plus:DI (reg:DI 0 ax [orig:147 _61 ] [147])
                    (reg:DI 1 dx [orig:146 _60 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 222 {*adddi_1}
     (nil))
(insn 191 190 192 17 (parallel [
            (set (reg:DI 1 dx [orig:149 _63 ] [149])
                (plus:DI (reg:DI 0 ax [orig:148 _62 ] [148])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 222 {*adddi_1}
     (nil))
(insn 192 191 193 17 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 hpbl+0 S8 A64])) "CALHPBL.f":67 85 {*movdi_internal}
     (nil))
(insn 193 192 194 17 (set (reg:SF 22 xmm1 [orig:164 _103 ] [164])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:149 _63 ] [149])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [211])) [5 *hpbl_100(D) S4 A32])) "CALHPBL.f":67 131 {*movsf_internal}
     (nil))
(insn 194 193 195 17 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 22 xmm1 [orig:164 _103 ] [164])
            (reg:SF 21 xmm0 [orig:158 M.0_80 ] [158]))) "CALHPBL.f":67 53 {*cmpisf}
     (nil))
(insn 195 194 196 17 (set (reg:QI 0 ax [212])
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "CALHPBL.f":67 678 {*setcc_qi}
     (nil))
(insn 196 195 197 17 (set (reg:SI 1 dx [orig:150 _64 ] [150])
        (zero_extend:SI (reg:QI 0 ax [212]))) "CALHPBL.f":67 140 {*zero_extendqisi2}
     (nil))
(insn 197 196 198 17 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [orig:158 M.0_80 ] [158])
                    (reg:SF 21 xmm0 [orig:158 M.0_80 ] [158]))
            ] UNSPEC_NOTRAP)) "CALHPBL.f":67 54 {*cmpiusf}
     (nil))
(insn 198 197 199 17 (set (reg:QI 0 ax [213])
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "CALHPBL.f":67 678 {*setcc_qi}
     (nil))
(insn 199 198 200 17 (set (reg:SI 0 ax [orig:151 _65 ] [151])
        (zero_extend:SI (reg:QI 0 ax [213]))) "CALHPBL.f":67 140 {*zero_extendqisi2}
     (nil))
(insn 200 199 201 17 (parallel [
            (set (reg:SI 0 ax [orig:152 _66 ] [152])
                (ior:SI (reg:SI 0 ax [orig:151 _65 ] [151])
                    (reg:SI 1 dx [orig:150 _64 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 450 {*iorsi_1}
     (nil))
(insn 201 200 202 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:152 _66 ] [152])
            (const_int 0 [0]))) "CALHPBL.f":67 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 202 201 203 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 204)
            (pc))) "CALHPBL.f":67 682 {*jcc}
     (nil)
 -> 204)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 158 164

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 164
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 164
;; lr  def 	 158
(note 203 202 4 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 4 203 204 18 (set (reg:SF 21 xmm0 [orig:158 M.0_80 ] [158])
        (reg:SF 22 xmm1 [orig:164 _103 ] [164])) "CALHPBL.f":67 131 {*movsf_internal}
     (nil))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 158

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 23, flags: (RTL, MODIFIED)
;;  pred:       17
;;              18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 158
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 158
;; lr  def 	 17 [flags] 153 154 155 156 157 214 215 216
(code_label 204 4 205 19 13 (nil) [1 uses])
(note 205 204 206 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 206 205 207 19 (set (reg:SI 0 ax [214])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALHPBL.f":67 86 {*movsi_internal}
     (nil))
(insn 207 206 208 19 (set (reg:DI 0 ax [orig:153 _67 ] [153])
        (sign_extend:DI (reg:SI 0 ax [214]))) "CALHPBL.f":67 149 {*extendsidi2_rex64}
     (nil))
(insn 208 207 209 19 (parallel [
            (set (reg:DI 1 dx [orig:154 _68 ] [154])
                (mult:DI (reg:DI 0 ax [orig:153 _67 ] [153])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 349 {*muldi3_1}
     (nil))
(insn 209 208 210 19 (set (reg:SI 0 ax [215])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALHPBL.f":67 86 {*movsi_internal}
     (nil))
(insn 210 209 211 19 (set (reg:DI 0 ax [orig:155 _69 ] [155])
        (sign_extend:DI (reg:SI 0 ax [215]))) "CALHPBL.f":67 149 {*extendsidi2_rex64}
     (nil))
(insn 211 210 212 19 (parallel [
            (set (reg:DI 0 ax [orig:156 _70 ] [156])
                (plus:DI (reg:DI 0 ax [orig:155 _69 ] [155])
                    (reg:DI 1 dx [orig:154 _68 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 222 {*adddi_1}
     (nil))
(insn 212 211 213 19 (parallel [
            (set (reg:DI 1 dx [orig:157 _71 ] [157])
                (plus:DI (reg:DI 0 ax [orig:156 _70 ] [156])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":67 222 {*adddi_1}
     (nil))
(insn 213 212 214 19 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 hpbl+0 S8 A64])) "CALHPBL.f":67 85 {*movdi_internal}
     (nil))
(insn 214 213 215 19 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:157 _71 ] [157])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [216])) [5 *hpbl_100(D) S4 A32])
        (reg:SF 21 xmm0 [orig:158 M.0_80 ] [158])) "CALHPBL.f":67 131 {*movsf_internal}
     (nil))
(insn 215 214 248 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":41 221 {*addsi_1}
     (nil))
(jump_insn 248 215 249 19 (set (pc)
        (label_ref 216)) "CALHPBL.f":41 683 {jump}
     (nil)
 -> 216)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 249 248 256)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 19, next block 20, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 256 249 255 23 22 (nil) [1 uses])
(note 255 256 257 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 257 255 219 23 (const_int 0 [0]) "CALHPBL.f":67 718 {nop}
     (nil))
;;  succ:       20 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 23, next block 22, flags: (RTL, MODIFIED)
;;  pred:       23 [always]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 219 257 220 20 3 (nil) [0 uses])
(note 220 219 221 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 221 220 250 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALHPBL.f":40 221 {*addsi_1}
     (nil))
(jump_insn 250 221 251 20 (set (pc)
        (label_ref 222)) "CALHPBL.f":40 683 {jump}
     (nil)
 -> 222)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 251 250 253)
;; basic block 22, loop depth 0, maybe hot
;;  prev block 20, next block 21, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 253 251 252 22 21 (nil) [1 uses])
(note 252 253 254 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 254 252 225 22 (const_int 0 [0]) "CALHPBL.f":41 718 {nop}
     (nil))
;;  succ:       21 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 22, next block 1, flags: (RTL, MODIFIED)
;;  pred:       22 [always]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 225 254 226 21 2 (nil) [0 uses])
(note 226 225 240 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 240 226 266 21 (const_int 0 [0]) "CALHPBL.f":71 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 266 240 0 NOTE_INSN_DELETED)
