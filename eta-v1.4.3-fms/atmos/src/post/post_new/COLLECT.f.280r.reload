
;; Function collect (collect_, funcdef_no=0, decl_uid=3769, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 26:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =<  (1) re*m {*pushdi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-24)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal} (sp_off=-32)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) Z {*movdi_internal} (sp_off=-32)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) r  (1) i {*movdi_internal} (sp_off=-32)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 34:  (0) r  (1) Z {*movdi_internal} (sp_off=-32)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) q  (1) n {*movqi_internal} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) rBwBz {*call} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 62:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 65
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 66:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 72
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 73:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 74:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 75:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 77:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 78:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 84:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4
EBB 5 6
EBB 7 8
EBB 12
EBB 9
EBB 11
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
  BB 11
   Insn 102: point = 0, n_alt = -1
  BB 5
   Insn 50: point = 0, n_alt = -1
   Insn 49: point = 0, n_alt = 0
   Insn 48: point = 1, n_alt = 0
   Insn 47: point = 3, n_alt = 0
   Insn 46: point = 4, n_alt = 0
  BB 9
   Insn 98: point = 4, n_alt = -1
   Insn 84: point = 4, n_alt = 1
  BB 12
   Insn 105: point = 4, n_alt = -1
  BB 7
   Insn 58: point = 4, n_alt = -1
   Insn 57: point = 4, n_alt = 0
   Insn 56: point = 5, n_alt = 0
   Insn 55: point = 7, n_alt = 0
   Insn 54: point = 8, n_alt = 0
  BB 8
   Insn 96: point = 8, n_alt = -1
   Insn 78: point = 8, n_alt = 1
   Insn 77: point = 8, n_alt = 8
   Insn 76: point = 9, n_alt = 3
   Insn 75: point = 10, n_alt = 7
   Insn 74: point = 12, n_alt = 4
   Insn 73: point = 13, n_alt = 3
   Insn 72: point = 15, n_alt = 0
   Insn 71: point = 17, n_alt = 0
   Insn 70: point = 19, n_alt = 0
   Insn 69: point = 20, n_alt = 0
   Insn 68: point = 22, n_alt = 0
   Insn 67: point = 24, n_alt = 0
   Insn 66: point = 25, n_alt = 3
   Insn 65: point = 27, n_alt = 0
   Insn 64: point = 29, n_alt = 0
   Insn 63: point = 31, n_alt = 0
   Insn 62: point = 32, n_alt = 0
   Insn 61: point = 34, n_alt = 0
   Insn 60: point = 36, n_alt = 0
  BB 6
   Insn 52: point = 37, n_alt = 1
  BB 4
   Insn 44: point = 37, n_alt = 1
  BB 3
   Insn 42: point = 37, n_alt = -1
   Insn 41: point = 37, n_alt = 0
   Insn 40: point = 38, n_alt = 0
   Insn 39: point = 39, n_alt = 0
   Insn 38: point = 39, n_alt = 0
   Insn 37: point = 39, n_alt = 3
   Insn 36: point = 39, n_alt = -2
   Insn 35: point = 40, n_alt = -2
   Insn 34: point = 41, n_alt = 2
   Insn 33: point = 41, n_alt = 4
   Insn 32: point = 41, n_alt = 2
   Insn 31: point = 41, n_alt = 2
   Insn 30: point = 41, n_alt = 0
   Insn 29: point = 41, n_alt = 0
   Insn 28: point = 41, n_alt = 0
   Insn 27: point = 41, n_alt = 0
   Insn 26: point = 42, n_alt = 3
   Insn 25: point = 43, n_alt = 3
   Insn 24: point = 45, n_alt = 3
   Insn 23: point = 46, n_alt = 1
   Insn 22: point = 48, n_alt = 0
   Insn 21: point = 50, n_alt = 0
   Insn 20: point = 52, n_alt = 0
   Insn 19: point = 54, n_alt = 0
   Insn 18: point = 55, n_alt = 3
   Insn 17: point = 57, n_alt = 0
   Insn 16: point = 59, n_alt = 0
   Insn 15: point = 61, n_alt = 0
   Insn 14: point = 63, n_alt = 0
  BB 2
   Insn 8: point = 64, n_alt = -1
   Insn 7: point = 64, n_alt = 0
   Insn 6: point = 65, n_alt = 0
   Insn 2: point = 66, n_alt = 5
 r87: [64..65]
 r88: [62..63]
 r89: [60..61]
 r90: [40..55]
 r91: [53..54]
 r92: [51..52]
 r93: [49..50]
 r94: [47..48]
 r95: [39..43]
 r96: [37..38]
 r97: [33..34]
 r98: [28..32]
 r99: [28..29]
 r100: [26..27]
 r101: [11..25]
 r102: [21..22]
 r103: [16..20]
 r104: [16..17]
 r105: [14..15]
 r106: [8..13]
 r107: [8..10]
 r108: [0..1]
 r109: [4..5]
 r110: [58..59]
 r111: [56..57]
 r112: [44..46]
 r113: [44..45]
 r114: [41..42]
 r115: [2..3]
 r116: [6..7]
 r117: [35..36]
 r118: [30..31]
 r119: [23..24]
 r120: [18..19]
 r121: [11..12]
 r122: [8..9]
Compressing live ranges: from 66 to 56 - 84%
Ranges after the compression:
 r87: [54..55]
 r88: [52..53]
 r89: [50..51]
 r90: [34..45]
 r91: [44..45]
 r92: [42..43]
 r93: [40..41]
 r94: [38..39]
 r95: [34..35]
 r96: [32..33]
 r97: [28..29]
 r98: [24..27]
 r99: [24..25]
 r100: [22..23]
 r101: [10..21]
 r102: [18..19]
 r103: [14..17]
 r104: [14..15]
 r105: [12..13]
 r106: [8..11]
 r107: [8..9]
 r108: [0..1]
 r109: [4..5]
 r110: [48..49]
 r111: [46..47]
 r112: [36..37]
 r113: [36..37]
 r114: [34..35]
 r115: [2..3]
 r116: [6..7]
 r117: [30..31]
 r118: [26..27]
 r119: [20..21]
 r120: [16..17]
 r121: [10..11]
 r122: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 35
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 75
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 77
changing reg in insn 75
changing reg in insn 77
changing reg in insn 48
changing reg in insn 49
changing reg in insn 56
changing reg in insn 57
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 23
changing reg in insn 25
changing reg in insn 25
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 47
changing reg in insn 48
changing reg in insn 55
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
deleting insn with uid = 35.
deleting insn with uid = 36.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 38.


collect

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 37 [r8] 38 [r9]
;;  ref usage 	r0={31d,29u} r1={7d,5u,1e} r2={4d,2u} r4={3d,1u} r5={3d,2u} r6={1d,28u} r7={6d,19u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={24d,6u} r18={1d} r19={1d} r20={1d,1u,1e} r21={3d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 257{159d,96u,2e} in 67{66 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 a+0 S8 A64])
        (reg:DI 5 di [ a ])) "COLLECT.f":1 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem/c:SI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>) [1 parallel.num_procs+0 S4 A128])) "COLLECT.f":1 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 _1 ] [87])
            (const_int 1 [0x1]))) "COLLECT.f":44 11 {*cmpsi_1}
     (nil))
(jump_insn 8 7 13 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 94)
            (pc))) "COLLECT.f":44 682 {*jcc}
     (nil)
 -> 94)
;;  succ:       10
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 92 93 94 95 96 110 111 112 113 114
(note 13 8 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                    (const_int 4 [0x4]))) [1 parallel.me+0 S4 A32])) "COLLECT.f":1 86 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:DI 0 ax [orig:89 _3 ] [89])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _2 ] [88]))) "COLLECT.f":47 149 {*extendsidi2_rex64}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 0 ax [110])
                (plus:DI (reg:DI 0 ax [orig:89 _3 ] [89])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 222 {*adddi_1}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 0 ax [111])
                (ashift:DI (reg:DI 0 ax [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 551 {*ashldi3_1}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg/f:DI 4 si [orig:90 _4 ] [90])
                (plus:DI (reg:DI 0 ax [111])
                    (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 222 {*adddi_1}
     (nil))
(insn 19 18 20 3 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "COLLECT.f":1 86 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 0 ax [orig:92 _6 ] [92])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "COLLECT.f":47 149 {*extendsidi2_rex64}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg:DI 0 ax [orig:93 _7 ] [93])
                (plus:DI (reg:DI 0 ax [orig:92 _6 ] [92])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 222 {*adddi_1}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg:DI 0 ax [orig:94 _8 ] [94])
                (mult:DI (reg:DI 0 ax [orig:93 _7 ] [93])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 349 {*muldi3_1}
     (nil))
(insn 23 22 24 3 (parallel [
            (set (reg:DI 1 dx [112])
                (ashift:DI (reg:DI 0 ax [orig:94 _8 ] [94])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 551 {*ashldi3_1}
     (nil))
(insn 24 23 25 3 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 a+0 S8 A64])) "COLLECT.f":47 85 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (parallel [
            (set (reg/f:DI 5 di [orig:95 _9 ] [95])
                (plus:DI (reg:DI 1 dx [112])
                    (reg/f:DI 0 ax [113])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 a+0 S8 A64])
            (reg:DI 1 dx [112]))
        (nil)))
(insn 26 25 27 3 (parallel [
            (set (reg:DI 0 ax [114])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 222 {*adddi_1}
     (nil))
(insn 27 26 28 3 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (reg:DI 0 ax [114])) "COLLECT.f":47 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 28 27 29 3 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fe1b5f4c090 *.LC1>)) "COLLECT.f":47 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 29 28 30 3 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fe1b5f4c090 *.LC1>)) "COLLECT.f":47 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 30 29 31 3 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fe1b5f4c000 *.LC0>)) "COLLECT.f":47 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 31 30 32 3 (set (reg:DI 38 r9)
        (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                (const_int 4136 [0x1028])))) "COLLECT.f":47 85 {*movdi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:DI 37 r8)
        (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                (const_int 40 [0x28])))) "COLLECT.f":47 85 {*movdi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:DI 2 cx)
        (symbol_ref:DI ("b.3886") [flags 0x202]  <var_decl 0x7fe1b632cb40 b>)) "COLLECT.f":47 85 {*movdi_internal}
     (nil))
(insn 34 33 37 3 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fe1b5f4c000 *.LC0>)) "COLLECT.f":47 85 {*movdi_internal}
     (nil))
(insn 37 34 38 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "COLLECT.f":47 88 {*movqi_internal}
     (nil))
(call_insn 38 37 39 3 (call (mem:QI (symbol_ref:DI ("mpi_gatherv_") [flags 0x41]  <function_decl 0x7fe1b6302600 mpi_gatherv>) [0 mpi_gatherv S1 A8])
        (const_int 32 [0x20])) "COLLECT.f":47 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 39 38 40 3 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 222 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 40 39 41 3 (set (reg:SI 0 ax [orig:96 _10 ] [96])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                    (const_int 4 [0x4]))) [1 parallel.me+0 S4 A32])) "COLLECT.f":1 86 {*movsi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:96 _10 ] [96])
            (const_int 0 [0]))) "COLLECT.f":48 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 42 41 43 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 94)
            (pc))) "COLLECT.f":48 682 {*jcc}
     (nil)
 -> 94)
;;  succ:       4 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 43 42 44 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 85 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "COLLECT.f":49 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              9 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108 115
(code_label 85 44 45 5 8 (nil) [1 uses])
(note 45 85 46 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "COLLECT.f":49 11 {*cmpsi_1}
     (nil))
(insn 47 46 48 5 (set (reg:QI 0 ax [115])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "COLLECT.f":49 678 {*setcc_qi}
     (nil))
(insn 48 47 49 5 (set (reg:SI 0 ax [orig:108 _33 ] [108])
        (zero_extend:SI (reg:QI 0 ax [115]))) "COLLECT.f":49 140 {*zero_extendqisi2}
     (nil))
(insn 49 48 50 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:108 _33 ] [108])
            (const_int 0 [0]))) "COLLECT.f":49 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 50 49 51 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 101)
            (pc))) "COLLECT.f":49 682 {*jcc}
     (nil)
 -> 101)
;;  succ:       11
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 51 50 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 79 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "COLLECT.f":50 86 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              8 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 116
(code_label 79 52 53 7 7 (nil) [1 uses])
(note 53 79 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "COLLECT.f":50 11 {*cmpsi_1}
     (nil))
(insn 55 54 56 7 (set (reg:QI 0 ax [116])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "COLLECT.f":50 678 {*setcc_qi}
     (nil))
(insn 56 55 57 7 (set (reg:SI 0 ax [orig:109 _35 ] [109])
        (zero_extend:SI (reg:QI 0 ax [116]))) "COLLECT.f":50 140 {*zero_extendqisi2}
     (nil))
(insn 57 56 58 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:109 _35 ] [109])
            (const_int 0 [0]))) "COLLECT.f":50 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 58 57 59 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 104)
            (pc))) "COLLECT.f":50 682 {*jcc}
     (nil)
 -> 104)
;;  succ:       12
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 12, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 99 100 101 102 103 104 105 106 107 117 118 119 120 121 122
(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 8 (set (reg:SI 0 ax [117])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "COLLECT.f":51 86 {*movsi_internal}
     (nil))
(insn 61 60 62 8 (set (reg:DI 0 ax [orig:97 _11 ] [97])
        (sign_extend:DI (reg:SI 0 ax [117]))) "COLLECT.f":51 149 {*extendsidi2_rex64}
     (nil))
(insn 62 61 63 8 (parallel [
            (set (reg:DI 1 dx [orig:98 _12 ] [98])
                (mult:DI (reg:DI 0 ax [orig:97 _11 ] [97])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 349 {*muldi3_1}
     (nil))
(insn 63 62 64 8 (set (reg:SI 0 ax [118])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "COLLECT.f":51 86 {*movsi_internal}
     (nil))
(insn 64 63 65 8 (set (reg:DI 0 ax [orig:99 _13 ] [99])
        (sign_extend:DI (reg:SI 0 ax [118]))) "COLLECT.f":51 149 {*extendsidi2_rex64}
     (nil))
(insn 65 64 66 8 (parallel [
            (set (reg:DI 0 ax [orig:100 _14 ] [100])
                (plus:DI (reg:DI 0 ax [orig:99 _13 ] [99])
                    (reg:DI 1 dx [orig:98 _12 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 222 {*adddi_1}
     (nil))
(insn 66 65 67 8 (parallel [
            (set (reg:DI 2 cx [orig:101 _15 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 _14 ] [100])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 222 {*adddi_1}
     (nil))
(insn 67 66 68 8 (set (reg:SI 0 ax [119])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "COLLECT.f":51 86 {*movsi_internal}
     (nil))
(insn 68 67 69 8 (set (reg:DI 0 ax [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 0 ax [119]))) "COLLECT.f":51 149 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 8 (parallel [
            (set (reg:DI 1 dx [orig:103 _17 ] [103])
                (mult:DI (reg:DI 0 ax [orig:102 _16 ] [102])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 349 {*muldi3_1}
     (nil))
(insn 70 69 71 8 (set (reg:SI 0 ax [120])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "COLLECT.f":51 86 {*movsi_internal}
     (nil))
(insn 71 70 72 8 (set (reg:DI 0 ax [orig:104 _18 ] [104])
        (sign_extend:DI (reg:SI 0 ax [120]))) "COLLECT.f":51 149 {*extendsidi2_rex64}
     (nil))
(insn 72 71 73 8 (parallel [
            (set (reg:DI 0 ax [orig:105 _19 ] [105])
                (plus:DI (reg:DI 0 ax [orig:104 _18 ] [104])
                    (reg:DI 1 dx [orig:103 _17 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 222 {*adddi_1}
     (nil))
(insn 73 72 74 8 (parallel [
            (set (reg:DI 1 dx [orig:106 _20 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 _19 ] [105])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 222 {*adddi_1}
     (nil))
(insn 74 73 75 8 (set (reg/f:DI 0 ax [121])
        (symbol_ref:DI ("b.3886") [flags 0x202]  <var_decl 0x7fe1b632cb40 b>)) "COLLECT.f":51 85 {*movdi_internal}
     (nil))
(insn 75 74 76 8 (set (reg:SF 21 xmm0 [orig:107 _21 ] [107])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:101 _15 ] [101])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [121])) [4 b S4 A32])) "COLLECT.f":51 131 {*movsf_internal}
     (nil))
(insn 76 75 77 8 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 a+0 S8 A64])) "COLLECT.f":51 85 {*movdi_internal}
     (nil))
(insn 77 76 78 8 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:106 _20 ] [106])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [122])) [4 *a_30(D) S4 A32])
        (reg:SF 21 xmm0 [orig:107 _21 ] [107])) "COLLECT.f":51 131 {*movsf_internal}
     (nil))
(insn 78 77 96 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":50 221 {*addsi_1}
     (nil))
(jump_insn 96 78 97 8 (set (pc)
        (label_ref 79)) "COLLECT.f":50 683 {jump}
     (nil)
 -> 79)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 97 96 104)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 8, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 104 97 103 12 10 (nil) [1 uses])
(note 103 104 105 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 105 103 82 12 (const_int 0 [0]) "COLLECT.f":51 718 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 12, next block 11, flags: (RTL, MODIFIED)
;;  pred:       12 [always]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 82 105 83 9 6 (nil) [0 uses])
(note 83 82 84 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 98 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":49 221 {*addsi_1}
     (nil))
(jump_insn 98 84 99 9 (set (pc)
        (label_ref 85)) "COLLECT.f":49 683 {jump}
     (nil)
 -> 85)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 99 98 101)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 9, next block 10, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 101 99 100 11 9 (nil) [1 uses])
(note 100 101 102 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 102 100 94 11 (const_int 0 [0]) "COLLECT.f":50 718 {nop}
     (nil))
;;  succ:       10 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 11, next block 1, flags: (RTL, MODIFIED)
;;  pred:       11 [always]  (FALLTHRU)
;;              2
;;              3
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 94 102 95 10 1 (nil) [2 uses])
(note 95 94 106 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 106 95 0 NOTE_INSN_DELETED)
