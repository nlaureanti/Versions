
;; Function calquv (calquv_, funcdef_no=0, decl_uid=3770, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 31:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 33:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 34:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 37:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 41:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 43:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 44:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 45:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 51:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 85:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 88:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 92
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 93:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 96:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 99
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 100:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 101:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 103:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 104:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 105:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 108:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 115
	 Choosing alt 0 in insn 115:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 116:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 119:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 122
	 Choosing alt 0 in insn 122:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 123:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 124:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 126:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 127:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 128:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 129:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 135:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 141:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 144:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 157:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 167:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 171:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 175
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 176:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 177:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 179:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 182:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 185:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 193
	 Choosing alt 0 in insn 193:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 194:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 195
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 196:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 197:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 199:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 200:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 202:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 203:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 205:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 206:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 207:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 209:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 213
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 214:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 215
	 Choosing alt 0 in insn 215:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 216:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 217:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 218:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 219:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 220:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 222:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 223:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 225:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 226:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 227:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 230:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 231
	 Choosing alt 0 in insn 231:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 232:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 233:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 234:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 235:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 236
	 Choosing alt 1 in insn 236:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 237:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 238:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 239:  (0) v  (1) vm {*cmpisf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 245:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 246:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 252:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 253:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 255:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 256:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 257:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 260:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 261
	 Choosing alt 0 in insn 261:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 262:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 263:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 264:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 265:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 267:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 268:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 270:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 271:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 272:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 274:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 275:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 276:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 279
	 Choosing alt 0 in insn 279:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 280:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 281
	 Choosing alt 0 in insn 281:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 282:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 283:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 285:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 286:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 288:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 289:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 291:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 292:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 293:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 295:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 296:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 299
	 Choosing alt 0 in insn 299:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 300:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 301
	 Choosing alt 0 in insn 301:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 302:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 303:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 304:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 305:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 306:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 308:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 309:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 311:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 312:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 313:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 316:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 317
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 318:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 319:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 320:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 321:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 322
	 Choosing alt 1 in insn 322:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 324:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 325:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 326:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 330:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 331:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 333:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 334:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 337:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 338
	 Choosing alt 0 in insn 338:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 339:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 340:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 341:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 343:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 344:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 345:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 347:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 348:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 351:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 352
	 Choosing alt 0 in insn 352:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 353:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 354:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 355:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 356:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 358:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 359:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 360:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 362:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 363:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 364:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 366:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 367
	 Choosing alt 0 in insn 367:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 368:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 369:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 370:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 372:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 373:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 375:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 376:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 377:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 379:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 380:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 381
	 Choosing alt 0 in insn 381:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 382:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 383:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 384:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 385:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 386:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 388:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 389:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 391:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 392:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 393:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 396
	 Choosing alt 0 in insn 396:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 397:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 398
	 Choosing alt 0 in insn 398:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 399:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 400:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 401:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 403:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 404:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 406:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 407:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 408:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 410:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 411:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 412:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 415
	 Choosing alt 0 in insn 415:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 416:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 417
	 Choosing alt 0 in insn 417:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 418:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 419:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 420:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 421:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 422
	 Choosing alt 1 in insn 422:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 423:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 425:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 426:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 428:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 429:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 432
	 Choosing alt 0 in insn 432:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 433:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 434
	 Choosing alt 0 in insn 434:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 435:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 436:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 437:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 439:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 440:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 442:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 443:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 446:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 447:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 450
	 Choosing alt 0 in insn 450:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 451:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 452
	 Choosing alt 0 in insn 452:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 453:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 454:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 455:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 456:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 457
	 Choosing alt 1 in insn 457:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 458:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 460:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 461:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 462:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 464:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 465
	 Choosing alt 0 in insn 465:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 466:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 467:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 468:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 470:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 471:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 473:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 474:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 475:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 478:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 479
	 Choosing alt 0 in insn 479:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 480:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 481:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 482:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 483:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 484
	 Choosing alt 1 in insn 484:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 485
	 Choosing alt 1 in insn 485:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 487:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 488:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=735 from oldreg=333, assigning class SSE_REGS to r735
  488: r735:SF=r735:SF*[frame:DI-0x14]
      REG_DEAD r333:SF
    Inserting insn reload before:
  816: r735:SF=r333:SF
    Inserting insn reload after:
  817: r334:SF=r735:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 489:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 490
	 Choosing alt 1 in insn 490:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 491:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 493:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 494:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 495:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 497:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 498
	 Choosing alt 0 in insn 498:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 499:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 500:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 501:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 502:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 503:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 504:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 506:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 507:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 508:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 510:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 511:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 512
	 Choosing alt 0 in insn 512:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 513:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 514:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 515:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 516:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 517:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 519:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 520:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 522:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 523:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 524:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 525:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 527
	 Choosing alt 0 in insn 527:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 528:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 529
	 Choosing alt 0 in insn 529:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 530:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 531:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 532:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 534:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 535:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 536:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 537:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 538:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 539:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 540:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 541:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 542:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 543:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 546
	 Choosing alt 0 in insn 546:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 547:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 548
	 Choosing alt 0 in insn 548:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 549:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 550:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 551:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 552:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 553
	 Choosing alt 1 in insn 553:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 554:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 555:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 556:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 557:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 559:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 560:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 561:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 562:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 563
	 Choosing alt 0 in insn 563:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 564:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 565
	 Choosing alt 0 in insn 565:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 566:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 567:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 568:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 569:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 570:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 571:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 572:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 573:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 574:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 575:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 577:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 578:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 580:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 581
	 Choosing alt 0 in insn 581:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 582:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 583
	 Choosing alt 0 in insn 583:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 584:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 585:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 586:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 587:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 588
	 Choosing alt 1 in insn 588:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 589:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 590:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 591:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 592:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 593:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 594:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 595:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 596
	 Choosing alt 0 in insn 596:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 597:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 598:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 599:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 600:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 601:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 602:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 603:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 604:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 605:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 606:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 609:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 610
	 Choosing alt 0 in insn 610:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 611:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 612:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 613:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 614:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 615
	 Choosing alt 1 in insn 615:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 616
	 Choosing alt 1 in insn 616:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 618:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 619:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=736 from oldreg=423, assigning class SSE_REGS to r736
  619: r736:SF=r736:SF*[frame:DI-0x14]
      REG_DEAD r423:SF
    Inserting insn reload before:
  818: r736:SF=r423:SF
    Inserting insn reload after:
  819: r424:SF=r736:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 620:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 621
	 Choosing alt 1 in insn 621:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 622:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 623:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 624:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 625:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 626:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 627:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 628
	 Choosing alt 0 in insn 628:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 629:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 630:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 631:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 632:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 633:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 634:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 635:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 636:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 637:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 638:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 639:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 640:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 641
	 Choosing alt 0 in insn 641:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 642:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 643:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 644:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 645:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 646:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 647:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 648:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 649:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 650:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 651:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 652:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 653:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 654:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 655
	 Choosing alt 0 in insn 655:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 656:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 657:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 658:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 659
	 Choosing alt 1 in insn 659:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 661:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=737 from oldreg=450, assigning class SSE_REGS to r737
  661: r737:SF=r737:SF*[frame:DI-0x18]
      REG_DEAD r450:SF
    Inserting insn reload before:
  820: r737:SF=r450:SF
    Inserting insn reload after:
  821: r451:SF=r737:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 662:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 663:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 664:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 665:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 666:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 667:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 668:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 669:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 670:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 671
	 Choosing alt 0 in insn 671:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 672:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 673:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 674:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 675:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 676
	 Choosing alt 1 in insn 676:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 677:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 678:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 679:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 681:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 682
	 Choosing alt 0 in insn 682:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 683:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 684
	 Choosing alt 1 in insn 684:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 685:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 686:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 687:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 688:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 689:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 690:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 691:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 692
	 Choosing alt 0 in insn 692:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 693:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 694:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 695:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 696:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 697:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 698:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 699:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 700:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 701:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 702:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 703:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 704:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 705
	 Choosing alt 0 in insn 705:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 706:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 707:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 708:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 709:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 710:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 711:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 712:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 713:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 714:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 715:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 716:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 717:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 718:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 719
	 Choosing alt 0 in insn 719:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 720:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 721:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 722:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 723
	 Choosing alt 1 in insn 723:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 725:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=738 from oldreg=493, assigning class SSE_REGS to r738
  725: r738:SF=r738:SF*[frame:DI-0x1c]
      REG_DEAD r493:SF
    Inserting insn reload before:
  822: r738:SF=r493:SF
    Inserting insn reload after:
  823: r494:SF=r738:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 726:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 727:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 728:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 729:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 730:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 731:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 732:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 733:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 734:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 735
	 Choosing alt 0 in insn 735:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 736:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 737:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 738:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 739:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 740
	 Choosing alt 1 in insn 740:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 741:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 742:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 743:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 744:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 745:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 746
	 Choosing alt 0 in insn 746:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 747:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 748
	 Choosing alt 1 in insn 748:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 749:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 750:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 751:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 757:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 763:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 28
EBB 7
EBB 27
EBB 8
EBB 9 10
EBB 11 12
EBB 13 14
EBB 31
EBB 15
EBB 30
EBB 16
EBB 17 18
EBB 19 20 21
EBB 22
EBB 23
EBB 33
EBB 24
EBB 32
EBB 25
EBB 29
EBB 26

********** Pseudo live ranges #1: **********

  BB 26
   Insn 776: point = 0, n_alt = -1
  BB 29
   Insn 802: point = 0, n_alt = -1
  BB 9
   Insn 63: point = 0, n_alt = -1
   Insn 62: point = 0, n_alt = 0
   Insn 61: point = 1, n_alt = 0
   Insn 60: point = 3, n_alt = 0
   Insn 59: point = 4, n_alt = 0
  BB 25
   Insn 792: point = 4, n_alt = -1
   Insn 763: point = 4, n_alt = 1
  BB 32
   Insn 811: point = 4, n_alt = -1
  BB 17
   Insn 155: point = 4, n_alt = -1
   Insn 154: point = 4, n_alt = 0
   Insn 153: point = 5, n_alt = 0
   Insn 152: point = 7, n_alt = 0
   Insn 151: point = 8, n_alt = 0
  BB 24
   Insn 790: point = 9, n_alt = -1
   Insn 757: point = 9, n_alt = 1
  BB 33
   Insn 814: point = 10, n_alt = -1
  BB 19
   Insn 163: point = 11, n_alt = -1
   Insn 162: point = 11, n_alt = 0
   Insn 161: point = 12, n_alt = 0
   Insn 160: point = 14, n_alt = 0
   Insn 159: point = 15, n_alt = 0
  BB 23
   Insn 788: point = 16, n_alt = -1
   Insn 751: point = 16, n_alt = 1
   Insn 750: point = 16, n_alt = 8
   Insn 749: point = 17, n_alt = 3
   Insn 748: point = 18, n_alt = 1
   Insn 747: point = 20, n_alt = 3
   Insn 746: point = 22, n_alt = 0
   Insn 745: point = 24, n_alt = 1
   Insn 744: point = 26, n_alt = 0
   Insn 743: point = 27, n_alt = 0
   Insn 742: point = 29, n_alt = 1
   Insn 741: point = 31, n_alt = 0
   Insn 740: point = 32, n_alt = 1
   Insn 739: point = 34, n_alt = 7
   Insn 738: point = 36, n_alt = 0
   Insn 737: point = 38, n_alt = 4
   Insn 736: point = 39, n_alt = 3
   Insn 735: point = 41, n_alt = 0
   Insn 734: point = 43, n_alt = 1
   Insn 733: point = 45, n_alt = 0
   Insn 732: point = 46, n_alt = 0
   Insn 731: point = 48, n_alt = 0
   Insn 730: point = 50, n_alt = 1
   Insn 729: point = 52, n_alt = 0
   Insn 728: point = 53, n_alt = 1
   Insn 727: point = 55, n_alt = 1
   Insn 726: point = 57, n_alt = 0
   Insn 823: point = 58, n_alt = -2
	Hard reg 23 is preferable by r738 with profit 1000
   Insn 725: point = 60, n_alt = 1
   Insn 822: point = 60, n_alt = -2
	Hard reg 23 is preferable by r738 with profit 1000
	Hard reg 21 is preferable by r738 with profit 1000
   Insn 724: point = 62, n_alt = -2
   Insn 723: point = 64, n_alt = 1
   Insn 722: point = 66, n_alt = 7
   Insn 721: point = 68, n_alt = 4
   Insn 720: point = 69, n_alt = 3
   Insn 719: point = 71, n_alt = 0
   Insn 718: point = 73, n_alt = 1
   Insn 717: point = 75, n_alt = 0
   Insn 716: point = 76, n_alt = 0
   Insn 715: point = 78, n_alt = 0
   Insn 714: point = 80, n_alt = 1
   Insn 713: point = 82, n_alt = 0
   Insn 712: point = 83, n_alt = 1
   Insn 711: point = 85, n_alt = 1
   Insn 710: point = 87, n_alt = 0
   Insn 709: point = 88, n_alt = 7
   Insn 708: point = 90, n_alt = 0
   Insn 707: point = 92, n_alt = 4
   Insn 706: point = 93, n_alt = 3
   Insn 705: point = 95, n_alt = 0
   Insn 704: point = 97, n_alt = 1
   Insn 703: point = 99, n_alt = 0
   Insn 702: point = 100, n_alt = 0
   Insn 701: point = 102, n_alt = 0
   Insn 700: point = 104, n_alt = 1
   Insn 699: point = 106, n_alt = 0
   Insn 698: point = 107, n_alt = 1
   Insn 697: point = 109, n_alt = 1
   Insn 696: point = 111, n_alt = 0
   Insn 695: point = 112, n_alt = 7
   Insn 694: point = 114, n_alt = 3
   Insn 693: point = 115, n_alt = 3
   Insn 692: point = 117, n_alt = 0
   Insn 691: point = 119, n_alt = 1
   Insn 690: point = 121, n_alt = 0
   Insn 689: point = 122, n_alt = 0
   Insn 688: point = 124, n_alt = 1
   Insn 687: point = 126, n_alt = 0
   Insn 686: point = 127, n_alt = 8
   Insn 685: point = 128, n_alt = 3
   Insn 684: point = 129, n_alt = 1
   Insn 683: point = 131, n_alt = 3
   Insn 682: point = 133, n_alt = 0
   Insn 681: point = 135, n_alt = 1
   Insn 680: point = 137, n_alt = 0
   Insn 679: point = 138, n_alt = 0
   Insn 678: point = 140, n_alt = 1
   Insn 677: point = 142, n_alt = 0
   Insn 676: point = 143, n_alt = 1
   Insn 675: point = 145, n_alt = 7
   Insn 674: point = 147, n_alt = 0
   Insn 673: point = 149, n_alt = 4
   Insn 672: point = 150, n_alt = 3
   Insn 671: point = 152, n_alt = 0
   Insn 670: point = 154, n_alt = 1
   Insn 669: point = 156, n_alt = 0
   Insn 668: point = 157, n_alt = 0
   Insn 667: point = 159, n_alt = 0
   Insn 666: point = 161, n_alt = 1
   Insn 665: point = 163, n_alt = 0
   Insn 664: point = 164, n_alt = 1
   Insn 663: point = 166, n_alt = 1
   Insn 662: point = 168, n_alt = 0
   Insn 821: point = 169, n_alt = -2
	Hard reg 23 is preferable by r737 with profit 1000
   Insn 661: point = 171, n_alt = 1
   Insn 820: point = 171, n_alt = -2
	Hard reg 23 is preferable by r737 with profit 1000
	Hard reg 21 is preferable by r737 with profit 1000
   Insn 660: point = 173, n_alt = -2
   Insn 659: point = 175, n_alt = 1
   Insn 658: point = 177, n_alt = 7
   Insn 657: point = 179, n_alt = 4
   Insn 656: point = 180, n_alt = 3
   Insn 655: point = 182, n_alt = 0
   Insn 654: point = 184, n_alt = 1
   Insn 653: point = 186, n_alt = 0
   Insn 652: point = 187, n_alt = 0
   Insn 651: point = 189, n_alt = 0
   Insn 650: point = 191, n_alt = 1
   Insn 649: point = 193, n_alt = 0
   Insn 648: point = 194, n_alt = 1
   Insn 647: point = 196, n_alt = 1
   Insn 646: point = 198, n_alt = 0
   Insn 645: point = 199, n_alt = 7
   Insn 644: point = 201, n_alt = 0
   Insn 643: point = 203, n_alt = 4
   Insn 642: point = 204, n_alt = 3
   Insn 641: point = 206, n_alt = 0
   Insn 640: point = 208, n_alt = 1
   Insn 639: point = 210, n_alt = 0
   Insn 638: point = 211, n_alt = 0
   Insn 637: point = 213, n_alt = 0
   Insn 636: point = 215, n_alt = 1
   Insn 635: point = 217, n_alt = 0
   Insn 634: point = 218, n_alt = 1
   Insn 633: point = 220, n_alt = 1
   Insn 632: point = 222, n_alt = 0
   Insn 631: point = 223, n_alt = 7
   Insn 630: point = 225, n_alt = 3
   Insn 629: point = 226, n_alt = 3
   Insn 628: point = 228, n_alt = 0
   Insn 627: point = 230, n_alt = 1
   Insn 626: point = 232, n_alt = 0
   Insn 625: point = 233, n_alt = 0
   Insn 624: point = 235, n_alt = 1
   Insn 623: point = 237, n_alt = 0
   Insn 622: point = 238, n_alt = 8
   Insn 621: point = 239, n_alt = 1
   Insn 620: point = 241, n_alt = 7
   Insn 819: point = 242, n_alt = -2
	Hard reg 22 is preferable by r736 with profit 1000
   Insn 619: point = 244, n_alt = 1
   Insn 818: point = 244, n_alt = -2
	Hard reg 22 is preferable by r736 with profit 1000
	Hard reg 21 is preferable by r736 with profit 1000
   Insn 618: point = 246, n_alt = 1
   Insn 617: point = 248, n_alt = -2
   Insn 616: point = 250, n_alt = 1
   Insn 615: point = 252, n_alt = 1
   Insn 614: point = 254, n_alt = 7
   Insn 613: point = 256, n_alt = 0
   Insn 612: point = 258, n_alt = 4
   Insn 611: point = 259, n_alt = 3
   Insn 610: point = 261, n_alt = 0
   Insn 609: point = 263, n_alt = 1
   Insn 608: point = 265, n_alt = 0
   Insn 607: point = 266, n_alt = 0
   Insn 606: point = 268, n_alt = 0
   Insn 605: point = 270, n_alt = 1
   Insn 604: point = 272, n_alt = 0
   Insn 603: point = 274, n_alt = 0
   Insn 602: point = 275, n_alt = 1
   Insn 601: point = 277, n_alt = 1
   Insn 600: point = 279, n_alt = 0
   Insn 599: point = 280, n_alt = 7
   Insn 598: point = 282, n_alt = 4
   Insn 597: point = 283, n_alt = 3
   Insn 596: point = 285, n_alt = 0
   Insn 595: point = 287, n_alt = 1
   Insn 594: point = 289, n_alt = 0
   Insn 593: point = 290, n_alt = 0
   Insn 592: point = 292, n_alt = 1
   Insn 591: point = 294, n_alt = 0
   Insn 590: point = 296, n_alt = 0
   Insn 589: point = 297, n_alt = 1
   Insn 588: point = 299, n_alt = 1
   Insn 587: point = 301, n_alt = 7
   Insn 586: point = 303, n_alt = 0
   Insn 585: point = 305, n_alt = 4
   Insn 584: point = 306, n_alt = 3
   Insn 583: point = 308, n_alt = 0
   Insn 582: point = 310, n_alt = 1
   Insn 581: point = 312, n_alt = 0
   Insn 580: point = 314, n_alt = 0
   Insn 579: point = 315, n_alt = 0
   Insn 578: point = 317, n_alt = 0
   Insn 577: point = 319, n_alt = 1
   Insn 576: point = 321, n_alt = 0
   Insn 575: point = 322, n_alt = 3
   Insn 574: point = 324, n_alt = 0
   Insn 573: point = 326, n_alt = 1
   Insn 572: point = 328, n_alt = 0
   Insn 571: point = 329, n_alt = 1
   Insn 570: point = 331, n_alt = 1
   Insn 569: point = 333, n_alt = 0
   Insn 568: point = 334, n_alt = 7
   Insn 567: point = 336, n_alt = 4
   Insn 566: point = 337, n_alt = 3
   Insn 565: point = 339, n_alt = 0
   Insn 564: point = 341, n_alt = 1
   Insn 563: point = 343, n_alt = 0
   Insn 562: point = 345, n_alt = 0
   Insn 561: point = 346, n_alt = 0
   Insn 560: point = 348, n_alt = 0
   Insn 559: point = 350, n_alt = 1
   Insn 558: point = 352, n_alt = 0
   Insn 557: point = 353, n_alt = 0
   Insn 556: point = 355, n_alt = 1
   Insn 555: point = 357, n_alt = 0
   Insn 554: point = 358, n_alt = 1
   Insn 553: point = 360, n_alt = 1
   Insn 552: point = 362, n_alt = 7
   Insn 551: point = 364, n_alt = 0
   Insn 550: point = 366, n_alt = 4
   Insn 549: point = 367, n_alt = 3
   Insn 548: point = 369, n_alt = 0
   Insn 547: point = 371, n_alt = 1
   Insn 546: point = 373, n_alt = 0
   Insn 545: point = 375, n_alt = 0
   Insn 544: point = 376, n_alt = 0
   Insn 543: point = 378, n_alt = 0
   Insn 542: point = 380, n_alt = 0
   Insn 541: point = 382, n_alt = 1
   Insn 540: point = 384, n_alt = 0
   Insn 539: point = 385, n_alt = 3
   Insn 538: point = 387, n_alt = 0
   Insn 537: point = 389, n_alt = 1
   Insn 536: point = 391, n_alt = 0
   Insn 535: point = 392, n_alt = 1
   Insn 534: point = 394, n_alt = 1
   Insn 533: point = 396, n_alt = 0
   Insn 532: point = 397, n_alt = 7
   Insn 531: point = 399, n_alt = 4
   Insn 530: point = 400, n_alt = 3
   Insn 529: point = 402, n_alt = 0
   Insn 528: point = 404, n_alt = 1
   Insn 527: point = 406, n_alt = 0
   Insn 526: point = 408, n_alt = 0
   Insn 525: point = 409, n_alt = 0
   Insn 524: point = 411, n_alt = 0
   Insn 523: point = 413, n_alt = 0
   Insn 522: point = 415, n_alt = 1
   Insn 521: point = 417, n_alt = 0
   Insn 520: point = 418, n_alt = 0
   Insn 519: point = 420, n_alt = 1
   Insn 518: point = 422, n_alt = 0
   Insn 517: point = 423, n_alt = 1
   Insn 516: point = 425, n_alt = 7
   Insn 515: point = 427, n_alt = 0
   Insn 514: point = 429, n_alt = 4
   Insn 513: point = 430, n_alt = 3
   Insn 512: point = 432, n_alt = 0
   Insn 511: point = 434, n_alt = 1
   Insn 510: point = 436, n_alt = 0
   Insn 509: point = 437, n_alt = 0
   Insn 508: point = 439, n_alt = 0
   Insn 507: point = 441, n_alt = 1
   Insn 506: point = 443, n_alt = 0
   Insn 505: point = 445, n_alt = 0
   Insn 504: point = 446, n_alt = 1
   Insn 503: point = 448, n_alt = 1
   Insn 502: point = 450, n_alt = 0
   Insn 501: point = 451, n_alt = 7
   Insn 500: point = 453, n_alt = 4
   Insn 499: point = 454, n_alt = 3
   Insn 498: point = 456, n_alt = 0
   Insn 497: point = 458, n_alt = 1
   Insn 496: point = 460, n_alt = 0
   Insn 495: point = 461, n_alt = 0
   Insn 494: point = 463, n_alt = 1
   Insn 493: point = 465, n_alt = 0
   Insn 492: point = 467, n_alt = 0
   Insn 491: point = 468, n_alt = 8
   Insn 490: point = 469, n_alt = 1
   Insn 489: point = 471, n_alt = 7
   Insn 817: point = 472, n_alt = -2
	Hard reg 22 is preferable by r735 with profit 1000
   Insn 488: point = 474, n_alt = 1
   Insn 816: point = 474, n_alt = -2
	Hard reg 22 is preferable by r735 with profit 1000
	Hard reg 21 is preferable by r735 with profit 1000
   Insn 487: point = 476, n_alt = 1
   Insn 486: point = 478, n_alt = -2
   Insn 485: point = 480, n_alt = 1
   Insn 484: point = 482, n_alt = 1
   Insn 483: point = 484, n_alt = 7
   Insn 482: point = 486, n_alt = 0
   Insn 481: point = 488, n_alt = 4
   Insn 480: point = 489, n_alt = 3
   Insn 479: point = 491, n_alt = 0
   Insn 478: point = 493, n_alt = 1
   Insn 477: point = 495, n_alt = 0
   Insn 476: point = 496, n_alt = 0
   Insn 475: point = 498, n_alt = 0
   Insn 474: point = 500, n_alt = 1
   Insn 473: point = 502, n_alt = 0
   Insn 472: point = 504, n_alt = 0
   Insn 471: point = 505, n_alt = 1
   Insn 470: point = 507, n_alt = 1
   Insn 469: point = 509, n_alt = 0
   Insn 468: point = 510, n_alt = 7
   Insn 467: point = 512, n_alt = 4
   Insn 466: point = 513, n_alt = 3
   Insn 465: point = 515, n_alt = 0
   Insn 464: point = 517, n_alt = 1
   Insn 463: point = 519, n_alt = 0
   Insn 462: point = 520, n_alt = 0
   Insn 461: point = 522, n_alt = 1
   Insn 460: point = 524, n_alt = 0
   Insn 459: point = 526, n_alt = 0
   Insn 458: point = 527, n_alt = 1
   Insn 457: point = 529, n_alt = 1
   Insn 456: point = 531, n_alt = 7
   Insn 455: point = 533, n_alt = 0
   Insn 454: point = 535, n_alt = 4
   Insn 453: point = 536, n_alt = 3
   Insn 452: point = 538, n_alt = 0
   Insn 451: point = 540, n_alt = 1
   Insn 450: point = 542, n_alt = 0
   Insn 449: point = 544, n_alt = 0
   Insn 448: point = 545, n_alt = 0
   Insn 447: point = 547, n_alt = 0
   Insn 446: point = 549, n_alt = 1
   Insn 445: point = 551, n_alt = 0
   Insn 444: point = 552, n_alt = 3
   Insn 443: point = 554, n_alt = 0
   Insn 442: point = 556, n_alt = 1
   Insn 441: point = 558, n_alt = 0
   Insn 440: point = 559, n_alt = 1
   Insn 439: point = 561, n_alt = 1
   Insn 438: point = 563, n_alt = 0
   Insn 437: point = 564, n_alt = 7
   Insn 436: point = 566, n_alt = 4
   Insn 435: point = 567, n_alt = 3
   Insn 434: point = 569, n_alt = 0
   Insn 433: point = 571, n_alt = 1
   Insn 432: point = 573, n_alt = 0
   Insn 431: point = 575, n_alt = 0
   Insn 430: point = 576, n_alt = 0
   Insn 429: point = 578, n_alt = 0
   Insn 428: point = 580, n_alt = 1
   Insn 427: point = 582, n_alt = 0
   Insn 426: point = 583, n_alt = 0
   Insn 425: point = 585, n_alt = 1
   Insn 424: point = 587, n_alt = 0
   Insn 423: point = 588, n_alt = 1
   Insn 422: point = 590, n_alt = 1
   Insn 421: point = 592, n_alt = 7
   Insn 420: point = 594, n_alt = 0
   Insn 419: point = 596, n_alt = 4
   Insn 418: point = 597, n_alt = 3
   Insn 417: point = 599, n_alt = 0
   Insn 416: point = 601, n_alt = 1
   Insn 415: point = 603, n_alt = 0
   Insn 414: point = 605, n_alt = 0
   Insn 413: point = 606, n_alt = 0
   Insn 412: point = 608, n_alt = 0
   Insn 411: point = 610, n_alt = 0
   Insn 410: point = 612, n_alt = 1
   Insn 409: point = 614, n_alt = 0
   Insn 408: point = 615, n_alt = 3
   Insn 407: point = 617, n_alt = 0
   Insn 406: point = 619, n_alt = 1
   Insn 405: point = 621, n_alt = 0
   Insn 404: point = 622, n_alt = 1
   Insn 403: point = 624, n_alt = 1
   Insn 402: point = 626, n_alt = 0
   Insn 401: point = 627, n_alt = 7
   Insn 400: point = 629, n_alt = 4
   Insn 399: point = 630, n_alt = 3
   Insn 398: point = 632, n_alt = 0
   Insn 397: point = 634, n_alt = 1
   Insn 396: point = 636, n_alt = 0
   Insn 395: point = 638, n_alt = 0
   Insn 394: point = 639, n_alt = 0
   Insn 393: point = 641, n_alt = 0
   Insn 392: point = 643, n_alt = 0
   Insn 391: point = 645, n_alt = 1
   Insn 390: point = 647, n_alt = 0
   Insn 389: point = 648, n_alt = 0
   Insn 388: point = 650, n_alt = 1
   Insn 387: point = 652, n_alt = 0
   Insn 386: point = 653, n_alt = 1
   Insn 385: point = 655, n_alt = 7
   Insn 384: point = 657, n_alt = 0
   Insn 383: point = 659, n_alt = 4
   Insn 382: point = 660, n_alt = 3
   Insn 381: point = 662, n_alt = 0
   Insn 380: point = 664, n_alt = 1
   Insn 379: point = 666, n_alt = 0
   Insn 378: point = 667, n_alt = 0
   Insn 377: point = 669, n_alt = 0
   Insn 376: point = 671, n_alt = 1
   Insn 375: point = 673, n_alt = 0
   Insn 374: point = 675, n_alt = 0
   Insn 373: point = 676, n_alt = 1
   Insn 372: point = 678, n_alt = 1
   Insn 371: point = 680, n_alt = 0
   Insn 370: point = 681, n_alt = 7
   Insn 369: point = 683, n_alt = 4
   Insn 368: point = 684, n_alt = 3
   Insn 367: point = 686, n_alt = 0
   Insn 366: point = 688, n_alt = 1
   Insn 365: point = 690, n_alt = 0
   Insn 364: point = 691, n_alt = 0
   Insn 363: point = 693, n_alt = 1
   Insn 362: point = 695, n_alt = 0
   Insn 361: point = 697, n_alt = 0
   Insn 360: point = 698, n_alt = 8
   Insn 359: point = 699, n_alt = 1
   Insn 358: point = 701, n_alt = 2
   Insn 357: point = 702, n_alt = -2
   Insn 356: point = 704, n_alt = 2
   Insn 355: point = 706, n_alt = 7
   Insn 354: point = 708, n_alt = 4
   Insn 353: point = 709, n_alt = 3
   Insn 352: point = 711, n_alt = 0
   Insn 351: point = 713, n_alt = 1
   Insn 350: point = 715, n_alt = 0
   Insn 349: point = 716, n_alt = 0
   Insn 348: point = 718, n_alt = 0
   Insn 347: point = 720, n_alt = 1
   Insn 346: point = 722, n_alt = 0
   Insn 345: point = 723, n_alt = 1
   Insn 344: point = 725, n_alt = 1
   Insn 343: point = 727, n_alt = 0
   Insn 342: point = 729, n_alt = 0
   Insn 341: point = 730, n_alt = 7
   Insn 340: point = 732, n_alt = 4
   Insn 339: point = 733, n_alt = 3
   Insn 338: point = 735, n_alt = 0
   Insn 337: point = 737, n_alt = 1
   Insn 336: point = 739, n_alt = 0
   Insn 335: point = 740, n_alt = 0
   Insn 334: point = 742, n_alt = 0
   Insn 333: point = 744, n_alt = 1
   Insn 332: point = 746, n_alt = 0
   Insn 331: point = 747, n_alt = 1
   Insn 330: point = 749, n_alt = 1
   Insn 329: point = 751, n_alt = 0
  BB 21
   Insn 786: point = 753, n_alt = -1
   Insn 246: point = 753, n_alt = 8
   Insn 245: point = 754, n_alt = 7
  BB 22
   Insn 326: point = 756, n_alt = 8
   Insn 325: point = 757, n_alt = 2
   Insn 324: point = 759, n_alt = 7
   Insn 323: point = 760, n_alt = -2
   Insn 322: point = 762, n_alt = 1
   Insn 321: point = 764, n_alt = 7
   Insn 320: point = 766, n_alt = 0
   Insn 319: point = 768, n_alt = 4
   Insn 318: point = 769, n_alt = 3
   Insn 317: point = 771, n_alt = 0
   Insn 316: point = 773, n_alt = 1
   Insn 315: point = 775, n_alt = 0
   Insn 314: point = 776, n_alt = 0
   Insn 313: point = 778, n_alt = 0
   Insn 312: point = 780, n_alt = 1
   Insn 311: point = 782, n_alt = 0
   Insn 310: point = 784, n_alt = 0
   Insn 309: point = 785, n_alt = 1
   Insn 308: point = 787, n_alt = 1
   Insn 307: point = 789, n_alt = 0
   Insn 306: point = 790, n_alt = 1
   Insn 305: point = 792, n_alt = 7
   Insn 304: point = 794, n_alt = 0
   Insn 303: point = 796, n_alt = 4
   Insn 302: point = 797, n_alt = 3
   Insn 301: point = 799, n_alt = 0
   Insn 300: point = 801, n_alt = 1
   Insn 299: point = 803, n_alt = 0
   Insn 298: point = 805, n_alt = 0
   Insn 297: point = 806, n_alt = 0
   Insn 296: point = 808, n_alt = 0
   Insn 295: point = 810, n_alt = 1
   Insn 294: point = 812, n_alt = 0
   Insn 293: point = 813, n_alt = 3
   Insn 292: point = 815, n_alt = 0
   Insn 291: point = 817, n_alt = 1
   Insn 290: point = 819, n_alt = 0
   Insn 289: point = 820, n_alt = 1
   Insn 288: point = 822, n_alt = 1
   Insn 287: point = 824, n_alt = 0
   Insn 286: point = 825, n_alt = 1
   Insn 285: point = 827, n_alt = 7
   Insn 284: point = 829, n_alt = 0
   Insn 283: point = 831, n_alt = 4
   Insn 282: point = 832, n_alt = 3
   Insn 281: point = 834, n_alt = 0
   Insn 280: point = 836, n_alt = 1
   Insn 279: point = 838, n_alt = 0
   Insn 278: point = 840, n_alt = 0
   Insn 277: point = 841, n_alt = 0
   Insn 276: point = 843, n_alt = 0
   Insn 275: point = 845, n_alt = 0
   Insn 274: point = 847, n_alt = 1
   Insn 273: point = 849, n_alt = 0
   Insn 272: point = 850, n_alt = 3
   Insn 271: point = 852, n_alt = 0
   Insn 270: point = 854, n_alt = 1
   Insn 269: point = 856, n_alt = 0
   Insn 268: point = 857, n_alt = 1
   Insn 267: point = 859, n_alt = 1
   Insn 266: point = 861, n_alt = 0
   Insn 265: point = 862, n_alt = 7
   Insn 264: point = 864, n_alt = 0
   Insn 263: point = 866, n_alt = 4
   Insn 262: point = 867, n_alt = 3
   Insn 261: point = 869, n_alt = 0
   Insn 260: point = 871, n_alt = 1
   Insn 259: point = 873, n_alt = 0
   Insn 258: point = 874, n_alt = 0
   Insn 257: point = 876, n_alt = 0
   Insn 256: point = 878, n_alt = 1
   Insn 255: point = 880, n_alt = 0
   Insn 254: point = 882, n_alt = 0
   Insn 253: point = 883, n_alt = 1
   Insn 252: point = 885, n_alt = 1
   Insn 251: point = 887, n_alt = 0
  BB 20
   Insn 240: point = 889, n_alt = -1
   Insn 239: point = 889, n_alt = 1
   Insn 238: point = 890, n_alt = 7
   Insn 237: point = 891, n_alt = 8
   Insn 236: point = 892, n_alt = 1
   Insn 235: point = 894, n_alt = 7
   Insn 234: point = 896, n_alt = 0
   Insn 233: point = 898, n_alt = 4
   Insn 232: point = 899, n_alt = 3
   Insn 231: point = 901, n_alt = 0
   Insn 230: point = 903, n_alt = 1
   Insn 229: point = 905, n_alt = 0
   Insn 228: point = 906, n_alt = 0
   Insn 227: point = 908, n_alt = 0
   Insn 226: point = 910, n_alt = 1
   Insn 225: point = 912, n_alt = 0
   Insn 224: point = 914, n_alt = 0
   Insn 223: point = 915, n_alt = 1
   Insn 222: point = 917, n_alt = 1
   Insn 221: point = 919, n_alt = 0
   Insn 220: point = 920, n_alt = 1
   Insn 219: point = 922, n_alt = 7
   Insn 218: point = 924, n_alt = 0
   Insn 217: point = 926, n_alt = 4
   Insn 216: point = 927, n_alt = 3
   Insn 215: point = 929, n_alt = 0
   Insn 214: point = 931, n_alt = 1
   Insn 213: point = 933, n_alt = 0
   Insn 212: point = 935, n_alt = 0
   Insn 211: point = 936, n_alt = 0
   Insn 210: point = 938, n_alt = 0
   Insn 209: point = 940, n_alt = 1
   Insn 208: point = 942, n_alt = 0
   Insn 207: point = 943, n_alt = 3
   Insn 206: point = 945, n_alt = 0
   Insn 205: point = 947, n_alt = 1
   Insn 204: point = 949, n_alt = 0
   Insn 203: point = 950, n_alt = 1
   Insn 202: point = 952, n_alt = 1
   Insn 201: point = 954, n_alt = 0
   Insn 200: point = 955, n_alt = 1
   Insn 199: point = 957, n_alt = 7
   Insn 198: point = 959, n_alt = 0
   Insn 197: point = 961, n_alt = 4
   Insn 196: point = 962, n_alt = 3
   Insn 195: point = 964, n_alt = 0
   Insn 194: point = 966, n_alt = 1
   Insn 193: point = 968, n_alt = 0
   Insn 192: point = 970, n_alt = 0
   Insn 191: point = 971, n_alt = 0
   Insn 190: point = 973, n_alt = 0
   Insn 189: point = 975, n_alt = 0
   Insn 188: point = 977, n_alt = 1
   Insn 187: point = 979, n_alt = 0
   Insn 186: point = 980, n_alt = 3
   Insn 185: point = 982, n_alt = 0
   Insn 184: point = 984, n_alt = 1
   Insn 183: point = 986, n_alt = 0
   Insn 182: point = 987, n_alt = 1
   Insn 181: point = 989, n_alt = 1
   Insn 180: point = 991, n_alt = 0
   Insn 179: point = 992, n_alt = 7
   Insn 178: point = 994, n_alt = 0
   Insn 177: point = 996, n_alt = 4
   Insn 176: point = 997, n_alt = 3
   Insn 175: point = 999, n_alt = 0
   Insn 174: point = 1001, n_alt = 1
   Insn 173: point = 1003, n_alt = 0
   Insn 172: point = 1004, n_alt = 0
   Insn 171: point = 1006, n_alt = 0
   Insn 170: point = 1008, n_alt = 1
   Insn 169: point = 1010, n_alt = 0
   Insn 168: point = 1012, n_alt = 0
   Insn 167: point = 1013, n_alt = 1
   Insn 166: point = 1015, n_alt = 1
   Insn 165: point = 1017, n_alt = 0
  BB 18
   Insn 157: point = 1019, n_alt = 1
  BB 16
   Insn 149: point = 1020, n_alt = 1
   Insn 148: point = 1021, n_alt = 0
   Insn 147: point = 1022, n_alt = 0
   Insn 146: point = 1023, n_alt = 0
   Insn 145: point = 1023, n_alt = 3
   Insn 144: point = 1023, n_alt = 4
   Insn 143: point = 1023, n_alt = 0
   Insn 142: point = 1023, n_alt = 3
   Insn 141: point = 1023, n_alt = 4
  BB 30
   Insn 805: point = 1023, n_alt = -1
  BB 11
   Insn 73: point = 1023, n_alt = -1
   Insn 72: point = 1023, n_alt = 0
   Insn 71: point = 1024, n_alt = 0
   Insn 70: point = 1026, n_alt = 0
   Insn 69: point = 1027, n_alt = 0
  BB 15
   Insn 783: point = 1028, n_alt = -1
   Insn 135: point = 1028, n_alt = 1
  BB 31
   Insn 808: point = 1029, n_alt = -1
  BB 13
   Insn 81: point = 1030, n_alt = -1
   Insn 80: point = 1030, n_alt = 0
   Insn 79: point = 1031, n_alt = 0
   Insn 78: point = 1033, n_alt = 0
   Insn 77: point = 1034, n_alt = 0
  BB 14
   Insn 781: point = 1035, n_alt = -1
   Insn 129: point = 1035, n_alt = 1
   Insn 128: point = 1035, n_alt = 8
   Insn 127: point = 1036, n_alt = 4
   Insn 126: point = 1037, n_alt = 7
   Insn 125: point = 1039, n_alt = 0
   Insn 124: point = 1041, n_alt = 4
   Insn 123: point = 1042, n_alt = 3
   Insn 122: point = 1044, n_alt = 0
   Insn 121: point = 1046, n_alt = 1
   Insn 120: point = 1048, n_alt = 0
   Insn 119: point = 1049, n_alt = 0
   Insn 118: point = 1051, n_alt = 1
   Insn 117: point = 1053, n_alt = 0
   Insn 116: point = 1054, n_alt = 3
   Insn 115: point = 1056, n_alt = 0
   Insn 114: point = 1058, n_alt = 1
   Insn 113: point = 1060, n_alt = 0
   Insn 112: point = 1061, n_alt = 0
   Insn 111: point = 1063, n_alt = 0
   Insn 110: point = 1065, n_alt = 1
   Insn 109: point = 1067, n_alt = 0
   Insn 108: point = 1068, n_alt = 1
   Insn 107: point = 1070, n_alt = 1
   Insn 106: point = 1072, n_alt = 0
   Insn 105: point = 1073, n_alt = 8
   Insn 104: point = 1074, n_alt = 4
   Insn 103: point = 1075, n_alt = 7
   Insn 102: point = 1077, n_alt = 0
   Insn 101: point = 1079, n_alt = 4
   Insn 100: point = 1080, n_alt = 3
   Insn 99: point = 1082, n_alt = 0
   Insn 98: point = 1084, n_alt = 1
   Insn 97: point = 1086, n_alt = 0
   Insn 96: point = 1087, n_alt = 0
   Insn 95: point = 1089, n_alt = 1
   Insn 94: point = 1091, n_alt = 0
   Insn 93: point = 1092, n_alt = 3
   Insn 92: point = 1094, n_alt = 0
   Insn 91: point = 1096, n_alt = 1
   Insn 90: point = 1098, n_alt = 0
   Insn 89: point = 1099, n_alt = 0
   Insn 88: point = 1101, n_alt = 0
   Insn 87: point = 1103, n_alt = 1
   Insn 86: point = 1105, n_alt = 0
   Insn 85: point = 1106, n_alt = 1
   Insn 84: point = 1108, n_alt = 1
   Insn 83: point = 1110, n_alt = 0
  BB 12
   Insn 75: point = 1112, n_alt = 1
  BB 10
   Insn 67: point = 1113, n_alt = 1
   Insn 66: point = 1114, n_alt = 0
   Insn 65: point = 1115, n_alt = 0
  BB 8
   Insn 57: point = 1116, n_alt = 1
  BB 27
   Insn 796: point = 1116, n_alt = -1
  BB 3
   Insn 15: point = 1116, n_alt = -1
   Insn 14: point = 1116, n_alt = 0
   Insn 13: point = 1117, n_alt = 0
   Insn 12: point = 1119, n_alt = 0
   Insn 11: point = 1120, n_alt = 0
  BB 7
   Insn 779: point = 1121, n_alt = -1
   Insn 51: point = 1121, n_alt = 1
  BB 28
   Insn 799: point = 1122, n_alt = -1
  BB 5
   Insn 23: point = 1123, n_alt = -1
   Insn 22: point = 1123, n_alt = 0
   Insn 21: point = 1124, n_alt = 0
   Insn 20: point = 1126, n_alt = 0
   Insn 19: point = 1127, n_alt = 0
  BB 6
   Insn 777: point = 1128, n_alt = -1
   Insn 45: point = 1128, n_alt = 1
   Insn 44: point = 1128, n_alt = 8
   Insn 43: point = 1129, n_alt = 7
   Insn 42: point = 1130, n_alt = 3
   Insn 41: point = 1131, n_alt = 3
   Insn 40: point = 1133, n_alt = 0
   Insn 39: point = 1135, n_alt = 1
   Insn 38: point = 1137, n_alt = 0
   Insn 37: point = 1138, n_alt = 0
   Insn 36: point = 1140, n_alt = 1
   Insn 35: point = 1142, n_alt = 0
   Insn 34: point = 1143, n_alt = 8
   Insn 33: point = 1144, n_alt = 7
   Insn 32: point = 1145, n_alt = 3
   Insn 31: point = 1146, n_alt = 3
   Insn 30: point = 1148, n_alt = 0
   Insn 29: point = 1150, n_alt = 1
   Insn 28: point = 1152, n_alt = 0
   Insn 27: point = 1153, n_alt = 0
   Insn 26: point = 1155, n_alt = 1
   Insn 25: point = 1157, n_alt = 0
  BB 4
   Insn 17: point = 1159, n_alt = 1
  BB 2
   Insn 9: point = 1160, n_alt = 1
   Insn 8: point = 1161, n_alt = 0
   Insn 7: point = 1162, n_alt = 0
   Insn 3: point = 1163, n_alt = 5
   Insn 2: point = 1163, n_alt = 5
 r87: [1154..1155]
 r88: [1149..1153]
 r89: [1149..1150]
 r90: [1147..1148]
 r91: [1143..1146]
 r92: [1139..1140]
 r93: [1134..1138]
 r94: [1134..1135]
 r95: [1132..1133]
 r96: [1128..1131]
 r97: [1107..1108]
 r98: [1100..1106]
 r99: [1102..1103]
 r100: [1100..1101]
 r101: [1095..1099]
 r102: [1095..1096]
 r103: [1093..1094]
 r104: [1078..1092]
 r105: [1088..1089]
 r106: [1083..1087]
 r107: [1083..1084]
 r108: [1081..1082]
 r109: [1073..1080]
 r110: [1073..1075]
 r111: [1069..1070]
 r112: [1062..1068]
 r113: [1064..1065]
 r114: [1062..1063]
 r115: [1057..1061]
 r116: [1057..1058]
 r117: [1055..1056]
 r118: [1040..1054]
 r119: [1050..1051]
 r120: [1045..1049]
 r121: [1045..1046]
 r122: [1043..1044]
 r123: [1035..1042]
 r124: [1035..1037]
 r125: [1014..1015]
 r126: [1005..1013]
 r127: [1009..1010]
 r128: [1007..1008]
 r129: [1005..1006]
 r130: [1000..1004]
 r131: [1000..1001]
 r132: [998..999]
 r133: [995..997]
 r134: [956..992]
 r135: [988..989]
 r136: [981..987]
 r137: [983..984]
 r138: [981..982]
 r139: [965..980]
 r140: [976..977]
 r141: [974..975]
 r142: [969..971]
 r143: [967..968]
 r144: [965..966]
 r145: [963..964]
 r146: [960..962]
 r147: [956..957]
 r148: [921..955]
 r149: [951..952]
 r150: [944..950]
 r151: [946..947]
 r152: [944..945]
 r153: [930..943]
 r154: [939..940]
 r155: [937..938]
 r156: [934..936]
 r157: [932..933]
 r158: [930..931]
 r159: [928..929]
 r160: [925..927]
 r161: [921..922]
 r162: [893..920]
 r163: [916..917]
 r164: [907..915]
 r165: [911..912]
 r166: [909..910]
 r167: [907..908]
 r168: [902..906]
 r169: [902..903]
 r170: [900..901]
 r171: [897..899]
 r172: [893..894]
 r173: [891..892]
 r174: [884..885]
 r175: [875..883]
 r176: [879..880]
 r177: [877..878]
 r178: [875..876]
 r179: [870..874]
 r180: [870..871]
 r181: [868..869]
 r182: [865..867]
 r183: [826..862]
 r184: [858..859]
 r185: [851..857]
 r186: [853..854]
 r187: [851..852]
 r188: [835..850]
 r189: [846..847]
 r190: [844..845]
 r191: [839..841]
 r192: [837..838]
 r193: [835..836]
 r194: [833..834]
 r195: [830..832]
 r196: [826..827]
 r197: [791..825]
 r198: [821..822]
 r199: [814..820]
 r200: [816..817]
 r201: [814..815]
 r202: [800..813]
 r203: [809..810]
 r204: [807..808]
 r205: [804..806]
 r206: [802..803]
 r207: [800..801]
 r208: [798..799]
 r209: [795..797]
 r210: [791..792]
 r211: [763..790]
 r212: [786..787]
 r213: [777..785]
 r214: [781..782]
 r215: [779..780]
 r216: [777..778]
 r217: [772..776]
 r218: [772..773]
 r219: [770..771]
 r220: [767..769]
 r221: [763..764]
 r222: [761..762]
 r223: [758..760]
 r224: [748..749]
 r225: [741..747]
 r226: [743..744]
 r227: [741..742]
 r228: [736..740]
 r229: [736..737]
 r230: [734..735]
 r231: [731..733]
 r232: [705..730]
 r233: [726..727]
 r234: [724..725]
 r235: [717..723]
 r236: [719..720]
 r237: [717..718]
 r238: [712..716]
 r239: [712..713]
 r240: [710..711]
 r241: [707..709]
 r242: [705..706]
 r243: [703..704]
 r244: [700..702]
 r245: [694..695]
 r246: [692..693]
 r247: [687..691]
 r248: [687..688]
 r249: [685..686]
 r250: [682..684]
 r251: [654..681]
 r252: [677..678]
 r253: [668..676]
 r254: [672..673]
 r255: [670..671]
 r256: [668..669]
 r257: [663..667]
 r258: [663..664]
 r259: [661..662]
 r260: [658..660]
 r261: [654..655]
 r262: [589..653]
 r263: [649..650]
 r264: [633..648]
 r265: [644..645]
 r266: [642..643]
 r267: [637..639]
 r268: [635..636]
 r269: [633..634]
 r270: [631..632]
 r271: [628..630]
 r272: [591..627]
 r273: [623..624]
 r274: [616..622]
 r275: [618..619]
 r276: [616..617]
 r277: [600..615]
 r278: [611..612]
 r279: [609..610]
 r280: [604..606]
 r281: [602..603]
 r282: [600..601]
 r283: [598..599]
 r284: [595..597]
 r285: [591..592]
 r286: [589..590]
 r287: [528..588]
 r288: [584..585]
 r289: [570..583]
 r290: [579..580]
 r291: [577..578]
 r292: [574..576]
 r293: [572..573]
 r294: [570..571]
 r295: [568..569]
 r296: [565..567]
 r297: [530..564]
 r298: [560..561]
 r299: [553..559]
 r300: [555..556]
 r301: [553..554]
 r302: [539..552]
 r303: [548..549]
 r304: [546..547]
 r305: [543..545]
 r306: [541..542]
 r307: [539..540]
 r308: [537..538]
 r309: [534..536]
 r310: [530..531]
 r311: [528..529]
 r312: [481..527]
 r313: [523..524]
 r314: [521..522]
 r315: [516..520]
 r316: [516..517]
 r317: [514..515]
 r318: [511..513]
 r319: [483..510]
 r320: [506..507]
 r321: [497..505]
 r322: [501..502]
 r323: [499..500]
 r324: [497..498]
 r325: [492..496]
 r326: [492..493]
 r327: [490..491]
 r328: [487..489]
 r329: [483..484]
 r330: [481..482]
 r331: [479..480]
 r332: [477..478]
 r333: [475..476]
 r334: [470..472]
 r335: [464..465]
 r336: [462..463]
 r337: [457..461]
 r338: [457..458]
 r339: [455..456]
 r340: [452..454]
 r341: [424..451]
 r342: [447..448]
 r343: [438..446]
 r344: [442..443]
 r345: [440..441]
 r346: [438..439]
 r347: [433..437]
 r348: [433..434]
 r349: [431..432]
 r350: [428..430]
 r351: [424..425]
 r352: [359..423]
 r353: [419..420]
 r354: [403..418]
 r355: [414..415]
 r356: [412..413]
 r357: [407..409]
 r358: [405..406]
 r359: [403..404]
 r360: [401..402]
 r361: [398..400]
 r362: [361..397]
 r363: [393..394]
 r364: [386..392]
 r365: [388..389]
 r366: [386..387]
 r367: [370..385]
 r368: [381..382]
 r369: [379..380]
 r370: [374..376]
 r371: [372..373]
 r372: [370..371]
 r373: [368..369]
 r374: [365..367]
 r375: [361..362]
 r376: [359..360]
 r377: [298..358]
 r378: [354..355]
 r379: [340..353]
 r380: [349..350]
 r381: [347..348]
 r382: [344..346]
 r383: [342..343]
 r384: [340..341]
 r385: [338..339]
 r386: [335..337]
 r387: [300..334]
 r388: [330..331]
 r389: [323..329]
 r390: [325..326]
 r391: [323..324]
 r392: [309..322]
 r393: [318..319]
 r394: [316..317]
 r395: [313..315]
 r396: [311..312]
 r397: [309..310]
 r398: [307..308]
 r399: [304..306]
 r400: [300..301]
 r401: [298..299]
 r402: [251..297]
 r403: [293..294]
 r404: [291..292]
 r405: [286..290]
 r406: [286..287]
 r407: [284..285]
 r408: [281..283]
 r409: [253..280]
 r410: [276..277]
 r411: [267..275]
 r412: [271..272]
 r413: [269..270]
 r414: [267..268]
 r415: [262..266]
 r416: [262..263]
 r417: [260..261]
 r418: [257..259]
 r419: [253..254]
 r420: [251..252]
 r421: [249..250]
 r422: [247..248]
 r423: [245..246]
 r424: [240..242]
 r425: [234..235]
 r426: [229..233]
 r427: [229..230]
 r428: [227..228]
 r429: [224..226]
 r430: [130..223]
 r431: [219..220]
 r432: [212..218]
 r433: [214..215]
 r434: [212..213]
 r435: [207..211]
 r436: [207..208]
 r437: [205..206]
 r438: [202..204]
 r439: [176..199]
 r440: [195..196]
 r441: [188..194]
 r442: [190..191]
 r443: [188..189]
 r444: [183..187]
 r445: [183..184]
 r446: [181..182]
 r447: [178..180]
 r448: [176..177]
 r449: [174..175]
 r450: [172..173]
 r451: [144..169]
 r452: [165..166]
 r453: [158..164]
 r454: [160..161]
 r455: [158..159]
 r456: [153..157]
 r457: [153..154]
 r458: [151..152]
 r459: [148..150]
 r460: [144..145]
 r461: [130..143]
 r462: [139..140]
 r463: [134..138]
 r464: [134..135]
 r465: [132..133]
 r466: [127..131]
 r467: [127..129]
 r468: [123..124]
 r469: [118..122]
 r470: [118..119]
 r471: [116..117]
 r472: [113..115]
 r473: [19..112]
 r474: [108..109]
 r475: [101..107]
 r476: [103..104]
 r477: [101..102]
 r478: [96..100]
 r479: [96..97]
 r480: [94..95]
 r481: [91..93]
 r482: [65..88]
 r483: [84..85]
 r484: [77..83]
 r485: [79..80]
 r486: [77..78]
 r487: [72..76]
 r488: [72..73]
 r489: [70..71]
 r490: [67..69]
 r491: [65..66]
 r492: [63..64]
 r493: [61..62]
 r494: [33..58]
 r495: [54..55]
 r496: [47..53]
 r497: [49..50]
 r498: [47..48]
 r499: [42..46]
 r500: [42..43]
 r501: [40..41]
 r502: [37..39]
 r503: [33..34]
 r504: [19..32]
 r505: [28..29]
 r506: [23..27]
 r507: [23..24]
 r508: [21..22]
 r509: [16..20]
 r510: [16..18]
 r511: [1160..1162]
 r512: [1116..1161]
 r513: [1116..1117]
 r514: [1123..1124]
 r515: [0..1]
 r516: [1113..1115]
 r517: [1023..1114]
 r518: [1023..1024]
 r519: [1030..1031]
 r520: [1020..1022]
 r521: [4..1021]
 r522: [4..5]
 r523: [11..12]
 r524: [1118..1119]
 r525: [1125..1126]
 r526: [1156..1157]
 r527: [1151..1152]
 r528: [1143..1145]
 r529: [1143..1144]
 r530: [1141..1142]
 r531: [1136..1137]
 r532: [1128..1130]
 r533: [1128..1129]
 r534: [2..3]
 r535: [1025..1026]
 r536: [1032..1033]
 r537: [1109..1110]
 r538: [1104..1105]
 r539: [1097..1098]
 r540: [1090..1091]
 r541: [1085..1086]
 r542: [1076..1079]
 r543: [1076..1077]
 r544: [1073..1074]
 r545: [1071..1072]
 r546: [1066..1067]
 r547: [1059..1060]
 r548: [1052..1053]
 r549: [1047..1048]
 r550: [1038..1041]
 r551: [1038..1039]
 r552: [1035..1036]
 r553: [6..7]
 r554: [13..14]
 r555: [1016..1017]
 r556: [1011..1012]
 r557: [1002..1003]
 r558: [993..996]
 r559: [993..994]
 r560: [990..991]
 r561: [985..986]
 r562: [978..979]
 r563: [972..973]
 r564: [969..970]
 r565: [958..961]
 r566: [958..959]
 r567: [953..954]
 r568: [948..949]
 r569: [941..942]
 r570: [934..935]
 r571: [923..926]
 r572: [923..924]
 r573: [918..919]
 r574: [913..914]
 r575: [904..905]
 r576: [895..898]
 r577: [895..896]
 r578: [889..890]
 r579: [753..754]
 r580: [886..887]
 r581: [881..882]
 r582: [872..873]
 r583: [863..866]
 r584: [863..864]
 r585: [860..861]
 r586: [855..856]
 r587: [848..849]
 r588: [842..843]
 r589: [839..840]
 r590: [828..831]
 r591: [828..829]
 r592: [823..824]
 r593: [818..819]
 r594: [811..812]
 r595: [804..805]
 r596: [793..796]
 r597: [793..794]
 r598: [788..789]
 r599: [783..784]
 r600: [774..775]
 r601: [765..768]
 r602: [765..766]
 r603: [756..757]
 r604: [758..759]
 r605: [750..751]
 r606: [745..746]
 r607: [738..739]
 r608: [731..732]
 r609: [728..729]
 r610: [721..722]
 r611: [714..715]
 r612: [707..708]
 r613: [698..699]
 r614: [700..701]
 r615: [696..697]
 r616: [689..690]
 r617: [682..683]
 r618: [679..680]
 r619: [674..675]
 r620: [665..666]
 r621: [656..659]
 r622: [656..657]
 r623: [651..652]
 r624: [646..647]
 r625: [640..641]
 r626: [637..638]
 r627: [628..629]
 r628: [625..626]
 r629: [620..621]
 r630: [613..614]
 r631: [607..608]
 r632: [604..605]
 r633: [593..596]
 r634: [593..594]
 r635: [586..587]
 r636: [581..582]
 r637: [574..575]
 r638: [565..566]
 r639: [562..563]
 r640: [557..558]
 r641: [550..551]
 r642: [543..544]
 r643: [532..535]
 r644: [532..533]
 r645: [525..526]
 r646: [518..519]
 r647: [511..512]
 r648: [508..509]
 r649: [503..504]
 r650: [494..495]
 r651: [485..488]
 r652: [485..486]
 r653: [468..469]
 r654: [470..471]
 r655: [466..467]
 r656: [459..460]
 r657: [452..453]
 r658: [449..450]
 r659: [444..445]
 r660: [435..436]
 r661: [426..429]
 r662: [426..427]
 r663: [421..422]
 r664: [416..417]
 r665: [410..411]
 r666: [407..408]
 r667: [398..399]
 r668: [395..396]
 r669: [390..391]
 r670: [383..384]
 r671: [377..378]
 r672: [374..375]
 r673: [363..366]
 r674: [363..364]
 r675: [356..357]
 r676: [351..352]
 r677: [344..345]
 r678: [335..336]
 r679: [332..333]
 r680: [327..328]
 r681: [320..321]
 r682: [313..314]
 r683: [302..305]
 r684: [302..303]
 r685: [295..296]
 r686: [288..289]
 r687: [281..282]
 r688: [278..279]
 r689: [273..274]
 r690: [264..265]
 r691: [255..258]
 r692: [255..256]
 r693: [238..239]
 r694: [240..241]
 r695: [236..237]
 r696: [231..232]
 r697: [224..225]
 r698: [221..222]
 r699: [216..217]
 r700: [209..210]
 r701: [200..203]
 r702: [200..201]
 r703: [197..198]
 r704: [192..193]
 r705: [185..186]
 r706: [178..179]
 r707: [167..168]
 r708: [162..163]
 r709: [155..156]
 r710: [146..149]
 r711: [146..147]
 r712: [141..142]
 r713: [136..137]
 r714: [127..128]
 r715: [125..126]
 r716: [120..121]
 r717: [113..114]
 r718: [110..111]
 r719: [105..106]
 r720: [98..99]
 r721: [89..92]
 r722: [89..90]
 r723: [86..87]
 r724: [81..82]
 r725: [74..75]
 r726: [67..68]
 r727: [56..57]
 r728: [51..52]
 r729: [44..45]
 r730: [35..38]
 r731: [35..36]
 r732: [30..31]
 r733: [25..26]
 r734: [16..17]
 r735: [473..474]
 r736: [243..244]
 r737: [170..171]
 r738: [59..60]
Compressing live ranges: from 1163 to 980 - 84%
Ranges after the compression:
 r87: [974..975]
 r88: [970..973]
 r89: [970..971]
 r90: [968..969]
 r91: [966..967]
 r92: [962..963]
 r93: [958..961]
 r94: [958..959]
 r95: [956..957]
 r96: [954..955]
 r97: [940..941]
 r98: [934..939]
 r99: [936..937]
 r100: [934..935]
 r101: [930..933]
 r102: [930..931]
 r103: [928..929]
 r104: [916..927]
 r105: [924..925]
 r106: [920..923]
 r107: [920..921]
 r108: [918..919]
 r109: [912..917]
 r110: [912..913]
 r111: [908..909]
 r112: [902..907]
 r113: [904..905]
 r114: [902..903]
 r115: [898..901]
 r116: [898..899]
 r117: [896..897]
 r118: [884..895]
 r119: [892..893]
 r120: [888..891]
 r121: [888..889]
 r122: [886..887]
 r123: [880..885]
 r124: [880..881]
 r125: [866..867]
 r126: [858..865]
 r127: [862..863]
 r128: [860..861]
 r129: [858..859]
 r130: [854..857]
 r131: [854..855]
 r132: [852..853]
 r133: [850..851]
 r134: [816..847]
 r135: [844..845]
 r136: [838..843]
 r137: [840..841]
 r138: [838..839]
 r139: [824..837]
 r140: [834..835]
 r141: [832..833]
 r142: [828..829]
 r143: [826..827]
 r144: [824..825]
 r145: [822..823]
 r146: [820..821]
 r147: [816..817]
 r148: [786..815]
 r149: [812..813]
 r150: [806..811]
 r151: [808..809]
 r152: [806..807]
 r153: [794..805]
 r154: [802..803]
 r155: [800..801]
 r156: [798..799]
 r157: [796..797]
 r158: [794..795]
 r159: [792..793]
 r160: [790..791]
 r161: [786..787]
 r162: [762..785]
 r163: [782..783]
 r164: [774..781]
 r165: [778..779]
 r166: [776..777]
 r167: [774..775]
 r168: [770..773]
 r169: [770..771]
 r170: [768..769]
 r171: [766..767]
 r172: [762..763]
 r173: [760..761]
 r174: [754..755]
 r175: [746..753]
 r176: [750..751]
 r177: [748..749]
 r178: [746..747]
 r179: [742..745]
 r180: [742..743]
 r181: [740..741]
 r182: [738..739]
 r183: [704..735]
 r184: [732..733]
 r185: [726..731]
 r186: [728..729]
 r187: [726..727]
 r188: [712..725]
 r189: [722..723]
 r190: [720..721]
 r191: [716..717]
 r192: [714..715]
 r193: [712..713]
 r194: [710..711]
 r195: [708..709]
 r196: [704..705]
 r197: [674..703]
 r198: [700..701]
 r199: [694..699]
 r200: [696..697]
 r201: [694..695]
 r202: [682..693]
 r203: [690..691]
 r204: [688..689]
 r205: [686..687]
 r206: [684..685]
 r207: [682..683]
 r208: [680..681]
 r209: [678..679]
 r210: [674..675]
 r211: [650..673]
 r212: [670..671]
 r213: [662..669]
 r214: [666..667]
 r215: [664..665]
 r216: [662..663]
 r217: [658..661]
 r218: [658..659]
 r219: [656..657]
 r220: [654..655]
 r221: [650..651]
 r222: [648..649]
 r223: [646..647]
 r224: [638..639]
 r225: [632..637]
 r226: [634..635]
 r227: [632..633]
 r228: [628..631]
 r229: [628..629]
 r230: [626..627]
 r231: [624..625]
 r232: [602..623]
 r233: [620..621]
 r234: [618..619]
 r235: [612..617]
 r236: [614..615]
 r237: [612..613]
 r238: [608..611]
 r239: [608..609]
 r240: [606..607]
 r241: [604..605]
 r242: [602..603]
 r243: [600..601]
 r244: [598..599]
 r245: [592..593]
 r246: [590..591]
 r247: [586..589]
 r248: [586..587]
 r249: [584..585]
 r250: [582..583]
 r251: [558..581]
 r252: [578..579]
 r253: [570..577]
 r254: [574..575]
 r255: [572..573]
 r256: [570..571]
 r257: [566..569]
 r258: [566..567]
 r259: [564..565]
 r260: [562..563]
 r261: [558..559]
 r262: [502..557]
 r263: [554..555]
 r264: [540..553]
 r265: [550..551]
 r266: [548..549]
 r267: [544..545]
 r268: [542..543]
 r269: [540..541]
 r270: [538..539]
 r271: [536..537]
 r272: [504..535]
 r273: [532..533]
 r274: [526..531]
 r275: [528..529]
 r276: [526..527]
 r277: [512..525]
 r278: [522..523]
 r279: [520..521]
 r280: [516..517]
 r281: [514..515]
 r282: [512..513]
 r283: [510..511]
 r284: [508..509]
 r285: [504..505]
 r286: [502..503]
 r287: [450..501]
 r288: [498..499]
 r289: [486..497]
 r290: [494..495]
 r291: [492..493]
 r292: [490..491]
 r293: [488..489]
 r294: [486..487]
 r295: [484..485]
 r296: [482..483]
 r297: [452..481]
 r298: [478..479]
 r299: [472..477]
 r300: [474..475]
 r301: [472..473]
 r302: [460..471]
 r303: [468..469]
 r304: [466..467]
 r305: [464..465]
 r306: [462..463]
 r307: [460..461]
 r308: [458..459]
 r309: [456..457]
 r310: [452..453]
 r311: [450..451]
 r312: [410..449]
 r313: [446..447]
 r314: [444..445]
 r315: [440..443]
 r316: [440..441]
 r317: [438..439]
 r318: [436..437]
 r319: [412..435]
 r320: [432..433]
 r321: [424..431]
 r322: [428..429]
 r323: [426..427]
 r324: [424..425]
 r325: [420..423]
 r326: [420..421]
 r327: [418..419]
 r328: [416..417]
 r329: [412..413]
 r330: [410..411]
 r331: [408..409]
 r332: [406..407]
 r333: [404..405]
 r334: [400..401]
 r335: [394..395]
 r336: [392..393]
 r337: [388..391]
 r338: [388..389]
 r339: [386..387]
 r340: [384..385]
 r341: [360..383]
 r342: [380..381]
 r343: [372..379]
 r344: [376..377]
 r345: [374..375]
 r346: [372..373]
 r347: [368..371]
 r348: [368..369]
 r349: [366..367]
 r350: [364..365]
 r351: [360..361]
 r352: [304..359]
 r353: [356..357]
 r354: [342..355]
 r355: [352..353]
 r356: [350..351]
 r357: [346..347]
 r358: [344..345]
 r359: [342..343]
 r360: [340..341]
 r361: [338..339]
 r362: [306..337]
 r363: [334..335]
 r364: [328..333]
 r365: [330..331]
 r366: [328..329]
 r367: [314..327]
 r368: [324..325]
 r369: [322..323]
 r370: [318..319]
 r371: [316..317]
 r372: [314..315]
 r373: [312..313]
 r374: [310..311]
 r375: [306..307]
 r376: [304..305]
 r377: [252..303]
 r378: [300..301]
 r379: [288..299]
 r380: [296..297]
 r381: [294..295]
 r382: [292..293]
 r383: [290..291]
 r384: [288..289]
 r385: [286..287]
 r386: [284..285]
 r387: [254..283]
 r388: [280..281]
 r389: [274..279]
 r390: [276..277]
 r391: [274..275]
 r392: [262..273]
 r393: [270..271]
 r394: [268..269]
 r395: [266..267]
 r396: [264..265]
 r397: [262..263]
 r398: [260..261]
 r399: [258..259]
 r400: [254..255]
 r401: [252..253]
 r402: [212..251]
 r403: [248..249]
 r404: [246..247]
 r405: [242..245]
 r406: [242..243]
 r407: [240..241]
 r408: [238..239]
 r409: [214..237]
 r410: [234..235]
 r411: [226..233]
 r412: [230..231]
 r413: [228..229]
 r414: [226..227]
 r415: [222..225]
 r416: [222..223]
 r417: [220..221]
 r418: [218..219]
 r419: [214..215]
 r420: [212..213]
 r421: [210..211]
 r422: [208..209]
 r423: [206..207]
 r424: [202..203]
 r425: [196..197]
 r426: [192..195]
 r427: [192..193]
 r428: [190..191]
 r429: [188..189]
 r430: [108..187]
 r431: [184..185]
 r432: [178..183]
 r433: [180..181]
 r434: [178..179]
 r435: [174..177]
 r436: [174..175]
 r437: [172..173]
 r438: [170..171]
 r439: [148..167]
 r440: [164..165]
 r441: [158..163]
 r442: [160..161]
 r443: [158..159]
 r444: [154..157]
 r445: [154..155]
 r446: [152..153]
 r447: [150..151]
 r448: [148..149]
 r449: [146..147]
 r450: [144..145]
 r451: [120..141]
 r452: [138..139]
 r453: [132..137]
 r454: [134..135]
 r455: [132..133]
 r456: [128..131]
 r457: [128..129]
 r458: [126..127]
 r459: [124..125]
 r460: [120..121]
 r461: [108..119]
 r462: [116..117]
 r463: [112..115]
 r464: [112..113]
 r465: [110..111]
 r466: [106..109]
 r467: [106..107]
 r468: [102..103]
 r469: [98..101]
 r470: [98..99]
 r471: [96..97]
 r472: [94..95]
 r473: [14..93]
 r474: [90..91]
 r475: [84..89]
 r476: [86..87]
 r477: [84..85]
 r478: [80..83]
 r479: [80..81]
 r480: [78..79]
 r481: [76..77]
 r482: [54..73]
 r483: [70..71]
 r484: [64..69]
 r485: [66..67]
 r486: [64..65]
 r487: [60..63]
 r488: [60..61]
 r489: [58..59]
 r490: [56..57]
 r491: [54..55]
 r492: [52..53]
 r493: [50..51]
 r494: [26..47]
 r495: [44..45]
 r496: [38..43]
 r497: [40..41]
 r498: [38..39]
 r499: [34..37]
 r500: [34..35]
 r501: [32..33]
 r502: [30..31]
 r503: [26..27]
 r504: [14..25]
 r505: [22..23]
 r506: [18..21]
 r507: [18..19]
 r508: [16..17]
 r509: [12..15]
 r510: [12..13]
 r511: [978..979]
 r512: [946..979]
 r513: [946..947]
 r514: [950..951]
 r515: [0..1]
 r516: [944..945]
 r517: [872..945]
 r518: [872..873]
 r519: [876..877]
 r520: [870..871]
 r521: [4..871]
 r522: [4..5]
 r523: [8..9]
 r524: [948..949]
 r525: [952..953]
 r526: [976..977]
 r527: [972..973]
 r528: [966..967]
 r529: [966..967]
 r530: [964..965]
 r531: [960..961]
 r532: [954..955]
 r533: [954..955]
 r534: [2..3]
 r535: [874..875]
 r536: [878..879]
 r537: [942..943]
 r538: [938..939]
 r539: [932..933]
 r540: [926..927]
 r541: [922..923]
 r542: [914..917]
 r543: [914..915]
 r544: [912..913]
 r545: [910..911]
 r546: [906..907]
 r547: [900..901]
 r548: [894..895]
 r549: [890..891]
 r550: [882..885]
 r551: [882..883]
 r552: [880..881]
 r553: [6..7]
 r554: [10..11]
 r555: [868..869]
 r556: [864..865]
 r557: [856..857]
 r558: [848..851]
 r559: [848..849]
 r560: [846..847]
 r561: [842..843]
 r562: [836..837]
 r563: [830..831]
 r564: [828..829]
 r565: [818..821]
 r566: [818..819]
 r567: [814..815]
 r568: [810..811]
 r569: [804..805]
 r570: [798..799]
 r571: [788..791]
 r572: [788..789]
 r573: [784..785]
 r574: [780..781]
 r575: [772..773]
 r576: [764..767]
 r577: [764..765]
 r578: [758..759]
 r579: [642..643]
 r580: [756..757]
 r581: [752..753]
 r582: [744..745]
 r583: [736..739]
 r584: [736..737]
 r585: [734..735]
 r586: [730..731]
 r587: [724..725]
 r588: [718..719]
 r589: [716..717]
 r590: [706..709]
 r591: [706..707]
 r592: [702..703]
 r593: [698..699]
 r594: [692..693]
 r595: [686..687]
 r596: [676..679]
 r597: [676..677]
 r598: [672..673]
 r599: [668..669]
 r600: [660..661]
 r601: [652..655]
 r602: [652..653]
 r603: [644..645]
 r604: [646..647]
 r605: [640..641]
 r606: [636..637]
 r607: [630..631]
 r608: [624..625]
 r609: [622..623]
 r610: [616..617]
 r611: [610..611]
 r612: [604..605]
 r613: [596..597]
 r614: [598..599]
 r615: [594..595]
 r616: [588..589]
 r617: [582..583]
 r618: [580..581]
 r619: [576..577]
 r620: [568..569]
 r621: [560..563]
 r622: [560..561]
 r623: [556..557]
 r624: [552..553]
 r625: [546..547]
 r626: [544..545]
 r627: [536..537]
 r628: [534..535]
 r629: [530..531]
 r630: [524..525]
 r631: [518..519]
 r632: [516..517]
 r633: [506..509]
 r634: [506..507]
 r635: [500..501]
 r636: [496..497]
 r637: [490..491]
 r638: [482..483]
 r639: [480..481]
 r640: [476..477]
 r641: [470..471]
 r642: [464..465]
 r643: [454..457]
 r644: [454..455]
 r645: [448..449]
 r646: [442..443]
 r647: [436..437]
 r648: [434..435]
 r649: [430..431]
 r650: [422..423]
 r651: [414..417]
 r652: [414..415]
 r653: [398..399]
 r654: [400..401]
 r655: [396..397]
 r656: [390..391]
 r657: [384..385]
 r658: [382..383]
 r659: [378..379]
 r660: [370..371]
 r661: [362..365]
 r662: [362..363]
 r663: [358..359]
 r664: [354..355]
 r665: [348..349]
 r666: [346..347]
 r667: [338..339]
 r668: [336..337]
 r669: [332..333]
 r670: [326..327]
 r671: [320..321]
 r672: [318..319]
 r673: [308..311]
 r674: [308..309]
 r675: [302..303]
 r676: [298..299]
 r677: [292..293]
 r678: [284..285]
 r679: [282..283]
 r680: [278..279]
 r681: [272..273]
 r682: [266..267]
 r683: [256..259]
 r684: [256..257]
 r685: [250..251]
 r686: [244..245]
 r687: [238..239]
 r688: [236..237]
 r689: [232..233]
 r690: [224..225]
 r691: [216..219]
 r692: [216..217]
 r693: [200..201]
 r694: [202..203]
 r695: [198..199]
 r696: [194..195]
 r697: [188..189]
 r698: [186..187]
 r699: [182..183]
 r700: [176..177]
 r701: [168..171]
 r702: [168..169]
 r703: [166..167]
 r704: [162..163]
 r705: [156..157]
 r706: [150..151]
 r707: [140..141]
 r708: [136..137]
 r709: [130..131]
 r710: [122..125]
 r711: [122..123]
 r712: [118..119]
 r713: [114..115]
 r714: [106..107]
 r715: [104..105]
 r716: [100..101]
 r717: [94..95]
 r718: [92..93]
 r719: [88..89]
 r720: [82..83]
 r721: [74..77]
 r722: [74..75]
 r723: [72..73]
 r724: [68..69]
 r725: [62..63]
 r726: [56..57]
 r727: [46..47]
 r728: [42..43]
 r729: [36..37]
 r730: [28..31]
 r731: [28..29]
 r732: [24..25]
 r733: [20..21]
 r734: [12..13]
 r735: [402..403]
 r736: [204..205]
 r737: [142..143]
 r738: [48..49]

********** Assignment #1: **********

	 Assigning to 735 (cl=SSE_REGS, orig=333, freq=3000, tfirst=735, tfreq=3000)...
	   Assign 22 to reload r735 (freq=3000)
	 Assigning to 736 (cl=SSE_REGS, orig=423, freq=3000, tfirst=736, tfreq=3000)...
	   Assign 22 to reload r736 (freq=3000)
	 Assigning to 737 (cl=SSE_REGS, orig=450, freq=3000, tfirst=737, tfreq=3000)...
	   Assign 23 to reload r737 (freq=3000)
	 Assigning to 738 (cl=SSE_REGS, orig=493, freq=3000, tfirst=738, tfreq=3000)...
	   Assign 23 to reload r738 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 44
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 89
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 102
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 105
changing reg in insn 103
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 112
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 125
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 128
changing reg in insn 126
changing reg in insn 128
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 172
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 178
changing reg in insn 179
changing reg in insn 200
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 186
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 193
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 220
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 207
changing reg in insn 205
changing reg in insn 206
changing reg in insn 206
changing reg in insn 207
changing reg in insn 207
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 228
changing reg in insn 225
changing reg in insn 226
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 230
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 234
changing reg in insn 235
changing reg in insn 236
changing reg in insn 237
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 258
changing reg in insn 255
changing reg in insn 256
changing reg in insn 256
changing reg in insn 257
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 260
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 264
changing reg in insn 265
changing reg in insn 286
changing reg in insn 267
changing reg in insn 268
changing reg in insn 268
changing reg in insn 272
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 274
changing reg in insn 275
changing reg in insn 275
changing reg in insn 276
changing reg in insn 277
changing reg in insn 279
changing reg in insn 279
changing reg in insn 280
changing reg in insn 280
changing reg in insn 281
changing reg in insn 282
changing reg in insn 282
changing reg in insn 284
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 306
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 293
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 295
changing reg in insn 296
changing reg in insn 296
changing reg in insn 297
changing reg in insn 297
changing reg in insn 299
changing reg in insn 299
changing reg in insn 300
changing reg in insn 300
changing reg in insn 301
changing reg in insn 302
changing reg in insn 302
changing reg in insn 304
changing reg in insn 305
changing reg in insn 306
changing reg in insn 306
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 314
changing reg in insn 311
changing reg in insn 312
changing reg in insn 312
changing reg in insn 313
changing reg in insn 313
changing reg in insn 314
changing reg in insn 314
changing reg in insn 316
changing reg in insn 317
changing reg in insn 318
changing reg in insn 318
changing reg in insn 320
changing reg in insn 321
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 325
changing reg in insn 330
changing reg in insn 331
changing reg in insn 331
changing reg in insn 335
changing reg in insn 333
changing reg in insn 334
changing reg in insn 334
changing reg in insn 335
changing reg in insn 335
changing reg in insn 337
changing reg in insn 338
changing reg in insn 339
changing reg in insn 339
changing reg in insn 341
changing reg in insn 341
changing reg in insn 356
changing reg in insn 343
changing reg in insn 344
changing reg in insn 344
changing reg in insn 345
changing reg in insn 345
changing reg in insn 349
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 349
changing reg in insn 349
changing reg in insn 351
changing reg in insn 352
changing reg in insn 353
changing reg in insn 353
changing reg in insn 355
changing reg in insn 355
changing reg in insn 356
changing reg in insn 356
changing reg in insn 357
changing reg in insn 357
changing reg in insn 359
changing reg in insn 359
changing reg in insn 362
changing reg in insn 363
changing reg in insn 363
changing reg in insn 364
changing reg in insn 364
changing reg in insn 366
changing reg in insn 367
changing reg in insn 368
changing reg in insn 368
changing reg in insn 370
changing reg in insn 370
changing reg in insn 386
changing reg in insn 372
changing reg in insn 373
changing reg in insn 373
changing reg in insn 378
changing reg in insn 375
changing reg in insn 376
changing reg in insn 376
changing reg in insn 377
changing reg in insn 377
changing reg in insn 378
changing reg in insn 378
changing reg in insn 380
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 384
changing reg in insn 385
changing reg in insn 386
changing reg in insn 386
changing reg in insn 423
changing reg in insn 388
changing reg in insn 389
changing reg in insn 389
changing reg in insn 391
changing reg in insn 392
changing reg in insn 392
changing reg in insn 393
changing reg in insn 394
changing reg in insn 396
changing reg in insn 396
changing reg in insn 397
changing reg in insn 397
changing reg in insn 398
changing reg in insn 399
changing reg in insn 399
changing reg in insn 401
changing reg in insn 401
changing reg in insn 403
changing reg in insn 404
changing reg in insn 404
changing reg in insn 408
changing reg in insn 406
changing reg in insn 407
changing reg in insn 407
changing reg in insn 408
changing reg in insn 408
changing reg in insn 410
changing reg in insn 411
changing reg in insn 411
changing reg in insn 412
changing reg in insn 413
changing reg in insn 415
changing reg in insn 415
changing reg in insn 416
changing reg in insn 416
changing reg in insn 417
changing reg in insn 418
changing reg in insn 418
changing reg in insn 420
changing reg in insn 421
changing reg in insn 422
changing reg in insn 423
changing reg in insn 423
changing reg in insn 458
changing reg in insn 425
changing reg in insn 426
changing reg in insn 426
changing reg in insn 428
changing reg in insn 429
changing reg in insn 429
changing reg in insn 430
changing reg in insn 430
changing reg in insn 432
changing reg in insn 432
changing reg in insn 433
changing reg in insn 433
changing reg in insn 434
changing reg in insn 435
changing reg in insn 435
changing reg in insn 437
changing reg in insn 437
changing reg in insn 439
changing reg in insn 440
changing reg in insn 440
changing reg in insn 444
changing reg in insn 442
changing reg in insn 443
changing reg in insn 443
changing reg in insn 444
changing reg in insn 444
changing reg in insn 446
changing reg in insn 447
changing reg in insn 447
changing reg in insn 448
changing reg in insn 448
changing reg in insn 450
changing reg in insn 450
changing reg in insn 451
changing reg in insn 451
changing reg in insn 452
changing reg in insn 453
changing reg in insn 453
changing reg in insn 455
changing reg in insn 456
changing reg in insn 457
changing reg in insn 458
changing reg in insn 458
changing reg in insn 460
changing reg in insn 461
changing reg in insn 461
changing reg in insn 462
changing reg in insn 462
changing reg in insn 464
changing reg in insn 465
changing reg in insn 466
changing reg in insn 466
changing reg in insn 468
changing reg in insn 468
changing reg in insn 470
changing reg in insn 471
changing reg in insn 471
changing reg in insn 476
changing reg in insn 473
changing reg in insn 474
changing reg in insn 474
changing reg in insn 475
changing reg in insn 475
changing reg in insn 476
changing reg in insn 476
changing reg in insn 478
changing reg in insn 479
changing reg in insn 480
changing reg in insn 480
changing reg in insn 482
changing reg in insn 483
changing reg in insn 484
changing reg in insn 485
changing reg in insn 486
changing reg in insn 486
changing reg in insn 487
changing reg in insn 487
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 495
changing reg in insn 495
changing reg in insn 497
changing reg in insn 498
changing reg in insn 499
changing reg in insn 499
changing reg in insn 501
changing reg in insn 501
changing reg in insn 517
changing reg in insn 503
changing reg in insn 504
changing reg in insn 504
changing reg in insn 509
changing reg in insn 506
changing reg in insn 507
changing reg in insn 507
changing reg in insn 508
changing reg in insn 508
changing reg in insn 509
changing reg in insn 509
changing reg in insn 511
changing reg in insn 512
changing reg in insn 513
changing reg in insn 513
changing reg in insn 515
changing reg in insn 516
changing reg in insn 517
changing reg in insn 517
changing reg in insn 554
changing reg in insn 519
changing reg in insn 520
changing reg in insn 520
changing reg in insn 522
changing reg in insn 523
changing reg in insn 523
changing reg in insn 524
changing reg in insn 525
changing reg in insn 527
changing reg in insn 527
changing reg in insn 528
changing reg in insn 528
changing reg in insn 529
changing reg in insn 530
changing reg in insn 530
changing reg in insn 532
changing reg in insn 532
changing reg in insn 534
changing reg in insn 535
changing reg in insn 535
changing reg in insn 539
changing reg in insn 537
changing reg in insn 538
changing reg in insn 538
changing reg in insn 539
changing reg in insn 539
changing reg in insn 541
changing reg in insn 542
changing reg in insn 542
changing reg in insn 543
changing reg in insn 544
changing reg in insn 546
changing reg in insn 546
changing reg in insn 547
changing reg in insn 547
changing reg in insn 548
changing reg in insn 549
changing reg in insn 549
changing reg in insn 551
changing reg in insn 552
changing reg in insn 553
changing reg in insn 554
changing reg in insn 554
changing reg in insn 589
changing reg in insn 556
changing reg in insn 557
changing reg in insn 557
changing reg in insn 559
changing reg in insn 560
changing reg in insn 560
changing reg in insn 561
changing reg in insn 561
changing reg in insn 563
changing reg in insn 563
changing reg in insn 564
changing reg in insn 564
changing reg in insn 565
changing reg in insn 566
changing reg in insn 566
changing reg in insn 568
changing reg in insn 568
changing reg in insn 570
changing reg in insn 571
changing reg in insn 571
changing reg in insn 575
changing reg in insn 573
changing reg in insn 574
changing reg in insn 574
changing reg in insn 575
changing reg in insn 575
changing reg in insn 577
changing reg in insn 578
changing reg in insn 578
changing reg in insn 579
changing reg in insn 579
changing reg in insn 581
changing reg in insn 581
changing reg in insn 582
changing reg in insn 582
changing reg in insn 583
changing reg in insn 584
changing reg in insn 584
changing reg in insn 586
changing reg in insn 587
changing reg in insn 588
changing reg in insn 589
changing reg in insn 589
changing reg in insn 591
changing reg in insn 592
changing reg in insn 592
changing reg in insn 593
changing reg in insn 593
changing reg in insn 595
changing reg in insn 596
changing reg in insn 597
changing reg in insn 597
changing reg in insn 599
changing reg in insn 599
changing reg in insn 601
changing reg in insn 602
changing reg in insn 602
changing reg in insn 607
changing reg in insn 604
changing reg in insn 605
changing reg in insn 605
changing reg in insn 606
changing reg in insn 606
changing reg in insn 607
changing reg in insn 607
changing reg in insn 609
changing reg in insn 610
changing reg in insn 611
changing reg in insn 611
changing reg in insn 613
changing reg in insn 614
changing reg in insn 615
changing reg in insn 616
changing reg in insn 617
changing reg in insn 617
changing reg in insn 618
changing reg in insn 618
changing reg in insn 624
changing reg in insn 625
changing reg in insn 625
changing reg in insn 627
changing reg in insn 628
changing reg in insn 629
changing reg in insn 629
changing reg in insn 631
changing reg in insn 631
changing reg in insn 633
changing reg in insn 634
changing reg in insn 634
changing reg in insn 638
changing reg in insn 636
changing reg in insn 637
changing reg in insn 637
changing reg in insn 638
changing reg in insn 638
changing reg in insn 640
changing reg in insn 641
changing reg in insn 642
changing reg in insn 642
changing reg in insn 644
changing reg in insn 645
changing reg in insn 647
changing reg in insn 648
changing reg in insn 648
changing reg in insn 652
changing reg in insn 650
changing reg in insn 651
changing reg in insn 651
changing reg in insn 652
changing reg in insn 652
changing reg in insn 654
changing reg in insn 655
changing reg in insn 656
changing reg in insn 656
changing reg in insn 658
changing reg in insn 658
changing reg in insn 659
changing reg in insn 660
changing reg in insn 660
changing reg in insn 663
changing reg in insn 664
changing reg in insn 664
changing reg in insn 668
changing reg in insn 666
changing reg in insn 667
changing reg in insn 667
changing reg in insn 668
changing reg in insn 668
changing reg in insn 670
changing reg in insn 671
changing reg in insn 672
changing reg in insn 672
changing reg in insn 674
changing reg in insn 675
changing reg in insn 676
changing reg in insn 678
changing reg in insn 679
changing reg in insn 679
changing reg in insn 681
changing reg in insn 682
changing reg in insn 683
changing reg in insn 683
changing reg in insn 686
changing reg in insn 684
changing reg in insn 686
changing reg in insn 688
changing reg in insn 689
changing reg in insn 689
changing reg in insn 691
changing reg in insn 692
changing reg in insn 693
changing reg in insn 693
changing reg in insn 695
changing reg in insn 695
changing reg in insn 697
changing reg in insn 698
changing reg in insn 698
changing reg in insn 702
changing reg in insn 700
changing reg in insn 701
changing reg in insn 701
changing reg in insn 702
changing reg in insn 702
changing reg in insn 704
changing reg in insn 705
changing reg in insn 706
changing reg in insn 706
changing reg in insn 708
changing reg in insn 709
changing reg in insn 711
changing reg in insn 712
changing reg in insn 712
changing reg in insn 716
changing reg in insn 714
changing reg in insn 715
changing reg in insn 715
changing reg in insn 716
changing reg in insn 716
changing reg in insn 718
changing reg in insn 719
changing reg in insn 720
changing reg in insn 720
changing reg in insn 722
changing reg in insn 722
changing reg in insn 723
changing reg in insn 724
changing reg in insn 724
changing reg in insn 727
changing reg in insn 728
changing reg in insn 728
changing reg in insn 732
changing reg in insn 730
changing reg in insn 731
changing reg in insn 731
changing reg in insn 732
changing reg in insn 732
changing reg in insn 734
changing reg in insn 735
changing reg in insn 736
changing reg in insn 736
changing reg in insn 738
changing reg in insn 739
changing reg in insn 740
changing reg in insn 742
changing reg in insn 743
changing reg in insn 743
changing reg in insn 745
changing reg in insn 746
changing reg in insn 747
changing reg in insn 747
changing reg in insn 750
changing reg in insn 748
changing reg in insn 750
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 21
changing reg in insn 22
changing reg in insn 61
changing reg in insn 62
changing reg in insn 65
changing reg in insn 67
changing reg in insn 66
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 79
changing reg in insn 80
changing reg in insn 147
changing reg in insn 149
changing reg in insn 148
changing reg in insn 151
changing reg in insn 153
changing reg in insn 154
changing reg in insn 161
changing reg in insn 162
changing reg in insn 12
changing reg in insn 13
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 34
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 60
changing reg in insn 61
changing reg in insn 70
changing reg in insn 71
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 87
changing reg in insn 90
changing reg in insn 91
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 101
changing reg in insn 103
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 109
changing reg in insn 110
changing reg in insn 113
changing reg in insn 114
changing reg in insn 117
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 124
changing reg in insn 126
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 152
changing reg in insn 153
changing reg in insn 160
changing reg in insn 161
changing reg in insn 165
changing reg in insn 166
changing reg in insn 168
changing reg in insn 169
changing reg in insn 173
changing reg in insn 174
changing reg in insn 177
changing reg in insn 179
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 184
changing reg in insn 187
changing reg in insn 188
changing reg in insn 190
changing reg in insn 191
changing reg in insn 192
changing reg in insn 197
changing reg in insn 199
changing reg in insn 198
changing reg in insn 199
changing reg in insn 201
changing reg in insn 202
changing reg in insn 204
changing reg in insn 205
changing reg in insn 208
changing reg in insn 209
changing reg in insn 212
changing reg in insn 217
changing reg in insn 219
changing reg in insn 218
changing reg in insn 219
changing reg in insn 221
changing reg in insn 222
changing reg in insn 224
changing reg in insn 225
changing reg in insn 229
changing reg in insn 230
changing reg in insn 233
changing reg in insn 235
changing reg in insn 234
changing reg in insn 235
changing reg in insn 238
changing reg in insn 239
changing reg in insn 245
changing reg in insn 246
changing reg in insn 251
changing reg in insn 252
changing reg in insn 254
changing reg in insn 255
changing reg in insn 259
changing reg in insn 260
changing reg in insn 263
changing reg in insn 265
changing reg in insn 264
changing reg in insn 265
changing reg in insn 266
changing reg in insn 267
changing reg in insn 269
changing reg in insn 270
changing reg in insn 273
changing reg in insn 274
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 283
changing reg in insn 285
changing reg in insn 284
changing reg in insn 285
changing reg in insn 287
changing reg in insn 288
changing reg in insn 290
changing reg in insn 291
changing reg in insn 294
changing reg in insn 295
changing reg in insn 298
changing reg in insn 303
changing reg in insn 305
changing reg in insn 304
changing reg in insn 305
changing reg in insn 307
changing reg in insn 308
changing reg in insn 310
changing reg in insn 311
changing reg in insn 315
changing reg in insn 316
changing reg in insn 319
changing reg in insn 321
changing reg in insn 320
changing reg in insn 321
changing reg in insn 325
changing reg in insn 326
changing reg in insn 324
changing reg in insn 325
changing reg in insn 329
changing reg in insn 330
changing reg in insn 332
changing reg in insn 333
changing reg in insn 336
changing reg in insn 337
changing reg in insn 340
changing reg in insn 341
changing reg in insn 342
changing reg in insn 343
changing reg in insn 346
changing reg in insn 347
changing reg in insn 350
changing reg in insn 351
changing reg in insn 354
changing reg in insn 355
changing reg in insn 359
changing reg in insn 360
changing reg in insn 358
changing reg in insn 359
changing reg in insn 361
changing reg in insn 362
changing reg in insn 365
changing reg in insn 366
changing reg in insn 369
changing reg in insn 370
changing reg in insn 371
changing reg in insn 372
changing reg in insn 374
changing reg in insn 375
changing reg in insn 379
changing reg in insn 380
changing reg in insn 383
changing reg in insn 385
changing reg in insn 384
changing reg in insn 385
changing reg in insn 387
changing reg in insn 388
changing reg in insn 390
changing reg in insn 391
changing reg in insn 393
changing reg in insn 394
changing reg in insn 395
changing reg in insn 400
changing reg in insn 401
changing reg in insn 402
changing reg in insn 403
changing reg in insn 405
changing reg in insn 406
changing reg in insn 409
changing reg in insn 410
changing reg in insn 412
changing reg in insn 413
changing reg in insn 414
changing reg in insn 419
changing reg in insn 421
changing reg in insn 420
changing reg in insn 421
changing reg in insn 424
changing reg in insn 425
changing reg in insn 427
changing reg in insn 428
changing reg in insn 431
changing reg in insn 436
changing reg in insn 437
changing reg in insn 438
changing reg in insn 439
changing reg in insn 441
changing reg in insn 442
changing reg in insn 445
changing reg in insn 446
changing reg in insn 449
changing reg in insn 454
changing reg in insn 456
changing reg in insn 455
changing reg in insn 456
changing reg in insn 459
changing reg in insn 460
changing reg in insn 463
changing reg in insn 464
changing reg in insn 467
changing reg in insn 468
changing reg in insn 469
changing reg in insn 470
changing reg in insn 472
changing reg in insn 473
changing reg in insn 477
changing reg in insn 478
changing reg in insn 481
changing reg in insn 483
changing reg in insn 482
changing reg in insn 483
changing reg in insn 490
changing reg in insn 491
changing reg in insn 489
changing reg in insn 492
changing reg in insn 493
changing reg in insn 496
changing reg in insn 497
changing reg in insn 500
changing reg in insn 501
changing reg in insn 502
changing reg in insn 503
changing reg in insn 505
changing reg in insn 506
changing reg in insn 510
changing reg in insn 511
changing reg in insn 514
changing reg in insn 516
changing reg in insn 515
changing reg in insn 516
changing reg in insn 518
changing reg in insn 519
changing reg in insn 521
changing reg in insn 522
changing reg in insn 524
changing reg in insn 525
changing reg in insn 526
changing reg in insn 531
changing reg in insn 532
changing reg in insn 533
changing reg in insn 534
changing reg in insn 536
changing reg in insn 537
changing reg in insn 540
changing reg in insn 541
changing reg in insn 543
changing reg in insn 544
changing reg in insn 545
changing reg in insn 550
changing reg in insn 552
changing reg in insn 551
changing reg in insn 552
changing reg in insn 555
changing reg in insn 556
changing reg in insn 558
changing reg in insn 559
changing reg in insn 562
changing reg in insn 567
changing reg in insn 568
changing reg in insn 569
changing reg in insn 570
changing reg in insn 572
changing reg in insn 573
changing reg in insn 576
changing reg in insn 577
changing reg in insn 580
changing reg in insn 585
changing reg in insn 587
changing reg in insn 586
changing reg in insn 587
changing reg in insn 590
changing reg in insn 591
changing reg in insn 594
changing reg in insn 595
changing reg in insn 598
changing reg in insn 599
changing reg in insn 600
changing reg in insn 601
changing reg in insn 603
changing reg in insn 604
changing reg in insn 608
changing reg in insn 609
changing reg in insn 612
changing reg in insn 614
changing reg in insn 613
changing reg in insn 614
changing reg in insn 621
changing reg in insn 622
changing reg in insn 620
changing reg in insn 623
changing reg in insn 624
changing reg in insn 626
changing reg in insn 627
changing reg in insn 630
changing reg in insn 631
changing reg in insn 632
changing reg in insn 633
changing reg in insn 635
changing reg in insn 636
changing reg in insn 639
changing reg in insn 640
changing reg in insn 643
changing reg in insn 645
changing reg in insn 644
changing reg in insn 645
changing reg in insn 646
changing reg in insn 647
changing reg in insn 649
changing reg in insn 650
changing reg in insn 653
changing reg in insn 654
changing reg in insn 657
changing reg in insn 658
changing reg in insn 662
changing reg in insn 663
changing reg in insn 665
changing reg in insn 666
changing reg in insn 669
changing reg in insn 670
changing reg in insn 673
changing reg in insn 675
changing reg in insn 674
changing reg in insn 675
changing reg in insn 677
changing reg in insn 678
changing reg in insn 680
changing reg in insn 681
changing reg in insn 685
changing reg in insn 686
changing reg in insn 687
changing reg in insn 688
changing reg in insn 690
changing reg in insn 691
changing reg in insn 694
changing reg in insn 695
changing reg in insn 696
changing reg in insn 697
changing reg in insn 699
changing reg in insn 700
changing reg in insn 703
changing reg in insn 704
changing reg in insn 707
changing reg in insn 709
changing reg in insn 708
changing reg in insn 709
changing reg in insn 710
changing reg in insn 711
changing reg in insn 713
changing reg in insn 714
changing reg in insn 717
changing reg in insn 718
changing reg in insn 721
changing reg in insn 722
changing reg in insn 726
changing reg in insn 727
changing reg in insn 729
changing reg in insn 730
changing reg in insn 733
changing reg in insn 734
changing reg in insn 737
changing reg in insn 739
changing reg in insn 738
changing reg in insn 739
changing reg in insn 741
changing reg in insn 742
changing reg in insn 744
changing reg in insn 745
changing reg in insn 749
changing reg in insn 750
deleting insn with uid = 486.
deleting insn with uid = 817.
deleting insn with uid = 617.
deleting insn with uid = 819.
deleting insn with uid = 660.
deleting insn with uid = 821.
deleting insn with uid = 724.
deleting insn with uid = 823.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 146.


calquv

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2]
;;  ref usage 	r0={10d,7u} r1={415d,412u} r2={131d,128u,8e} r4={19d,17u,4e} r5={5d,3u} r6={1d,204u} r7={1d,35u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={268d,15u} r18={2d} r19={2d} r20={1d,1u,25e} r21={55d,52u} r22={26d,23u,1e} r23={15d,12u} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 2027{1080d,909u,38e} in 721{719 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 511 512
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 quint+0 S8 A64])
        (reg:DI 5 di [ quint ])) "CALQUV.f":1 85 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 qvint+0 S8 A64])
        (reg:DI 4 si [ qvint ])) "CALQUV.f":1 85 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 1 dx [orig:511 _441 ] [511])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f51c60b7510 parallel>)
                    (const_int 8 [0x8]))) [2 parallel.jsta+0 S4 A64])) "CALQUV.f":69 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 0 ax [orig:512 _442 ] [512])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f51c60b7510 parallel>)
                    (const_int 12 [0xc]))) [2 parallel.jend+0 S4 A32])) "CALQUV.f":69 86 {*movsi_internal}
     (nil))
(insn 9 8 52 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
        (reg:SI 1 dx [orig:511 _441 ] [511])) "CALQUV.f":69 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512
;; lr  def 	 17 [flags] 513 524
(code_label 52 9 10 3 5 (nil) [1 uses])
(note 10 52 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (reg:SI 0 ax [orig:512 _442 ] [512]))) "CALQUV.f":69 11 {*cmpsi_1}
     (nil))
(insn 12 11 13 3 (set (reg:QI 1 dx [524])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALQUV.f":69 678 {*setcc_qi}
     (nil))
(insn 13 12 14 3 (set (reg:SI 1 dx [orig:513 _444 ] [513])
        (zero_extend:SI (reg:QI 1 dx [524]))) "CALQUV.f":69 140 {*zero_extendqisi2}
     (nil))
(insn 14 13 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:513 _444 ] [513])
            (const_int 0 [0]))) "CALQUV.f":69 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 795)
            (pc))) "CALQUV.f":69 682 {*jcc}
     (nil)
 -> 795)
;;  succ:       27
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 46 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
        (const_int 1 [0x1])) "CALQUV.f":70 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 514 525
(code_label 46 17 18 5 4 (nil) [1 uses])
(note 18 46 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALQUV.f":70 11 {*cmpsi_1}
     (nil))
(insn 20 19 21 5 (set (reg:QI 1 dx [525])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALQUV.f":70 678 {*setcc_qi}
     (nil))
(insn 21 20 22 5 (set (reg:SI 1 dx [orig:514 _446 ] [514])
        (zero_extend:SI (reg:QI 1 dx [525]))) "CALQUV.f":70 140 {*zero_extendqisi2}
     (nil))
(insn 22 21 23 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:514 _446 ] [514])
            (const_int 0 [0]))) "CALQUV.f":70 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 23 22 24 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 798)
            (pc))) "CALQUV.f":70 682 {*jcc}
     (nil)
 -> 798)
;;  succ:       28
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 28, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 526 527 528 529 530 531 532 533
(note 24 23 25 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 6 (set (reg:SI 1 dx [526])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":71 86 {*movsi_internal}
     (nil))
(insn 26 25 27 6 (set (reg:DI 1 dx [orig:87 _1 ] [87])
        (sign_extend:DI (reg:SI 1 dx [526]))) "CALQUV.f":71 149 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 6 (parallel [
            (set (reg:DI 2 cx [orig:88 _2 ] [88])
                (mult:DI (reg:DI 1 dx [orig:87 _1 ] [87])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":71 349 {*muldi3_1}
     (nil))
(insn 28 27 29 6 (set (reg:SI 1 dx [527])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":71 86 {*movsi_internal}
     (nil))
(insn 29 28 30 6 (set (reg:DI 1 dx [orig:89 _3 ] [89])
        (sign_extend:DI (reg:SI 1 dx [527]))) "CALQUV.f":71 149 {*extendsidi2_rex64}
     (nil))
(insn 30 29 31 6 (parallel [
            (set (reg:DI 1 dx [orig:90 _4 ] [90])
                (plus:DI (reg:DI 1 dx [orig:89 _3 ] [89])
                    (reg:DI 2 cx [orig:88 _2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":71 222 {*adddi_1}
     (nil))
(insn 31 30 32 6 (parallel [
            (set (reg:DI 2 cx [orig:91 _5 ] [91])
                (plus:DI (reg:DI 1 dx [orig:90 _4 ] [90])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":71 222 {*adddi_1}
     (nil))
(insn 32 31 33 6 (set (reg/f:DI 1 dx [528])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 quint+0 S8 A64])) "CALQUV.f":71 85 {*movdi_internal}
     (nil))
(insn 33 32 34 6 (set (reg:SF 21 xmm0 [529])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALQUV.f":71 131 {*movsf_internal}
     (nil))
(insn 34 33 35 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:91 _5 ] [91])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [528])) [1 *quint_447(D) S4 A32])
        (reg:SF 21 xmm0 [529])) "CALQUV.f":71 131 {*movsf_internal}
     (nil))
(insn 35 34 36 6 (set (reg:SI 1 dx [530])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":72 86 {*movsi_internal}
     (nil))
(insn 36 35 37 6 (set (reg:DI 1 dx [orig:92 _6 ] [92])
        (sign_extend:DI (reg:SI 1 dx [530]))) "CALQUV.f":72 149 {*extendsidi2_rex64}
     (nil))
(insn 37 36 38 6 (parallel [
            (set (reg:DI 2 cx [orig:93 _7 ] [93])
                (mult:DI (reg:DI 1 dx [orig:92 _6 ] [92])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":72 349 {*muldi3_1}
     (nil))
(insn 38 37 39 6 (set (reg:SI 1 dx [531])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":72 86 {*movsi_internal}
     (nil))
(insn 39 38 40 6 (set (reg:DI 1 dx [orig:94 _8 ] [94])
        (sign_extend:DI (reg:SI 1 dx [531]))) "CALQUV.f":72 149 {*extendsidi2_rex64}
     (nil))
(insn 40 39 41 6 (parallel [
            (set (reg:DI 1 dx [orig:95 _9 ] [95])
                (plus:DI (reg:DI 1 dx [orig:94 _8 ] [94])
                    (reg:DI 2 cx [orig:93 _7 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":72 222 {*adddi_1}
     (nil))
(insn 41 40 42 6 (parallel [
            (set (reg:DI 2 cx [orig:96 _10 ] [96])
                (plus:DI (reg:DI 1 dx [orig:95 _9 ] [95])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":72 222 {*adddi_1}
     (nil))
(insn 42 41 43 6 (set (reg/f:DI 1 dx [532])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 qvint+0 S8 A64])) "CALQUV.f":72 85 {*movdi_internal}
     (nil))
(insn 43 42 44 6 (set (reg:SF 21 xmm0 [533])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALQUV.f":72 131 {*movsf_internal}
     (nil))
(insn 44 43 45 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:96 _10 ] [96])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [532])) [1 *qvint_449(D) S4 A32])
        (reg:SF 21 xmm0 [533])) "CALQUV.f":72 131 {*movsf_internal}
     (nil))
(insn 45 44 777 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":70 221 {*addsi_1}
     (nil))
(jump_insn 777 45 778 6 (set (pc)
        (label_ref 46)) "CALQUV.f":70 683 {jump}
     (nil)
 -> 46)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512

(barrier 778 777 798)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 6, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 798 778 797 28 23 (nil) [1 uses])
(note 797 798 799 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 799 797 49 28 (const_int 0 [0]) "CALQUV.f":72 718 {nop}
     (nil))
;;  succ:       7 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512

;; basic block 7, loop depth 0, maybe hot
;;  prev block 28, next block 27, flags: (RTL, MODIFIED)
;;  pred:       28 [always]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 49 799 50 7 3 (nil) [0 uses])
(note 50 49 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 779 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":69 221 {*addsi_1}
     (nil))
(jump_insn 779 51 780 7 (set (pc)
        (label_ref 52)) "CALQUV.f":69 683 {jump}
     (nil)
 -> 52)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512

(barrier 780 779 795)
;; basic block 27, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 795 780 794 27 22 (nil) [1 uses])
(note 794 795 796 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 796 794 55 27 (const_int 0 [0]) "CALQUV.f":70 718 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 27, next block 9, flags: (RTL, MODIFIED)
;;  pred:       27 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 55 796 56 8 2 (nil) [0 uses])
(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 764 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])
        (const_int 1 [0x1])) "CALQUV.f":76 86 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              25 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 515 534
(code_label 764 57 58 9 18 (nil) [1 uses])
(note 58 764 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])
            (const_int 38 [0x26]))) "CALQUV.f":76 11 {*cmpsi_1}
     (nil))
(insn 60 59 61 9 (set (reg:QI 0 ax [534])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALQUV.f":76 678 {*setcc_qi}
     (nil))
(insn 61 60 62 9 (set (reg:SI 0 ax [orig:515 _454 ] [515])
        (zero_extend:SI (reg:QI 0 ax [534]))) "CALQUV.f":76 140 {*zero_extendqisi2}
     (nil))
(insn 62 61 63 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:515 _454 ] [515])
            (const_int 0 [0]))) "CALQUV.f":76 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 63 62 64 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 801)
            (pc))) "CALQUV.f":76 682 {*jcc}
     (nil)
 -> 801)
;;  succ:       29
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 516 517
(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 10 (set (reg:SI 1 dx [orig:516 _455 ] [516])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f51c60b7510 parallel>)
                    (const_int 8 [0x8]))) [2 parallel.jsta+0 S4 A64])) "CALQUV.f":78 86 {*movsi_internal}
     (nil))
(insn 66 65 67 10 (set (reg:SI 0 ax [orig:517 _456 ] [517])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f51c60b7510 parallel>)
                    (const_int 12 [0xc]))) [2 parallel.jend+0 S4 A32])) "CALQUV.f":78 86 {*movsi_internal}
     (nil))
(insn 67 66 136 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
        (reg:SI 1 dx [orig:516 _455 ] [516])) "CALQUV.f":78 86 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              15 [always] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517
;; lr  def 	 17 [flags] 518 535
(code_label 136 67 68 11 10 (nil) [1 uses])
(note 68 136 69 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (reg:SI 0 ax [orig:517 _456 ] [517]))) "CALQUV.f":78 11 {*cmpsi_1}
     (nil))
(insn 70 69 71 11 (set (reg:QI 1 dx [535])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALQUV.f":78 678 {*setcc_qi}
     (nil))
(insn 71 70 72 11 (set (reg:SI 1 dx [orig:518 _458 ] [518])
        (zero_extend:SI (reg:QI 1 dx [535]))) "CALQUV.f":78 140 {*zero_extendqisi2}
     (nil))
(insn 72 71 73 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:518 _458 ] [518])
            (const_int 0 [0]))) "CALQUV.f":78 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 73 72 74 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 804)
            (pc))) "CALQUV.f":78 682 {*jcc}
     (nil)
 -> 804)
;;  succ:       30
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 74 73 75 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 130 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
        (const_int 1 [0x1])) "CALQUV.f":79 86 {*movsi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              14 [always] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 519 536
(code_label 130 75 76 13 9 (nil) [1 uses])
(note 76 130 77 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALQUV.f":79 11 {*cmpsi_1}
     (nil))
(insn 78 77 79 13 (set (reg:QI 1 dx [536])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALQUV.f":79 678 {*setcc_qi}
     (nil))
(insn 79 78 80 13 (set (reg:SI 1 dx [orig:519 _460 ] [519])
        (zero_extend:SI (reg:QI 1 dx [536]))) "CALQUV.f":79 140 {*zero_extendqisi2}
     (nil))
(insn 80 79 81 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:519 _460 ] [519])
            (const_int 0 [0]))) "CALQUV.f":79 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 81 80 82 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 807)
            (pc))) "CALQUV.f":79 682 {*jcc}
     (nil)
 -> 807)
;;  succ:       31
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 31, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552
(note 82 81 83 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 14 (set (reg:SI 1 dx [537])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":80 86 {*movsi_internal}
     (nil))
(insn 84 83 85 14 (set (reg:DI 1 dx [orig:97 _11 ] [97])
        (sign_extend:DI (reg:SI 1 dx [537]))) "CALQUV.f":80 149 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 14 (parallel [
            (set (reg:DI 2 cx [orig:98 _12 ] [98])
                (mult:DI (reg:DI 1 dx [orig:97 _11 ] [97])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":80 349 {*muldi3_1}
     (nil))
(insn 86 85 87 14 (set (reg:SI 1 dx [538])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":80 86 {*movsi_internal}
     (nil))
(insn 87 86 88 14 (set (reg:DI 1 dx [orig:99 _13 ] [99])
        (sign_extend:DI (reg:SI 1 dx [538]))) "CALQUV.f":80 149 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 14 (parallel [
            (set (reg:DI 1 dx [orig:100 _14 ] [100])
                (mult:DI (reg:DI 1 dx [orig:99 _13 ] [99])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":80 349 {*muldi3_1}
     (nil))
(insn 89 88 90 14 (parallel [
            (set (reg:DI 2 cx [orig:101 _15 ] [101])
                (plus:DI (reg:DI 2 cx [orig:98 _12 ] [98])
                    (reg:DI 1 dx [orig:100 _14 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":80 222 {*adddi_1}
     (nil))
(insn 90 89 91 14 (set (reg:SI 1 dx [539])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":80 86 {*movsi_internal}
     (nil))
(insn 91 90 92 14 (set (reg:DI 1 dx [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 1 dx [539]))) "CALQUV.f":80 149 {*extendsidi2_rex64}
     (nil))
(insn 92 91 93 14 (parallel [
            (set (reg:DI 1 dx [orig:103 _17 ] [103])
                (plus:DI (reg:DI 1 dx [orig:102 _16 ] [102])
                    (reg:DI 2 cx [orig:101 _15 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":80 222 {*adddi_1}
     (nil))
(insn 93 92 94 14 (parallel [
            (set (reg:DI 4 si [orig:104 _18 ] [104])
                (plus:DI (reg:DI 1 dx [orig:103 _17 ] [103])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":80 222 {*adddi_1}
     (nil))
(insn 94 93 95 14 (set (reg:SI 1 dx [540])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":80 86 {*movsi_internal}
     (nil))
(insn 95 94 96 14 (set (reg:DI 1 dx [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 1 dx [540]))) "CALQUV.f":80 149 {*extendsidi2_rex64}
     (nil))
(insn 96 95 97 14 (parallel [
            (set (reg:DI 2 cx [orig:106 _20 ] [106])
                (mult:DI (reg:DI 1 dx [orig:105 _19 ] [105])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":80 349 {*muldi3_1}
     (nil))
(insn 97 96 98 14 (set (reg:SI 1 dx [541])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":80 86 {*movsi_internal}
     (nil))
(insn 98 97 99 14 (set (reg:DI 1 dx [orig:107 _21 ] [107])
        (sign_extend:DI (reg:SI 1 dx [541]))) "CALQUV.f":80 149 {*extendsidi2_rex64}
     (nil))
(insn 99 98 100 14 (parallel [
            (set (reg:DI 1 dx [orig:108 _22 ] [108])
                (plus:DI (reg:DI 1 dx [orig:107 _21 ] [107])
                    (reg:DI 2 cx [orig:106 _20 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":80 222 {*adddi_1}
     (nil))
(insn 100 99 101 14 (parallel [
            (set (reg:DI 2 cx [orig:109 _23 ] [109])
                (plus:DI (reg:DI 1 dx [orig:108 _22 ] [108])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":80 222 {*adddi_1}
     (nil))
(insn 101 100 102 14 (set (reg/f:DI 1 dx [542])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f51c60b7d80 vrbls>)) "CALQUV.f":80 85 {*movdi_internal}
     (nil))
(insn 102 101 103 14 (parallel [
            (set (reg:DI 4 si [543])
                (plus:DI (reg:DI 4 si [orig:104 _18 ] [104])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":80 222 {*adddi_1}
     (nil))
(insn 103 102 104 14 (set (reg:SF 21 xmm0 [orig:110 _24 ] [110])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [543])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [542])) [1 vrbls.u S4 A32])) "CALQUV.f":80 131 {*movsf_internal}
     (nil))
(insn 104 103 105 14 (set (reg/f:DI 1 dx [544])
        (symbol_ref:DI ("u1d.4086") [flags 0x202]  <var_decl 0x7f51c60bd510 u1d>)) "CALQUV.f":80 85 {*movdi_internal}
     (nil))
(insn 105 104 106 14 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:109 _23 ] [109])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [544])) [1 u1d S4 A32])
        (reg:SF 21 xmm0 [orig:110 _24 ] [110])) "CALQUV.f":80 131 {*movsf_internal}
     (nil))
(insn 106 105 107 14 (set (reg:SI 1 dx [545])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":81 86 {*movsi_internal}
     (nil))
(insn 107 106 108 14 (set (reg:DI 1 dx [orig:111 _25 ] [111])
        (sign_extend:DI (reg:SI 1 dx [545]))) "CALQUV.f":81 149 {*extendsidi2_rex64}
     (nil))
(insn 108 107 109 14 (parallel [
            (set (reg:DI 2 cx [orig:112 _26 ] [112])
                (mult:DI (reg:DI 1 dx [orig:111 _25 ] [111])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":81 349 {*muldi3_1}
     (nil))
(insn 109 108 110 14 (set (reg:SI 1 dx [546])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":81 86 {*movsi_internal}
     (nil))
(insn 110 109 111 14 (set (reg:DI 1 dx [orig:113 _27 ] [113])
        (sign_extend:DI (reg:SI 1 dx [546]))) "CALQUV.f":81 149 {*extendsidi2_rex64}
     (nil))
(insn 111 110 112 14 (parallel [
            (set (reg:DI 1 dx [orig:114 _28 ] [114])
                (mult:DI (reg:DI 1 dx [orig:113 _27 ] [113])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":81 349 {*muldi3_1}
     (nil))
(insn 112 111 113 14 (parallel [
            (set (reg:DI 2 cx [orig:115 _29 ] [115])
                (plus:DI (reg:DI 2 cx [orig:112 _26 ] [112])
                    (reg:DI 1 dx [orig:114 _28 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":81 222 {*adddi_1}
     (nil))
(insn 113 112 114 14 (set (reg:SI 1 dx [547])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":81 86 {*movsi_internal}
     (nil))
(insn 114 113 115 14 (set (reg:DI 1 dx [orig:116 _30 ] [116])
        (sign_extend:DI (reg:SI 1 dx [547]))) "CALQUV.f":81 149 {*extendsidi2_rex64}
     (nil))
(insn 115 114 116 14 (parallel [
            (set (reg:DI 1 dx [orig:117 _31 ] [117])
                (plus:DI (reg:DI 1 dx [orig:116 _30 ] [116])
                    (reg:DI 2 cx [orig:115 _29 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":81 222 {*adddi_1}
     (nil))
(insn 116 115 117 14 (parallel [
            (set (reg:DI 4 si [orig:118 _32 ] [118])
                (plus:DI (reg:DI 1 dx [orig:117 _31 ] [117])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":81 222 {*adddi_1}
     (nil))
(insn 117 116 118 14 (set (reg:SI 1 dx [548])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":81 86 {*movsi_internal}
     (nil))
(insn 118 117 119 14 (set (reg:DI 1 dx [orig:119 _33 ] [119])
        (sign_extend:DI (reg:SI 1 dx [548]))) "CALQUV.f":81 149 {*extendsidi2_rex64}
     (nil))
(insn 119 118 120 14 (parallel [
            (set (reg:DI 2 cx [orig:120 _34 ] [120])
                (mult:DI (reg:DI 1 dx [orig:119 _33 ] [119])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":81 349 {*muldi3_1}
     (nil))
(insn 120 119 121 14 (set (reg:SI 1 dx [549])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":81 86 {*movsi_internal}
     (nil))
(insn 121 120 122 14 (set (reg:DI 1 dx [orig:121 _35 ] [121])
        (sign_extend:DI (reg:SI 1 dx [549]))) "CALQUV.f":81 149 {*extendsidi2_rex64}
     (nil))
(insn 122 121 123 14 (parallel [
            (set (reg:DI 1 dx [orig:122 _36 ] [122])
                (plus:DI (reg:DI 1 dx [orig:121 _35 ] [121])
                    (reg:DI 2 cx [orig:120 _34 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":81 222 {*adddi_1}
     (nil))
(insn 123 122 124 14 (parallel [
            (set (reg:DI 2 cx [orig:123 _37 ] [123])
                (plus:DI (reg:DI 1 dx [orig:122 _36 ] [122])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":81 222 {*adddi_1}
     (nil))
(insn 124 123 125 14 (set (reg/f:DI 1 dx [550])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f51c60b7d80 vrbls>)) "CALQUV.f":81 85 {*movdi_internal}
     (nil))
(insn 125 124 126 14 (parallel [
            (set (reg:DI 4 si [551])
                (plus:DI (reg:DI 4 si [orig:118 _32 ] [118])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":81 222 {*adddi_1}
     (nil))
(insn 126 125 127 14 (set (reg:SF 21 xmm0 [orig:124 _38 ] [124])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [551])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [550])) [1 vrbls.v S4 A32])) "CALQUV.f":81 131 {*movsf_internal}
     (nil))
(insn 127 126 128 14 (set (reg/f:DI 1 dx [552])
        (symbol_ref:DI ("v1d.4089") [flags 0x202]  <var_decl 0x7f51c60bd630 v1d>)) "CALQUV.f":81 85 {*movdi_internal}
     (nil))
(insn 128 127 129 14 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:123 _37 ] [123])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [552])) [1 v1d S4 A32])
        (reg:SF 21 xmm0 [orig:124 _38 ] [124])) "CALQUV.f":81 131 {*movsf_internal}
     (nil))
(insn 129 128 781 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":79 221 {*addsi_1}
     (nil))
(jump_insn 781 129 782 14 (set (pc)
        (label_ref 130)) "CALQUV.f":79 683 {jump}
     (nil)
 -> 130)
;;  succ:       13 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517

(barrier 782 781 807)
;; basic block 31, loop depth 0, maybe hot
;;  prev block 14, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 807 782 806 31 26 (nil) [1 uses])
(note 806 807 808 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 808 806 133 31 (const_int 0 [0]) "CALQUV.f":81 718 {nop}
     (nil))
;;  succ:       15 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517

;; basic block 15, loop depth 0, maybe hot
;;  prev block 31, next block 30, flags: (RTL, MODIFIED)
;;  pred:       31 [always]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 133 808 134 15 8 (nil) [0 uses])
(note 134 133 135 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 135 134 783 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":78 221 {*addsi_1}
     (nil))
(jump_insn 783 135 784 15 (set (pc)
        (label_ref 136)) "CALQUV.f":78 683 {jump}
     (nil)
 -> 136)
;;  succ:       11 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 517

(barrier 784 783 804)
;; basic block 30, loop depth 0, maybe hot
;;  prev block 15, next block 16, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 804 784 803 30 25 (nil) [1 uses])
(note 803 804 805 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 805 803 139 30 (const_int 0 [0]) "CALQUV.f":79 718 {nop}
     (nil))
;;  succ:       16 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 30, next block 17, flags: (RTL, MODIFIED)
;;  pred:       30 [always]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 520 521
(code_label 139 805 140 16 7 (nil) [0 uses])
(note 140 139 141 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 16 (set (reg:DI 5 di)
        (symbol_ref:DI ("u1d.4086") [flags 0x202]  <var_decl 0x7f51c60bd510 u1d>)) "CALQUV.f":85 85 {*movdi_internal}
     (nil))
(insn 142 141 143 16 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALQUV.f":85 88 {*movqi_internal}
     (nil))
(call_insn 143 142 144 16 (call (mem:QI (symbol_ref:DI ("exch_") [flags 0x41]  <function_decl 0x7f51c609b600 exch>) [0 exch S1 A8])
        (const_int 0 [0])) "CALQUV.f":85 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 144 143 145 16 (set (reg:DI 5 di)
        (symbol_ref:DI ("v1d.4089") [flags 0x202]  <var_decl 0x7f51c60bd630 v1d>)) "CALQUV.f":86 85 {*movdi_internal}
     (nil))
(insn 145 144 146 16 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALQUV.f":86 88 {*movqi_internal}
     (nil))
(call_insn 146 145 147 16 (call (mem:QI (symbol_ref:DI ("exch_") [flags 0x41]  <function_decl 0x7f51c609b600 exch>) [0 exch S1 A8])
        (const_int 0 [0])) "CALQUV.f":86 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 147 146 148 16 (set (reg:SI 1 dx [orig:520 _467 ] [520])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f51c60b7510 parallel>)
                    (const_int 16 [0x10]))) [2 parallel.jsta_m+0 S4 A128])) "CALQUV.f":89 86 {*movsi_internal}
     (nil))
(insn 148 147 149 16 (set (reg:SI 0 ax [orig:521 _468 ] [521])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f51c60b7510 parallel>)
                    (const_int 20 [0x14]))) [2 parallel.jend_m+0 S4 A32])) "CALQUV.f":89 86 {*movsi_internal}
     (nil))
(insn 149 148 758 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
        (reg:SI 1 dx [orig:520 _467 ] [520])) "CALQUV.f":89 86 {*movsi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              24 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521
;; lr  def 	 17 [flags] 522 553
(code_label 758 149 150 17 17 (nil) [1 uses])
(note 150 758 151 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (reg:SI 0 ax [orig:521 _468 ] [521]))) "CALQUV.f":89 11 {*cmpsi_1}
     (nil))
(insn 152 151 153 17 (set (reg:QI 1 dx [553])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALQUV.f":89 678 {*setcc_qi}
     (nil))
(insn 153 152 154 17 (set (reg:SI 1 dx [orig:522 _470 ] [522])
        (zero_extend:SI (reg:QI 1 dx [553]))) "CALQUV.f":89 140 {*zero_extendqisi2}
     (nil))
(insn 154 153 155 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:522 _470 ] [522])
            (const_int 0 [0]))) "CALQUV.f":89 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 155 154 156 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 810)
            (pc))) "CALQUV.f":89 682 {*jcc}
     (nil)
 -> 810)
;;  succ:       32
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 156 155 157 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 157 156 752 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
        (const_int 2 [0x2])) "CALQUV.f":90 86 {*movsi_internal}
     (nil))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;;              23 [always] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 523 554
(code_label 752 157 158 19 16 (nil) [1 uses])
(note 158 752 159 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 19 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
            (const_int 118 [0x76]))) "CALQUV.f":90 11 {*cmpsi_1}
     (nil))
(insn 160 159 161 19 (set (reg:QI 1 dx [554])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALQUV.f":90 678 {*setcc_qi}
     (nil))
(insn 161 160 162 19 (set (reg:SI 1 dx [orig:523 _472 ] [523])
        (zero_extend:SI (reg:QI 1 dx [554]))) "CALQUV.f":90 140 {*zero_extendqisi2}
     (nil))
(insn 162 161 163 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:523 _472 ] [523])
            (const_int 0 [0]))) "CALQUV.f":90 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 163 162 164 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 813)
            (pc))) "CALQUV.f":90 682 {*jcc}
     (nil)
 -> 813)
;;  succ:       33
;;              20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578
(note 164 163 165 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 165 164 166 20 (set (reg:SI 1 dx [555])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 166 165 167 20 (set (reg:DI 1 dx [orig:125 _39 ] [125])
        (sign_extend:DI (reg:SI 1 dx [555]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 167 166 168 20 (parallel [
            (set (reg:DI 2 cx [orig:126 _40 ] [126])
                (mult:DI (reg:DI 1 dx [orig:125 _39 ] [125])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 349 {*muldi3_1}
     (nil))
(insn 168 167 169 20 (set (reg:SI 1 dx [556])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 169 168 170 20 (parallel [
            (set (reg:SI 1 dx [orig:127 _41 ] [127])
                (plus:SI (reg:SI 1 dx [556])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 170 169 171 20 (set (reg:DI 1 dx [orig:128 _42 ] [128])
        (sign_extend:DI (reg:SI 1 dx [orig:127 _41 ] [127]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 171 170 172 20 (parallel [
            (set (reg:DI 1 dx [orig:129 _43 ] [129])
                (mult:DI (reg:DI 1 dx [orig:128 _42 ] [128])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 349 {*muldi3_1}
     (nil))
(insn 172 171 173 20 (parallel [
            (set (reg:DI 2 cx [orig:130 _44 ] [130])
                (plus:DI (reg:DI 2 cx [orig:126 _40 ] [126])
                    (reg:DI 1 dx [orig:129 _43 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 173 172 174 20 (set (reg:SI 1 dx [557])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 174 173 175 20 (set (reg:DI 1 dx [orig:131 _45 ] [131])
        (sign_extend:DI (reg:SI 1 dx [557]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 175 174 176 20 (parallel [
            (set (reg:DI 1 dx [orig:132 _46 ] [132])
                (plus:DI (reg:DI 1 dx [orig:131 _45 ] [131])
                    (reg:DI 2 cx [orig:130 _44 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 176 175 177 20 (parallel [
            (set (reg:DI 2 cx [orig:133 _47 ] [133])
                (plus:DI (reg:DI 1 dx [orig:132 _46 ] [132])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 177 176 178 20 (set (reg/f:DI 1 dx [558])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":92 85 {*movdi_internal}
     (nil))
(insn 178 177 179 20 (parallel [
            (set (reg:DI 2 cx [559])
                (plus:DI (reg:DI 2 cx [orig:133 _47 ] [133])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 179 178 180 20 (set (reg:SF 22 xmm1 [orig:134 _48 ] [134])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [559])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [558])) [1 masks.vtm S4 A32])) "CALQUV.f":92 131 {*movsf_internal}
     (nil))
(insn 180 179 181 20 (set (reg:SI 1 dx [560])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 181 180 182 20 (set (reg:DI 1 dx [orig:135 _49 ] [135])
        (sign_extend:DI (reg:SI 1 dx [560]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 182 181 183 20 (parallel [
            (set (reg:DI 2 cx [orig:136 _50 ] [136])
                (mult:DI (reg:DI 1 dx [orig:135 _49 ] [135])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 349 {*muldi3_1}
     (nil))
(insn 183 182 184 20 (set (reg:SI 1 dx [561])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 184 183 185 20 (set (reg:DI 1 dx [orig:137 _51 ] [137])
        (sign_extend:DI (reg:SI 1 dx [561]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 185 184 186 20 (parallel [
            (set (reg:DI 1 dx [orig:138 _52 ] [138])
                (mult:DI (reg:DI 1 dx [orig:137 _51 ] [137])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 349 {*muldi3_1}
     (nil))
(insn 186 185 187 20 (parallel [
            (set (reg:DI 4 si [orig:139 _53 ] [139])
                (plus:DI (reg:DI 2 cx [orig:136 _50 ] [136])
                    (reg:DI 1 dx [orig:138 _52 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 187 186 188 20 (set (reg:SI 1 dx [562])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 188 187 189 20 (set (reg:DI 1 dx [orig:140 _54 ] [140])
        (sign_extend:DI (reg:SI 1 dx [562]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 189 188 190 20 (parallel [
            (set (reg:DI 1 dx [orig:141 _55 ] [141])
                (plus:DI (reg:DI 1 dx [orig:140 _54 ] [140])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 190 189 191 20 (parallel [
            (set (reg:DI 1 dx [563])
                (plus:DI (reg:DI 1 dx [orig:141 _55 ] [141])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 191 190 192 20 (set (reg:SI 2 cx [orig:142 _56 ] [142])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [563])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f51c60b3990 indx>)) [2 indx.ihw S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 192 191 193 20 (set (reg:SI 1 dx [564])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 193 192 194 20 (parallel [
            (set (reg:SI 1 dx [orig:143 _57 ] [143])
                (plus:SI (reg:SI 1 dx [564])
                    (reg:SI 2 cx [orig:142 _56 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:142 _56 ] [142])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32]))
        (nil)))
(insn 194 193 195 20 (set (reg:DI 1 dx [orig:144 _58 ] [144])
        (sign_extend:DI (reg:SI 1 dx [orig:143 _57 ] [143]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 195 194 196 20 (parallel [
            (set (reg:DI 1 dx [orig:145 _59 ] [145])
                (plus:DI (reg:DI 1 dx [orig:144 _58 ] [144])
                    (reg:DI 4 si [orig:139 _53 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 196 195 197 20 (parallel [
            (set (reg:DI 2 cx [orig:146 _60 ] [146])
                (plus:DI (reg:DI 1 dx [orig:145 _59 ] [145])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 197 196 198 20 (set (reg/f:DI 1 dx [565])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":92 85 {*movdi_internal}
     (nil))
(insn 198 197 199 20 (parallel [
            (set (reg:DI 2 cx [566])
                (plus:DI (reg:DI 2 cx [orig:146 _60 ] [146])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 199 198 200 20 (set (reg:SF 21 xmm0 [orig:147 _61 ] [147])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [566])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [565])) [1 masks.vtm S4 A32])) "CALQUV.f":92 131 {*movsf_internal}
     (nil))
(insn 200 199 201 20 (set (reg:SF 22 xmm1 [orig:148 _62 ] [148])
        (plus:SF (reg:SF 22 xmm1 [orig:134 _48 ] [134])
            (reg:SF 21 xmm0 [orig:147 _61 ] [147]))) "CALQUV.f":92 838 {*fop_sf_comm}
     (nil))
(insn 201 200 202 20 (set (reg:SI 1 dx [567])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 202 201 203 20 (set (reg:DI 1 dx [orig:149 _63 ] [149])
        (sign_extend:DI (reg:SI 1 dx [567]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 203 202 204 20 (parallel [
            (set (reg:DI 2 cx [orig:150 _64 ] [150])
                (mult:DI (reg:DI 1 dx [orig:149 _63 ] [149])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 349 {*muldi3_1}
     (nil))
(insn 204 203 205 20 (set (reg:SI 1 dx [568])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 205 204 206 20 (set (reg:DI 1 dx [orig:151 _65 ] [151])
        (sign_extend:DI (reg:SI 1 dx [568]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 206 205 207 20 (parallel [
            (set (reg:DI 1 dx [orig:152 _66 ] [152])
                (mult:DI (reg:DI 1 dx [orig:151 _65 ] [151])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 349 {*muldi3_1}
     (nil))
(insn 207 206 208 20 (parallel [
            (set (reg:DI 4 si [orig:153 _67 ] [153])
                (plus:DI (reg:DI 2 cx [orig:150 _64 ] [150])
                    (reg:DI 1 dx [orig:152 _66 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 208 207 209 20 (set (reg:SI 1 dx [569])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 209 208 210 20 (set (reg:DI 1 dx [orig:154 _68 ] [154])
        (sign_extend:DI (reg:SI 1 dx [569]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 210 209 211 20 (parallel [
            (set (reg:DI 1 dx [orig:155 _69 ] [155])
                (plus:DI (reg:DI 1 dx [orig:154 _68 ] [154])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 211 210 212 20 (set (reg:SI 2 cx [orig:156 _70 ] [156])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:155 _69 ] [155])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f51c60b3990 indx>)) [2 indx.ihe S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 212 211 213 20 (set (reg:SI 1 dx [570])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 213 212 214 20 (parallel [
            (set (reg:SI 1 dx [orig:157 _71 ] [157])
                (plus:SI (reg:SI 1 dx [570])
                    (reg:SI 2 cx [orig:156 _70 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:156 _70 ] [156])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32]))
        (nil)))
(insn 214 213 215 20 (set (reg:DI 1 dx [orig:158 _72 ] [158])
        (sign_extend:DI (reg:SI 1 dx [orig:157 _71 ] [157]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 215 214 216 20 (parallel [
            (set (reg:DI 1 dx [orig:159 _73 ] [159])
                (plus:DI (reg:DI 1 dx [orig:158 _72 ] [158])
                    (reg:DI 4 si [orig:153 _67 ] [153])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 216 215 217 20 (parallel [
            (set (reg:DI 2 cx [orig:160 _74 ] [160])
                (plus:DI (reg:DI 1 dx [orig:159 _73 ] [159])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 217 216 218 20 (set (reg/f:DI 1 dx [571])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":92 85 {*movdi_internal}
     (nil))
(insn 218 217 219 20 (parallel [
            (set (reg:DI 2 cx [572])
                (plus:DI (reg:DI 2 cx [orig:160 _74 ] [160])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 219 218 220 20 (set (reg:SF 21 xmm0 [orig:161 _75 ] [161])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [572])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [571])) [1 masks.vtm S4 A32])) "CALQUV.f":92 131 {*movsf_internal}
     (nil))
(insn 220 219 221 20 (set (reg:SF 22 xmm1 [orig:162 _76 ] [162])
        (plus:SF (reg:SF 22 xmm1 [orig:148 _62 ] [148])
            (reg:SF 21 xmm0 [orig:161 _75 ] [161]))) "CALQUV.f":92 838 {*fop_sf_comm}
     (nil))
(insn 221 220 222 20 (set (reg:SI 1 dx [573])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 222 221 223 20 (set (reg:DI 1 dx [orig:163 _77 ] [163])
        (sign_extend:DI (reg:SI 1 dx [573]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 223 222 224 20 (parallel [
            (set (reg:DI 2 cx [orig:164 _78 ] [164])
                (mult:DI (reg:DI 1 dx [orig:163 _77 ] [163])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 349 {*muldi3_1}
     (nil))
(insn 224 223 225 20 (set (reg:SI 1 dx [574])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 225 224 226 20 (parallel [
            (set (reg:SI 1 dx [orig:165 _79 ] [165])
                (plus:SI (reg:SI 1 dx [574])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 226 225 227 20 (set (reg:DI 1 dx [orig:166 _80 ] [166])
        (sign_extend:DI (reg:SI 1 dx [orig:165 _79 ] [165]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 227 226 228 20 (parallel [
            (set (reg:DI 1 dx [orig:167 _81 ] [167])
                (mult:DI (reg:DI 1 dx [orig:166 _80 ] [166])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 349 {*muldi3_1}
     (nil))
(insn 228 227 229 20 (parallel [
            (set (reg:DI 2 cx [orig:168 _82 ] [168])
                (plus:DI (reg:DI 2 cx [orig:164 _78 ] [164])
                    (reg:DI 1 dx [orig:167 _81 ] [167])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 229 228 230 20 (set (reg:SI 1 dx [575])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":92 86 {*movsi_internal}
     (nil))
(insn 230 229 231 20 (set (reg:DI 1 dx [orig:169 _83 ] [169])
        (sign_extend:DI (reg:SI 1 dx [575]))) "CALQUV.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 231 230 232 20 (parallel [
            (set (reg:DI 1 dx [orig:170 _84 ] [170])
                (plus:DI (reg:DI 1 dx [orig:169 _83 ] [169])
                    (reg:DI 2 cx [orig:168 _82 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 232 231 233 20 (parallel [
            (set (reg:DI 2 cx [orig:171 _85 ] [171])
                (plus:DI (reg:DI 1 dx [orig:170 _84 ] [170])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 233 232 234 20 (set (reg/f:DI 1 dx [576])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":92 85 {*movdi_internal}
     (nil))
(insn 234 233 235 20 (parallel [
            (set (reg:DI 2 cx [577])
                (plus:DI (reg:DI 2 cx [orig:171 _85 ] [171])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":92 222 {*adddi_1}
     (nil))
(insn 235 234 236 20 (set (reg:SF 21 xmm0 [orig:172 _86 ] [172])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [577])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [576])) [1 masks.vtm S4 A32])) "CALQUV.f":92 131 {*movsf_internal}
     (nil))
(insn 236 235 237 20 (set (reg:SF 21 xmm0 [orig:173 _87 ] [173])
        (plus:SF (reg:SF 21 xmm0 [orig:172 _86 ] [172])
            (reg:SF 22 xmm1 [orig:162 _76 ] [162]))) "CALQUV.f":92 838 {*fop_sf_comm}
     (nil))
(insn 237 236 238 20 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 dmean+0 S4 A32])
        (reg:SF 21 xmm0 [orig:173 _87 ] [173])) "CALQUV.f":92 131 {*movsf_internal}
     (nil))
(insn 238 237 239 20 (set (reg:SF 21 xmm0 [578])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALQUV.f":93 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 239 238 240 20 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [578])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 dmean+0 S4 A32]))) "CALQUV.f":93 53 {*cmpisf}
     (nil))
(jump_insn 240 239 244 20 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 785)
            (pc))) "CALQUV.f":93 682 {*jcc}
     (nil)
 -> 785)
;;  succ:       21 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 579
(note 244 240 245 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 245 244 246 21 (set (reg:SF 21 xmm0 [579])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALQUV.f":94 131 {*movsf_internal}
     (nil))
(insn 246 245 786 21 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 dmean+0 S4 A32])
        (reg:SF 21 xmm0 [579])) "CALQUV.f":94 131 {*movsf_internal}
     (nil))
(jump_insn 786 246 787 21 (set (pc)
        (label_ref 327)) 683 {jump}
     (nil)
 -> 327)
;;  succ:       23 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521

(barrier 787 786 785)
;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       20
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604
(code_label 785 787 250 22 21 (nil) [1 uses])
(note 250 785 251 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 252 22 (set (reg:SI 1 dx [580])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 252 251 253 22 (set (reg:DI 1 dx [orig:174 _88 ] [174])
        (sign_extend:DI (reg:SI 1 dx [580]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 253 252 254 22 (parallel [
            (set (reg:DI 2 cx [orig:175 _89 ] [175])
                (mult:DI (reg:DI 1 dx [orig:174 _88 ] [174])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 349 {*muldi3_1}
     (nil))
(insn 254 253 255 22 (set (reg:SI 1 dx [581])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 255 254 256 22 (parallel [
            (set (reg:SI 1 dx [orig:176 _90 ] [176])
                (plus:SI (reg:SI 1 dx [581])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 256 255 257 22 (set (reg:DI 1 dx [orig:177 _91 ] [177])
        (sign_extend:DI (reg:SI 1 dx [orig:176 _90 ] [176]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 257 256 258 22 (parallel [
            (set (reg:DI 1 dx [orig:178 _92 ] [178])
                (mult:DI (reg:DI 1 dx [orig:177 _91 ] [177])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 349 {*muldi3_1}
     (nil))
(insn 258 257 259 22 (parallel [
            (set (reg:DI 2 cx [orig:179 _93 ] [179])
                (plus:DI (reg:DI 2 cx [orig:175 _89 ] [175])
                    (reg:DI 1 dx [orig:178 _92 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 259 258 260 22 (set (reg:SI 1 dx [582])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 260 259 261 22 (set (reg:DI 1 dx [orig:180 _94 ] [180])
        (sign_extend:DI (reg:SI 1 dx [582]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 261 260 262 22 (parallel [
            (set (reg:DI 1 dx [orig:181 _95 ] [181])
                (plus:DI (reg:DI 1 dx [orig:180 _94 ] [180])
                    (reg:DI 2 cx [orig:179 _93 ] [179])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 262 261 263 22 (parallel [
            (set (reg:DI 2 cx [orig:182 _96 ] [182])
                (plus:DI (reg:DI 1 dx [orig:181 _95 ] [181])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 263 262 264 22 (set (reg/f:DI 1 dx [583])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":97 85 {*movdi_internal}
     (nil))
(insn 264 263 265 22 (parallel [
            (set (reg:DI 2 cx [584])
                (plus:DI (reg:DI 2 cx [orig:182 _96 ] [182])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 265 264 266 22 (set (reg:SF 22 xmm1 [orig:183 _97 ] [183])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [584])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [583])) [1 masks.vtm S4 A32])) "CALQUV.f":97 131 {*movsf_internal}
     (nil))
(insn 266 265 267 22 (set (reg:SI 1 dx [585])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 267 266 268 22 (set (reg:DI 1 dx [orig:184 _98 ] [184])
        (sign_extend:DI (reg:SI 1 dx [585]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 268 267 269 22 (parallel [
            (set (reg:DI 2 cx [orig:185 _99 ] [185])
                (mult:DI (reg:DI 1 dx [orig:184 _98 ] [184])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 349 {*muldi3_1}
     (nil))
(insn 269 268 270 22 (set (reg:SI 1 dx [586])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 270 269 271 22 (set (reg:DI 1 dx [orig:186 _100 ] [186])
        (sign_extend:DI (reg:SI 1 dx [586]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 271 270 272 22 (parallel [
            (set (reg:DI 1 dx [orig:187 _101 ] [187])
                (mult:DI (reg:DI 1 dx [orig:186 _100 ] [186])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 349 {*muldi3_1}
     (nil))
(insn 272 271 273 22 (parallel [
            (set (reg:DI 4 si [orig:188 _102 ] [188])
                (plus:DI (reg:DI 2 cx [orig:185 _99 ] [185])
                    (reg:DI 1 dx [orig:187 _101 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 273 272 274 22 (set (reg:SI 1 dx [587])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 274 273 275 22 (set (reg:DI 1 dx [orig:189 _103 ] [189])
        (sign_extend:DI (reg:SI 1 dx [587]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 275 274 276 22 (parallel [
            (set (reg:DI 1 dx [orig:190 _104 ] [190])
                (plus:DI (reg:DI 1 dx [orig:189 _103 ] [189])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 276 275 277 22 (parallel [
            (set (reg:DI 1 dx [588])
                (plus:DI (reg:DI 1 dx [orig:190 _104 ] [190])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 277 276 278 22 (set (reg:SI 2 cx [orig:191 _105 ] [191])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [588])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f51c60b3990 indx>)) [2 indx.ihw S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 278 277 279 22 (set (reg:SI 1 dx [589])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 279 278 280 22 (parallel [
            (set (reg:SI 1 dx [orig:192 _106 ] [192])
                (plus:SI (reg:SI 1 dx [589])
                    (reg:SI 2 cx [orig:191 _105 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:191 _105 ] [191])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32]))
        (nil)))
(insn 280 279 281 22 (set (reg:DI 1 dx [orig:193 _107 ] [193])
        (sign_extend:DI (reg:SI 1 dx [orig:192 _106 ] [192]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 281 280 282 22 (parallel [
            (set (reg:DI 1 dx [orig:194 _108 ] [194])
                (plus:DI (reg:DI 1 dx [orig:193 _107 ] [193])
                    (reg:DI 4 si [orig:188 _102 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 282 281 283 22 (parallel [
            (set (reg:DI 2 cx [orig:195 _109 ] [195])
                (plus:DI (reg:DI 1 dx [orig:194 _108 ] [194])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 283 282 284 22 (set (reg/f:DI 1 dx [590])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":97 85 {*movdi_internal}
     (nil))
(insn 284 283 285 22 (parallel [
            (set (reg:DI 2 cx [591])
                (plus:DI (reg:DI 2 cx [orig:195 _109 ] [195])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 285 284 286 22 (set (reg:SF 21 xmm0 [orig:196 _110 ] [196])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [591])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [590])) [1 masks.vtm S4 A32])) "CALQUV.f":97 131 {*movsf_internal}
     (nil))
(insn 286 285 287 22 (set (reg:SF 22 xmm1 [orig:197 _111 ] [197])
        (plus:SF (reg:SF 22 xmm1 [orig:183 _97 ] [183])
            (reg:SF 21 xmm0 [orig:196 _110 ] [196]))) "CALQUV.f":97 838 {*fop_sf_comm}
     (nil))
(insn 287 286 288 22 (set (reg:SI 1 dx [592])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 288 287 289 22 (set (reg:DI 1 dx [orig:198 _112 ] [198])
        (sign_extend:DI (reg:SI 1 dx [592]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 289 288 290 22 (parallel [
            (set (reg:DI 2 cx [orig:199 _113 ] [199])
                (mult:DI (reg:DI 1 dx [orig:198 _112 ] [198])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 349 {*muldi3_1}
     (nil))
(insn 290 289 291 22 (set (reg:SI 1 dx [593])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 291 290 292 22 (set (reg:DI 1 dx [orig:200 _114 ] [200])
        (sign_extend:DI (reg:SI 1 dx [593]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 292 291 293 22 (parallel [
            (set (reg:DI 1 dx [orig:201 _115 ] [201])
                (mult:DI (reg:DI 1 dx [orig:200 _114 ] [200])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 349 {*muldi3_1}
     (nil))
(insn 293 292 294 22 (parallel [
            (set (reg:DI 4 si [orig:202 _116 ] [202])
                (plus:DI (reg:DI 2 cx [orig:199 _113 ] [199])
                    (reg:DI 1 dx [orig:201 _115 ] [201])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 294 293 295 22 (set (reg:SI 1 dx [594])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 295 294 296 22 (set (reg:DI 1 dx [orig:203 _117 ] [203])
        (sign_extend:DI (reg:SI 1 dx [594]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 296 295 297 22 (parallel [
            (set (reg:DI 1 dx [orig:204 _118 ] [204])
                (plus:DI (reg:DI 1 dx [orig:203 _117 ] [203])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 297 296 298 22 (set (reg:SI 2 cx [orig:205 _119 ] [205])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:204 _118 ] [204])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f51c60b3990 indx>)) [2 indx.ihe S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 298 297 299 22 (set (reg:SI 1 dx [595])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 299 298 300 22 (parallel [
            (set (reg:SI 1 dx [orig:206 _120 ] [206])
                (plus:SI (reg:SI 1 dx [595])
                    (reg:SI 2 cx [orig:205 _119 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:205 _119 ] [205])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32]))
        (nil)))
(insn 300 299 301 22 (set (reg:DI 1 dx [orig:207 _121 ] [207])
        (sign_extend:DI (reg:SI 1 dx [orig:206 _120 ] [206]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 301 300 302 22 (parallel [
            (set (reg:DI 1 dx [orig:208 _122 ] [208])
                (plus:DI (reg:DI 1 dx [orig:207 _121 ] [207])
                    (reg:DI 4 si [orig:202 _116 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 302 301 303 22 (parallel [
            (set (reg:DI 2 cx [orig:209 _123 ] [209])
                (plus:DI (reg:DI 1 dx [orig:208 _122 ] [208])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 303 302 304 22 (set (reg/f:DI 1 dx [596])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":97 85 {*movdi_internal}
     (nil))
(insn 304 303 305 22 (parallel [
            (set (reg:DI 2 cx [597])
                (plus:DI (reg:DI 2 cx [orig:209 _123 ] [209])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 305 304 306 22 (set (reg:SF 21 xmm0 [orig:210 _124 ] [210])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [597])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [596])) [1 masks.vtm S4 A32])) "CALQUV.f":97 131 {*movsf_internal}
     (nil))
(insn 306 305 307 22 (set (reg:SF 22 xmm1 [orig:211 _125 ] [211])
        (plus:SF (reg:SF 22 xmm1 [orig:197 _111 ] [197])
            (reg:SF 21 xmm0 [orig:210 _124 ] [210]))) "CALQUV.f":97 838 {*fop_sf_comm}
     (nil))
(insn 307 306 308 22 (set (reg:SI 1 dx [598])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 308 307 309 22 (set (reg:DI 1 dx [orig:212 _126 ] [212])
        (sign_extend:DI (reg:SI 1 dx [598]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 309 308 310 22 (parallel [
            (set (reg:DI 2 cx [orig:213 _127 ] [213])
                (mult:DI (reg:DI 1 dx [orig:212 _126 ] [212])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 349 {*muldi3_1}
     (nil))
(insn 310 309 311 22 (set (reg:SI 1 dx [599])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 311 310 312 22 (parallel [
            (set (reg:SI 1 dx [orig:214 _128 ] [214])
                (plus:SI (reg:SI 1 dx [599])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 312 311 313 22 (set (reg:DI 1 dx [orig:215 _129 ] [215])
        (sign_extend:DI (reg:SI 1 dx [orig:214 _128 ] [214]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 313 312 314 22 (parallel [
            (set (reg:DI 1 dx [orig:216 _130 ] [216])
                (mult:DI (reg:DI 1 dx [orig:215 _129 ] [215])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 349 {*muldi3_1}
     (nil))
(insn 314 313 315 22 (parallel [
            (set (reg:DI 2 cx [orig:217 _131 ] [217])
                (plus:DI (reg:DI 2 cx [orig:213 _127 ] [213])
                    (reg:DI 1 dx [orig:216 _130 ] [216])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 315 314 316 22 (set (reg:SI 1 dx [600])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":97 86 {*movsi_internal}
     (nil))
(insn 316 315 317 22 (set (reg:DI 1 dx [orig:218 _132 ] [218])
        (sign_extend:DI (reg:SI 1 dx [600]))) "CALQUV.f":97 149 {*extendsidi2_rex64}
     (nil))
(insn 317 316 318 22 (parallel [
            (set (reg:DI 1 dx [orig:219 _133 ] [219])
                (plus:DI (reg:DI 1 dx [orig:218 _132 ] [218])
                    (reg:DI 2 cx [orig:217 _131 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 318 317 319 22 (parallel [
            (set (reg:DI 2 cx [orig:220 _134 ] [220])
                (plus:DI (reg:DI 1 dx [orig:219 _133 ] [219])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 319 318 320 22 (set (reg/f:DI 1 dx [601])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":97 85 {*movdi_internal}
     (nil))
(insn 320 319 321 22 (parallel [
            (set (reg:DI 2 cx [602])
                (plus:DI (reg:DI 2 cx [orig:220 _134 ] [220])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":97 222 {*adddi_1}
     (nil))
(insn 321 320 322 22 (set (reg:SF 21 xmm0 [orig:221 _135 ] [221])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [602])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [601])) [1 masks.vtm S4 A32])) "CALQUV.f":97 131 {*movsf_internal}
     (nil))
(insn 322 321 323 22 (set (reg:SF 21 xmm0 [orig:222 _136 ] [222])
        (plus:SF (reg:SF 21 xmm0 [orig:221 _135 ] [221])
            (reg:SF 22 xmm1 [orig:211 _125 ] [211]))) "CALQUV.f":97 838 {*fop_sf_comm}
     (nil))
(insn 323 322 324 22 (set (reg:SF 22 xmm1 [orig:223 _137 ] [223])
        (reg:SF 21 xmm0 [orig:222 _136 ] [222])) "CALQUV.f":97 131 {*movsf_internal}
     (nil))
(insn 324 323 325 22 (set (reg:SF 21 xmm0 [604])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALQUV.f":97 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 325 324 326 22 (set (reg:SF 21 xmm0 [603])
        (div:SF (reg:SF 21 xmm0 [604])
            (reg:SF 22 xmm1 [orig:223 _137 ] [223]))) "CALQUV.f":97 841 {*fop_sf_1}
     (nil))
(insn 326 325 327 22 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 dmean+0 S4 A32])
        (reg:SF 21 xmm0 [603])) "CALQUV.f":97 131 {*movsf_internal}
     (nil))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 33, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;;              21 [always] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags
(code_label 327 326 328 23 15 (nil) [1 uses])
(note 328 327 329 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 329 328 330 23 (set (reg:SI 1 dx [605])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":100 86 {*movsi_internal}
     (nil))
(insn 330 329 331 23 (set (reg:DI 1 dx [orig:224 _138 ] [224])
        (sign_extend:DI (reg:SI 1 dx [605]))) "CALQUV.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 331 330 332 23 (parallel [
            (set (reg:DI 2 cx [orig:225 _139 ] [225])
                (mult:DI (reg:DI 1 dx [orig:224 _138 ] [224])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":100 349 {*muldi3_1}
     (nil))
(insn 332 331 333 23 (set (reg:SI 1 dx [606])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":100 86 {*movsi_internal}
     (nil))
(insn 333 332 334 23 (set (reg:DI 1 dx [orig:226 _140 ] [226])
        (sign_extend:DI (reg:SI 1 dx [606]))) "CALQUV.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 334 333 335 23 (parallel [
            (set (reg:DI 1 dx [orig:227 _141 ] [227])
                (mult:DI (reg:DI 1 dx [orig:226 _140 ] [226])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":100 349 {*muldi3_1}
     (nil))
(insn 335 334 336 23 (parallel [
            (set (reg:DI 2 cx [orig:228 _142 ] [228])
                (plus:DI (reg:DI 2 cx [orig:225 _139 ] [225])
                    (reg:DI 1 dx [orig:227 _141 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":100 222 {*adddi_1}
     (nil))
(insn 336 335 337 23 (set (reg:SI 1 dx [607])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":100 86 {*movsi_internal}
     (nil))
(insn 337 336 338 23 (set (reg:DI 1 dx [orig:229 _143 ] [229])
        (sign_extend:DI (reg:SI 1 dx [607]))) "CALQUV.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 338 337 339 23 (parallel [
            (set (reg:DI 1 dx [orig:230 _144 ] [230])
                (plus:DI (reg:DI 1 dx [orig:229 _143 ] [229])
                    (reg:DI 2 cx [orig:228 _142 ] [228])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":100 222 {*adddi_1}
     (nil))
(insn 339 338 340 23 (parallel [
            (set (reg:DI 2 cx [orig:231 _145 ] [231])
                (plus:DI (reg:DI 1 dx [orig:230 _144 ] [230])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":100 222 {*adddi_1}
     (nil))
(insn 340 339 341 23 (set (reg/f:DI 1 dx [608])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f51c60adbd0 extra>)) "CALQUV.f":100 85 {*movdi_internal}
     (nil))
(insn 341 340 342 23 (set (reg:SF 21 xmm0 [orig:232 _146 ] [232])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:231 _145 ] [231])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [608])) [1 extra.pint S4 A32])) "CALQUV.f":100 131 {*movsf_internal}
     (nil))
(insn 342 341 343 23 (set (reg:SI 1 dx [609])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":100 86 {*movsi_internal}
     (nil))
(insn 343 342 344 23 (parallel [
            (set (reg:SI 1 dx [orig:233 _147 ] [233])
                (plus:SI (reg:SI 1 dx [609])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":100 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 344 343 345 23 (set (reg:DI 1 dx [orig:234 _148 ] [234])
        (sign_extend:DI (reg:SI 1 dx [orig:233 _147 ] [233]))) "CALQUV.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 345 344 346 23 (parallel [
            (set (reg:DI 2 cx [orig:235 _149 ] [235])
                (mult:DI (reg:DI 1 dx [orig:234 _148 ] [234])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":100 349 {*muldi3_1}
     (nil))
(insn 346 345 347 23 (set (reg:SI 1 dx [610])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":100 86 {*movsi_internal}
     (nil))
(insn 347 346 348 23 (set (reg:DI 1 dx [orig:236 _150 ] [236])
        (sign_extend:DI (reg:SI 1 dx [610]))) "CALQUV.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 348 347 349 23 (parallel [
            (set (reg:DI 1 dx [orig:237 _151 ] [237])
                (mult:DI (reg:DI 1 dx [orig:236 _150 ] [236])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":100 349 {*muldi3_1}
     (nil))
(insn 349 348 350 23 (parallel [
            (set (reg:DI 2 cx [orig:238 _152 ] [238])
                (plus:DI (reg:DI 2 cx [orig:235 _149 ] [235])
                    (reg:DI 1 dx [orig:237 _151 ] [237])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":100 222 {*adddi_1}
     (nil))
(insn 350 349 351 23 (set (reg:SI 1 dx [611])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":100 86 {*movsi_internal}
     (nil))
(insn 351 350 352 23 (set (reg:DI 1 dx [orig:239 _153 ] [239])
        (sign_extend:DI (reg:SI 1 dx [611]))) "CALQUV.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 352 351 353 23 (parallel [
            (set (reg:DI 1 dx [orig:240 _154 ] [240])
                (plus:DI (reg:DI 1 dx [orig:239 _153 ] [239])
                    (reg:DI 2 cx [orig:238 _152 ] [238])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":100 222 {*adddi_1}
     (nil))
(insn 353 352 354 23 (parallel [
            (set (reg:DI 2 cx [orig:241 _155 ] [241])
                (plus:DI (reg:DI 1 dx [orig:240 _154 ] [240])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":100 222 {*adddi_1}
     (nil))
(insn 354 353 355 23 (set (reg/f:DI 1 dx [612])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f51c60adbd0 extra>)) "CALQUV.f":100 85 {*movdi_internal}
     (nil))
(insn 355 354 356 23 (set (reg:SF 22 xmm1 [orig:242 _156 ] [242])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:241 _155 ] [241])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [612])) [1 extra.pint S4 A32])) "CALQUV.f":100 131 {*movsf_internal}
     (nil))
(insn 356 355 357 23 (set (reg:SF 21 xmm0 [orig:243 _157 ] [243])
        (minus:SF (reg:SF 21 xmm0 [orig:232 _146 ] [232])
            (reg:SF 22 xmm1 [orig:242 _156 ] [242]))) "CALQUV.f":100 841 {*fop_sf_1}
     (nil))
(insn 357 356 358 23 (set (reg:SF 22 xmm1 [orig:244 _158 ] [244])
        (reg:SF 21 xmm0 [orig:243 _157 ] [243])) "CALQUV.f":100 131 {*movsf_internal}
     (nil))
(insn 358 357 359 23 (set (reg:V4SF 21 xmm0 [614])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S16 A128])) "CALQUV.f":100 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 359 358 360 23 (parallel [
            (set (reg:SF 21 xmm0 [613])
                (neg:SF (reg:SF 22 xmm1 [orig:244 _158 ] [244])))
            (use (reg:V4SF 21 xmm0 [614]))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":100 507 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 22 xmm1 [orig:244 _158 ] [244]))
        (nil)))
(insn 360 359 361 23 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 dp+0 S4 A32])
        (reg:SF 21 xmm0 [613])) "CALQUV.f":100 131 {*movsf_internal}
     (nil))
(insn 361 360 362 23 (set (reg:SI 1 dx [615])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 362 361 363 23 (parallel [
            (set (reg:SI 1 dx [orig:245 _159 ] [245])
                (plus:SI (reg:SI 1 dx [615])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 363 362 364 23 (set (reg:DI 1 dx [orig:246 _160 ] [246])
        (sign_extend:DI (reg:SI 1 dx [orig:245 _159 ] [245]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 364 363 365 23 (parallel [
            (set (reg:DI 2 cx [orig:247 _161 ] [247])
                (mult:DI (reg:DI 1 dx [orig:246 _160 ] [246])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 349 {*muldi3_1}
     (nil))
(insn 365 364 366 23 (set (reg:SI 1 dx [616])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 366 365 367 23 (set (reg:DI 1 dx [orig:248 _162 ] [248])
        (sign_extend:DI (reg:SI 1 dx [616]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 367 366 368 23 (parallel [
            (set (reg:DI 1 dx [orig:249 _163 ] [249])
                (plus:DI (reg:DI 1 dx [orig:248 _162 ] [248])
                    (reg:DI 2 cx [orig:247 _161 ] [247])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 368 367 369 23 (parallel [
            (set (reg:DI 2 cx [orig:250 _164 ] [250])
                (plus:DI (reg:DI 1 dx [orig:249 _163 ] [249])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 369 368 370 23 (set (reg/f:DI 1 dx [617])
        (symbol_ref:DI ("u1d.4086") [flags 0x202]  <var_decl 0x7f51c60bd510 u1d>)) "CALQUV.f":107 85 {*movdi_internal}
     (nil))
(insn 370 369 371 23 (set (reg:SF 22 xmm1 [orig:251 _165 ] [251])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:250 _164 ] [250])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [617])) [1 u1d S4 A32])) "CALQUV.f":107 131 {*movsf_internal}
     (nil))
(insn 371 370 372 23 (set (reg:SI 1 dx [618])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 372 371 373 23 (set (reg:DI 1 dx [orig:252 _166 ] [252])
        (sign_extend:DI (reg:SI 1 dx [618]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 373 372 374 23 (parallel [
            (set (reg:DI 2 cx [orig:253 _167 ] [253])
                (mult:DI (reg:DI 1 dx [orig:252 _166 ] [252])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 349 {*muldi3_1}
     (nil))
(insn 374 373 375 23 (set (reg:SI 1 dx [619])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 375 374 376 23 (parallel [
            (set (reg:SI 1 dx [orig:254 _168 ] [254])
                (plus:SI (reg:SI 1 dx [619])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 376 375 377 23 (set (reg:DI 1 dx [orig:255 _169 ] [255])
        (sign_extend:DI (reg:SI 1 dx [orig:254 _168 ] [254]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 377 376 378 23 (parallel [
            (set (reg:DI 1 dx [orig:256 _170 ] [256])
                (mult:DI (reg:DI 1 dx [orig:255 _169 ] [255])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 349 {*muldi3_1}
     (nil))
(insn 378 377 379 23 (parallel [
            (set (reg:DI 2 cx [orig:257 _171 ] [257])
                (plus:DI (reg:DI 2 cx [orig:253 _167 ] [253])
                    (reg:DI 1 dx [orig:256 _170 ] [256])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 379 378 380 23 (set (reg:SI 1 dx [620])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 380 379 381 23 (set (reg:DI 1 dx [orig:258 _172 ] [258])
        (sign_extend:DI (reg:SI 1 dx [620]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 381 380 382 23 (parallel [
            (set (reg:DI 1 dx [orig:259 _173 ] [259])
                (plus:DI (reg:DI 1 dx [orig:258 _172 ] [258])
                    (reg:DI 2 cx [orig:257 _171 ] [257])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 382 381 383 23 (parallel [
            (set (reg:DI 2 cx [orig:260 _174 ] [260])
                (plus:DI (reg:DI 1 dx [orig:259 _173 ] [259])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 383 382 384 23 (set (reg/f:DI 1 dx [621])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":107 85 {*movdi_internal}
     (nil))
(insn 384 383 385 23 (parallel [
            (set (reg:DI 2 cx [622])
                (plus:DI (reg:DI 2 cx [orig:260 _174 ] [260])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 385 384 386 23 (set (reg:SF 21 xmm0 [orig:261 _175 ] [261])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [622])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [621])) [1 masks.vtm S4 A32])) "CALQUV.f":107 131 {*movsf_internal}
     (nil))
(insn 386 385 387 23 (set (reg:SF 22 xmm1 [orig:262 _176 ] [262])
        (mult:SF (reg:SF 22 xmm1 [orig:251 _165 ] [251])
            (reg:SF 21 xmm0 [orig:261 _175 ] [261]))) "CALQUV.f":107 838 {*fop_sf_comm}
     (nil))
(insn 387 386 388 23 (set (reg:SI 1 dx [623])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 388 387 389 23 (set (reg:DI 1 dx [orig:263 _177 ] [263])
        (sign_extend:DI (reg:SI 1 dx [623]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 389 388 390 23 (parallel [
            (set (reg:DI 2 cx [orig:264 _178 ] [264])
                (mult:DI (reg:DI 1 dx [orig:263 _177 ] [263])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 349 {*muldi3_1}
     (nil))
(insn 390 389 391 23 (set (reg:SI 1 dx [624])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 391 390 392 23 (set (reg:DI 1 dx [orig:265 _179 ] [265])
        (sign_extend:DI (reg:SI 1 dx [624]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 392 391 393 23 (parallel [
            (set (reg:DI 1 dx [orig:266 _180 ] [266])
                (plus:DI (reg:DI 1 dx [orig:265 _179 ] [265])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 393 392 394 23 (parallel [
            (set (reg:DI 1 dx [625])
                (plus:DI (reg:DI 1 dx [orig:266 _180 ] [266])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 394 393 395 23 (set (reg:SI 4 si [orig:267 _181 ] [267])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [625])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f51c60b3990 indx>)) [2 indx.ihw S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 395 394 396 23 (set (reg:SI 1 dx [626])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 396 395 397 23 (parallel [
            (set (reg:SI 1 dx [orig:268 _182 ] [268])
                (plus:SI (reg:SI 1 dx [626])
                    (reg:SI 4 si [orig:267 _181 ] [267])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:267 _181 ] [267])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32]))
        (nil)))
(insn 397 396 398 23 (set (reg:DI 1 dx [orig:269 _183 ] [269])
        (sign_extend:DI (reg:SI 1 dx [orig:268 _182 ] [268]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 398 397 399 23 (parallel [
            (set (reg:DI 1 dx [orig:270 _184 ] [270])
                (plus:DI (reg:DI 1 dx [orig:269 _183 ] [269])
                    (reg:DI 2 cx [orig:264 _178 ] [264])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 399 398 400 23 (parallel [
            (set (reg:DI 2 cx [orig:271 _185 ] [271])
                (plus:DI (reg:DI 1 dx [orig:270 _184 ] [270])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 400 399 401 23 (set (reg/f:DI 1 dx [627])
        (symbol_ref:DI ("u1d.4086") [flags 0x202]  <var_decl 0x7f51c60bd510 u1d>)) "CALQUV.f":107 85 {*movdi_internal}
     (nil))
(insn 401 400 402 23 (set (reg:SF 23 xmm2 [orig:272 _186 ] [272])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:271 _185 ] [271])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [627])) [1 u1d S4 A32])) "CALQUV.f":107 131 {*movsf_internal}
     (nil))
(insn 402 401 403 23 (set (reg:SI 1 dx [628])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 403 402 404 23 (set (reg:DI 1 dx [orig:273 _187 ] [273])
        (sign_extend:DI (reg:SI 1 dx [628]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 404 403 405 23 (parallel [
            (set (reg:DI 2 cx [orig:274 _188 ] [274])
                (mult:DI (reg:DI 1 dx [orig:273 _187 ] [273])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 349 {*muldi3_1}
     (nil))
(insn 405 404 406 23 (set (reg:SI 1 dx [629])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 406 405 407 23 (set (reg:DI 1 dx [orig:275 _189 ] [275])
        (sign_extend:DI (reg:SI 1 dx [629]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 407 406 408 23 (parallel [
            (set (reg:DI 1 dx [orig:276 _190 ] [276])
                (mult:DI (reg:DI 1 dx [orig:275 _189 ] [275])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 349 {*muldi3_1}
     (nil))
(insn 408 407 409 23 (parallel [
            (set (reg:DI 4 si [orig:277 _191 ] [277])
                (plus:DI (reg:DI 2 cx [orig:274 _188 ] [274])
                    (reg:DI 1 dx [orig:276 _190 ] [276])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 409 408 410 23 (set (reg:SI 1 dx [630])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 410 409 411 23 (set (reg:DI 1 dx [orig:278 _192 ] [278])
        (sign_extend:DI (reg:SI 1 dx [630]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 411 410 412 23 (parallel [
            (set (reg:DI 1 dx [orig:279 _193 ] [279])
                (plus:DI (reg:DI 1 dx [orig:278 _192 ] [278])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 412 411 413 23 (parallel [
            (set (reg:DI 1 dx [631])
                (plus:DI (reg:DI 1 dx [orig:279 _193 ] [279])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 413 412 414 23 (set (reg:SI 2 cx [orig:280 _194 ] [280])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [631])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f51c60b3990 indx>)) [2 indx.ihw S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 414 413 415 23 (set (reg:SI 1 dx [632])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 415 414 416 23 (parallel [
            (set (reg:SI 1 dx [orig:281 _195 ] [281])
                (plus:SI (reg:SI 1 dx [632])
                    (reg:SI 2 cx [orig:280 _194 ] [280])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:280 _194 ] [280])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32]))
        (nil)))
(insn 416 415 417 23 (set (reg:DI 1 dx [orig:282 _196 ] [282])
        (sign_extend:DI (reg:SI 1 dx [orig:281 _195 ] [281]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 417 416 418 23 (parallel [
            (set (reg:DI 1 dx [orig:283 _197 ] [283])
                (plus:DI (reg:DI 1 dx [orig:282 _196 ] [282])
                    (reg:DI 4 si [orig:277 _191 ] [277])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 418 417 419 23 (parallel [
            (set (reg:DI 2 cx [orig:284 _198 ] [284])
                (plus:DI (reg:DI 1 dx [orig:283 _197 ] [283])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 419 418 420 23 (set (reg/f:DI 1 dx [633])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":107 85 {*movdi_internal}
     (nil))
(insn 420 419 421 23 (parallel [
            (set (reg:DI 2 cx [634])
                (plus:DI (reg:DI 2 cx [orig:284 _198 ] [284])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 421 420 422 23 (set (reg:SF 21 xmm0 [orig:285 _199 ] [285])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [634])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [633])) [1 masks.vtm S4 A32])) "CALQUV.f":107 131 {*movsf_internal}
     (nil))
(insn 422 421 423 23 (set (reg:SF 21 xmm0 [orig:286 _200 ] [286])
        (mult:SF (reg:SF 21 xmm0 [orig:285 _199 ] [285])
            (reg:SF 23 xmm2 [orig:272 _186 ] [272]))) "CALQUV.f":107 838 {*fop_sf_comm}
     (nil))
(insn 423 422 424 23 (set (reg:SF 22 xmm1 [orig:287 _201 ] [287])
        (plus:SF (reg:SF 22 xmm1 [orig:262 _176 ] [262])
            (reg:SF 21 xmm0 [orig:286 _200 ] [286]))) "CALQUV.f":107 838 {*fop_sf_comm}
     (nil))
(insn 424 423 425 23 (set (reg:SI 1 dx [635])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 425 424 426 23 (set (reg:DI 1 dx [orig:288 _202 ] [288])
        (sign_extend:DI (reg:SI 1 dx [635]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 426 425 427 23 (parallel [
            (set (reg:DI 2 cx [orig:289 _203 ] [289])
                (mult:DI (reg:DI 1 dx [orig:288 _202 ] [288])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 349 {*muldi3_1}
     (nil))
(insn 427 426 428 23 (set (reg:SI 1 dx [636])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 428 427 429 23 (set (reg:DI 1 dx [orig:290 _204 ] [290])
        (sign_extend:DI (reg:SI 1 dx [636]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 429 428 430 23 (parallel [
            (set (reg:DI 1 dx [orig:291 _205 ] [291])
                (plus:DI (reg:DI 1 dx [orig:290 _204 ] [290])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 430 429 431 23 (set (reg:SI 4 si [orig:292 _206 ] [292])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:291 _205 ] [291])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f51c60b3990 indx>)) [2 indx.ihe S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 431 430 432 23 (set (reg:SI 1 dx [637])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 432 431 433 23 (parallel [
            (set (reg:SI 1 dx [orig:293 _207 ] [293])
                (plus:SI (reg:SI 1 dx [637])
                    (reg:SI 4 si [orig:292 _206 ] [292])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:292 _206 ] [292])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32]))
        (nil)))
(insn 433 432 434 23 (set (reg:DI 1 dx [orig:294 _208 ] [294])
        (sign_extend:DI (reg:SI 1 dx [orig:293 _207 ] [293]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 434 433 435 23 (parallel [
            (set (reg:DI 1 dx [orig:295 _209 ] [295])
                (plus:DI (reg:DI 1 dx [orig:294 _208 ] [294])
                    (reg:DI 2 cx [orig:289 _203 ] [289])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 435 434 436 23 (parallel [
            (set (reg:DI 2 cx [orig:296 _210 ] [296])
                (plus:DI (reg:DI 1 dx [orig:295 _209 ] [295])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 436 435 437 23 (set (reg/f:DI 1 dx [638])
        (symbol_ref:DI ("u1d.4086") [flags 0x202]  <var_decl 0x7f51c60bd510 u1d>)) "CALQUV.f":107 85 {*movdi_internal}
     (nil))
(insn 437 436 438 23 (set (reg:SF 23 xmm2 [orig:297 _211 ] [297])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:296 _210 ] [296])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [638])) [1 u1d S4 A32])) "CALQUV.f":107 131 {*movsf_internal}
     (nil))
(insn 438 437 439 23 (set (reg:SI 1 dx [639])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 439 438 440 23 (set (reg:DI 1 dx [orig:298 _212 ] [298])
        (sign_extend:DI (reg:SI 1 dx [639]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 440 439 441 23 (parallel [
            (set (reg:DI 2 cx [orig:299 _213 ] [299])
                (mult:DI (reg:DI 1 dx [orig:298 _212 ] [298])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 349 {*muldi3_1}
     (nil))
(insn 441 440 442 23 (set (reg:SI 1 dx [640])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 442 441 443 23 (set (reg:DI 1 dx [orig:300 _214 ] [300])
        (sign_extend:DI (reg:SI 1 dx [640]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 443 442 444 23 (parallel [
            (set (reg:DI 1 dx [orig:301 _215 ] [301])
                (mult:DI (reg:DI 1 dx [orig:300 _214 ] [300])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 349 {*muldi3_1}
     (nil))
(insn 444 443 445 23 (parallel [
            (set (reg:DI 4 si [orig:302 _216 ] [302])
                (plus:DI (reg:DI 2 cx [orig:299 _213 ] [299])
                    (reg:DI 1 dx [orig:301 _215 ] [301])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 445 444 446 23 (set (reg:SI 1 dx [641])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 446 445 447 23 (set (reg:DI 1 dx [orig:303 _217 ] [303])
        (sign_extend:DI (reg:SI 1 dx [641]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 447 446 448 23 (parallel [
            (set (reg:DI 1 dx [orig:304 _218 ] [304])
                (plus:DI (reg:DI 1 dx [orig:303 _217 ] [303])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 448 447 449 23 (set (reg:SI 2 cx [orig:305 _219 ] [305])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:304 _218 ] [304])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f51c60b3990 indx>)) [2 indx.ihe S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 449 448 450 23 (set (reg:SI 1 dx [642])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 450 449 451 23 (parallel [
            (set (reg:SI 1 dx [orig:306 _220 ] [306])
                (plus:SI (reg:SI 1 dx [642])
                    (reg:SI 2 cx [orig:305 _219 ] [305])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:305 _219 ] [305])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32]))
        (nil)))
(insn 451 450 452 23 (set (reg:DI 1 dx [orig:307 _221 ] [307])
        (sign_extend:DI (reg:SI 1 dx [orig:306 _220 ] [306]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 452 451 453 23 (parallel [
            (set (reg:DI 1 dx [orig:308 _222 ] [308])
                (plus:DI (reg:DI 1 dx [orig:307 _221 ] [307])
                    (reg:DI 4 si [orig:302 _216 ] [302])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 453 452 454 23 (parallel [
            (set (reg:DI 2 cx [orig:309 _223 ] [309])
                (plus:DI (reg:DI 1 dx [orig:308 _222 ] [308])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 454 453 455 23 (set (reg/f:DI 1 dx [643])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":107 85 {*movdi_internal}
     (nil))
(insn 455 454 456 23 (parallel [
            (set (reg:DI 2 cx [644])
                (plus:DI (reg:DI 2 cx [orig:309 _223 ] [309])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 456 455 457 23 (set (reg:SF 21 xmm0 [orig:310 _224 ] [310])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [644])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [643])) [1 masks.vtm S4 A32])) "CALQUV.f":107 131 {*movsf_internal}
     (nil))
(insn 457 456 458 23 (set (reg:SF 21 xmm0 [orig:311 _225 ] [311])
        (mult:SF (reg:SF 21 xmm0 [orig:310 _224 ] [310])
            (reg:SF 23 xmm2 [orig:297 _211 ] [297]))) "CALQUV.f":107 838 {*fop_sf_comm}
     (nil))
(insn 458 457 459 23 (set (reg:SF 22 xmm1 [orig:312 _226 ] [312])
        (plus:SF (reg:SF 22 xmm1 [orig:287 _201 ] [287])
            (reg:SF 21 xmm0 [orig:311 _225 ] [311]))) "CALQUV.f":107 838 {*fop_sf_comm}
     (nil))
(insn 459 458 460 23 (set (reg:SI 1 dx [645])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 460 459 461 23 (parallel [
            (set (reg:SI 1 dx [orig:313 _227 ] [313])
                (plus:SI (reg:SI 1 dx [645])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 461 460 462 23 (set (reg:DI 1 dx [orig:314 _228 ] [314])
        (sign_extend:DI (reg:SI 1 dx [orig:313 _227 ] [313]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 462 461 463 23 (parallel [
            (set (reg:DI 2 cx [orig:315 _229 ] [315])
                (mult:DI (reg:DI 1 dx [orig:314 _228 ] [314])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 349 {*muldi3_1}
     (nil))
(insn 463 462 464 23 (set (reg:SI 1 dx [646])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 464 463 465 23 (set (reg:DI 1 dx [orig:316 _230 ] [316])
        (sign_extend:DI (reg:SI 1 dx [646]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 465 464 466 23 (parallel [
            (set (reg:DI 1 dx [orig:317 _231 ] [317])
                (plus:DI (reg:DI 1 dx [orig:316 _230 ] [316])
                    (reg:DI 2 cx [orig:315 _229 ] [315])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 466 465 467 23 (parallel [
            (set (reg:DI 2 cx [orig:318 _232 ] [318])
                (plus:DI (reg:DI 1 dx [orig:317 _231 ] [317])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 467 466 468 23 (set (reg/f:DI 1 dx [647])
        (symbol_ref:DI ("u1d.4086") [flags 0x202]  <var_decl 0x7f51c60bd510 u1d>)) "CALQUV.f":107 85 {*movdi_internal}
     (nil))
(insn 468 467 469 23 (set (reg:SF 23 xmm2 [orig:319 _233 ] [319])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:318 _232 ] [318])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [647])) [1 u1d S4 A32])) "CALQUV.f":107 131 {*movsf_internal}
     (nil))
(insn 469 468 470 23 (set (reg:SI 1 dx [648])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 470 469 471 23 (set (reg:DI 1 dx [orig:320 _234 ] [320])
        (sign_extend:DI (reg:SI 1 dx [648]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 471 470 472 23 (parallel [
            (set (reg:DI 2 cx [orig:321 _235 ] [321])
                (mult:DI (reg:DI 1 dx [orig:320 _234 ] [320])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 349 {*muldi3_1}
     (nil))
(insn 472 471 473 23 (set (reg:SI 1 dx [649])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 473 472 474 23 (parallel [
            (set (reg:SI 1 dx [orig:322 _236 ] [322])
                (plus:SI (reg:SI 1 dx [649])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 474 473 475 23 (set (reg:DI 1 dx [orig:323 _237 ] [323])
        (sign_extend:DI (reg:SI 1 dx [orig:322 _236 ] [322]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 475 474 476 23 (parallel [
            (set (reg:DI 1 dx [orig:324 _238 ] [324])
                (mult:DI (reg:DI 1 dx [orig:323 _237 ] [323])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 349 {*muldi3_1}
     (nil))
(insn 476 475 477 23 (parallel [
            (set (reg:DI 2 cx [orig:325 _239 ] [325])
                (plus:DI (reg:DI 2 cx [orig:321 _235 ] [321])
                    (reg:DI 1 dx [orig:324 _238 ] [324])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 477 476 478 23 (set (reg:SI 1 dx [650])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":107 86 {*movsi_internal}
     (nil))
(insn 478 477 479 23 (set (reg:DI 1 dx [orig:326 _240 ] [326])
        (sign_extend:DI (reg:SI 1 dx [650]))) "CALQUV.f":107 149 {*extendsidi2_rex64}
     (nil))
(insn 479 478 480 23 (parallel [
            (set (reg:DI 1 dx [orig:327 _241 ] [327])
                (plus:DI (reg:DI 1 dx [orig:326 _240 ] [326])
                    (reg:DI 2 cx [orig:325 _239 ] [325])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 480 479 481 23 (parallel [
            (set (reg:DI 2 cx [orig:328 _242 ] [328])
                (plus:DI (reg:DI 1 dx [orig:327 _241 ] [327])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 481 480 482 23 (set (reg/f:DI 1 dx [651])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":107 85 {*movdi_internal}
     (nil))
(insn 482 481 483 23 (parallel [
            (set (reg:DI 2 cx [652])
                (plus:DI (reg:DI 2 cx [orig:328 _242 ] [328])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":107 222 {*adddi_1}
     (nil))
(insn 483 482 484 23 (set (reg:SF 21 xmm0 [orig:329 _243 ] [329])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [652])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [651])) [1 masks.vtm S4 A32])) "CALQUV.f":107 131 {*movsf_internal}
     (nil))
(insn 484 483 485 23 (set (reg:SF 21 xmm0 [orig:330 _244 ] [330])
        (mult:SF (reg:SF 21 xmm0 [orig:329 _243 ] [329])
            (reg:SF 23 xmm2 [orig:319 _233 ] [319]))) "CALQUV.f":107 838 {*fop_sf_comm}
     (nil))
(insn 485 484 487 23 (set (reg:SF 21 xmm0 [orig:331 _245 ] [331])
        (plus:SF (reg:SF 21 xmm0 [orig:330 _244 ] [330])
            (reg:SF 22 xmm1 [orig:312 _226 ] [312]))) "CALQUV.f":107 838 {*fop_sf_comm}
     (nil))
(insn 487 485 816 23 (set (reg:SF 21 xmm0 [orig:333 _247 ] [333])
        (mult:SF (reg:SF 21 xmm0 [orig:332 _246 ] [332])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 dmean+0 S4 A32]))) "CALQUV.f":107 838 {*fop_sf_comm}
     (nil))
(insn 816 487 488 23 (set (reg:SF 22 xmm1 [orig:333 _247 ] [333])
        (reg:SF 21 xmm0 [orig:333 _247 ] [333])) "CALQUV.f":107 131 {*movsf_internal}
     (nil))
(insn 488 816 489 23 (set (reg:SF 22 xmm1 [orig:333 _247 ] [333])
        (mult:SF (reg:SF 22 xmm1 [orig:333 _247 ] [333])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 dp+0 S4 A32]))) "CALQUV.f":107 838 {*fop_sf_comm}
     (nil))
(insn 489 488 490 23 (set (reg:SF 21 xmm0 [654])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) "CALQUV.f":107 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0204081237316131591796875e-1 [0x0.d0fac6p-3])
        (nil)))
(insn 490 489 491 23 (set (reg:SF 21 xmm0 [653])
        (mult:SF (reg:SF 21 xmm0 [654])
            (reg:SF 22 xmm1 [orig:334 _248 ] [334]))) "CALQUV.f":107 838 {*fop_sf_comm}
     (nil))
(insn 491 490 492 23 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 umdp+0 S4 A32])
        (reg:SF 21 xmm0 [653])) "CALQUV.f":107 131 {*movsf_internal}
     (nil))
(insn 492 491 493 23 (set (reg:SI 1 dx [655])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 493 492 494 23 (parallel [
            (set (reg:SI 1 dx [orig:335 _249 ] [335])
                (plus:SI (reg:SI 1 dx [655])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 494 493 495 23 (set (reg:DI 1 dx [orig:336 _250 ] [336])
        (sign_extend:DI (reg:SI 1 dx [orig:335 _249 ] [335]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 495 494 496 23 (parallel [
            (set (reg:DI 2 cx [orig:337 _251 ] [337])
                (mult:DI (reg:DI 1 dx [orig:336 _250 ] [336])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 349 {*muldi3_1}
     (nil))
(insn 496 495 497 23 (set (reg:SI 1 dx [656])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 497 496 498 23 (set (reg:DI 1 dx [orig:338 _252 ] [338])
        (sign_extend:DI (reg:SI 1 dx [656]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 498 497 499 23 (parallel [
            (set (reg:DI 1 dx [orig:339 _253 ] [339])
                (plus:DI (reg:DI 1 dx [orig:338 _252 ] [338])
                    (reg:DI 2 cx [orig:337 _251 ] [337])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 499 498 500 23 (parallel [
            (set (reg:DI 2 cx [orig:340 _254 ] [340])
                (plus:DI (reg:DI 1 dx [orig:339 _253 ] [339])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 500 499 501 23 (set (reg/f:DI 1 dx [657])
        (symbol_ref:DI ("v1d.4089") [flags 0x202]  <var_decl 0x7f51c60bd630 v1d>)) "CALQUV.f":112 85 {*movdi_internal}
     (nil))
(insn 501 500 502 23 (set (reg:SF 22 xmm1 [orig:341 _255 ] [341])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:340 _254 ] [340])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [657])) [1 v1d S4 A32])) "CALQUV.f":112 131 {*movsf_internal}
     (nil))
(insn 502 501 503 23 (set (reg:SI 1 dx [658])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 503 502 504 23 (set (reg:DI 1 dx [orig:342 _256 ] [342])
        (sign_extend:DI (reg:SI 1 dx [658]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 504 503 505 23 (parallel [
            (set (reg:DI 2 cx [orig:343 _257 ] [343])
                (mult:DI (reg:DI 1 dx [orig:342 _256 ] [342])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 349 {*muldi3_1}
     (nil))
(insn 505 504 506 23 (set (reg:SI 1 dx [659])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 506 505 507 23 (parallel [
            (set (reg:SI 1 dx [orig:344 _258 ] [344])
                (plus:SI (reg:SI 1 dx [659])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 507 506 508 23 (set (reg:DI 1 dx [orig:345 _259 ] [345])
        (sign_extend:DI (reg:SI 1 dx [orig:344 _258 ] [344]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 508 507 509 23 (parallel [
            (set (reg:DI 1 dx [orig:346 _260 ] [346])
                (mult:DI (reg:DI 1 dx [orig:345 _259 ] [345])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 349 {*muldi3_1}
     (nil))
(insn 509 508 510 23 (parallel [
            (set (reg:DI 2 cx [orig:347 _261 ] [347])
                (plus:DI (reg:DI 2 cx [orig:343 _257 ] [343])
                    (reg:DI 1 dx [orig:346 _260 ] [346])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 510 509 511 23 (set (reg:SI 1 dx [660])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 511 510 512 23 (set (reg:DI 1 dx [orig:348 _262 ] [348])
        (sign_extend:DI (reg:SI 1 dx [660]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 512 511 513 23 (parallel [
            (set (reg:DI 1 dx [orig:349 _263 ] [349])
                (plus:DI (reg:DI 1 dx [orig:348 _262 ] [348])
                    (reg:DI 2 cx [orig:347 _261 ] [347])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 513 512 514 23 (parallel [
            (set (reg:DI 2 cx [orig:350 _264 ] [350])
                (plus:DI (reg:DI 1 dx [orig:349 _263 ] [349])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 514 513 515 23 (set (reg/f:DI 1 dx [661])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":112 85 {*movdi_internal}
     (nil))
(insn 515 514 516 23 (parallel [
            (set (reg:DI 2 cx [662])
                (plus:DI (reg:DI 2 cx [orig:350 _264 ] [350])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 516 515 517 23 (set (reg:SF 21 xmm0 [orig:351 _265 ] [351])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [662])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [661])) [1 masks.vtm S4 A32])) "CALQUV.f":112 131 {*movsf_internal}
     (nil))
(insn 517 516 518 23 (set (reg:SF 22 xmm1 [orig:352 _266 ] [352])
        (mult:SF (reg:SF 22 xmm1 [orig:341 _255 ] [341])
            (reg:SF 21 xmm0 [orig:351 _265 ] [351]))) "CALQUV.f":112 838 {*fop_sf_comm}
     (nil))
(insn 518 517 519 23 (set (reg:SI 1 dx [663])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 519 518 520 23 (set (reg:DI 1 dx [orig:353 _267 ] [353])
        (sign_extend:DI (reg:SI 1 dx [663]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 520 519 521 23 (parallel [
            (set (reg:DI 2 cx [orig:354 _268 ] [354])
                (mult:DI (reg:DI 1 dx [orig:353 _267 ] [353])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 349 {*muldi3_1}
     (nil))
(insn 521 520 522 23 (set (reg:SI 1 dx [664])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 522 521 523 23 (set (reg:DI 1 dx [orig:355 _269 ] [355])
        (sign_extend:DI (reg:SI 1 dx [664]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 523 522 524 23 (parallel [
            (set (reg:DI 1 dx [orig:356 _270 ] [356])
                (plus:DI (reg:DI 1 dx [orig:355 _269 ] [355])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 524 523 525 23 (parallel [
            (set (reg:DI 1 dx [665])
                (plus:DI (reg:DI 1 dx [orig:356 _270 ] [356])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 525 524 526 23 (set (reg:SI 4 si [orig:357 _271 ] [357])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [665])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f51c60b3990 indx>)) [2 indx.ihw S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 526 525 527 23 (set (reg:SI 1 dx [666])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 527 526 528 23 (parallel [
            (set (reg:SI 1 dx [orig:358 _272 ] [358])
                (plus:SI (reg:SI 1 dx [666])
                    (reg:SI 4 si [orig:357 _271 ] [357])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:357 _271 ] [357])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32]))
        (nil)))
(insn 528 527 529 23 (set (reg:DI 1 dx [orig:359 _273 ] [359])
        (sign_extend:DI (reg:SI 1 dx [orig:358 _272 ] [358]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 529 528 530 23 (parallel [
            (set (reg:DI 1 dx [orig:360 _274 ] [360])
                (plus:DI (reg:DI 1 dx [orig:359 _273 ] [359])
                    (reg:DI 2 cx [orig:354 _268 ] [354])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 530 529 531 23 (parallel [
            (set (reg:DI 2 cx [orig:361 _275 ] [361])
                (plus:DI (reg:DI 1 dx [orig:360 _274 ] [360])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 531 530 532 23 (set (reg/f:DI 1 dx [667])
        (symbol_ref:DI ("v1d.4089") [flags 0x202]  <var_decl 0x7f51c60bd630 v1d>)) "CALQUV.f":112 85 {*movdi_internal}
     (nil))
(insn 532 531 533 23 (set (reg:SF 23 xmm2 [orig:362 _276 ] [362])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:361 _275 ] [361])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [667])) [1 v1d S4 A32])) "CALQUV.f":112 131 {*movsf_internal}
     (nil))
(insn 533 532 534 23 (set (reg:SI 1 dx [668])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 534 533 535 23 (set (reg:DI 1 dx [orig:363 _277 ] [363])
        (sign_extend:DI (reg:SI 1 dx [668]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 535 534 536 23 (parallel [
            (set (reg:DI 2 cx [orig:364 _278 ] [364])
                (mult:DI (reg:DI 1 dx [orig:363 _277 ] [363])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 349 {*muldi3_1}
     (nil))
(insn 536 535 537 23 (set (reg:SI 1 dx [669])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 537 536 538 23 (set (reg:DI 1 dx [orig:365 _279 ] [365])
        (sign_extend:DI (reg:SI 1 dx [669]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 538 537 539 23 (parallel [
            (set (reg:DI 1 dx [orig:366 _280 ] [366])
                (mult:DI (reg:DI 1 dx [orig:365 _279 ] [365])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 349 {*muldi3_1}
     (nil))
(insn 539 538 540 23 (parallel [
            (set (reg:DI 4 si [orig:367 _281 ] [367])
                (plus:DI (reg:DI 2 cx [orig:364 _278 ] [364])
                    (reg:DI 1 dx [orig:366 _280 ] [366])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 540 539 541 23 (set (reg:SI 1 dx [670])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 541 540 542 23 (set (reg:DI 1 dx [orig:368 _282 ] [368])
        (sign_extend:DI (reg:SI 1 dx [670]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 542 541 543 23 (parallel [
            (set (reg:DI 1 dx [orig:369 _283 ] [369])
                (plus:DI (reg:DI 1 dx [orig:368 _282 ] [368])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 543 542 544 23 (parallel [
            (set (reg:DI 1 dx [671])
                (plus:DI (reg:DI 1 dx [orig:369 _283 ] [369])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 544 543 545 23 (set (reg:SI 2 cx [orig:370 _284 ] [370])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [671])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f51c60b3990 indx>)) [2 indx.ihw S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 545 544 546 23 (set (reg:SI 1 dx [672])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 546 545 547 23 (parallel [
            (set (reg:SI 1 dx [orig:371 _285 ] [371])
                (plus:SI (reg:SI 1 dx [672])
                    (reg:SI 2 cx [orig:370 _284 ] [370])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:370 _284 ] [370])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32]))
        (nil)))
(insn 547 546 548 23 (set (reg:DI 1 dx [orig:372 _286 ] [372])
        (sign_extend:DI (reg:SI 1 dx [orig:371 _285 ] [371]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 548 547 549 23 (parallel [
            (set (reg:DI 1 dx [orig:373 _287 ] [373])
                (plus:DI (reg:DI 1 dx [orig:372 _286 ] [372])
                    (reg:DI 4 si [orig:367 _281 ] [367])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 549 548 550 23 (parallel [
            (set (reg:DI 2 cx [orig:374 _288 ] [374])
                (plus:DI (reg:DI 1 dx [orig:373 _287 ] [373])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 550 549 551 23 (set (reg/f:DI 1 dx [673])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":112 85 {*movdi_internal}
     (nil))
(insn 551 550 552 23 (parallel [
            (set (reg:DI 2 cx [674])
                (plus:DI (reg:DI 2 cx [orig:374 _288 ] [374])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 552 551 553 23 (set (reg:SF 21 xmm0 [orig:375 _289 ] [375])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [674])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [673])) [1 masks.vtm S4 A32])) "CALQUV.f":112 131 {*movsf_internal}
     (nil))
(insn 553 552 554 23 (set (reg:SF 21 xmm0 [orig:376 _290 ] [376])
        (mult:SF (reg:SF 21 xmm0 [orig:375 _289 ] [375])
            (reg:SF 23 xmm2 [orig:362 _276 ] [362]))) "CALQUV.f":112 838 {*fop_sf_comm}
     (nil))
(insn 554 553 555 23 (set (reg:SF 22 xmm1 [orig:377 _291 ] [377])
        (plus:SF (reg:SF 22 xmm1 [orig:352 _266 ] [352])
            (reg:SF 21 xmm0 [orig:376 _290 ] [376]))) "CALQUV.f":112 838 {*fop_sf_comm}
     (nil))
(insn 555 554 556 23 (set (reg:SI 1 dx [675])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 556 555 557 23 (set (reg:DI 1 dx [orig:378 _292 ] [378])
        (sign_extend:DI (reg:SI 1 dx [675]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 557 556 558 23 (parallel [
            (set (reg:DI 2 cx [orig:379 _293 ] [379])
                (mult:DI (reg:DI 1 dx [orig:378 _292 ] [378])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 349 {*muldi3_1}
     (nil))
(insn 558 557 559 23 (set (reg:SI 1 dx [676])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 559 558 560 23 (set (reg:DI 1 dx [orig:380 _294 ] [380])
        (sign_extend:DI (reg:SI 1 dx [676]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 560 559 561 23 (parallel [
            (set (reg:DI 1 dx [orig:381 _295 ] [381])
                (plus:DI (reg:DI 1 dx [orig:380 _294 ] [380])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 561 560 562 23 (set (reg:SI 4 si [orig:382 _296 ] [382])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:381 _295 ] [381])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f51c60b3990 indx>)) [2 indx.ihe S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 562 561 563 23 (set (reg:SI 1 dx [677])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 563 562 564 23 (parallel [
            (set (reg:SI 1 dx [orig:383 _297 ] [383])
                (plus:SI (reg:SI 1 dx [677])
                    (reg:SI 4 si [orig:382 _296 ] [382])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:382 _296 ] [382])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32]))
        (nil)))
(insn 564 563 565 23 (set (reg:DI 1 dx [orig:384 _298 ] [384])
        (sign_extend:DI (reg:SI 1 dx [orig:383 _297 ] [383]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 565 564 566 23 (parallel [
            (set (reg:DI 1 dx [orig:385 _299 ] [385])
                (plus:DI (reg:DI 1 dx [orig:384 _298 ] [384])
                    (reg:DI 2 cx [orig:379 _293 ] [379])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 566 565 567 23 (parallel [
            (set (reg:DI 2 cx [orig:386 _300 ] [386])
                (plus:DI (reg:DI 1 dx [orig:385 _299 ] [385])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 567 566 568 23 (set (reg/f:DI 1 dx [678])
        (symbol_ref:DI ("v1d.4089") [flags 0x202]  <var_decl 0x7f51c60bd630 v1d>)) "CALQUV.f":112 85 {*movdi_internal}
     (nil))
(insn 568 567 569 23 (set (reg:SF 23 xmm2 [orig:387 _301 ] [387])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:386 _300 ] [386])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [678])) [1 v1d S4 A32])) "CALQUV.f":112 131 {*movsf_internal}
     (nil))
(insn 569 568 570 23 (set (reg:SI 1 dx [679])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 570 569 571 23 (set (reg:DI 1 dx [orig:388 _302 ] [388])
        (sign_extend:DI (reg:SI 1 dx [679]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 571 570 572 23 (parallel [
            (set (reg:DI 2 cx [orig:389 _303 ] [389])
                (mult:DI (reg:DI 1 dx [orig:388 _302 ] [388])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 349 {*muldi3_1}
     (nil))
(insn 572 571 573 23 (set (reg:SI 1 dx [680])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 573 572 574 23 (set (reg:DI 1 dx [orig:390 _304 ] [390])
        (sign_extend:DI (reg:SI 1 dx [680]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 574 573 575 23 (parallel [
            (set (reg:DI 1 dx [orig:391 _305 ] [391])
                (mult:DI (reg:DI 1 dx [orig:390 _304 ] [390])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 349 {*muldi3_1}
     (nil))
(insn 575 574 576 23 (parallel [
            (set (reg:DI 4 si [orig:392 _306 ] [392])
                (plus:DI (reg:DI 2 cx [orig:389 _303 ] [389])
                    (reg:DI 1 dx [orig:391 _305 ] [391])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 576 575 577 23 (set (reg:SI 1 dx [681])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 577 576 578 23 (set (reg:DI 1 dx [orig:393 _307 ] [393])
        (sign_extend:DI (reg:SI 1 dx [681]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 578 577 579 23 (parallel [
            (set (reg:DI 1 dx [orig:394 _308 ] [394])
                (plus:DI (reg:DI 1 dx [orig:393 _307 ] [393])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 579 578 580 23 (set (reg:SI 2 cx [orig:395 _309 ] [395])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:394 _308 ] [394])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f51c60b3990 indx>)) [2 indx.ihe S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 580 579 581 23 (set (reg:SI 1 dx [682])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 581 580 582 23 (parallel [
            (set (reg:SI 1 dx [orig:396 _310 ] [396])
                (plus:SI (reg:SI 1 dx [682])
                    (reg:SI 2 cx [orig:395 _309 ] [395])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:395 _309 ] [395])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32]))
        (nil)))
(insn 582 581 583 23 (set (reg:DI 1 dx [orig:397 _311 ] [397])
        (sign_extend:DI (reg:SI 1 dx [orig:396 _310 ] [396]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 583 582 584 23 (parallel [
            (set (reg:DI 1 dx [orig:398 _312 ] [398])
                (plus:DI (reg:DI 1 dx [orig:397 _311 ] [397])
                    (reg:DI 4 si [orig:392 _306 ] [392])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 584 583 585 23 (parallel [
            (set (reg:DI 2 cx [orig:399 _313 ] [399])
                (plus:DI (reg:DI 1 dx [orig:398 _312 ] [398])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 585 584 586 23 (set (reg/f:DI 1 dx [683])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":112 85 {*movdi_internal}
     (nil))
(insn 586 585 587 23 (parallel [
            (set (reg:DI 2 cx [684])
                (plus:DI (reg:DI 2 cx [orig:399 _313 ] [399])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 587 586 588 23 (set (reg:SF 21 xmm0 [orig:400 _314 ] [400])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [684])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [683])) [1 masks.vtm S4 A32])) "CALQUV.f":112 131 {*movsf_internal}
     (nil))
(insn 588 587 589 23 (set (reg:SF 21 xmm0 [orig:401 _315 ] [401])
        (mult:SF (reg:SF 21 xmm0 [orig:400 _314 ] [400])
            (reg:SF 23 xmm2 [orig:387 _301 ] [387]))) "CALQUV.f":112 838 {*fop_sf_comm}
     (nil))
(insn 589 588 590 23 (set (reg:SF 22 xmm1 [orig:402 _316 ] [402])
        (plus:SF (reg:SF 22 xmm1 [orig:377 _291 ] [377])
            (reg:SF 21 xmm0 [orig:401 _315 ] [401]))) "CALQUV.f":112 838 {*fop_sf_comm}
     (nil))
(insn 590 589 591 23 (set (reg:SI 1 dx [685])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 591 590 592 23 (parallel [
            (set (reg:SI 1 dx [orig:403 _317 ] [403])
                (plus:SI (reg:SI 1 dx [685])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 592 591 593 23 (set (reg:DI 1 dx [orig:404 _318 ] [404])
        (sign_extend:DI (reg:SI 1 dx [orig:403 _317 ] [403]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 593 592 594 23 (parallel [
            (set (reg:DI 2 cx [orig:405 _319 ] [405])
                (mult:DI (reg:DI 1 dx [orig:404 _318 ] [404])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 349 {*muldi3_1}
     (nil))
(insn 594 593 595 23 (set (reg:SI 1 dx [686])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 595 594 596 23 (set (reg:DI 1 dx [orig:406 _320 ] [406])
        (sign_extend:DI (reg:SI 1 dx [686]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 596 595 597 23 (parallel [
            (set (reg:DI 1 dx [orig:407 _321 ] [407])
                (plus:DI (reg:DI 1 dx [orig:406 _320 ] [406])
                    (reg:DI 2 cx [orig:405 _319 ] [405])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 597 596 598 23 (parallel [
            (set (reg:DI 2 cx [orig:408 _322 ] [408])
                (plus:DI (reg:DI 1 dx [orig:407 _321 ] [407])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 598 597 599 23 (set (reg/f:DI 1 dx [687])
        (symbol_ref:DI ("v1d.4089") [flags 0x202]  <var_decl 0x7f51c60bd630 v1d>)) "CALQUV.f":112 85 {*movdi_internal}
     (nil))
(insn 599 598 600 23 (set (reg:SF 23 xmm2 [orig:409 _323 ] [409])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:408 _322 ] [408])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [687])) [1 v1d S4 A32])) "CALQUV.f":112 131 {*movsf_internal}
     (nil))
(insn 600 599 601 23 (set (reg:SI 1 dx [688])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 601 600 602 23 (set (reg:DI 1 dx [orig:410 _324 ] [410])
        (sign_extend:DI (reg:SI 1 dx [688]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 602 601 603 23 (parallel [
            (set (reg:DI 2 cx [orig:411 _325 ] [411])
                (mult:DI (reg:DI 1 dx [orig:410 _324 ] [410])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 349 {*muldi3_1}
     (nil))
(insn 603 602 604 23 (set (reg:SI 1 dx [689])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 604 603 605 23 (parallel [
            (set (reg:SI 1 dx [orig:412 _326 ] [412])
                (plus:SI (reg:SI 1 dx [689])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 605 604 606 23 (set (reg:DI 1 dx [orig:413 _327 ] [413])
        (sign_extend:DI (reg:SI 1 dx [orig:412 _326 ] [412]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 606 605 607 23 (parallel [
            (set (reg:DI 1 dx [orig:414 _328 ] [414])
                (mult:DI (reg:DI 1 dx [orig:413 _327 ] [413])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 349 {*muldi3_1}
     (nil))
(insn 607 606 608 23 (parallel [
            (set (reg:DI 2 cx [orig:415 _329 ] [415])
                (plus:DI (reg:DI 2 cx [orig:411 _325 ] [411])
                    (reg:DI 1 dx [orig:414 _328 ] [414])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 608 607 609 23 (set (reg:SI 1 dx [690])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":112 86 {*movsi_internal}
     (nil))
(insn 609 608 610 23 (set (reg:DI 1 dx [orig:416 _330 ] [416])
        (sign_extend:DI (reg:SI 1 dx [690]))) "CALQUV.f":112 149 {*extendsidi2_rex64}
     (nil))
(insn 610 609 611 23 (parallel [
            (set (reg:DI 1 dx [orig:417 _331 ] [417])
                (plus:DI (reg:DI 1 dx [orig:416 _330 ] [416])
                    (reg:DI 2 cx [orig:415 _329 ] [415])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 611 610 612 23 (parallel [
            (set (reg:DI 2 cx [orig:418 _332 ] [418])
                (plus:DI (reg:DI 1 dx [orig:417 _331 ] [417])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 612 611 613 23 (set (reg/f:DI 1 dx [691])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":112 85 {*movdi_internal}
     (nil))
(insn 613 612 614 23 (parallel [
            (set (reg:DI 2 cx [692])
                (plus:DI (reg:DI 2 cx [orig:418 _332 ] [418])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":112 222 {*adddi_1}
     (nil))
(insn 614 613 615 23 (set (reg:SF 21 xmm0 [orig:419 _333 ] [419])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [692])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [691])) [1 masks.vtm S4 A32])) "CALQUV.f":112 131 {*movsf_internal}
     (nil))
(insn 615 614 616 23 (set (reg:SF 21 xmm0 [orig:420 _334 ] [420])
        (mult:SF (reg:SF 21 xmm0 [orig:419 _333 ] [419])
            (reg:SF 23 xmm2 [orig:409 _323 ] [409]))) "CALQUV.f":112 838 {*fop_sf_comm}
     (nil))
(insn 616 615 618 23 (set (reg:SF 21 xmm0 [orig:421 _335 ] [421])
        (plus:SF (reg:SF 21 xmm0 [orig:420 _334 ] [420])
            (reg:SF 22 xmm1 [orig:402 _316 ] [402]))) "CALQUV.f":112 838 {*fop_sf_comm}
     (nil))
(insn 618 616 818 23 (set (reg:SF 21 xmm0 [orig:423 _337 ] [423])
        (mult:SF (reg:SF 21 xmm0 [orig:422 _336 ] [422])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 dmean+0 S4 A32]))) "CALQUV.f":112 838 {*fop_sf_comm}
     (nil))
(insn 818 618 619 23 (set (reg:SF 22 xmm1 [orig:423 _337 ] [423])
        (reg:SF 21 xmm0 [orig:423 _337 ] [423])) "CALQUV.f":112 131 {*movsf_internal}
     (nil))
(insn 619 818 620 23 (set (reg:SF 22 xmm1 [orig:423 _337 ] [423])
        (mult:SF (reg:SF 22 xmm1 [orig:423 _337 ] [423])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 dp+0 S4 A32]))) "CALQUV.f":112 838 {*fop_sf_comm}
     (nil))
(insn 620 619 621 23 (set (reg:SF 21 xmm0 [694])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) "CALQUV.f":112 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0204081237316131591796875e-1 [0x0.d0fac6p-3])
        (nil)))
(insn 621 620 622 23 (set (reg:SF 21 xmm0 [693])
        (mult:SF (reg:SF 21 xmm0 [694])
            (reg:SF 22 xmm1 [orig:424 _338 ] [424]))) "CALQUV.f":112 838 {*fop_sf_comm}
     (nil))
(insn 622 621 623 23 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 vmdp+0 S4 A32])
        (reg:SF 21 xmm0 [693])) "CALQUV.f":112 131 {*movsf_internal}
     (nil))
(insn 623 622 624 23 (set (reg:SI 1 dx [695])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":116 86 {*movsi_internal}
     (nil))
(insn 624 623 625 23 (set (reg:DI 1 dx [orig:425 _339 ] [425])
        (sign_extend:DI (reg:SI 1 dx [695]))) "CALQUV.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 625 624 626 23 (parallel [
            (set (reg:DI 2 cx [orig:426 _340 ] [426])
                (mult:DI (reg:DI 1 dx [orig:425 _339 ] [425])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 349 {*muldi3_1}
     (nil))
(insn 626 625 627 23 (set (reg:SI 1 dx [696])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":116 86 {*movsi_internal}
     (nil))
(insn 627 626 628 23 (set (reg:DI 1 dx [orig:427 _341 ] [427])
        (sign_extend:DI (reg:SI 1 dx [696]))) "CALQUV.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 628 627 629 23 (parallel [
            (set (reg:DI 1 dx [orig:428 _342 ] [428])
                (plus:DI (reg:DI 1 dx [orig:427 _341 ] [427])
                    (reg:DI 2 cx [orig:426 _340 ] [426])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 629 628 630 23 (parallel [
            (set (reg:DI 2 cx [orig:429 _343 ] [429])
                (plus:DI (reg:DI 1 dx [orig:428 _342 ] [428])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 630 629 631 23 (set (reg/f:DI 1 dx [697])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 quint+0 S8 A64])) "CALQUV.f":116 85 {*movdi_internal}
     (nil))
(insn 631 630 632 23 (set (reg:SF 22 xmm1 [orig:430 _344 ] [430])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:429 _343 ] [429])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [697])) [1 *quint_447(D) S4 A32])) "CALQUV.f":116 131 {*movsf_internal}
     (nil))
(insn 632 631 633 23 (set (reg:SI 1 dx [698])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":116 86 {*movsi_internal}
     (nil))
(insn 633 632 634 23 (set (reg:DI 1 dx [orig:431 _345 ] [431])
        (sign_extend:DI (reg:SI 1 dx [698]))) "CALQUV.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 634 633 635 23 (parallel [
            (set (reg:DI 2 cx [orig:432 _346 ] [432])
                (mult:DI (reg:DI 1 dx [orig:431 _345 ] [431])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 349 {*muldi3_1}
     (nil))
(insn 635 634 636 23 (set (reg:SI 1 dx [699])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":116 86 {*movsi_internal}
     (nil))
(insn 636 635 637 23 (set (reg:DI 1 dx [orig:433 _347 ] [433])
        (sign_extend:DI (reg:SI 1 dx [699]))) "CALQUV.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 637 636 638 23 (parallel [
            (set (reg:DI 1 dx [orig:434 _348 ] [434])
                (mult:DI (reg:DI 1 dx [orig:433 _347 ] [433])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 349 {*muldi3_1}
     (nil))
(insn 638 637 639 23 (parallel [
            (set (reg:DI 2 cx [orig:435 _349 ] [435])
                (plus:DI (reg:DI 2 cx [orig:432 _346 ] [432])
                    (reg:DI 1 dx [orig:434 _348 ] [434])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 639 638 640 23 (set (reg:SI 1 dx [700])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":116 86 {*movsi_internal}
     (nil))
(insn 640 639 641 23 (set (reg:DI 1 dx [orig:436 _350 ] [436])
        (sign_extend:DI (reg:SI 1 dx [700]))) "CALQUV.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 641 640 642 23 (parallel [
            (set (reg:DI 1 dx [orig:437 _351 ] [437])
                (plus:DI (reg:DI 1 dx [orig:436 _350 ] [436])
                    (reg:DI 2 cx [orig:435 _349 ] [435])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 642 641 643 23 (parallel [
            (set (reg:DI 2 cx [orig:438 _352 ] [438])
                (plus:DI (reg:DI 1 dx [orig:437 _351 ] [437])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 643 642 644 23 (set (reg/f:DI 1 dx [701])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f51c60b7d80 vrbls>)) "CALQUV.f":116 85 {*movdi_internal}
     (nil))
(insn 644 643 645 23 (parallel [
            (set (reg:DI 2 cx [702])
                (plus:DI (reg:DI 2 cx [orig:438 _352 ] [438])
                    (const_int 3466827 [0x34e64b])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 645 644 646 23 (set (reg:SF 23 xmm2 [orig:439 _353 ] [439])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [702])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [701])) [1 vrbls.q S4 A32])) "CALQUV.f":116 131 {*movsf_internal}
     (nil))
(insn 646 645 647 23 (set (reg:SI 1 dx [703])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":116 86 {*movsi_internal}
     (nil))
(insn 647 646 648 23 (set (reg:DI 1 dx [orig:440 _354 ] [440])
        (sign_extend:DI (reg:SI 1 dx [703]))) "CALQUV.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 648 647 649 23 (parallel [
            (set (reg:DI 2 cx [orig:441 _355 ] [441])
                (mult:DI (reg:DI 1 dx [orig:440 _354 ] [440])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 349 {*muldi3_1}
     (nil))
(insn 649 648 650 23 (set (reg:SI 1 dx [704])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":116 86 {*movsi_internal}
     (nil))
(insn 650 649 651 23 (set (reg:DI 1 dx [orig:442 _356 ] [442])
        (sign_extend:DI (reg:SI 1 dx [704]))) "CALQUV.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 651 650 652 23 (parallel [
            (set (reg:DI 1 dx [orig:443 _357 ] [443])
                (mult:DI (reg:DI 1 dx [orig:442 _356 ] [442])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 349 {*muldi3_1}
     (nil))
(insn 652 651 653 23 (parallel [
            (set (reg:DI 2 cx [orig:444 _358 ] [444])
                (plus:DI (reg:DI 2 cx [orig:441 _355 ] [441])
                    (reg:DI 1 dx [orig:443 _357 ] [443])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 653 652 654 23 (set (reg:SI 1 dx [705])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":116 86 {*movsi_internal}
     (nil))
(insn 654 653 655 23 (set (reg:DI 1 dx [orig:445 _359 ] [445])
        (sign_extend:DI (reg:SI 1 dx [705]))) "CALQUV.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 655 654 656 23 (parallel [
            (set (reg:DI 1 dx [orig:446 _360 ] [446])
                (plus:DI (reg:DI 1 dx [orig:445 _359 ] [445])
                    (reg:DI 2 cx [orig:444 _358 ] [444])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 656 655 657 23 (parallel [
            (set (reg:DI 2 cx [orig:447 _361 ] [447])
                (plus:DI (reg:DI 1 dx [orig:446 _360 ] [446])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 657 656 658 23 (set (reg/f:DI 1 dx [706])
        (symbol_ref:DI ("cldwtr_") [flags 0x202]  <var_decl 0x7f51cd10eab0 cldwtr>)) "CALQUV.f":116 85 {*movdi_internal}
     (nil))
(insn 658 657 659 23 (set (reg:SF 21 xmm0 [orig:448 _362 ] [448])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:447 _361 ] [447])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [706])) [1 cldwtr.cwm S4 A32])) "CALQUV.f":116 131 {*movsf_internal}
     (nil))
(insn 659 658 820 23 (set (reg:SF 21 xmm0 [orig:449 _363 ] [449])
        (plus:SF (reg:SF 21 xmm0 [orig:448 _362 ] [448])
            (reg:SF 23 xmm2 [orig:439 _353 ] [439]))) "CALQUV.f":116 838 {*fop_sf_comm}
     (nil))
(insn 820 659 661 23 (set (reg:SF 23 xmm2 [orig:450 _364 ] [450])
        (reg:SF 21 xmm0 [orig:450 _364 ] [450])) "CALQUV.f":116 131 {*movsf_internal}
     (nil))
(insn 661 820 662 23 (set (reg:SF 23 xmm2 [orig:450 _364 ] [450])
        (mult:SF (reg:SF 23 xmm2 [orig:450 _364 ] [450])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 umdp+0 S4 A32]))) "CALQUV.f":116 838 {*fop_sf_comm}
     (nil))
(insn 662 661 663 23 (set (reg:SI 1 dx [707])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":116 86 {*movsi_internal}
     (nil))
(insn 663 662 664 23 (set (reg:DI 1 dx [orig:452 _366 ] [452])
        (sign_extend:DI (reg:SI 1 dx [707]))) "CALQUV.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 664 663 665 23 (parallel [
            (set (reg:DI 2 cx [orig:453 _367 ] [453])
                (mult:DI (reg:DI 1 dx [orig:452 _366 ] [452])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 349 {*muldi3_1}
     (nil))
(insn 665 664 666 23 (set (reg:SI 1 dx [708])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":116 86 {*movsi_internal}
     (nil))
(insn 666 665 667 23 (set (reg:DI 1 dx [orig:454 _368 ] [454])
        (sign_extend:DI (reg:SI 1 dx [708]))) "CALQUV.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 667 666 668 23 (parallel [
            (set (reg:DI 1 dx [orig:455 _369 ] [455])
                (mult:DI (reg:DI 1 dx [orig:454 _368 ] [454])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 349 {*muldi3_1}
     (nil))
(insn 668 667 669 23 (parallel [
            (set (reg:DI 2 cx [orig:456 _370 ] [456])
                (plus:DI (reg:DI 2 cx [orig:453 _367 ] [453])
                    (reg:DI 1 dx [orig:455 _369 ] [455])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 669 668 670 23 (set (reg:SI 1 dx [709])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":116 86 {*movsi_internal}
     (nil))
(insn 670 669 671 23 (set (reg:DI 1 dx [orig:457 _371 ] [457])
        (sign_extend:DI (reg:SI 1 dx [709]))) "CALQUV.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 671 670 672 23 (parallel [
            (set (reg:DI 1 dx [orig:458 _372 ] [458])
                (plus:DI (reg:DI 1 dx [orig:457 _371 ] [457])
                    (reg:DI 2 cx [orig:456 _370 ] [456])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 672 671 673 23 (parallel [
            (set (reg:DI 2 cx [orig:459 _373 ] [459])
                (plus:DI (reg:DI 1 dx [orig:458 _372 ] [458])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 673 672 674 23 (set (reg/f:DI 1 dx [710])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":116 85 {*movdi_internal}
     (nil))
(insn 674 673 675 23 (parallel [
            (set (reg:DI 2 cx [711])
                (plus:DI (reg:DI 2 cx [orig:459 _373 ] [459])
                    (const_int 148155 [0x242bb])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 675 674 676 23 (set (reg:SF 21 xmm0 [orig:460 _374 ] [460])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [711])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [710])) [1 masks.htm S4 A32])) "CALQUV.f":116 131 {*movsf_internal}
     (nil))
(insn 676 675 677 23 (set (reg:SF 21 xmm0 [orig:461 _375 ] [461])
        (mult:SF (reg:SF 21 xmm0 [orig:460 _374 ] [460])
            (reg:SF 23 xmm2 [orig:451 _365 ] [451]))) "CALQUV.f":116 838 {*fop_sf_comm}
     (nil))
(insn 677 676 678 23 (set (reg:SI 1 dx [712])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":116 86 {*movsi_internal}
     (nil))
(insn 678 677 679 23 (set (reg:DI 1 dx [orig:462 _376 ] [462])
        (sign_extend:DI (reg:SI 1 dx [712]))) "CALQUV.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 679 678 680 23 (parallel [
            (set (reg:DI 2 cx [orig:463 _377 ] [463])
                (mult:DI (reg:DI 1 dx [orig:462 _376 ] [462])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 349 {*muldi3_1}
     (nil))
(insn 680 679 681 23 (set (reg:SI 1 dx [713])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":116 86 {*movsi_internal}
     (nil))
(insn 681 680 682 23 (set (reg:DI 1 dx [orig:464 _378 ] [464])
        (sign_extend:DI (reg:SI 1 dx [713]))) "CALQUV.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 682 681 683 23 (parallel [
            (set (reg:DI 1 dx [orig:465 _379 ] [465])
                (plus:DI (reg:DI 1 dx [orig:464 _378 ] [464])
                    (reg:DI 2 cx [orig:463 _377 ] [463])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 683 682 684 23 (parallel [
            (set (reg:DI 2 cx [orig:466 _380 ] [466])
                (plus:DI (reg:DI 1 dx [orig:465 _379 ] [465])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":116 222 {*adddi_1}
     (nil))
(insn 684 683 685 23 (set (reg:SF 21 xmm0 [orig:467 _381 ] [467])
        (plus:SF (reg:SF 21 xmm0 [orig:461 _375 ] [461])
            (reg:SF 22 xmm1 [orig:430 _344 ] [430]))) "CALQUV.f":116 838 {*fop_sf_comm}
     (nil))
(insn 685 684 686 23 (set (reg/f:DI 1 dx [714])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 quint+0 S8 A64])) "CALQUV.f":116 85 {*movdi_internal}
     (nil))
(insn 686 685 687 23 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:466 _380 ] [466])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [714])) [1 *quint_447(D) S4 A32])
        (reg:SF 21 xmm0 [orig:467 _381 ] [467])) "CALQUV.f":116 131 {*movsf_internal}
     (nil))
(insn 687 686 688 23 (set (reg:SI 1 dx [715])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":117 86 {*movsi_internal}
     (nil))
(insn 688 687 689 23 (set (reg:DI 1 dx [orig:468 _382 ] [468])
        (sign_extend:DI (reg:SI 1 dx [715]))) "CALQUV.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 689 688 690 23 (parallel [
            (set (reg:DI 2 cx [orig:469 _383 ] [469])
                (mult:DI (reg:DI 1 dx [orig:468 _382 ] [468])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 349 {*muldi3_1}
     (nil))
(insn 690 689 691 23 (set (reg:SI 1 dx [716])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":117 86 {*movsi_internal}
     (nil))
(insn 691 690 692 23 (set (reg:DI 1 dx [orig:470 _384 ] [470])
        (sign_extend:DI (reg:SI 1 dx [716]))) "CALQUV.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 692 691 693 23 (parallel [
            (set (reg:DI 1 dx [orig:471 _385 ] [471])
                (plus:DI (reg:DI 1 dx [orig:470 _384 ] [470])
                    (reg:DI 2 cx [orig:469 _383 ] [469])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 693 692 694 23 (parallel [
            (set (reg:DI 2 cx [orig:472 _386 ] [472])
                (plus:DI (reg:DI 1 dx [orig:471 _385 ] [471])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 694 693 695 23 (set (reg/f:DI 1 dx [717])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 qvint+0 S8 A64])) "CALQUV.f":117 85 {*movdi_internal}
     (nil))
(insn 695 694 696 23 (set (reg:SF 22 xmm1 [orig:473 _387 ] [473])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:472 _386 ] [472])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [717])) [1 *qvint_449(D) S4 A32])) "CALQUV.f":117 131 {*movsf_internal}
     (nil))
(insn 696 695 697 23 (set (reg:SI 1 dx [718])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":117 86 {*movsi_internal}
     (nil))
(insn 697 696 698 23 (set (reg:DI 1 dx [orig:474 _388 ] [474])
        (sign_extend:DI (reg:SI 1 dx [718]))) "CALQUV.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 698 697 699 23 (parallel [
            (set (reg:DI 2 cx [orig:475 _389 ] [475])
                (mult:DI (reg:DI 1 dx [orig:474 _388 ] [474])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 349 {*muldi3_1}
     (nil))
(insn 699 698 700 23 (set (reg:SI 1 dx [719])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":117 86 {*movsi_internal}
     (nil))
(insn 700 699 701 23 (set (reg:DI 1 dx [orig:476 _390 ] [476])
        (sign_extend:DI (reg:SI 1 dx [719]))) "CALQUV.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 701 700 702 23 (parallel [
            (set (reg:DI 1 dx [orig:477 _391 ] [477])
                (mult:DI (reg:DI 1 dx [orig:476 _390 ] [476])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 349 {*muldi3_1}
     (nil))
(insn 702 701 703 23 (parallel [
            (set (reg:DI 2 cx [orig:478 _392 ] [478])
                (plus:DI (reg:DI 2 cx [orig:475 _389 ] [475])
                    (reg:DI 1 dx [orig:477 _391 ] [477])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 703 702 704 23 (set (reg:SI 1 dx [720])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":117 86 {*movsi_internal}
     (nil))
(insn 704 703 705 23 (set (reg:DI 1 dx [orig:479 _393 ] [479])
        (sign_extend:DI (reg:SI 1 dx [720]))) "CALQUV.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 705 704 706 23 (parallel [
            (set (reg:DI 1 dx [orig:480 _394 ] [480])
                (plus:DI (reg:DI 1 dx [orig:479 _393 ] [479])
                    (reg:DI 2 cx [orig:478 _392 ] [478])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 706 705 707 23 (parallel [
            (set (reg:DI 2 cx [orig:481 _395 ] [481])
                (plus:DI (reg:DI 1 dx [orig:480 _394 ] [480])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 707 706 708 23 (set (reg/f:DI 1 dx [721])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f51c60b7d80 vrbls>)) "CALQUV.f":117 85 {*movdi_internal}
     (nil))
(insn 708 707 709 23 (parallel [
            (set (reg:DI 2 cx [722])
                (plus:DI (reg:DI 2 cx [orig:481 _395 ] [481])
                    (const_int 3466827 [0x34e64b])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 709 708 710 23 (set (reg:SF 23 xmm2 [orig:482 _396 ] [482])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [722])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [721])) [1 vrbls.q S4 A32])) "CALQUV.f":117 131 {*movsf_internal}
     (nil))
(insn 710 709 711 23 (set (reg:SI 1 dx [723])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":117 86 {*movsi_internal}
     (nil))
(insn 711 710 712 23 (set (reg:DI 1 dx [orig:483 _397 ] [483])
        (sign_extend:DI (reg:SI 1 dx [723]))) "CALQUV.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 712 711 713 23 (parallel [
            (set (reg:DI 2 cx [orig:484 _398 ] [484])
                (mult:DI (reg:DI 1 dx [orig:483 _397 ] [483])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 349 {*muldi3_1}
     (nil))
(insn 713 712 714 23 (set (reg:SI 1 dx [724])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":117 86 {*movsi_internal}
     (nil))
(insn 714 713 715 23 (set (reg:DI 1 dx [orig:485 _399 ] [485])
        (sign_extend:DI (reg:SI 1 dx [724]))) "CALQUV.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 715 714 716 23 (parallel [
            (set (reg:DI 1 dx [orig:486 _400 ] [486])
                (mult:DI (reg:DI 1 dx [orig:485 _399 ] [485])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 349 {*muldi3_1}
     (nil))
(insn 716 715 717 23 (parallel [
            (set (reg:DI 2 cx [orig:487 _401 ] [487])
                (plus:DI (reg:DI 2 cx [orig:484 _398 ] [484])
                    (reg:DI 1 dx [orig:486 _400 ] [486])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 717 716 718 23 (set (reg:SI 1 dx [725])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":117 86 {*movsi_internal}
     (nil))
(insn 718 717 719 23 (set (reg:DI 1 dx [orig:488 _402 ] [488])
        (sign_extend:DI (reg:SI 1 dx [725]))) "CALQUV.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 719 718 720 23 (parallel [
            (set (reg:DI 1 dx [orig:489 _403 ] [489])
                (plus:DI (reg:DI 1 dx [orig:488 _402 ] [488])
                    (reg:DI 2 cx [orig:487 _401 ] [487])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 720 719 721 23 (parallel [
            (set (reg:DI 2 cx [orig:490 _404 ] [490])
                (plus:DI (reg:DI 1 dx [orig:489 _403 ] [489])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 721 720 722 23 (set (reg/f:DI 1 dx [726])
        (symbol_ref:DI ("cldwtr_") [flags 0x202]  <var_decl 0x7f51cd10eab0 cldwtr>)) "CALQUV.f":117 85 {*movdi_internal}
     (nil))
(insn 722 721 723 23 (set (reg:SF 21 xmm0 [orig:491 _405 ] [491])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:490 _404 ] [490])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [726])) [1 cldwtr.cwm S4 A32])) "CALQUV.f":117 131 {*movsf_internal}
     (nil))
(insn 723 722 822 23 (set (reg:SF 21 xmm0 [orig:492 _406 ] [492])
        (plus:SF (reg:SF 21 xmm0 [orig:491 _405 ] [491])
            (reg:SF 23 xmm2 [orig:482 _396 ] [482]))) "CALQUV.f":117 838 {*fop_sf_comm}
     (nil))
(insn 822 723 725 23 (set (reg:SF 23 xmm2 [orig:493 _407 ] [493])
        (reg:SF 21 xmm0 [orig:493 _407 ] [493])) "CALQUV.f":117 131 {*movsf_internal}
     (nil))
(insn 725 822 726 23 (set (reg:SF 23 xmm2 [orig:493 _407 ] [493])
        (mult:SF (reg:SF 23 xmm2 [orig:493 _407 ] [493])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [1 vmdp+0 S4 A32]))) "CALQUV.f":117 838 {*fop_sf_comm}
     (nil))
(insn 726 725 727 23 (set (reg:SI 1 dx [727])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])) "CALQUV.f":117 86 {*movsi_internal}
     (nil))
(insn 727 726 728 23 (set (reg:DI 1 dx [orig:495 _409 ] [495])
        (sign_extend:DI (reg:SI 1 dx [727]))) "CALQUV.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 728 727 729 23 (parallel [
            (set (reg:DI 2 cx [orig:496 _410 ] [496])
                (mult:DI (reg:DI 1 dx [orig:495 _409 ] [495])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 349 {*muldi3_1}
     (nil))
(insn 729 728 730 23 (set (reg:SI 1 dx [728])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":117 86 {*movsi_internal}
     (nil))
(insn 730 729 731 23 (set (reg:DI 1 dx [orig:497 _411 ] [497])
        (sign_extend:DI (reg:SI 1 dx [728]))) "CALQUV.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 731 730 732 23 (parallel [
            (set (reg:DI 1 dx [orig:498 _412 ] [498])
                (mult:DI (reg:DI 1 dx [orig:497 _411 ] [497])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 349 {*muldi3_1}
     (nil))
(insn 732 731 733 23 (parallel [
            (set (reg:DI 2 cx [orig:499 _413 ] [499])
                (plus:DI (reg:DI 2 cx [orig:496 _410 ] [496])
                    (reg:DI 1 dx [orig:498 _412 ] [498])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 733 732 734 23 (set (reg:SI 1 dx [729])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":117 86 {*movsi_internal}
     (nil))
(insn 734 733 735 23 (set (reg:DI 1 dx [orig:500 _414 ] [500])
        (sign_extend:DI (reg:SI 1 dx [729]))) "CALQUV.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 735 734 736 23 (parallel [
            (set (reg:DI 1 dx [orig:501 _415 ] [501])
                (plus:DI (reg:DI 1 dx [orig:500 _414 ] [500])
                    (reg:DI 2 cx [orig:499 _413 ] [499])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 736 735 737 23 (parallel [
            (set (reg:DI 2 cx [orig:502 _416 ] [502])
                (plus:DI (reg:DI 1 dx [orig:501 _415 ] [501])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 737 736 738 23 (set (reg/f:DI 1 dx [730])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f51c60b3c60 masks>)) "CALQUV.f":117 85 {*movdi_internal}
     (nil))
(insn 738 737 739 23 (parallel [
            (set (reg:DI 2 cx [731])
                (plus:DI (reg:DI 2 cx [orig:502 _416 ] [502])
                    (const_int 148155 [0x242bb])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 739 738 740 23 (set (reg:SF 21 xmm0 [orig:503 _417 ] [503])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [731])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [730])) [1 masks.htm S4 A32])) "CALQUV.f":117 131 {*movsf_internal}
     (nil))
(insn 740 739 741 23 (set (reg:SF 21 xmm0 [orig:504 _418 ] [504])
        (mult:SF (reg:SF 21 xmm0 [orig:503 _417 ] [503])
            (reg:SF 23 xmm2 [orig:494 _408 ] [494]))) "CALQUV.f":117 838 {*fop_sf_comm}
     (nil))
(insn 741 740 742 23 (set (reg:SI 1 dx [732])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "CALQUV.f":117 86 {*movsi_internal}
     (nil))
(insn 742 741 743 23 (set (reg:DI 1 dx [orig:505 _419 ] [505])
        (sign_extend:DI (reg:SI 1 dx [732]))) "CALQUV.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 743 742 744 23 (parallel [
            (set (reg:DI 2 cx [orig:506 _420 ] [506])
                (mult:DI (reg:DI 1 dx [orig:505 _419 ] [505])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 349 {*muldi3_1}
     (nil))
(insn 744 743 745 23 (set (reg:SI 1 dx [733])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "CALQUV.f":117 86 {*movsi_internal}
     (nil))
(insn 745 744 746 23 (set (reg:DI 1 dx [orig:507 _421 ] [507])
        (sign_extend:DI (reg:SI 1 dx [733]))) "CALQUV.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 746 745 747 23 (parallel [
            (set (reg:DI 1 dx [orig:508 _422 ] [508])
                (plus:DI (reg:DI 1 dx [orig:507 _421 ] [507])
                    (reg:DI 2 cx [orig:506 _420 ] [506])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 747 746 748 23 (parallel [
            (set (reg:DI 2 cx [orig:509 _423 ] [509])
                (plus:DI (reg:DI 1 dx [orig:508 _422 ] [508])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":117 222 {*adddi_1}
     (nil))
(insn 748 747 749 23 (set (reg:SF 21 xmm0 [orig:510 _424 ] [510])
        (plus:SF (reg:SF 21 xmm0 [orig:504 _418 ] [504])
            (reg:SF 22 xmm1 [orig:473 _387 ] [473]))) "CALQUV.f":117 838 {*fop_sf_comm}
     (nil))
(insn 749 748 750 23 (set (reg/f:DI 1 dx [734])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 qvint+0 S8 A64])) "CALQUV.f":117 85 {*movdi_internal}
     (nil))
(insn 750 749 751 23 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:509 _423 ] [509])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [734])) [1 *qvint_449(D) S4 A32])
        (reg:SF 21 xmm0 [orig:510 _424 ] [510])) "CALQUV.f":117 131 {*movsf_internal}
     (nil))
(insn 751 750 788 23 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":90 221 {*addsi_1}
     (nil))
(jump_insn 788 751 789 23 (set (pc)
        (label_ref 752)) "CALQUV.f":90 683 {jump}
     (nil)
 -> 752)
;;  succ:       19 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521

(barrier 789 788 813)
;; basic block 33, loop depth 0, maybe hot
;;  prev block 23, next block 24, flags: (RTL, MODIFIED)
;;  pred:       19
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 813 789 812 33 28 (nil) [1 uses])
(note 812 813 814 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 814 812 755 33 (const_int 0 [0]) "CALQUV.f":117 718 {nop}
     (nil))
;;  succ:       24 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521

;; basic block 24, loop depth 0, maybe hot
;;  prev block 33, next block 32, flags: (RTL, MODIFIED)
;;  pred:       33 [always]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 755 814 756 24 12 (nil) [0 uses])
(note 756 755 757 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 757 756 790 24 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":89 221 {*addsi_1}
     (nil))
(jump_insn 790 757 791 24 (set (pc)
        (label_ref 758)) "CALQUV.f":89 683 {jump}
     (nil)
 -> 758)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521

(barrier 791 790 810)
;; basic block 32, loop depth 0, maybe hot
;;  prev block 24, next block 25, flags: (RTL, MODIFIED)
;;  pred:       17
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 810 791 809 32 27 (nil) [1 uses])
(note 809 810 811 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 811 809 761 32 (const_int 0 [0]) "CALQUV.f":90 718 {nop}
     (nil))
;;  succ:       25 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 32, next block 29, flags: (RTL, MODIFIED)
;;  pred:       32 [always]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 761 811 762 25 11 (nil) [0 uses])
(note 762 761 763 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 763 762 792 25 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [2 l+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALQUV.f":76 221 {*addsi_1}
     (nil))
(jump_insn 792 763 793 25 (set (pc)
        (label_ref 764)) "CALQUV.f":76 683 {jump}
     (nil)
 -> 764)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 793 792 801)
;; basic block 29, loop depth 0, maybe hot
;;  prev block 25, next block 26, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 801 793 800 29 24 (nil) [1 uses])
(note 800 801 802 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 802 800 767 29 (const_int 0 [0]) "CALQUV.f":89 718 {nop}
     (nil))
;;  succ:       26 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 29, next block 1, flags: (RTL, MODIFIED)
;;  pred:       29 [always]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 767 802 768 26 6 (nil) [0 uses])
(note 768 767 776 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 776 768 815 26 (const_int 0 [0]) "CALQUV.f":128 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 815 776 0 NOTE_INSN_DELETED)
