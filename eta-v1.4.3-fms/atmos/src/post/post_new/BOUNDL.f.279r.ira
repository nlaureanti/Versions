
;; Function boundl (boundl_, funcdef_no=0, decl_uid=3768, cgraph_uid=0, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 15 n_edges 18 count 23 (  1.5)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 14 11 13 12
;;
;; Loop 1
;;  header 3, latch 11
;;  depth 1, outer 0
;;  nodes: 3 11 14 5 4 10 8 9 6 7
;;
;; Loop 2
;;  header 5, latch 10
;;  depth 2, outer 1
;;  nodes: 5 10 8 9 6 7
;; 2 succs { 3 }
;; 3 succs { 13 4 }
;; 4 succs { 5 }
;; 5 succs { 14 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 5 }
;; 14 succs { 11 }
;; 11 succs { 3 }
;; 13 succs { 12 }
;; 12 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a13 (r134,l0) best SSE_REGS, allocno SSE_REGS
    r133: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a37 (r133,l0) best SSE_REGS, allocno SSE_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a5 (r119,l0) best SSE_REGS, allocno SSE_REGS
    r118: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a30 (r118,l0) best SSE_REGS, allocno SSE_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r121,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 NON_Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:65000 NO_REX_SSE_REGS:65000 SSE_REGS:65000 MMX_REGS:95000 INT_SSE_REGS:95000 ALL_REGS:1488000 MEM:41000
  a1(r127,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:47000 NO_REX_SSE_REGS:47000 SSE_REGS:47000 MMX_REGS:67000 INT_SSE_REGS:67000 ALL_REGS:1062000 MEM:27000
  a2(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r119,l0) costs: AREG:45000 DREG:45000 CREG:45000 BREG:45000 SIREG:45000 DIREG:45000 AD_REGS:45000 CLOBBERED_REGS:45000 Q_REGS:45000 NON_Q_REGS:45000 TLS_GOTBASE_REGS:45000 GENERAL_REGS:45000 FP_TOP_REG:69000 FP_SECOND_REG:69000 FLOAT_REGS:69000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:69000 FP_TOP_SSE_REGS:69000 FP_SECOND_SSE_REGS:69000 FLOAT_SSE_REGS:69000 FLOAT_INT_REGS:69000 INT_SSE_REGS:69000 FLOAT_INT_SSE_REGS:69000 ALL_REGS:69000 MEM:30000
  a6(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a7(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a8(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a9(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a10(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a11(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r134,l0) costs: AREG:17000 DREG:17000 CREG:17000 BREG:17000 SIREG:17000 DIREG:17000 AD_REGS:17000 CLOBBERED_REGS:17000 Q_REGS:17000 NON_Q_REGS:17000 TLS_GOTBASE_REGS:17000 GENERAL_REGS:17000 FP_TOP_REG:31000 FP_SECOND_REG:31000 FLOAT_REGS:31000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31000 FP_TOP_SSE_REGS:31000 FP_SECOND_SSE_REGS:31000 FLOAT_SSE_REGS:31000 FLOAT_INT_REGS:31000 INT_SSE_REGS:31000 FLOAT_INT_SSE_REGS:31000 ALL_REGS:31000 MEM:12000
  a14(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a15(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a16(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a17(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a18(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a19(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a21(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a22(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a23(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a24(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a25(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a26(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a27(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a28(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a30(r118,l0) costs: AREG:45000 DREG:45000 CREG:45000 BREG:45000 SIREG:45000 DIREG:45000 AD_REGS:45000 CLOBBERED_REGS:45000 Q_REGS:45000 NON_Q_REGS:45000 TLS_GOTBASE_REGS:45000 GENERAL_REGS:45000 FP_TOP_REG:69000 FP_SECOND_REG:69000 FLOAT_REGS:69000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:69000 FP_TOP_SSE_REGS:69000 FP_SECOND_SSE_REGS:69000 FLOAT_SSE_REGS:69000 FLOAT_INT_REGS:69000 INT_SSE_REGS:69000 FLOAT_INT_SSE_REGS:69000 ALL_REGS:69000 MEM:29000
  a31(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a32(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a33(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a34(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a35(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a36(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a37(r133,l0) costs: AREG:17000 DREG:17000 CREG:17000 BREG:17000 SIREG:17000 DIREG:17000 AD_REGS:17000 CLOBBERED_REGS:17000 Q_REGS:17000 NON_Q_REGS:17000 TLS_GOTBASE_REGS:17000 GENERAL_REGS:17000 FP_TOP_REG:31000 FP_SECOND_REG:31000 FLOAT_REGS:31000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31000 FP_TOP_SSE_REGS:31000 FP_SECOND_SSE_REGS:31000 FLOAT_SSE_REGS:31000 FLOAT_INT_REGS:31000 INT_SSE_REGS:31000 FLOAT_INT_SSE_REGS:31000 ALL_REGS:31000 MEM:13000
  a38(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a39(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a40(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a41(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a42(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a43(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a44(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a45(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a46(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a47(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a48(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a49(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a50(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a51(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a52(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a53(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a54(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a55(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a56(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a57(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a58(r90,l0) costs: AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:2000
  a59(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a60(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a61(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a62(r122,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:31000 NO_REX_SSE_REGS:31000 SSE_REGS:31000 MMX_REGS:41000 INT_SSE_REGS:41000 ALL_REGS:638000 MEM:19000
  a63(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a64(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a65(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a66(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a67(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:17000
  a68(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a69(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a70(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 136(l0): point = 0
   Insn 143(l0): point = 3
   Insn 44(l0): point = 6
   Insn 43(l0): point = 8
   Insn 42(l0): point = 10
   Insn 41(l0): point = 12
   Insn 40(l0): point = 14
   Insn 139(l0): point = 17
   Insn 126(l0): point = 19
   Insn 146(l0): point = 22
   Insn 54(l0): point = 25
   Insn 53(l0): point = 27
   Insn 52(l0): point = 29
   Insn 51(l0): point = 31
   Insn 50(l0): point = 33
   Insn 48(l0): point = 36
   Insn 47(l0): point = 38
   Insn 46(l0): point = 40
   Insn 137(l0): point = 43
   Insn 120(l0): point = 45
   Insn 119(l0): point = 47
   Insn 118(l0): point = 49
   Insn 117(l0): point = 51
   Insn 116(l0): point = 53
   Insn 115(l0): point = 55
   Insn 114(l0): point = 57
   Insn 113(l0): point = 59
   Insn 112(l0): point = 61
   Insn 111(l0): point = 63
   Insn 107(l0): point = 66
   Insn 106(l0): point = 68
   Insn 105(l0): point = 70
   Insn 104(l0): point = 72
   Insn 103(l0): point = 74
   Insn 102(l0): point = 76
   Insn 101(l0): point = 78
   Insn 100(l0): point = 80
   Insn 99(l0): point = 82
   Insn 98(l0): point = 84
   Insn 97(l0): point = 86
   Insn 96(l0): point = 88
   Insn 95(l0): point = 90
   Insn 94(l0): point = 92
   Insn 93(l0): point = 94
   Insn 92(l0): point = 96
   Insn 91(l0): point = 98
   Insn 90(l0): point = 100
   Insn 89(l0): point = 102
   Insn 88(l0): point = 104
   Insn 87(l0): point = 106
   Insn 86(l0): point = 108
   Insn 85(l0): point = 110
   Insn 84(l0): point = 112
   Insn 83(l0): point = 114
   Insn 82(l0): point = 116
   Insn 81(l0): point = 118
   Insn 80(l0): point = 120
   Insn 79(l0): point = 122
   Insn 75(l0): point = 125
   Insn 74(l0): point = 127
   Insn 73(l0): point = 129
   Insn 72(l0): point = 131
   Insn 71(l0): point = 133
   Insn 70(l0): point = 135
   Insn 69(l0): point = 137
   Insn 68(l0): point = 139
   Insn 67(l0): point = 141
   Insn 66(l0): point = 143
   Insn 65(l0): point = 145
   Insn 64(l0): point = 147
   Insn 63(l0): point = 149
   Insn 62(l0): point = 151
   Insn 61(l0): point = 153
   Insn 60(l0): point = 155
   Insn 59(l0): point = 157
   Insn 58(l0): point = 159
   Insn 57(l0): point = 161
   Insn 56(l0): point = 163
   Insn 8(l0): point = 166
   Insn 9(l0): point = 169
   Insn 38(l0): point = 172
   Insn 37(l0): point = 174
   Insn 36(l0): point = 176
   Insn 35(l0): point = 178
   Insn 31(l0): point = 180
   Insn 30(l0): point = 182
   Insn 29(l0): point = 184
   Insn 27(l0): point = 186
   Insn 25(l0): point = 188
   Insn 26(l0): point = 190
   Insn 24(l0): point = 192
   Insn 23(l0): point = 194
   Insn 22(l0): point = 196
   Insn 21(l0): point = 198
   Insn 20(l0): point = 200
   Insn 19(l0): point = 202
   Insn 17(l0): point = 204
   Insn 18(l0): point = 206
   Insn 16(l0): point = 208
   Insn 15(l0): point = 210
   Insn 14(l0): point = 212
   Insn 13(l0): point = 214
   Insn 12(l0): point = 216
   Insn 6(l0): point = 218
   Insn 5(l0): point = 220
   Insn 4(l0): point = 222
   Insn 3(l0): point = 224
   Insn 2(l0): point = 226
 a0(r121): [6..202]
 a1(r127): [6..178]
 a2(r129): [6..174]
 a3(r162): [48..49]
 a4(r117): [48..51]
 a5(r119): [169..169] [48..88]
 a6(r116): [52..53]
 a7(r115): [52..57]
 a8(r161): [54..55]
 a9(r114): [58..59]
 a10(r113): [60..61]
 a11(r160): [62..63]
 a12(r131): [43..171] [25..38]
 a13(r134): [170..171] [66..84]
 a14(r112): [69..70]
 a15(r111): [71..72]
 a16(r110): [71..78]
 a17(r159): [73..74]
 a18(r158): [79..80]
 a19(r156): [85..86]
 a20(r155): [89..90]
 a21(r109): [89..92]
 a22(r108): [93..94]
 a23(r107): [93..98]
 a24(r154): [95..96]
 a25(r106): [99..100]
 a26(r105): [101..102]
 a27(r153): [103..104]
 a28(r152): [107..108]
 a29(r104): [107..110]
 a30(r118): [166..166] [107..161]
 a31(r103): [111..112]
 a32(r102): [111..116]
 a33(r151): [113..114]
 a34(r101): [117..118]
 a35(r100): [119..120]
 a36(r150): [121..122]
 a37(r133): [167..168] [125..143]
 a38(r99): [128..129]
 a39(r98): [130..131]
 a40(r97): [130..137]
 a41(r149): [132..133]
 a42(r148): [138..139]
 a43(r147): [144..145]
 a44(r96): [144..147]
 a45(r95): [148..149]
 a46(r94): [148..153]
 a47(r146): [150..151]
 a48(r93): [154..155]
 a49(r92): [156..157]
 a50(r145): [158..159]
 a51(r144): [162..163]
 a52(r132): [28..29]
 a53(r143): [30..31]
 a54(r142): [39..40]
 a55(r130): [9..10]
 a56(r141): [11..12]
 a57(r128): [173..176]
 a58(r90 [0]): [181..228]
 a58(r90 [1]): [180..228]
 a59(r89): [183..184]
 a60(r123): [185..186]
 a61(r140): [187..190]
 a62(r122): [187..192]
 a63(r139): [195..196]
 a64(r88): [197..198]
 a65(r138): [199..200]
 a66(r137): [203..206]
 a67(r120): [203..208]
 a68(r136): [211..212]
 a69(r87): [213..214]
 a70(r135): [215..216]
Compressing live ranges: from 229 to 106 - 46%
Ranges after the compression:
 a0(r121): [0..97]
 a1(r127): [0..85]
 a2(r129): [0..85]
 a3(r162): [10..11]
 a4(r117): [10..11]
 a5(r119): [81..81] [10..31]
 a6(r116): [12..13]
 a7(r115): [12..15]
 a8(r161): [14..15]
 a9(r114): [16..17]
 a10(r113): [18..19]
 a11(r160): [20..21]
 a12(r131): [10..83] [4..7]
 a13(r134): [82..83] [22..29]
 a14(r112): [22..23]
 a15(r111): [24..25]
 a16(r110): [24..27]
 a17(r159): [26..27]
 a18(r158): [28..29]
 a19(r156): [30..31]
 a20(r155): [32..33]
 a21(r109): [32..33]
 a22(r108): [34..35]
 a23(r107): [34..37]
 a24(r154): [36..37]
 a25(r106): [38..39]
 a26(r105): [40..41]
 a27(r153): [42..43]
 a28(r152): [44..45]
 a29(r104): [44..45]
 a30(r118): [78..78] [44..75]
 a31(r103): [46..47]
 a32(r102): [46..49]
 a33(r151): [48..49]
 a34(r101): [50..51]
 a35(r100): [52..53]
 a36(r150): [54..55]
 a37(r133): [79..80] [56..63]
 a38(r99): [56..57]
 a39(r98): [58..59]
 a40(r97): [58..61]
 a41(r149): [60..61]
 a42(r148): [62..63]
 a43(r147): [64..65]
 a44(r96): [64..65]
 a45(r95): [66..67]
 a46(r94): [66..69]
 a47(r146): [68..69]
 a48(r93): [70..71]
 a49(r92): [72..73]
 a50(r145): [74..75]
 a51(r144): [76..77]
 a52(r132): [4..5]
 a53(r143): [6..7]
 a54(r142): [8..9]
 a55(r130): [0..1]
 a56(r141): [2..3]
 a57(r128): [84..85]
 a58(r90 [0]): [86..105]
 a58(r90 [1]): [86..105]
 a59(r89): [86..87]
 a60(r123): [88..89]
 a61(r140): [90..91]
 a62(r122): [90..91]
 a63(r139): [92..93]
 a64(r88): [94..95]
 a65(r138): [96..97]
 a66(r137): [98..99]
 a67(r120): [98..99]
 a68(r136): [100..101]
 a69(r87): [102..103]
 a70(r135): [104..105]
  regions=1, blocks=15, points=106
    allocnos=71 (big 1), copies=0, conflicts=0, ranges=77
Disposition:
   69:r87  l0     0   64:r88  l0     1   59:r89  l0     1   58:r90  l0    38
   49:r92  l0     4   48:r93  l0     4   46:r94  l0    37   45:r95  l0     4
   44:r96  l0    37   40:r97  l0    37   39:r98  l0     4   38:r99  l0     4
   35:r100 l0     4   34:r101 l0     4   32:r102 l0    37   31:r103 l0     4
   29:r104 l0    37   26:r105 l0     4   25:r106 l0     4   23:r107 l0    37
   22:r108 l0     4   21:r109 l0    37   16:r110 l0    37   15:r111 l0     4
   14:r112 l0     4   10:r113 l0     4    9:r114 l0     4    7:r115 l0    37
    6:r116 l0     4    4:r117 l0    37   30:r118 l0    21    5:r119 l0    21
   67:r120 l0     0    0:r121 l0     0   62:r122 l0     1   60:r123 l0     1
    1:r127 l0     1   57:r128 l0     4    2:r129 l0     2   55:r130 l0     4
   12:r131 l0     5   52:r132 l0     4   37:r133 l0    22   13:r134 l0    22
   70:r135 l0     0   68:r136 l0     0   66:r137 l0     1   65:r138 l0     1
   63:r139 l0     1   61:r140 l0     2   56:r141 l0     4   54:r142 l0     4
   53:r143 l0     4   51:r144 l0     4   50:r145 l0     4   47:r146 l0     4
   43:r147 l0     4   42:r148 l0     4   41:r149 l0     4   36:r150 l0     4
   33:r151 l0     4   28:r152 l0     4   27:r153 l0     4   24:r154 l0     4
   20:r155 l0     4   19:r156 l0     4   18:r158 l0     4   17:r159 l0     4
   11:r160 l0     4    8:r161 l0     4    3:r162 l0     4
+++Costs: overall 8000, reg 8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


boundl

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8]
;;  ref usage 	r0={1d} r1={1d,1u} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,14u} r7={1d,14u} r16={1d,13u} r17={29d,12u} r20={1d,48u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={2d,2u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={2d,4u} r119={2d,4u} r120={1d,2u} r121={1d,6u} r122={1d,2u} r123={1d,1u} r127={1d,4u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,2u} r134={1d,2u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} 
;;    total ref usage 318{122d,196u,0e} in 108{108 regular + 0 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 90
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 90
;; lr  def 	 17 [flags] 87 88 89 120 121 122 123 127 128 129 135 136 137 138 139 140
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])
        (reg:DI 5 di [ fld ])) "BOUNDL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ fld ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [4 fmin+0 S8 A64])
        (reg:DI 4 si [ fmin ])) "BOUNDL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ fmin ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [4 fmax+0 S8 A64])
        (reg:DI 1 dx [ fmax ])) "BOUNDL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ fmax ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [5 im+0 S8 A64])
        (reg:DI 2 cx [ im ])) "BOUNDL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ im ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [5 jm+0 S8 A64])
        (reg:DI 37 r8 [ jm ])) "BOUNDL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ jm ])
        (nil)))
(note 7 6 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 7 13 2 (set (reg/f:DI 135)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [5 im+0 S8 A64])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 135) [1 *im_39(D)+0 S4 A32])) "BOUNDL.f":1 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135)
        (nil)))
(insn 14 13 15 2 (set (reg:DI 136)
        (sign_extend:DI (reg:SI 87 [ _1 ]))) "BOUNDL.f":1 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
        (nil)))
(insn 15 14 16 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 ubound.0+0 S8 A64])
        (reg:DI 136)) "BOUNDL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 136)
        (nil)))
(insn 16 15 18 2 (set (reg:DI 120 [ stride.2_41 ])
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 ubound.0+0 S8 A64])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 18 16 17 2 (set (reg:DI 137)
        (const_int 0 [0])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 17 18 19 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 120 [ stride.2_41 ])
            (const_int 0 [0]))) "BOUNDL.f":1 8 {*cmpdi_ccno_1}
     (nil))
(insn 19 17 20 2 (set (reg:DI 121 [ stride.2_42 ])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 120 [ stride.2_41 ])
            (reg:DI 137))) "BOUNDL.f":1 1003 {*movdicc_noc}
     (expr_list:REG_DEAD (reg:DI 137)
        (expr_list:REG_DEAD (reg:DI 120 [ stride.2_41 ])
            (expr_list:REG_DEAD (reg:CCGOC 17 flags)
                (nil)))))
(insn 20 19 21 2 (set (reg/f:DI 138)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [5 jm+0 S8 A64])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 88 [ _2 ])
        (mem:SI (reg/f:DI 138) [1 *jm_43(D)+0 S4 A32])) "BOUNDL.f":1 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138)
        (nil)))
(insn 22 21 23 2 (set (reg:DI 139)
        (sign_extend:DI (reg:SI 88 [ _2 ]))) "BOUNDL.f":1 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
        (nil)))
(insn 23 22 24 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 ubound.1+0 S8 A64])
        (reg:DI 139)) "BOUNDL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 139)
        (nil)))
(insn 24 23 26 2 (parallel [
            (set (reg:DI 122 [ size.4_45 ])
                (mult:DI (reg:DI 121 [ stride.2_42 ])
                    (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [2 ubound.1+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":1 349 {*muldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 26 24 25 2 (set (reg:DI 140)
        (const_int 0 [0])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 25 26 27 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 122 [ size.4_45 ])
            (const_int 0 [0]))) "BOUNDL.f":1 8 {*cmpdi_ccno_1}
     (nil))
(insn 27 25 29 2 (set (reg:DI 123 [ size.4_46 ])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 122 [ size.4_45 ])
            (reg:DI 140))) "BOUNDL.f":1 1003 {*movdicc_noc}
     (expr_list:REG_DEAD (reg:DI 140)
        (expr_list:REG_DEAD (reg:DI 122 [ size.4_45 ])
            (expr_list:REG_DEAD (reg:CCGOC 17 flags)
                (nil)))))
(insn 29 27 30 2 (set (reg:DI 89 [ size.7_3 ])
        (reg:DI 123 [ size.4_46 ])) "BOUNDL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 123 [ size.4_46 ])
        (nil)))
(insn 30 29 31 2 (set (subreg:DI (reg:TI 90 [ _4 ]) 0)
        (reg:DI 89 [ size.7_3 ])) "BOUNDL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 89 [ size.7_3 ])
        (nil)))
(insn 31 30 35 2 (set (subreg:DI (reg:TI 90 [ _4 ]) 8)
        (const_int 0 [0])) "BOUNDL.f":1 85 {*movdi_internal}
     (expr_list:REG_UNUSED (reg:TI 90 [ _4 ])
        (nil)))
(insn 35 31 36 2 (set (reg:DI 127 [ offset.3_50 ])
        (not:DI (reg:DI 121 [ stride.2_42 ]))) "BOUNDL.f":1 532 {*one_cmpldi2_1}
     (nil))
(insn 36 35 37 2 (set (reg:SI 128 [ _51 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f065e850870 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "BOUNDL.f":57 86 {*movsi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:SI 129 [ _52 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f065e850870 parallel>)
                    (const_int 12 [0xc]))) [1 parallel.jend+0 S4 A32])) "BOUNDL.f":57 86 {*movsi_internal}
     (nil))
(insn 38 37 127 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (reg:SI 128 [ _51 ])) "BOUNDL.f":57 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 128 [ _51 ])
        (nil)))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;;              11 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 129
;; lr  def 	 17 [flags] 130 141
(code_label 127 38 39 3 7 (nil) [1 uses])
(note 39 127 40 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 129 [ _52 ]))) "BOUNDL.f":57 11 {*cmpsi_1}
     (nil))
(insn 41 40 42 3 (set (reg:QI 141)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "BOUNDL.f":57 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 42 41 43 3 (set (reg:SI 130 [ _54 ])
        (zero_extend:SI (reg:QI 141))) "BOUNDL.f":57 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 141)
        (nil)))
(insn 43 42 44 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 130 [ _54 ])
            (const_int 0 [0]))) "BOUNDL.f":57 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 130 [ _54 ])
        (nil)))
(jump_insn 44 43 45 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 142)
            (pc))) "BOUNDL.f":57 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 142)
;;  succ:       13
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 131 142
(note 45 44 46 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 4 (set (reg/f:DI 142)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [5 im+0 S8 A64])) "BOUNDL.f":58 85 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:SI 131 [ _55 ])
        (mem:SI (reg/f:DI 142) [1 *im_39(D)+0 S4 A32])) "BOUNDL.f":58 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142)
        (nil)))
(insn 48 47 121 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "BOUNDL.f":58 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              10 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
;; lr  def 	 17 [flags] 132 143
(code_label 121 48 49 5 6 (nil) [1 uses])
(note 49 121 50 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (reg:SI 131 [ _55 ]))) "BOUNDL.f":58 11 {*cmpsi_1}
     (nil))
(insn 51 50 52 5 (set (reg:QI 143)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "BOUNDL.f":58 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 52 51 53 5 (set (reg:SI 132 [ _57 ])
        (zero_extend:SI (reg:QI 143))) "BOUNDL.f":58 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 143)
        (nil)))
(insn 53 52 54 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 132 [ _57 ])
            (const_int 0 [0]))) "BOUNDL.f":58 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 132 [ _57 ])
        (nil)))
(jump_insn 54 53 55 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 145)
            (pc))) "BOUNDL.f":58 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 145)
;;  succ:       14
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127
;; lr  def 	 17 [flags] 92 93 94 95 96 97 98 99 118 133 144 145 146 147 148 149
(note 55 54 56 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 6 (set (reg/f:DI 144)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [4 fmin+0 S8 A64])) "BOUNDL.f":59 85 {*movdi_internal}
     (nil))
(insn 57 56 58 6 (set (reg:SF 118 [ M.5_34 ])
        (mem:SF (reg/f:DI 144) [7 *fmin_58(D)+0 S4 A32])) "BOUNDL.f":59 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 144)
        (nil)))
(insn 58 57 59 6 (set (reg:SI 145)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUNDL.f":59 86 {*movsi_internal}
     (nil))
(insn 59 58 60 6 (set (reg:DI 92 [ _6 ])
        (sign_extend:DI (reg:SI 145))) "BOUNDL.f":59 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 145)
        (nil)))
(insn 60 59 61 6 (parallel [
            (set (reg:DI 93 [ _7 ])
                (mult:DI (reg:DI 121 [ stride.2_42 ])
                    (reg:DI 92 [ _6 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 92 [ _6 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 61 60 62 6 (parallel [
            (set (reg:DI 94 [ _8 ])
                (plus:DI (reg:DI 127 [ offset.3_50 ])
                    (reg:DI 93 [ _7 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 93 [ _7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 62 61 63 6 (set (reg:SI 146)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUNDL.f":59 86 {*movsi_internal}
     (nil))
(insn 63 62 64 6 (set (reg:DI 95 [ _9 ])
        (sign_extend:DI (reg:SI 146))) "BOUNDL.f":59 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 146)
        (nil)))
(insn 64 63 65 6 (parallel [
            (set (reg:DI 96 [ _10 ])
                (plus:DI (reg:DI 94 [ _8 ])
                    (reg:DI 95 [ _9 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 95 [ _9 ])
        (expr_list:REG_DEAD (reg:DI 94 [ _8 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 65 64 66 6 (set (reg/f:DI 147)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUNDL.f":59 85 {*movdi_internal}
     (nil))
(insn 66 65 67 6 (set (reg:SF 133 [ _62 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 96 [ _10 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 147)) [7 *fld_61(D) S4 A32])) "BOUNDL.f":59 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 147)
        (expr_list:REG_DEAD (reg:DI 96 [ _10 ])
            (nil))))
(insn 67 66 68 6 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 133 [ _62 ])
            (reg:SF 118 [ M.5_34 ]))) "BOUNDL.f":59 53 {*cmpisf}
     (nil))
(insn 68 67 69 6 (set (reg:QI 148)
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUNDL.f":59 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil)))
(insn 69 68 70 6 (set (reg:SI 97 [ _11 ])
        (zero_extend:SI (reg:QI 148))) "BOUNDL.f":59 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 148)
        (nil)))
(insn 70 69 71 6 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 118 [ M.5_34 ])
                    (reg:SF 118 [ M.5_34 ]))
            ] UNSPEC_NOTRAP)) "BOUNDL.f":59 54 {*cmpiusf}
     (nil))
(insn 71 70 72 6 (set (reg:QI 149)
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUNDL.f":59 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil)))
(insn 72 71 73 6 (set (reg:SI 98 [ _12 ])
        (zero_extend:SI (reg:QI 149))) "BOUNDL.f":59 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 149)
        (nil)))
(insn 73 72 74 6 (parallel [
            (set (reg:SI 99 [ _13 ])
                (ior:SI (reg:SI 97 [ _11 ])
                    (reg:SI 98 [ _12 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 450 {*iorsi_1}
     (expr_list:REG_DEAD (reg:SI 98 [ _12 ])
        (expr_list:REG_DEAD (reg:SI 97 [ _11 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 74 73 75 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 99 [ _13 ])
            (const_int 0 [0]))) "BOUNDL.f":59 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 99 [ _13 ])
        (nil)))
(jump_insn 75 74 76 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "BOUNDL.f":59 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 77)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 121 127 129 131 133

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131 133
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 133
;; lr  def 	 118
(note 76 75 8 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 8 76 77 7 (set (reg:SF 118 [ M.5_34 ])
        (reg:SF 133 [ _62 ])) "BOUNDL.f":59 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 133 [ _62 ])
        (nil)))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 121 127 129 131

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 121 127 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 121 127
;; lr  def 	 17 [flags] 100 101 102 103 104 105 106 107 108 109 110 111 112 119 134 150 151 152 153 154 155 156 158 159
(code_label 77 8 78 8 4 (nil) [1 uses])
(note 78 77 79 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 8 (set (reg:SI 150)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUNDL.f":59 86 {*movsi_internal}
     (nil))
(insn 80 79 81 8 (set (reg:DI 100 [ _14 ])
        (sign_extend:DI (reg:SI 150))) "BOUNDL.f":59 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 150)
        (nil)))
(insn 81 80 82 8 (parallel [
            (set (reg:DI 101 [ _15 ])
                (mult:DI (reg:DI 121 [ stride.2_42 ])
                    (reg:DI 100 [ _14 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 100 [ _14 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 82 81 83 8 (parallel [
            (set (reg:DI 102 [ _16 ])
                (plus:DI (reg:DI 127 [ offset.3_50 ])
                    (reg:DI 101 [ _15 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 101 [ _15 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 83 82 84 8 (set (reg:SI 151)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUNDL.f":59 86 {*movsi_internal}
     (nil))
(insn 84 83 85 8 (set (reg:DI 103 [ _17 ])
        (sign_extend:DI (reg:SI 151))) "BOUNDL.f":59 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 151)
        (nil)))
(insn 85 84 86 8 (parallel [
            (set (reg:DI 104 [ _18 ])
                (plus:DI (reg:DI 102 [ _16 ])
                    (reg:DI 103 [ _17 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 103 [ _17 ])
        (expr_list:REG_DEAD (reg:DI 102 [ _16 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 86 85 87 8 (set (reg/f:DI 152)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUNDL.f":59 85 {*movdi_internal}
     (nil))
(insn 87 86 88 8 (set (mem:SF (plus:DI (mult:DI (reg:DI 104 [ _18 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 152)) [7 *fld_61(D) S4 A32])
        (reg:SF 118 [ M.5_34 ])) "BOUNDL.f":59 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 152)
        (expr_list:REG_DEAD (reg:SF 118 [ M.5_34 ])
            (expr_list:REG_DEAD (reg:DI 104 [ _18 ])
                (nil)))))
(insn 88 87 89 8 (set (reg:SI 153)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUNDL.f":60 86 {*movsi_internal}
     (nil))
(insn 89 88 90 8 (set (reg:DI 105 [ _19 ])
        (sign_extend:DI (reg:SI 153))) "BOUNDL.f":60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 153)
        (nil)))
(insn 90 89 91 8 (parallel [
            (set (reg:DI 106 [ _20 ])
                (mult:DI (reg:DI 121 [ stride.2_42 ])
                    (reg:DI 105 [ _19 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 105 [ _19 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 91 90 92 8 (parallel [
            (set (reg:DI 107 [ _21 ])
                (plus:DI (reg:DI 127 [ offset.3_50 ])
                    (reg:DI 106 [ _20 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 106 [ _20 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 92 91 93 8 (set (reg:SI 154)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUNDL.f":60 86 {*movsi_internal}
     (nil))
(insn 93 92 94 8 (set (reg:DI 108 [ _22 ])
        (sign_extend:DI (reg:SI 154))) "BOUNDL.f":60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 154)
        (nil)))
(insn 94 93 95 8 (parallel [
            (set (reg:DI 109 [ _23 ])
                (plus:DI (reg:DI 107 [ _21 ])
                    (reg:DI 108 [ _22 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 108 [ _22 ])
        (expr_list:REG_DEAD (reg:DI 107 [ _21 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 95 94 96 8 (set (reg/f:DI 155)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUNDL.f":60 85 {*movdi_internal}
     (nil))
(insn 96 95 97 8 (set (reg:SF 119 [ M.6_35 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 109 [ _23 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 155)) [7 *fld_61(D) S4 A32])) "BOUNDL.f":60 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 155)
        (expr_list:REG_DEAD (reg:DI 109 [ _23 ])
            (nil))))
(insn 97 96 98 8 (set (reg/f:DI 156)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [4 fmax+0 S8 A64])) "BOUNDL.f":60 85 {*movdi_internal}
     (nil))
(insn 98 97 99 8 (set (reg:SF 134 [ _68 ])
        (mem:SF (reg/f:DI 156) [7 *fmax_67(D)+0 S4 A32])) "BOUNDL.f":60 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 156)
        (nil)))
(insn 99 98 100 8 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 119 [ M.6_35 ])
            (reg:SF 134 [ _68 ]))) "BOUNDL.f":60 53 {*cmpisf}
     (nil))
(insn 100 99 101 8 (set (reg:QI 158)
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUNDL.f":60 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil)))
(insn 101 100 102 8 (set (reg:SI 110 [ _24 ])
        (zero_extend:SI (reg:QI 158))) "BOUNDL.f":60 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 158)
        (nil)))
(insn 102 101 103 8 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 119 [ M.6_35 ])
                    (reg:SF 119 [ M.6_35 ]))
            ] UNSPEC_NOTRAP)) "BOUNDL.f":60 54 {*cmpiusf}
     (nil))
(insn 103 102 104 8 (set (reg:QI 159)
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUNDL.f":60 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil)))
(insn 104 103 105 8 (set (reg:SI 111 [ _25 ])
        (zero_extend:SI (reg:QI 159))) "BOUNDL.f":60 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 159)
        (nil)))
(insn 105 104 106 8 (parallel [
            (set (reg:SI 112 [ _26 ])
                (ior:SI (reg:SI 110 [ _24 ])
                    (reg:SI 111 [ _25 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 450 {*iorsi_1}
     (expr_list:REG_DEAD (reg:SI 111 [ _25 ])
        (expr_list:REG_DEAD (reg:SI 110 [ _24 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 106 105 107 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 112 [ _26 ])
            (const_int 0 [0]))) "BOUNDL.f":60 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 112 [ _26 ])
        (nil)))
(jump_insn 107 106 108 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) "BOUNDL.f":60 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 109)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 121 127 129 131 134

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131 134
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 134
;; lr  def 	 119
(note 108 107 9 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 9 108 109 9 (set (reg:SF 119 [ M.6_35 ])
        (reg:SF 134 [ _68 ])) "BOUNDL.f":60 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 134 [ _68 ])
        (nil)))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 121 127 129 131

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 14, flags: (RTL)
;;  pred:       8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 121 127 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 121 127
;; lr  def 	 17 [flags] 113 114 115 116 117 160 161 162
(code_label 109 9 110 10 5 (nil) [1 uses])
(note 110 109 111 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 10 (set (reg:SI 160)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUNDL.f":60 86 {*movsi_internal}
     (nil))
(insn 112 111 113 10 (set (reg:DI 113 [ _27 ])
        (sign_extend:DI (reg:SI 160))) "BOUNDL.f":60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 160)
        (nil)))
(insn 113 112 114 10 (parallel [
            (set (reg:DI 114 [ _28 ])
                (mult:DI (reg:DI 121 [ stride.2_42 ])
                    (reg:DI 113 [ _27 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 113 [ _27 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 114 113 115 10 (parallel [
            (set (reg:DI 115 [ _29 ])
                (plus:DI (reg:DI 127 [ offset.3_50 ])
                    (reg:DI 114 [ _28 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 114 [ _28 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 115 114 116 10 (set (reg:SI 161)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUNDL.f":60 86 {*movsi_internal}
     (nil))
(insn 116 115 117 10 (set (reg:DI 116 [ _30 ])
        (sign_extend:DI (reg:SI 161))) "BOUNDL.f":60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 161)
        (nil)))
(insn 117 116 118 10 (parallel [
            (set (reg:DI 117 [ _31 ])
                (plus:DI (reg:DI 115 [ _29 ])
                    (reg:DI 116 [ _30 ])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 116 [ _30 ])
        (expr_list:REG_DEAD (reg:DI 115 [ _29 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 118 117 119 10 (set (reg/f:DI 162)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUNDL.f":60 85 {*movdi_internal}
     (nil))
(insn 119 118 120 10 (set (mem:SF (plus:DI (mult:DI (reg:DI 117 [ _31 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 162)) [7 *fld_61(D) S4 A32])
        (reg:SF 119 [ M.6_35 ])) "BOUNDL.f":60 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 162)
        (expr_list:REG_DEAD (reg:SF 119 [ M.6_35 ])
            (expr_list:REG_DEAD (reg:DI 117 [ _31 ])
                (nil)))))
(insn 120 119 137 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":58 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 137 120 138 10 (set (pc)
        (label_ref 121)) "BOUNDL.f":58 683 {jump}
     (nil)
 -> 121)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131

(barrier 138 137 145)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 10, next block 11, flags: (RTL)
;;  pred:       5
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 145 138 144 14 10 (nil) [1 uses])
(note 144 145 146 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 146 144 124 14 (const_int 0 [0]) "BOUNDL.f":60 718 {nop}
     (nil))
;;  succ:       11 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129

;; basic block 11, loop depth 0, maybe hot
;;  prev block 14, next block 13, flags: (RTL)
;;  pred:       14 [always]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 124 146 125 11 3 (nil) [0 uses])
(note 125 124 126 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 126 125 139 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":57 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 139 126 140 11 (set (pc)
        (label_ref 127)) "BOUNDL.f":57 683 {jump}
     (nil)
 -> 127)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129

(barrier 140 139 142)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 11, next block 12, flags: (RTL)
;;  pred:       3
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 142 140 141 13 9 (nil) [1 uses])
(note 141 142 143 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 143 141 130 13 (const_int 0 [0]) "BOUNDL.f":58 718 {nop}
     (nil))
;;  succ:       12 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 13, next block 1, flags: (RTL)
;;  pred:       13 [always]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 130 143 131 12 2 (nil) [0 uses])
(note 131 130 136 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 136 131 0 12 (const_int 0 [0]) "BOUNDL.f":66 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

