
;; Function dist (dist_, funcdef_no=0, decl_uid=3769, cgraph_uid=0, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 12 n_edges 14 count 18 (  1.5)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11
;;
;; Loop 1
;;  header 5, latch 9
;;  depth 1, outer 0
;;  nodes: 5 9 7 6 8
;;
;; Loop 2
;;  header 7, latch 8
;;  depth 2, outer 1
;;  nodes: 7 8
;; 2 succs { 3 4 }
;; 3 succs { 11 }
;; 4 succs { 5 }
;; 5 succs { 10 6 }
;; 6 succs { 7 }
;; 7 succs { 9 8 }
;; 8 succs { 7 }
;; 9 succs { 5 }
;; 10 succs { 11 }
;; 11 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 123.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r150: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r150,l0) best DIREG, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r146,l0) best DIREG, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a40 (r140,l0) best AREG, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a9 (r117,l0) best SSE_REGS, allocno SSE_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a41 (r96,l0) best DIREG, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:412000 MEM:7000
  a1(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a2(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:66000 NO_REX_SSE_REGS:66000 SSE_REGS:66000 MMX_REGS:91000 INT_SSE_REGS:91000 ALL_REGS:1484000 MEM:37000
  a3(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29000 NO_REX_SSE_REGS:29000 SSE_REGS:29000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:15000
  a4(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a6(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:51000 NO_REX_SSE_REGS:51000 SSE_REGS:51000 MMX_REGS:71000 INT_SSE_REGS:71000 ALL_REGS:1160000 MEM:28000
  a7(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a9(r117,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 NON_Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:24000 FP_TOP_SSE_REGS:24000 FP_SECOND_SSE_REGS:24000 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 ALL_REGS:24000 MEM:12000
  a10(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a12(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a13(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a14(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a15(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a16(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a17(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a18(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a19(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a20(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a21(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a22(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a23(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a24(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a25(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a26(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a27(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a28(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a29(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a30(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a31(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a32(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a33(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a34(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a35(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a36(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a37(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a38(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a39(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a40(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a41(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a42(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a43(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:22000 NO_REX_SSE_REGS:22000 SSE_REGS:22000 MMX_REGS:32000 INT_SSE_REGS:32000 ALL_REGS:524000 MEM:12000
  a44(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a45(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:16000
  a46(r92,l0) costs: AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:2000
  a47(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a48(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a49(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29000 NO_REX_SSE_REGS:29000 SSE_REGS:29000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:17000
  a50(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a51(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a52(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a53(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a54(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a55(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a56(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a57(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 124(l0): point = 0
   Insn 123(l0): point = 2
   Insn 122(l0): point = 4
   Insn 121(l0): point = 6
   Insn 118(l0): point = 9
   Insn 88(l0): point = 12
   Insn 87(l0): point = 14
   Insn 142(l0): point = 17
   Insn 112(l0): point = 19
   Insn 98(l0): point = 22
   Insn 97(l0): point = 24
   Insn 95(l0): point = 27
   Insn 94(l0): point = 29
   Insn 93(l0): point = 31
   Insn 92(l0): point = 33
   Insn 91(l0): point = 35
   Insn 90(l0): point = 37
   Insn 140(l0): point = 40
   Insn 106(l0): point = 42
   Insn 105(l0): point = 44
   Insn 104(l0): point = 46
   Insn 103(l0): point = 48
   Insn 102(l0): point = 50
   Insn 101(l0): point = 52
   Insn 100(l0): point = 54
   Insn 85(l0): point = 57
   Insn 82(l0): point = 59
   Insn 81(l0): point = 61
   Insn 80(l0): point = 63
   Insn 79(l0): point = 65
   Insn 78(l0): point = 67
   Insn 77(l0): point = 69
   Insn 76(l0): point = 71
   Insn 75(l0): point = 73
   Insn 74(l0): point = 75
   Insn 73(l0): point = 77
   Insn 72(l0): point = 79
   Insn 71(l0): point = 81
   Insn 70(l0): point = 83
   Insn 69(l0): point = 85
   Insn 68(l0): point = 87
   Insn 67(l0): point = 89
   Insn 66(l0): point = 91
   Insn 65(l0): point = 93
   Insn 64(l0): point = 95
   Insn 63(l0): point = 97
   Insn 62(l0): point = 99
   Insn 61(l0): point = 101
   Insn 60(l0): point = 103
   Insn 59(l0): point = 105
   Insn 58(l0): point = 107
   Insn 57(l0): point = 109
   Insn 56(l0): point = 111
   Insn 55(l0): point = 113
   Insn 54(l0): point = 115
   Insn 53(l0): point = 117
   Insn 52(l0): point = 119
   Insn 51(l0): point = 121
   Insn 50(l0): point = 123
   Insn 49(l0): point = 125
   Insn 138(l0): point = 128
   Insn 44(l0): point = 130
   Insn 42(l0): point = 133
   Insn 41(l0): point = 135
   Insn 40(l0): point = 137
   Insn 39(l0): point = 139
   Insn 38(l0): point = 141
   Insn 37(l0): point = 143
   Insn 36(l0): point = 145
   Insn 35(l0): point = 147
   Insn 34(l0): point = 149
   Insn 33(l0): point = 151
   Insn 32(l0): point = 153
   Insn 31(l0): point = 155
   Insn 29(l0): point = 157
   Insn 30(l0): point = 159
   Insn 28(l0): point = 161
   Insn 27(l0): point = 163
   Insn 23(l0): point = 165
   Insn 22(l0): point = 167
   Insn 21(l0): point = 169
   Insn 19(l0): point = 171
   Insn 17(l0): point = 173
   Insn 18(l0): point = 175
   Insn 16(l0): point = 177
   Insn 15(l0): point = 179
   Insn 14(l0): point = 181
   Insn 13(l0): point = 183
   Insn 12(l0): point = 185
   Insn 11(l0): point = 187
   Insn 10(l0): point = 189
   Insn 9(l0): point = 191
   Insn 8(l0): point = 193
   Insn 7(l0): point = 195
   Insn 6(l0): point = 197
   Insn 2(l0): point = 199
 a0(r119): [128..130] [1..9]
 a1(r150): [5..6]
 a2(r127): [12..67]
 a3(r126): [133..139] [12..127]
 a4(r128): [12..63]
 a5(r131): [12..57]
 a6(r118): [40..56] [22..27]
 a7(r149): [45..46]
 a8(r116): [45..52]
 a9(r117): [45..48]
 a10(r148): [49..50]
 a11(r115): [49..54]
 a12(r133): [40..56] [22..29]
 a13(r132): [40..56] [22..35]
 a14(r114): [30..31]
 a15(r113): [32..33]
 a16(r112): [36..37]
 a17(r129): [58..59]
 a18(r110): [60..61]
 a19(r109): [64..65]
 a20(r108): [68..69]
 a21(r146): [78..99]
 a22(r107): [86..101]
 a23(r101): [88..117]
 a24(r147): [96..97]
 a25(r145): [102..103]
 a26(r144): [102..105]
 a27(r106): [106..107]
 a28(r105): [108..109]
 a29(r104): [110..111]
 a30(r103): [112..113]
 a31(r102): [114..115]
 a32(r143): [118..119]
 a33(r142): [120..121]
 a34(r100): [122..123]
 a35(r99): [124..125]
 a36(r98): [136..137]
 a37(r97): [140..141]
 a38(r141): [142..143]
 a39(r125): [146..147]
 a40(r140): [148..149]
 a41(r96): [154..155]
 a42(r139): [156..159]
 a43(r95): [156..161]
 a44(r94): [162..163]
 a45(r121): [164..171]
 a46(r92 [0]): [166..201]
 a46(r92 [1]): [165..201]
 a47(r91): [168..169]
 a48(r138): [172..175]
 a49(r120): [172..177]
 a50(r90): [178..179]
 a51(r137): [180..181]
 a52(r89): [180..183]
 a53(r136): [184..185]
 a54(r135): [188..189]
 a55(r88): [190..191]
 a56(r134): [194..195]
 a57(r87): [196..197]
Compressing live ranges: from 202 to 80 - 39%
Ranges after the compression:
 a0(r119): [44..45] [0..1]
 a1(r150): [0..1]
 a2(r127): [2..19]
 a3(r126): [46..47] [2..43]
 a4(r128): [2..17]
 a5(r131): [2..13]
 a6(r118): [10..13] [2..3]
 a7(r149): [10..11]
 a8(r116): [10..13]
 a9(r117): [10..11]
 a10(r148): [12..13]
 a11(r115): [12..13]
 a12(r133): [10..13] [2..3]
 a13(r132): [10..13] [2..7]
 a14(r114): [4..5]
 a15(r113): [6..7]
 a16(r112): [8..9]
 a17(r129): [14..15]
 a18(r110): [16..17]
 a19(r109): [18..19]
 a20(r108): [20..21]
 a21(r146): [22..23]
 a22(r107): [22..23]
 a23(r101): [22..35]
 a24(r147): [22..23]
 a25(r145): [24..25]
 a26(r144): [24..25]
 a27(r106): [26..27]
 a28(r105): [28..29]
 a29(r104): [30..31]
 a30(r103): [32..33]
 a31(r102): [34..35]
 a32(r143): [36..37]
 a33(r142): [38..39]
 a34(r100): [40..41]
 a35(r99): [42..43]
 a36(r98): [46..47]
 a37(r97): [48..49]
 a38(r141): [50..51]
 a39(r125): [52..53]
 a40(r140): [54..55]
 a41(r96): [56..57]
 a42(r139): [58..59]
 a43(r95): [58..59]
 a44(r94): [60..61]
 a45(r121): [62..63]
 a46(r92 [0]): [62..79]
 a46(r92 [1]): [62..79]
 a47(r91): [62..63]
 a48(r138): [64..65]
 a49(r120): [64..65]
 a50(r90): [66..67]
 a51(r137): [68..69]
 a52(r89): [68..69]
 a53(r136): [70..71]
 a54(r135): [72..73]
 a55(r88): [74..75]
 a56(r134): [76..77]
 a57(r87): [78..79]
  pref0:a1(r150)<-hr5@500
  pref1:a21(r146)<-hr5@500
  pref2:a40(r140)<-hr0@500
  pref3:a41(r96)<-hr5@500
  regions=1, blocks=12, points=80
    allocnos=58 (big 1), copies=0, conflicts=0, ranges=64
Disposition:
   57:r87  l0     0   55:r88  l0     0   52:r89  l0     1   50:r90  l0     0
   47:r91  l0     1   46:r92  l0     2   44:r94  l0     0   43:r95  l0     0
   41:r96  l0     0   37:r97  l0     0   36:r98  l0     0   35:r99  l0     0
   34:r100 l0     0   23:r101 l0     4   31:r102 l0     0   30:r103 l0     0
   29:r104 l0     0   28:r105 l0     0   27:r106 l0     0   22:r107 l0     2
   20:r108 l0     0   19:r109 l0     1   18:r110 l0     1   16:r112 l0     1
   15:r113 l0     1   14:r114 l0     1   11:r115 l0     5    8:r116 l0     4
    9:r117 l0    21    6:r118 l0     1    0:r119 l0     3   49:r120 l0     0
   45:r121 l0     0   39:r125 l0     0    3:r126 l0     3    2:r127 l0     0
    4:r128 l0    37   17:r129 l0     1    5:r131 l0    38   13:r132 l0    40
   12:r133 l0    39   56:r134 l0     0   54:r135 l0     0   53:r136 l0     0
   51:r137 l0     0   48:r138 l0     1   42:r139 l0     1   40:r140 l0     0
   38:r141 l0     0   33:r142 l0     0   32:r143 l0     0   26:r144 l0     1
   25:r145 l0     0   21:r146 l0     0   24:r147 l0     1   10:r148 l0     2
    7:r149 l0     2    1:r150 l0     0
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dist

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={5d,2u} r1={5d,1u} r2={5d,1u} r4={5d,1u} r5={7d,4u} r6={1d,11u} r7={6d,20u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,10u} r17={34d,5u} r18={3d} r19={3d} r20={1d,24u,2e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={5d,1u} r38={5d,1u} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r87={1d,1u} r88={1d,1u} r89={1d,1u,1e} r90={1d,1u} r91={1d,1u} r92={2d,2u} r94={1d,1u} r95={1d,2u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={2d,4u} r119={2d,1u} r120={1d,2u} r121={1d,2u} r125={1d,1u} r126={1d,2u} r127={2d,5u} r128={1d,1u} r129={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u,1e} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} 
;;    total ref usage 497{342d,151u,4e} in 96{93 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 94 95 96 97 98 120 121 125 126 134 135 136 137 138 139 140 141
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 a+0 S8 A64])
        (reg:DI 5 di [ a ])) "DIST.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ a ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 87 [ _1 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 8 [0x8]))) [3 parallel.jsta+0 S4 A64])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 134)
        (sign_extend:DI (reg:SI 87 [ _1 ]))) "DIST.f":40 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
        (nil)))
(insn 8 7 9 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 lbound.0+0 S8 A64])
        (reg:DI 134)) "DIST.f":40 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 134)
        (nil)))
(insn 9 8 10 2 (set (reg:SI 88 [ _2 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 12 [0xc]))) [3 parallel.jend+0 S4 A32])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 135)
        (sign_extend:DI (reg:SI 88 [ _2 ]))) "DIST.f":40 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
        (nil)))
(insn 11 10 12 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 ubound.1+0 S8 A64])
        (reg:DI 135)) "DIST.f":40 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 135)
        (nil)))
(insn 12 11 13 2 (set (reg:DI 136)
        (const_int 1 [0x1])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 89 [ _3 ])
                (minus:DI (reg:DI 136)
                    (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [1 lbound.0+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":40 278 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 136)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 14 13 15 2 (set (reg:DI 137)
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 ubound.1+0 S8 A64])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg:DI 90 [ _4 ])
                (plus:DI (reg:DI 89 [ _3 ])
                    (reg:DI 137)))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":40 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 137)
        (expr_list:REG_DEAD (reg:DI 89 [ _3 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (reg:DI 89 [ _3 ])
                        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [1 ubound.1+0 S8 A64]))
                    (nil))))))
(insn 16 15 18 2 (parallel [
            (set (reg:DI 120 [ size.3_42 ])
                (mult:DI (reg:DI 90 [ _4 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":40 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 90 [ _4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 18 16 17 2 (set (reg:DI 138)
        (const_int 0 [0])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 17 18 19 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 120 [ size.3_42 ])
            (const_int 0 [0]))) "DIST.f":40 8 {*cmpdi_ccno_1}
     (nil))
(insn 19 17 21 2 (set (reg:DI 121 [ size.3_43 ])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 120 [ size.3_42 ])
            (reg:DI 138))) "DIST.f":40 1003 {*movdicc_noc}
     (expr_list:REG_DEAD (reg:DI 138)
        (expr_list:REG_DEAD (reg:DI 120 [ size.3_42 ])
            (expr_list:REG_DEAD (reg:CCGOC 17 flags)
                (nil)))))
(insn 21 19 22 2 (set (reg:DI 91 [ size.6_5 ])
        (reg:DI 121 [ size.3_43 ])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (subreg:DI (reg:TI 92 [ _6 ]) 0)
        (reg:DI 91 [ size.6_5 ])) "DIST.f":40 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 91 [ size.6_5 ])
        (nil)))
(insn 23 22 27 2 (set (subreg:DI (reg:TI 92 [ _6 ]) 8)
        (const_int 0 [0])) "DIST.f":40 85 {*movdi_internal}
     (expr_list:REG_UNUSED (reg:TI 92 [ _6 ])
        (nil)))
(insn 27 23 28 2 (parallel [
            (set (reg:DI 94 [ _8 ])
                (ashift:DI (reg:DI 121 [ size.3_43 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":40 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 121 [ size.3_43 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 28 27 30 2 (set (reg:DI 95 [ _9 ])
        (reg:DI 94 [ _8 ])) "DIST.f":40 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 94 [ _8 ])
        (nil)))
(insn 30 28 29 2 (set (reg:DI 139)
        (const_int 1 [0x1])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 29 30 31 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 95 [ _9 ])
            (const_int 0 [0]))) "DIST.f":40 8 {*cmpdi_ccno_1}
     (nil))
(insn 31 29 32 2 (set (reg:DI 96 [ _10 ])
        (if_then_else:DI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:DI 95 [ _9 ])
            (reg:DI 139))) "DIST.f":40 1003 {*movdicc_noc}
     (expr_list:REG_DEAD (reg:DI 139)
        (expr_list:REG_DEAD (reg:DI 95 [ _9 ])
            (expr_list:REG_DEAD (reg:CCZ 17 flags)
                (nil)))))
(insn 32 31 33 2 (set (reg:DI 5 di)
        (reg:DI 96 [ _10 ])) "DIST.f":40 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96 [ _10 ])
        (nil)))
(call_insn 33 32 34 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fb8d7935f00 __builtin_malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "DIST.f":40 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 34 33 35 2 (set (reg/f:DI 140)
        (reg:DI 0 ax)) "DIST.f":40 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 140)
            (nil))))
(insn 35 34 36 2 (set (reg/f:DI 125 [ _48 ])
        (reg/f:DI 140)) "DIST.f":40 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 140)
        (nil)))
(insn 36 35 37 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 b+0 S8 A64])
        (reg/f:DI 125 [ _48 ])) "DIST.f":40 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 125 [ _48 ])
        (nil)))
(insn 37 36 38 2 (set (reg:DI 141)
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 lbound.0+0 S8 A64])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 38 37 39 2 (parallel [
            (set (reg:DI 97 [ _11 ])
                (mult:DI (reg:DI 141)
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":40 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 141)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 39 38 40 2 (set (reg:DI 126 [ offset.2_50 ])
        (not:DI (reg:DI 97 [ _11 ]))) "DIST.f":40 532 {*one_cmpldi2_1}
     (expr_list:REG_DEAD (reg:DI 97 [ _11 ])
        (nil)))
(insn 40 39 41 2 (set (reg:SI 98 [ _12 ])
        (mem/c:SI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>) [3 parallel.num_procs+0 S4 A128])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 98 [ _12 ])
            (const_int 1 [0x1]))) "DIST.f":44 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 98 [ _12 ])
        (nil)))
(jump_insn 42 41 43 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) "DIST.f":44 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 47)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 119
(note 43 42 44 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 138 3 (set (reg:SI 119 [ finally_tmp.8_34 ])
        (const_int 0 [0])) 86 {*movsi_internal}
     (nil))
(jump_insn 138 44 139 3 (set (pc)
        (label_ref 119)) "DIST.f":44 683 {jump}
     (nil)
 -> 119)
;;  succ:       11 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119

(barrier 139 138 47)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 99 100 101 102 103 104 105 106 107 108 109 110 127 128 129 131 142 143 144 145 146 147
(code_label 47 139 48 4 2 (nil) [1 uses])
(note 48 47 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 4 (set (reg:SI 99 [ _13 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 4 [0x4]))) [3 parallel.me+0 S4 A32])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:DI 100 [ _14 ])
        (sign_extend:DI (reg:SI 99 [ _13 ]))) "DIST.f":46 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 99 [ _13 ])
        (nil)))
(insn 51 50 52 4 (parallel [
            (set (reg:DI 142)
                (plus:DI (reg:DI 100 [ _14 ])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 100 [ _14 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 52 51 53 4 (parallel [
            (set (reg:DI 143)
                (ashift:DI (reg:DI 142)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 142)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 53 52 54 4 (parallel [
            (set (reg/f:DI 101 [ _15 ])
                (plus:DI (reg:DI 143)
                    (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 143)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 54 53 55 4 (set (reg:SI 102 [ _16 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 8 [0x8]))) [3 parallel.jsta+0 S4 A64])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DI 103 [ _17 ])
        (sign_extend:DI (reg:SI 102 [ _16 ]))) "DIST.f":46 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 102 [ _16 ])
        (nil)))
(insn 56 55 57 4 (parallel [
            (set (reg:DI 104 [ _18 ])
                (mult:DI (reg:DI 103 [ _17 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 103 [ _17 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 57 56 58 4 (parallel [
            (set (reg:DI 105 [ _19 ])
                (plus:DI (reg:DI 126 [ offset.2_50 ])
                    (reg:DI 104 [ _18 ])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 104 [ _18 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 58 57 59 4 (parallel [
            (set (reg:DI 106 [ _20 ])
                (plus:DI (reg:DI 105 [ _19 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 105 [ _19 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 59 58 60 4 (parallel [
            (set (reg:DI 144)
                (ashift:DI (reg:DI 106 [ _20 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 106 [ _20 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 60 59 61 4 (set (reg/f:DI 145)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 b+0 S8 A64])) "DIST.f":46 85 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (parallel [
            (set (reg/f:DI 107 [ _21 ])
                (plus:DI (reg:DI 144)
                    (reg/f:DI 145)))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 145)
        (expr_list:REG_DEAD (reg:DI 144)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -24 [0xffffffffffffffe8])) [2 b+0 S8 A64])
                        (reg:DI 144))
                    (nil))))))
(insn 62 61 63 4 (set (reg:DI 146)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 a+0 S8 A64])) "DIST.f":46 85 {*movdi_internal}
     (nil))
(insn 63 62 64 4 (parallel [
            (set (reg:DI 147)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 64 63 65 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (reg:DI 147)) "DIST.f":46 61 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 147)
        (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
            (nil))))
(insn 65 64 66 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fb8d7ae1ab0 *.LC1>)) "DIST.f":46 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 66 65 67 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fb8d7ae1ab0 *.LC1>)) "DIST.f":46 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 67 66 68 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fb8d7ae1a20 *.LC0>)) "DIST.f":46 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 68 67 69 4 (set (reg:DI 38 r9)
        (reg/f:DI 101 [ _15 ])) "DIST.f":46 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ _15 ])
        (nil)))
(insn 69 68 70 4 (set (reg:DI 37 r8)
        (reg/f:DI 107 [ _21 ])) "DIST.f":46 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107 [ _21 ])
        (nil)))
(insn 70 69 71 4 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fb8d7ae1a20 *.LC0>)) "DIST.f":46 85 {*movdi_internal}
     (nil))
(insn 71 70 72 4 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                (const_int 4136 [0x1028])))) "DIST.f":46 85 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DI 4 si)
        (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                (const_int 40 [0x28])))) "DIST.f":46 85 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:DI 5 di)
        (reg:DI 146)) "DIST.f":46 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 146)
        (nil)))
(insn 74 73 75 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "DIST.f":46 88 {*movqi_internal}
     (nil))
(call_insn 75 74 76 4 (call (mem:QI (symbol_ref:DI ("mpi_scatterv_") [flags 0x41]  <function_decl 0x7fb8d7aaf600 mpi_scatterv>) [0 mpi_scatterv S1 A8])
        (const_int 32 [0x20])) "DIST.f":46 689 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (expr_list:REG_DEAD (reg:QI 0 ax)
                                (nil))))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 76 75 77 4 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":46 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 77 76 78 4 (set (reg:SI 108 [ _22 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 8 [0x8]))) [3 parallel.jsta+0 S4 A64])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 78 77 79 4 (set (reg:DI 127 [ _55 ])
        (sign_extend:DI (reg:SI 108 [ _22 ]))) "DIST.f":48 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 108 [ _22 ])
        (nil)))
(insn 79 78 80 4 (set (reg:SI 109 [ _23 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 12 [0xc]))) [3 parallel.jend+0 S4 A32])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 80 79 81 4 (set (reg:DI 128 [ _56 ])
        (sign_extend:DI (reg:SI 109 [ _23 ]))) "DIST.f":48 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 109 [ _23 ])
        (nil)))
(insn 81 80 82 4 (set (reg:SI 110 [ _24 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb8d7ad92d0 parallel>)
                    (const_int 8 [0x8]))) [3 parallel.jsta+0 S4 A64])) "DIST.f":1 86 {*movsi_internal}
     (nil))
(insn 82 81 85 4 (set (reg:DI 129 [ _57 ])
        (sign_extend:DI (reg:SI 110 [ _24 ]))) "DIST.f":48 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 110 [ _24 ])
        (nil)))
(insn 85 82 113 4 (parallel [
            (set (reg:DI 131 [ _59 ])
                (minus:DI (reg:DI 129 [ _57 ])
                    (reg:DI 127 [ _55 ])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 278 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 129 [ _57 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 128 131

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              9 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 128 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 127 128
;; lr  def 	 17 [flags]
(code_label 113 85 86 5 7 (nil) [1 uses])
(note 86 113 87 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 127 [ _55 ])
            (reg:DI 128 [ _56 ]))) "DIST.f":48 12 {*cmpdi_1}
     (nil))
(jump_insn 88 87 89 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 116)
            (pc))) "DIST.f":48 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 116)
;;  succ:       10
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 128 131

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 128 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 131
;; lr  def 	 17 [flags] 112 113 114 118 132 133
(note 89 88 90 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 6 (parallel [
            (set (reg:DI 112 [ _26 ])
                (mult:DI (reg:DI 127 [ _55 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 349 {*muldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 91 90 92 6 (parallel [
            (set (reg:DI 132 [ _61 ])
                (plus:DI (reg:DI 126 [ offset.2_50 ])
                    (reg:DI 112 [ _26 ])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 112 [ _26 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 92 91 93 6 (parallel [
            (set (reg:DI 113 [ _27 ])
                (plus:DI (reg:DI 127 [ _55 ])
                    (reg:DI 131 [ _59 ])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 93 92 94 6 (parallel [
            (set (reg:DI 114 [ _28 ])
                (mult:DI (reg:DI 113 [ _27 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 113 [ _27 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 94 93 95 6 (parallel [
            (set (reg:DI 133 [ _62 ])
                (plus:DI (reg:DI 114 [ _28 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 114 [ _28 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 95 94 107 6 (set (reg:DI 118 [ S.5_33 ])
        (const_int 1 [0x1])) "DIST.f":48 85 {*movdi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 126 127 128 131 132 133

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;;              8 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 126 127 128 131 132 133
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118
;; lr  def 	 17 [flags]
(code_label 107 95 96 7 6 (nil) [1 uses])
(note 96 107 97 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 118 [ S.5_33 ])
            (const_int 119 [0x77]))) "DIST.f":48 12 {*cmpdi_1}
     (nil))
(jump_insn 98 97 99 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 110)
            (pc))) "DIST.f":48 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 110)
;;  succ:       9
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 126 127 128 131 132 133

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 126 127 128 131 132 133
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 132 133
;; lr  def 	 17 [flags] 115 116 117 118 148 149
(note 99 98 100 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 8 (parallel [
            (set (reg:DI 115 [ _29 ])
                (plus:DI (reg:DI 118 [ S.5_33 ])
                    (reg:DI 132 [ _61 ])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 101 100 102 8 (parallel [
            (set (reg:DI 116 [ _30 ])
                (plus:DI (reg:DI 118 [ S.5_33 ])
                    (reg:DI 133 [ _62 ])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 102 101 103 8 (set (reg/f:DI 148)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 b+0 S8 A64])) "DIST.f":48 85 {*movdi_internal}
     (nil))
(insn 103 102 104 8 (set (reg:SF 117 [ _31 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 115 [ _29 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 148)) [6 *b_49 S4 A32])) "DIST.f":48 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 148)
        (expr_list:REG_DEAD (reg:DI 115 [ _29 ])
            (nil))))
(insn 104 103 105 8 (set (reg/f:DI 149)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 a+0 S8 A64])) "DIST.f":48 85 {*movdi_internal}
     (nil))
(insn 105 104 106 8 (set (mem:SF (plus:DI (mult:DI (reg:DI 116 [ _30 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 149)) [6 *a_52(D) S4 A32])
        (reg:SF 117 [ _31 ])) "DIST.f":48 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 149)
        (expr_list:REG_DEAD (reg:SF 117 [ _31 ])
            (expr_list:REG_DEAD (reg:DI 116 [ _30 ])
                (nil)))))
(insn 106 105 140 8 (parallel [
            (set (reg:DI 118 [ S.5_33 ])
                (plus:DI (reg:DI 118 [ S.5_33 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 140 106 141 8 (set (pc)
        (label_ref 107)) "DIST.f":48 683 {jump}
     (nil)
 -> 107)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 126 127 128 131 132 133

(barrier 141 140 110)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 128 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 127
;; lr  def 	 17 [flags] 127
(code_label 110 141 111 9 5 (nil) [1 uses])
(note 111 110 112 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 142 9 (parallel [
            (set (reg:DI 127 [ _55 ])
                (plus:DI (reg:DI 127 [ _55 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "DIST.f":48 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 142 112 143 9 (set (pc)
        (label_ref 113)) "DIST.f":48 683 {jump}
     (nil)
 -> 113)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126 127 128 131

(barrier 143 142 116)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 119
(code_label 116 143 117 10 4 (nil) [1 uses])
(note 117 116 118 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 10 (set (reg:SI 119 [ finally_tmp.8_34 ])
        (const_int 1 [0x1])) "DIST.f":40 86 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 1, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;;              3 [always] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 150
(code_label 119 118 120 11 3 (nil) [1 uses])
(note 120 119 121 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 11 (set (reg:DI 150)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 b+0 S8 A64])) "DIST.f":40 85 {*movdi_internal}
     (nil))
(insn 122 121 123 11 (set (reg:DI 5 di)
        (reg:DI 150)) "DIST.f":40 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 150)
        (nil)))
(call_insn 123 122 124 11 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb8d7935e00 __builtin_free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "DIST.f":40 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 124 123 0 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 119 [ finally_tmp.8_34 ])
            (const_int 1 [0x1]))) "DIST.f":40 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 119 [ finally_tmp.8_34 ])
        (expr_list:REG_UNUSED (reg:CCZ 17 flags)
            (nil))))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

