
;; Function e2out (e2out_, funcdef_no=0, decl_uid=3770, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 18:  (0) =r  (2) rm  (3) 0 {*movdicc_noc}
      Creating newreg=645 from oldreg=418, assigning class GENERAL_REGS to r645
   18: r645:DI={(flags:CCGOC>=0)?r380:DI:r645:DI}
      REG_DEAD r418:DI
      REG_DEAD r380:DI
      REG_DEAD flags:CCGOC
    Inserting insn reload before:
 1484: r645:DI=r418:DI
    Inserting insn reload after:
 1485: r381:DI=r645:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 23:  (0) r  (1) 0  (2) mr {*muldi3_1}
      Creating newreg=646 from oldreg=382, assigning class GENERAL_REGS to r646
   23: {r646:DI=r646:DI*[frame:DI-0x38];clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1486: r646:DI=r381:DI
    Inserting insn reload after:
 1487: r382:DI=r646:DI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 34:  (0) =rm  (1) 0 {*one_cmpldi2_1}
      Creating newreg=647 from oldreg=387, assigning class GENERAL_REGS to r647
   34: r647:DI=~r647:DI
    Inserting insn reload before:
 1488: r647:DI=r381:DI
    Inserting insn reload after:
 1489: r387:DI=r647:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 42:  (0) =r  (2) rm  (3) 0 {*movdicc_noc}
      Creating newreg=648 from oldreg=424, assigning class GENERAL_REGS to r648
   42: r648:DI={(flags:CCGOC>=0)?r388:DI:r648:DI}
      REG_DEAD r424:DI
      REG_DEAD r388:DI
      REG_DEAD flags:CCGOC
    Inserting insn reload before:
 1490: r648:DI=r424:DI
    Inserting insn reload after:
 1491: r389:DI=r648:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 46:  (0) m  (1) re {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 47:  (0) r  (1) 0  (2) mr {*muldi3_1}
      Creating newreg=649 from oldreg=390, assigning class GENERAL_REGS to r649
   47: {r649:DI=r649:DI*[frame:DI-0x48];clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1492: r649:DI=r389:DI
    Inserting insn reload after:
 1493: r390:DI=r649:DI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 49:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) r  (1) Z {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0 {*one_cmpldi2_1}
      Creating newreg=650 from oldreg=395, assigning class GENERAL_REGS to r650
   58: r650:DI=~r650:DI
    Inserting insn reload before:
 1494: r650:DI=r389:DI
    Inserting insn reload after:
 1495: r395:DI=r650:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 77:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) rm  (1) re {*cmpdi_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 82:  (0) r  (1) 0  (2) mr {*muldi3_1}
      Creating newreg=651 from oldreg=100, assigning class GENERAL_REGS to r651
   82: {r651:DI=r651:DI*r381:DI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1496: r651:DI=r376:DI
    Inserting insn reload after:
 1497: r100:DI=r651:DI

            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) rm  (1) re {*cmpdi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 91:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 92:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 93:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) rm  (1) re {*cmpdi_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 116:  (0) r  (1) 0  (2) mr {*muldi3_1}
      Creating newreg=652 from oldreg=104, assigning class GENERAL_REGS to r652
  116: {r652:DI=r652:DI*r389:DI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1498: r652:DI=r378:DI
    Inserting insn reload after:
 1499: r104:DI=r652:DI

            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 118:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) rm  (1) re {*cmpdi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 125:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 126:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 181:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 182:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 194:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 204:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 207
	 Choosing alt 0 in insn 207:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 208:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 211
	 Choosing alt 2 in insn 211:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 217:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 218:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 219:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 222:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 225
	 Choosing alt 0 in insn 225:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 226:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 227:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 228:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 229:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 235:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 246:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 247:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 248:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 250:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 252:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 260:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 270:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 273
	 Choosing alt 0 in insn 273:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 274:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 277
	 Choosing alt 2 in insn 277:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 278:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 282:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 283:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 284:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 285:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 286:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 292:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 304:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 307:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 308:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 311:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 312:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 314:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 315:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 318:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 319:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 329:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 331:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 333:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 341:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 346:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 352:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 354:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 358:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 363:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 366:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 367:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 369:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 370:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 371:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 373:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 378:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 379:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 381:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 383:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 393:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 394:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 396:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 398:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 402:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 407:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 410:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 411:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 414:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 415:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 417:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 422:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 423:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 425:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 427:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 431:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 434:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 435:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 440:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 441:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 442:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 443:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 444:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 446:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 448:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 451:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 452:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 455:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 456:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 458:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 463:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 465:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 466:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 467:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 468:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 473:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 481:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 489:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 505:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 510:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 511:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 513:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 515:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 516:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 517:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 522:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 523:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 525:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 527:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 528:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 529:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 532:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 534:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 537:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 538:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 539:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 542:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 547:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 548:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 549:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 552:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 557:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 559:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 562:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 563:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 567:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 568:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 569:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 572:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 573:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 574:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 577:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 578:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 583:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 584:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 585:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 586:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 587:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 589:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 590:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 591:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 592:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 593:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 596:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 597:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 598:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 599:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 600:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 603:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 604:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 605:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 606:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 611:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 613:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 614:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 615:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 616:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 617:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 620:  (0) =<  (1) re*m {*pushdi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 621:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 623:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-24)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 624:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-32)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=600
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 625:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-40)
      Creating newreg=653, assigning class GENERAL_REGS to r653
  625: [--sp:DI]=r653:DI
      REG_ARGS_SIZE 0x30
    Inserting insn reload before:
 1500: r653:DI=const(`llgrds_'+0xb83be10)

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=4,overall=1,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1500:  (0) r  (1) i {*movdi_internal} (sp_off=-40)
      Change to class INDEX_REGS for r653
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 626:  (0) r  (1) i {*movdi_internal} (sp_off=-48)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 627:  (0) r  (1) Z {*movdi_internal} (sp_off=-48)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 628:  (0) r  (1) Z {*movdi_internal} (sp_off=-48)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 629:  (0) r  (1) i {*movdi_internal} (sp_off=-48)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 630:  (0) r  (1) i {*movdi_internal} (sp_off=-48)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 631:  (0) r  (1) i {*movdi_internal} (sp_off=-48)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 632:  (0) q  (1) n {*movqi_internal} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (0) rBwBz {*call} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 634:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-48)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 635:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 636:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 638:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 640:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 641:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 642:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 643:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 644:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 646:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 648:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 649:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 650:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 653:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 654:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 655:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 658:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 659:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 660:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 663:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 665:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 669:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 670:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 671:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 672:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 673:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 675:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 678:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 686:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 688:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 689:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 690:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 691:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 694:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 696:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 697:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 698:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 699:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 702:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 703:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 704:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 705:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 706:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 707
	 Choosing alt 0 in insn 707:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 708:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 709:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 710:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 711
	 Choosing alt 2 in insn 711:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 712:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 713:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 714:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 715:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 716:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 717:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 718:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 719:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 720:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 721:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 722:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 723:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 724:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 725
	 Choosing alt 0 in insn 725:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 726:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 727:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 728:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 729:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 735:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 741:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 742:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 743:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 746:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 747:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 748:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 751:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 752:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 753:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 756:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 757:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 758:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 761:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 762:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 763:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 766:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 767:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 768:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 771:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 772:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 773:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 776:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 777:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 778:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 781:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 782:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 783:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 786:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 787:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 788:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 792:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 793:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 794:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 795:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 796:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 798:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 799:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 800:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 801:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 802:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 805:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 806:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 807:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 808:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 809:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 810:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 811:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 812:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 813:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 814:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 815:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 816:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 817:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 820:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 822:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 823:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 824:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 825:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 826:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 829:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 831:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 832:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 833:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 834:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 837:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 839:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 840:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 841:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 842:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 845:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 846:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 847:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 848:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 849:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 850
	 Choosing alt 0 in insn 850:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 851:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 852:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 853:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 854
	 Choosing alt 2 in insn 854:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 855:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 856:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 857:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 858:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 859:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 860:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 861:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 862:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 863:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 869:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 879:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 880:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 881:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 884:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 885:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 886:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 889:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 890:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 891:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 892:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 894:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 895:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 896:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 897:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 898:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 899:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 901:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 902:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 903:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 904:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 905:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 906:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 907:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 908:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 909:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 910:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 911:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 912:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 913:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 914:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 915:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 918:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 920:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 921:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 922:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 923:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 924:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 927:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 928:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 929:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 932:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 933:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 934:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 935:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 936:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 937:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 938:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 939:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 940:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 941:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 942:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 943:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 944:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 947:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 949:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 950:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 951:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 952:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 953:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 956:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 957:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 960:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 961:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 964:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 965:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 968:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 969:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 972:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 973:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 976:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 977:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 980:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 981:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 984:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 985:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 989:  (0) =<  (1) re*m {*pushdi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 990:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 991:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 992:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-24)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 993:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-32)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=600
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 994:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-40)
      Creating newreg=654, assigning class GENERAL_REGS to r654
  994: [--sp:DI]=r654:DI
      REG_ARGS_SIZE 0x30
    Inserting insn reload before:
 1501: r654:DI=const(`llgrds_'+0xb83be10)

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=4,overall=1,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1501:  (0) r  (1) i {*movdi_internal} (sp_off=-40)
      Change to class INDEX_REGS for r654
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 995:  (0) r  (1) i {*movdi_internal} (sp_off=-48)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 996:  (0) r  (1) Z {*movdi_internal} (sp_off=-48)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 997:  (0) r  (1) Z {*movdi_internal} (sp_off=-48)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 998:  (0) r  (1) i {*movdi_internal} (sp_off=-48)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 999:  (0) r  (1) i {*movdi_internal} (sp_off=-48)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1000:  (0) r  (1) i {*movdi_internal} (sp_off=-48)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1001:  (0) q  (1) n {*movqi_internal} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1002:  (0) rBwBz {*call} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1003:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-48)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1004:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1005:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1007:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1009:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1010:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1011:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1012:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1013:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1015:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1017:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1018:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1019:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1024:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1026:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1027:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1028:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1029:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1032:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1034:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1035:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1036:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1037:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1040:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1041:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1042:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1043:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1044:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1045
	 Choosing alt 0 in insn 1045:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1046:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1047:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1048:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1049
	 Choosing alt 2 in insn 1049:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1050:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1051:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1052:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1053:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1054:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1055:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1056:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1057:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1058:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1059:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1060:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1061:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1062:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1063
	 Choosing alt 0 in insn 1063:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1064:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1065:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1066:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1067:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1073:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1079:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1081:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1082:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1083:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1084:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1087:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1089:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1090:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1091:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1092:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1095:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1096:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1097:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1098:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1099:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1100
	 Choosing alt 0 in insn 1100:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1101:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1102:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1103:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1104
	 Choosing alt 2 in insn 1104:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1105:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1106:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1107:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1108:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1109:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1110:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1111:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1112:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1113:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1119:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1129:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1130:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1131:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1132:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1134:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1135:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1137:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1138:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1139:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1140:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1141:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1142:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1143:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1144:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1147:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1149:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1150:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1151:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1152:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1153:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1156:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1157:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1160:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1161:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1164:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1165:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1168:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1169:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1172:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1173:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1176:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1177:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1180:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1181:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1184:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1185:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1189:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1190:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1192:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1194:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1195:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1196:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1201:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1203:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1204:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1205:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1206:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1209:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1211:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1212:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1213:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1214:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1217:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1218:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1219:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1220:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1221:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1222
	 Choosing alt 0 in insn 1222:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1223:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1224:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1225:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1226
	 Choosing alt 2 in insn 1226:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1227:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1228:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1229:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1230:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1231:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1232:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1233:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1234:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1235:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1236:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1237:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1238:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1239:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1240
	 Choosing alt 0 in insn 1240:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1241:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1242:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1243:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1244:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1250:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1256:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1258:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1260:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1262:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1265:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1267:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1269:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1271:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1274:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1276:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1278:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1280:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1285:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1286:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1287:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1290:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1291:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1292:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1293:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1294:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1295:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1296:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1299:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1300:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1301:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1302:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1303:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1304:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1305:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1306:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1307:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1308:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1309:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1310:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1311:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1314:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1315:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1316:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1320:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1321:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1322:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1325:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1326:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1327:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1330:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1331:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1332:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1333:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1334:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1335:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1336:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1339:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1340:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1341:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1342:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1343:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1344:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1345:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1346:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1347:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1348:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1349:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1350:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1351:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1354:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1355:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1356:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1360:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1361:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1362:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1365:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1367:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1368:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1369:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1371:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1372:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6 7
EBB 8
EBB 9
EBB 10 11
EBB 12 13
EBB 14
EBB 15 16 17 18 19 20 21 22 23 24
EBB 25
EBB 26 27
EBB 28 29
EBB 168
EBB 30
EBB 167
EBB 31 32
EBB 33 34
EBB 35 36
EBB 171
EBB 37
EBB 170
EBB 38
EBB 39 40 41
EBB 42 43 44
EBB 45
EBB 46 47 48
EBB 49 50
EBB 51 52 53
EBB 54 55 56
EBB 57 58 59 60 61 62 63 64
EBB 65 66
EBB 67
EBB 68 69 70 71 72 73 74 75 76 77
EBB 78 79 80
EBB 81
EBB 82 83 84
EBB 85
EBB 86
EBB 87 88
EBB 89 90
EBB 174
EBB 91
EBB 173
EBB 92 93 94 95 96 97 98 99 100 101
EBB 102 103 104
EBB 105
EBB 106 107
EBB 108 109
EBB 176
EBB 110
EBB 111 112 113 114
EBB 115 116 117
EBB 118 119 120 121 122 123 124 125
EBB 126
EBB 127
EBB 128 129
EBB 130 131
EBB 178
EBB 132
EBB 177
EBB 133
EBB 134 135
EBB 136 137
EBB 180
EBB 138
EBB 179
EBB 139
EBB 140 141
EBB 142 143 144 145 146 147 148 149
EBB 150
EBB 151
EBB 152 153
EBB 154 155
EBB 182
EBB 156
EBB 172
EBB 175
EBB 181
EBB 157
EBB 169
EBB 158 159 160 161
EBB 162 163 164 165
EBB 166

********** Pseudo live ranges #1: **********

  BB 166
   Insn 1378: point = 0, n_alt = -1
   Insn 1372: point = 0, n_alt = 0
   Insn 1371: point = 0, n_alt = 3
   Insn 1370: point = 0, n_alt = -2
   Insn 1369: point = 1, n_alt = 3
   Insn 1368: point = 2, n_alt = 0
   Insn 1367: point = 2, n_alt = 3
   Insn 1366: point = 2, n_alt = -2
   Insn 1365: point = 3, n_alt = 3
  BB 165
   Insn 1362: point = 4, n_alt = 0
   Insn 1361: point = 4, n_alt = 3
   Insn 1360: point = 4, n_alt = 3
   Insn 1359: point = 4, n_alt = -2
   Insn 1358: point = 5, n_alt = -2
   Insn 1357: point = 6, n_alt = -2
   Insn 1356: point = 7, n_alt = 3
   Insn 1355: point = 8, n_alt = 3
   Insn 1354: point = 9, n_alt = 3
  BB 164
   Insn 1352: point = 10, n_alt = -1
   Insn 1351: point = 10, n_alt = 0
   Insn 1350: point = 11, n_alt = 0
   Insn 1349: point = 12, n_alt = 1
   Insn 1348: point = 13, n_alt = 0
   Insn 1347: point = 15, n_alt = 0
   Insn 1346: point = 17, n_alt = 0
   Insn 1345: point = 19, n_alt = 0
   Insn 1344: point = 21, n_alt = 0
   Insn 1343: point = 23, n_alt = 0
   Insn 1342: point = 25, n_alt = 0
   Insn 1341: point = 27, n_alt = 0
   Insn 1340: point = 29, n_alt = 0
   Insn 1339: point = 31, n_alt = 3
  BB 163
   Insn 1337: point = 32, n_alt = -1
   Insn 1336: point = 32, n_alt = 0
   Insn 1335: point = 33, n_alt = 0
   Insn 1334: point = 35, n_alt = 0
   Insn 1333: point = 37, n_alt = 0
   Insn 1332: point = 39, n_alt = 0
   Insn 1331: point = 41, n_alt = 0
   Insn 1330: point = 43, n_alt = 3
  BB 162
   Insn 1328: point = 44, n_alt = -1
   Insn 1327: point = 44, n_alt = 0
   Insn 1326: point = 45, n_alt = 0
   Insn 1325: point = 47, n_alt = 3
  BB 161
   Insn 1322: point = 48, n_alt = 0
   Insn 1321: point = 48, n_alt = 3
   Insn 1320: point = 48, n_alt = 3
   Insn 1319: point = 48, n_alt = -2
   Insn 1318: point = 49, n_alt = -2
   Insn 1317: point = 50, n_alt = -2
   Insn 1316: point = 51, n_alt = 3
   Insn 1315: point = 52, n_alt = 3
   Insn 1314: point = 53, n_alt = 3
  BB 160
   Insn 1312: point = 54, n_alt = -1
   Insn 1311: point = 54, n_alt = 0
   Insn 1310: point = 55, n_alt = 0
   Insn 1309: point = 56, n_alt = 1
   Insn 1308: point = 57, n_alt = 0
   Insn 1307: point = 59, n_alt = 0
   Insn 1306: point = 61, n_alt = 0
   Insn 1305: point = 63, n_alt = 0
   Insn 1304: point = 65, n_alt = 0
   Insn 1303: point = 67, n_alt = 0
   Insn 1302: point = 69, n_alt = 0
   Insn 1301: point = 71, n_alt = 0
   Insn 1300: point = 73, n_alt = 0
   Insn 1299: point = 75, n_alt = 3
  BB 159
   Insn 1297: point = 76, n_alt = -1
   Insn 1296: point = 76, n_alt = 0
   Insn 1295: point = 77, n_alt = 0
   Insn 1294: point = 79, n_alt = 0
   Insn 1293: point = 81, n_alt = 0
   Insn 1292: point = 83, n_alt = 0
   Insn 1291: point = 85, n_alt = 0
   Insn 1290: point = 87, n_alt = 3
  BB 158
   Insn 1288: point = 88, n_alt = -1
   Insn 1287: point = 88, n_alt = 0
   Insn 1286: point = 89, n_alt = 0
   Insn 1285: point = 91, n_alt = 3
  BB 157
   Insn 1435: point = 92, n_alt = -1
   Insn 1280: point = 92, n_alt = 0
   Insn 1279: point = 92, n_alt = -2
   Insn 1278: point = 93, n_alt = 0
   Insn 1277: point = 93, n_alt = -2
   Insn 1276: point = 94, n_alt = 2
   Insn 1275: point = 95, n_alt = -2
   Insn 1274: point = 97, n_alt = 4
   Insn 1271: point = 98, n_alt = 0
   Insn 1270: point = 98, n_alt = -2
   Insn 1269: point = 99, n_alt = 0
   Insn 1268: point = 99, n_alt = -2
   Insn 1267: point = 100, n_alt = 2
   Insn 1266: point = 101, n_alt = -2
   Insn 1265: point = 103, n_alt = 4
   Insn 1262: point = 104, n_alt = 0
   Insn 1261: point = 104, n_alt = -2
   Insn 1260: point = 105, n_alt = 0
   Insn 1259: point = 105, n_alt = -2
   Insn 1258: point = 106, n_alt = 2
   Insn 1257: point = 107, n_alt = -2
   Insn 1256: point = 109, n_alt = 4
  BB 175
   Insn 1475: point = 110, n_alt = -1
   Insn 1459: point = 110, n_alt = -1
  BB 106
   Insn 835: point = 110, n_alt = -1
   Insn 834: point = 110, n_alt = 0
   Insn 833: point = 111, n_alt = 0
   Insn 832: point = 113, n_alt = 0
   Insn 831: point = 114, n_alt = 0
  BB 110
   Insn 1409: point = 115, n_alt = -1
   Insn 869: point = 115, n_alt = 1
  BB 176
   Insn 1462: point = 116, n_alt = -1
  BB 108
   Insn 843: point = 117, n_alt = -1
   Insn 842: point = 117, n_alt = 0
   Insn 841: point = 118, n_alt = 0
   Insn 840: point = 120, n_alt = 0
   Insn 839: point = 121, n_alt = 0
  BB 109
   Insn 1407: point = 122, n_alt = -1
   Insn 863: point = 122, n_alt = 1
   Insn 862: point = 122, n_alt = 8
   Insn 861: point = 123, n_alt = 3
   Insn 860: point = 124, n_alt = 7
   Insn 859: point = 126, n_alt = 4
   Insn 858: point = 127, n_alt = 0
   Insn 857: point = 129, n_alt = 0
   Insn 856: point = 131, n_alt = 0
   Insn 855: point = 132, n_alt = 3
   Insn 854: point = 134, n_alt = 2
   Insn 853: point = 136, n_alt = 0
   Insn 852: point = 138, n_alt = 0
   Insn 851: point = 139, n_alt = 3
   Insn 850: point = 141, n_alt = 0
   Insn 849: point = 143, n_alt = 0
   Insn 848: point = 145, n_alt = 0
   Insn 847: point = 146, n_alt = 1
   Insn 846: point = 148, n_alt = 0
   Insn 845: point = 150, n_alt = 0
  BB 107
   Insn 837: point = 152, n_alt = 1
  BB 105
   Insn 829: point = 153, n_alt = 1
  BB 104
   Insn 826: point = 154, n_alt = 0
   Insn 825: point = 154, n_alt = 3
   Insn 824: point = 154, n_alt = 2
   Insn 823: point = 154, n_alt = 2
   Insn 822: point = 154, n_alt = 4
   Insn 821: point = 154, n_alt = -2
   Insn 820: point = 155, n_alt = 3
  BB 103
   Insn 818: point = 157, n_alt = -1
   Insn 817: point = 157, n_alt = 0
   Insn 816: point = 158, n_alt = 0
   Insn 815: point = 159, n_alt = 1
   Insn 814: point = 160, n_alt = 0
   Insn 813: point = 162, n_alt = 0
   Insn 812: point = 164, n_alt = 0
   Insn 811: point = 166, n_alt = 0
   Insn 810: point = 168, n_alt = 0
   Insn 809: point = 170, n_alt = 0
   Insn 808: point = 172, n_alt = 0
   Insn 807: point = 174, n_alt = 0
   Insn 806: point = 176, n_alt = 0
   Insn 805: point = 178, n_alt = 3
  BB 102
   Insn 803: point = 180, n_alt = -1
   Insn 802: point = 180, n_alt = 0
   Insn 801: point = 181, n_alt = 0
   Insn 800: point = 183, n_alt = 3
   Insn 799: point = 184, n_alt = 0
   Insn 798: point = 184, n_alt = 3
   Insn 797: point = 184, n_alt = -2
   Insn 796: point = 185, n_alt = 4
   Insn 795: point = 185, n_alt = 2
   Insn 794: point = 185, n_alt = 2
   Insn 793: point = 185, n_alt = 2
   Insn 792: point = 185, n_alt = 3
  BB 101
   Insn 789: point = 187, n_alt = -1
   Insn 788: point = 187, n_alt = 0
   Insn 787: point = 188, n_alt = 0
   Insn 786: point = 190, n_alt = 3
  BB 100
   Insn 784: point = 192, n_alt = -1
   Insn 783: point = 192, n_alt = 0
   Insn 782: point = 193, n_alt = 0
   Insn 781: point = 195, n_alt = 3
  BB 99
   Insn 779: point = 197, n_alt = -1
   Insn 778: point = 197, n_alt = 0
   Insn 777: point = 198, n_alt = 0
   Insn 776: point = 200, n_alt = 3
  BB 98
   Insn 774: point = 202, n_alt = -1
   Insn 773: point = 202, n_alt = 0
   Insn 772: point = 203, n_alt = 0
   Insn 771: point = 205, n_alt = 3
  BB 97
   Insn 769: point = 207, n_alt = -1
   Insn 768: point = 207, n_alt = 0
   Insn 767: point = 208, n_alt = 0
   Insn 766: point = 210, n_alt = 3
  BB 96
   Insn 764: point = 212, n_alt = -1
   Insn 763: point = 212, n_alt = 0
   Insn 762: point = 213, n_alt = 0
   Insn 761: point = 215, n_alt = 3
  BB 95
   Insn 759: point = 217, n_alt = -1
   Insn 758: point = 217, n_alt = 0
   Insn 757: point = 218, n_alt = 0
   Insn 756: point = 220, n_alt = 3
  BB 94
   Insn 754: point = 222, n_alt = -1
   Insn 753: point = 222, n_alt = 0
   Insn 752: point = 223, n_alt = 0
   Insn 751: point = 225, n_alt = 3
  BB 93
   Insn 749: point = 227, n_alt = -1
   Insn 748: point = 227, n_alt = 0
   Insn 747: point = 228, n_alt = 0
   Insn 746: point = 230, n_alt = 3
  BB 92
   Insn 744: point = 232, n_alt = -1
   Insn 743: point = 232, n_alt = 0
   Insn 742: point = 233, n_alt = 0
   Insn 741: point = 235, n_alt = 3
  BB 173
   Insn 1451: point = 237, n_alt = -1
  BB 87
   Insn 692: point = 238, n_alt = -1
   Insn 691: point = 238, n_alt = 0
   Insn 690: point = 239, n_alt = 0
   Insn 689: point = 241, n_alt = 0
   Insn 688: point = 242, n_alt = 0
  BB 91
   Insn 1405: point = 243, n_alt = -1
   Insn 735: point = 243, n_alt = 1
  BB 174
   Insn 1454: point = 244, n_alt = -1
  BB 89
   Insn 700: point = 245, n_alt = -1
   Insn 699: point = 245, n_alt = 0
   Insn 698: point = 246, n_alt = 0
   Insn 697: point = 248, n_alt = 0
   Insn 696: point = 249, n_alt = 0
  BB 90
   Insn 1403: point = 250, n_alt = -1
   Insn 729: point = 250, n_alt = 1
   Insn 728: point = 250, n_alt = 1
   Insn 727: point = 251, n_alt = 4
   Insn 726: point = 252, n_alt = 3
   Insn 725: point = 254, n_alt = 0
   Insn 724: point = 256, n_alt = 0
   Insn 723: point = 258, n_alt = 0
   Insn 722: point = 259, n_alt = 1
   Insn 721: point = 261, n_alt = 0
   Insn 720: point = 263, n_alt = 0
   Insn 719: point = 264, n_alt = 8
   Insn 718: point = 265, n_alt = 3
   Insn 717: point = 266, n_alt = 7
   Insn 716: point = 268, n_alt = 4
   Insn 715: point = 269, n_alt = 0
   Insn 714: point = 271, n_alt = 0
   Insn 713: point = 273, n_alt = 0
   Insn 712: point = 274, n_alt = 3
   Insn 711: point = 276, n_alt = 2
   Insn 710: point = 278, n_alt = 0
   Insn 709: point = 280, n_alt = 0
   Insn 708: point = 281, n_alt = 3
   Insn 707: point = 283, n_alt = 0
   Insn 706: point = 285, n_alt = 0
   Insn 705: point = 287, n_alt = 0
   Insn 704: point = 288, n_alt = 1
   Insn 703: point = 290, n_alt = 0
   Insn 702: point = 292, n_alt = 0
  BB 88
   Insn 694: point = 294, n_alt = 1
  BB 86
   Insn 686: point = 295, n_alt = 1
  BB 181
   Insn 1479: point = 296, n_alt = -1
  BB 152
   Insn 1207: point = 296, n_alt = -1
   Insn 1206: point = 296, n_alt = 0
   Insn 1205: point = 297, n_alt = 0
   Insn 1204: point = 299, n_alt = 0
   Insn 1203: point = 300, n_alt = 0
  BB 156
   Insn 1427: point = 301, n_alt = -1
   Insn 1250: point = 301, n_alt = 1
  BB 182
   Insn 1482: point = 302, n_alt = -1
  BB 154
   Insn 1215: point = 303, n_alt = -1
   Insn 1214: point = 303, n_alt = 0
   Insn 1213: point = 304, n_alt = 0
   Insn 1212: point = 306, n_alt = 0
   Insn 1211: point = 307, n_alt = 0
  BB 155
   Insn 1425: point = 308, n_alt = -1
   Insn 1244: point = 308, n_alt = 1
   Insn 1243: point = 308, n_alt = 1
   Insn 1242: point = 309, n_alt = 4
   Insn 1241: point = 310, n_alt = 3
   Insn 1240: point = 312, n_alt = 0
   Insn 1239: point = 314, n_alt = 0
   Insn 1238: point = 316, n_alt = 0
   Insn 1237: point = 317, n_alt = 1
   Insn 1236: point = 319, n_alt = 0
   Insn 1235: point = 321, n_alt = 0
   Insn 1234: point = 322, n_alt = 8
   Insn 1233: point = 323, n_alt = 3
   Insn 1232: point = 324, n_alt = 7
   Insn 1231: point = 326, n_alt = 4
   Insn 1230: point = 327, n_alt = 0
   Insn 1229: point = 329, n_alt = 0
   Insn 1228: point = 331, n_alt = 0
   Insn 1227: point = 332, n_alt = 3
   Insn 1226: point = 334, n_alt = 2
   Insn 1225: point = 336, n_alt = 0
   Insn 1224: point = 338, n_alt = 0
   Insn 1223: point = 339, n_alt = 3
   Insn 1222: point = 341, n_alt = 0
   Insn 1221: point = 343, n_alt = 0
   Insn 1220: point = 345, n_alt = 0
   Insn 1219: point = 346, n_alt = 1
   Insn 1218: point = 348, n_alt = 0
   Insn 1217: point = 350, n_alt = 0
  BB 153
   Insn 1209: point = 352, n_alt = 1
  BB 151
   Insn 1201: point = 353, n_alt = 1
  BB 139
   Insn 1421: point = 354, n_alt = -1
  BB 126
   Insn 1411: point = 354, n_alt = -1
   Insn 1019: point = 354, n_alt = 0
   Insn 1018: point = 354, n_alt = 3
   Insn 1017: point = 354, n_alt = 4
   Insn 1016: point = 354, n_alt = -2
   Insn 1015: point = 355, n_alt = 3
   Insn 1014: point = 355, n_alt = -2
   Insn 1013: point = 356, n_alt = 3
   Insn 1012: point = 357, n_alt = 3
   Insn 1011: point = 358, n_alt = 0
   Insn 1010: point = 358, n_alt = 3
   Insn 1009: point = 358, n_alt = 4
   Insn 1008: point = 358, n_alt = -2
   Insn 1007: point = 359, n_alt = 3
   Insn 1006: point = 359, n_alt = -2
   Insn 1005: point = 360, n_alt = 3
   Insn 1004: point = 361, n_alt = 3
   Insn 1003: point = 362, n_alt = 0
   Insn 1002: point = 362, n_alt = 0
   Insn 1001: point = 362, n_alt = 3
   Insn 1000: point = 362, n_alt = 4
   Insn 999: point = 362, n_alt = 4
   Insn 998: point = 362, n_alt = 4
   Insn 997: point = 362, n_alt = 2
   Insn 996: point = 362, n_alt = 2
   Insn 995: point = 362, n_alt = 4
   Insn 994: point = 362, n_alt = 0
   Insn 1501: point = 363, n_alt = 4
   Insn 993: point = 364, n_alt = 0
   Insn 992: point = 364, n_alt = 0
   Insn 991: point = 364, n_alt = 0
   Insn 990: point = 364, n_alt = 0
   Insn 989: point = 364, n_alt = 0
  BB 179
   Insn 1471: point = 364, n_alt = -1
  BB 134
   Insn 1085: point = 364, n_alt = -1
   Insn 1084: point = 364, n_alt = 0
   Insn 1083: point = 365, n_alt = 0
   Insn 1082: point = 367, n_alt = 0
   Insn 1081: point = 368, n_alt = 0
  BB 138
   Insn 1419: point = 369, n_alt = -1
   Insn 1119: point = 369, n_alt = 1
  BB 180
   Insn 1474: point = 370, n_alt = -1
  BB 136
   Insn 1093: point = 371, n_alt = -1
   Insn 1092: point = 371, n_alt = 0
   Insn 1091: point = 372, n_alt = 0
   Insn 1090: point = 374, n_alt = 0
   Insn 1089: point = 375, n_alt = 0
  BB 137
   Insn 1417: point = 376, n_alt = -1
   Insn 1113: point = 376, n_alt = 1
   Insn 1112: point = 376, n_alt = 8
   Insn 1111: point = 377, n_alt = 3
   Insn 1110: point = 378, n_alt = 7
   Insn 1109: point = 380, n_alt = 4
   Insn 1108: point = 381, n_alt = 0
   Insn 1107: point = 383, n_alt = 0
   Insn 1106: point = 385, n_alt = 0
   Insn 1105: point = 386, n_alt = 3
   Insn 1104: point = 388, n_alt = 2
   Insn 1103: point = 390, n_alt = 0
   Insn 1102: point = 392, n_alt = 0
   Insn 1101: point = 393, n_alt = 3
   Insn 1100: point = 395, n_alt = 0
   Insn 1099: point = 397, n_alt = 0
   Insn 1098: point = 399, n_alt = 0
   Insn 1097: point = 400, n_alt = 1
   Insn 1096: point = 402, n_alt = 0
   Insn 1095: point = 404, n_alt = 0
  BB 135
   Insn 1087: point = 406, n_alt = 1
  BB 133
   Insn 1079: point = 407, n_alt = 1
  BB 177
   Insn 1465: point = 408, n_alt = -1
  BB 128
   Insn 1030: point = 409, n_alt = -1
   Insn 1029: point = 409, n_alt = 0
   Insn 1028: point = 410, n_alt = 0
   Insn 1027: point = 412, n_alt = 0
   Insn 1026: point = 413, n_alt = 0
  BB 132
   Insn 1415: point = 414, n_alt = -1
   Insn 1073: point = 414, n_alt = 1
  BB 178
   Insn 1468: point = 415, n_alt = -1
  BB 130
   Insn 1038: point = 416, n_alt = -1
   Insn 1037: point = 416, n_alt = 0
   Insn 1036: point = 417, n_alt = 0
   Insn 1035: point = 419, n_alt = 0
   Insn 1034: point = 420, n_alt = 0
  BB 131
   Insn 1413: point = 421, n_alt = -1
   Insn 1067: point = 421, n_alt = 1
   Insn 1066: point = 421, n_alt = 1
   Insn 1065: point = 422, n_alt = 4
   Insn 1064: point = 423, n_alt = 3
   Insn 1063: point = 425, n_alt = 0
   Insn 1062: point = 427, n_alt = 0
   Insn 1061: point = 429, n_alt = 0
   Insn 1060: point = 430, n_alt = 1
   Insn 1059: point = 432, n_alt = 0
   Insn 1058: point = 434, n_alt = 0
   Insn 1057: point = 435, n_alt = 8
   Insn 1056: point = 436, n_alt = 3
   Insn 1055: point = 437, n_alt = 7
   Insn 1054: point = 439, n_alt = 4
   Insn 1053: point = 440, n_alt = 0
   Insn 1052: point = 442, n_alt = 0
   Insn 1051: point = 444, n_alt = 0
   Insn 1050: point = 445, n_alt = 3
   Insn 1049: point = 447, n_alt = 2
   Insn 1048: point = 449, n_alt = 0
   Insn 1047: point = 451, n_alt = 0
   Insn 1046: point = 452, n_alt = 3
   Insn 1045: point = 454, n_alt = 0
   Insn 1044: point = 456, n_alt = 0
   Insn 1043: point = 458, n_alt = 0
   Insn 1042: point = 459, n_alt = 1
   Insn 1041: point = 461, n_alt = 0
   Insn 1040: point = 463, n_alt = 0
  BB 129
   Insn 1032: point = 465, n_alt = 1
  BB 127
   Insn 1024: point = 466, n_alt = 1
  BB 125
   Insn 986: point = 467, n_alt = -1
   Insn 985: point = 467, n_alt = 0
   Insn 984: point = 468, n_alt = 0
  BB 124
   Insn 982: point = 470, n_alt = -1
   Insn 981: point = 470, n_alt = 0
   Insn 980: point = 471, n_alt = 0
  BB 123
   Insn 978: point = 473, n_alt = -1
   Insn 977: point = 473, n_alt = 0
   Insn 976: point = 474, n_alt = 0
  BB 122
   Insn 974: point = 476, n_alt = -1
   Insn 973: point = 476, n_alt = 0
   Insn 972: point = 477, n_alt = 0
  BB 121
   Insn 970: point = 479, n_alt = -1
   Insn 969: point = 479, n_alt = 0
   Insn 968: point = 480, n_alt = 0
  BB 120
   Insn 966: point = 482, n_alt = -1
   Insn 965: point = 482, n_alt = 0
   Insn 964: point = 483, n_alt = 0
  BB 119
   Insn 962: point = 485, n_alt = -1
   Insn 961: point = 485, n_alt = 0
   Insn 960: point = 486, n_alt = 0
  BB 118
   Insn 958: point = 488, n_alt = -1
   Insn 957: point = 488, n_alt = 0
   Insn 956: point = 489, n_alt = 0
  BB 117
   Insn 953: point = 491, n_alt = 0
   Insn 952: point = 491, n_alt = 3
   Insn 951: point = 491, n_alt = 2
   Insn 950: point = 491, n_alt = 2
   Insn 949: point = 491, n_alt = 4
   Insn 948: point = 491, n_alt = -2
   Insn 947: point = 492, n_alt = 3
  BB 116
   Insn 945: point = 494, n_alt = -1
   Insn 944: point = 494, n_alt = 0
   Insn 943: point = 495, n_alt = 0
   Insn 942: point = 496, n_alt = 1
   Insn 941: point = 497, n_alt = 0
   Insn 940: point = 499, n_alt = 0
   Insn 939: point = 501, n_alt = 0
   Insn 938: point = 503, n_alt = 0
   Insn 937: point = 505, n_alt = 0
   Insn 936: point = 507, n_alt = 0
   Insn 935: point = 509, n_alt = 0
   Insn 934: point = 511, n_alt = 0
   Insn 933: point = 513, n_alt = 0
   Insn 932: point = 515, n_alt = 3
  BB 115
   Insn 930: point = 517, n_alt = -1
   Insn 929: point = 517, n_alt = 0
   Insn 928: point = 518, n_alt = 0
   Insn 927: point = 520, n_alt = 3
  BB 114
   Insn 924: point = 522, n_alt = 0
   Insn 923: point = 522, n_alt = 3
   Insn 922: point = 522, n_alt = 2
   Insn 921: point = 522, n_alt = 2
   Insn 920: point = 522, n_alt = 4
   Insn 919: point = 522, n_alt = -2
   Insn 918: point = 523, n_alt = 3
  BB 113
   Insn 916: point = 525, n_alt = -1
   Insn 915: point = 525, n_alt = 0
   Insn 914: point = 526, n_alt = 0
   Insn 913: point = 527, n_alt = 1
   Insn 912: point = 528, n_alt = 0
   Insn 911: point = 530, n_alt = 0
   Insn 910: point = 532, n_alt = 0
   Insn 909: point = 534, n_alt = 0
   Insn 908: point = 536, n_alt = 0
   Insn 907: point = 538, n_alt = 0
   Insn 906: point = 540, n_alt = 0
   Insn 905: point = 542, n_alt = 0
   Insn 904: point = 544, n_alt = 0
   Insn 903: point = 546, n_alt = 3
   Insn 902: point = 547, n_alt = 0
   Insn 901: point = 547, n_alt = 3
   Insn 900: point = 547, n_alt = -2
   Insn 899: point = 548, n_alt = 4
   Insn 898: point = 548, n_alt = 2
   Insn 897: point = 548, n_alt = 2
   Insn 896: point = 548, n_alt = 3
   Insn 895: point = 549, n_alt = 0
   Insn 894: point = 549, n_alt = 3
   Insn 893: point = 549, n_alt = -2
   Insn 892: point = 550, n_alt = 4
   Insn 891: point = 550, n_alt = 2
   Insn 890: point = 550, n_alt = 2
   Insn 889: point = 550, n_alt = 3
  BB 150
   Insn 1423: point = 552, n_alt = -1
   Insn 1196: point = 552, n_alt = 0
   Insn 1195: point = 552, n_alt = 3
   Insn 1194: point = 552, n_alt = 4
   Insn 1193: point = 552, n_alt = -2
   Insn 1192: point = 553, n_alt = 3
   Insn 1191: point = 553, n_alt = -2
   Insn 1190: point = 554, n_alt = 3
   Insn 1189: point = 555, n_alt = 3
  BB 149
   Insn 1186: point = 556, n_alt = -1
   Insn 1185: point = 556, n_alt = 0
   Insn 1184: point = 557, n_alt = 0
  BB 148
   Insn 1182: point = 559, n_alt = -1
   Insn 1181: point = 559, n_alt = 0
   Insn 1180: point = 560, n_alt = 0
  BB 147
   Insn 1178: point = 562, n_alt = -1
   Insn 1177: point = 562, n_alt = 0
   Insn 1176: point = 563, n_alt = 0
  BB 146
   Insn 1174: point = 565, n_alt = -1
   Insn 1173: point = 565, n_alt = 0
   Insn 1172: point = 566, n_alt = 0
  BB 145
   Insn 1170: point = 568, n_alt = -1
   Insn 1169: point = 568, n_alt = 0
   Insn 1168: point = 569, n_alt = 0
  BB 144
   Insn 1166: point = 571, n_alt = -1
   Insn 1165: point = 571, n_alt = 0
   Insn 1164: point = 572, n_alt = 0
  BB 143
   Insn 1162: point = 574, n_alt = -1
   Insn 1161: point = 574, n_alt = 0
   Insn 1160: point = 575, n_alt = 0
  BB 142
   Insn 1158: point = 577, n_alt = -1
   Insn 1157: point = 577, n_alt = 0
   Insn 1156: point = 578, n_alt = 0
  BB 141
   Insn 1153: point = 580, n_alt = 0
   Insn 1152: point = 580, n_alt = 3
   Insn 1151: point = 580, n_alt = 2
   Insn 1150: point = 580, n_alt = 2
   Insn 1149: point = 580, n_alt = 4
   Insn 1148: point = 580, n_alt = -2
   Insn 1147: point = 581, n_alt = 3
  BB 140
   Insn 1145: point = 583, n_alt = -1
   Insn 1144: point = 583, n_alt = 0
   Insn 1143: point = 584, n_alt = 0
   Insn 1142: point = 585, n_alt = 1
   Insn 1141: point = 586, n_alt = 0
   Insn 1140: point = 588, n_alt = 0
   Insn 1139: point = 590, n_alt = 0
   Insn 1138: point = 592, n_alt = 0
   Insn 1137: point = 594, n_alt = 0
   Insn 1136: point = 596, n_alt = 3
   Insn 1135: point = 597, n_alt = 0
   Insn 1134: point = 597, n_alt = 3
   Insn 1133: point = 597, n_alt = -2
   Insn 1132: point = 598, n_alt = 4
   Insn 1131: point = 598, n_alt = 2
   Insn 1130: point = 598, n_alt = 2
   Insn 1129: point = 598, n_alt = 3
  BB 112
   Insn 887: point = 600, n_alt = -1
   Insn 886: point = 600, n_alt = 0
   Insn 885: point = 601, n_alt = 0
   Insn 884: point = 603, n_alt = 3
  BB 111
   Insn 882: point = 605, n_alt = -1
   Insn 881: point = 605, n_alt = 0
   Insn 880: point = 606, n_alt = 0
   Insn 879: point = 608, n_alt = 3
  BB 172
   Insn 1455: point = 610, n_alt = -1
   Insn 1448: point = 610, n_alt = -1
  BB 85
   Insn 1401: point = 610, n_alt = -1
   Insn 679: point = 610, n_alt = 0
   Insn 678: point = 610, n_alt = 3
   Insn 677: point = 610, n_alt = -2
   Insn 676: point = 611, n_alt = -2
   Insn 675: point = 612, n_alt = 3
   Insn 674: point = 612, n_alt = -2
   Insn 673: point = 613, n_alt = 2
   Insn 672: point = 613, n_alt = 2
   Insn 671: point = 613, n_alt = 3
   Insn 670: point = 614, n_alt = 3
   Insn 669: point = 615, n_alt = 3
  BB 84
   Insn 666: point = 616, n_alt = -1
   Insn 665: point = 616, n_alt = 0
   Insn 664: point = 617, n_alt = 0
   Insn 663: point = 619, n_alt = 3
  BB 83
   Insn 661: point = 620, n_alt = -1
   Insn 660: point = 620, n_alt = 0
   Insn 659: point = 621, n_alt = 0
   Insn 658: point = 623, n_alt = 3
  BB 82
   Insn 656: point = 624, n_alt = -1
   Insn 655: point = 624, n_alt = 0
   Insn 654: point = 625, n_alt = 0
   Insn 653: point = 627, n_alt = 3
  BB 81
   Insn 650: point = 628, n_alt = 0
   Insn 649: point = 628, n_alt = 3
   Insn 648: point = 628, n_alt = 4
   Insn 647: point = 628, n_alt = -2
   Insn 646: point = 629, n_alt = 3
   Insn 645: point = 629, n_alt = -2
   Insn 644: point = 630, n_alt = 3
   Insn 643: point = 631, n_alt = 3
   Insn 642: point = 632, n_alt = 0
   Insn 641: point = 632, n_alt = 3
   Insn 640: point = 632, n_alt = 4
   Insn 639: point = 632, n_alt = -2
   Insn 638: point = 633, n_alt = 3
   Insn 637: point = 633, n_alt = -2
   Insn 636: point = 634, n_alt = 3
   Insn 635: point = 635, n_alt = 3
   Insn 634: point = 636, n_alt = 0
   Insn 633: point = 636, n_alt = 0
   Insn 632: point = 636, n_alt = 3
   Insn 631: point = 636, n_alt = 4
   Insn 630: point = 636, n_alt = 4
   Insn 629: point = 636, n_alt = 4
   Insn 628: point = 636, n_alt = 2
   Insn 627: point = 636, n_alt = 2
   Insn 626: point = 636, n_alt = 4
   Insn 625: point = 636, n_alt = 0
   Insn 1500: point = 637, n_alt = 4
   Insn 624: point = 638, n_alt = 0
   Insn 623: point = 638, n_alt = 0
   Insn 622: point = 638, n_alt = 0
   Insn 621: point = 638, n_alt = 0
   Insn 620: point = 638, n_alt = 0
  BB 80
   Insn 617: point = 638, n_alt = 0
   Insn 616: point = 638, n_alt = 3
   Insn 615: point = 638, n_alt = 2
   Insn 614: point = 638, n_alt = 2
   Insn 613: point = 638, n_alt = 4
   Insn 612: point = 638, n_alt = -2
   Insn 611: point = 639, n_alt = 3
  BB 79
   Insn 609: point = 640, n_alt = -1
   Insn 608: point = 640, n_alt = 0
   Insn 607: point = 641, n_alt = 0
   Insn 606: point = 642, n_alt = 1
   Insn 605: point = 643, n_alt = 0
   Insn 604: point = 645, n_alt = 0
   Insn 603: point = 647, n_alt = 0
   Insn 602: point = 649, n_alt = 0
   Insn 601: point = 651, n_alt = 0
   Insn 600: point = 653, n_alt = 0
   Insn 599: point = 655, n_alt = 0
   Insn 598: point = 657, n_alt = 0
   Insn 597: point = 659, n_alt = 0
   Insn 596: point = 661, n_alt = 3
  BB 78
   Insn 594: point = 662, n_alt = -1
   Insn 593: point = 662, n_alt = 0
   Insn 592: point = 663, n_alt = 0
   Insn 591: point = 665, n_alt = 3
   Insn 590: point = 666, n_alt = 0
   Insn 589: point = 666, n_alt = 3
   Insn 588: point = 666, n_alt = -2
   Insn 587: point = 667, n_alt = 4
   Insn 586: point = 667, n_alt = 2
   Insn 585: point = 667, n_alt = 2
   Insn 584: point = 667, n_alt = 2
   Insn 583: point = 667, n_alt = 3
  BB 77
   Insn 580: point = 668, n_alt = -1
   Insn 579: point = 668, n_alt = 0
   Insn 578: point = 669, n_alt = 0
   Insn 577: point = 671, n_alt = 3
  BB 76
   Insn 575: point = 672, n_alt = -1
   Insn 574: point = 672, n_alt = 0
   Insn 573: point = 673, n_alt = 0
   Insn 572: point = 675, n_alt = 3
  BB 75
   Insn 570: point = 676, n_alt = -1
   Insn 569: point = 676, n_alt = 0
   Insn 568: point = 677, n_alt = 0
   Insn 567: point = 679, n_alt = 3
  BB 74
   Insn 565: point = 680, n_alt = -1
   Insn 564: point = 680, n_alt = 0
   Insn 563: point = 681, n_alt = 0
   Insn 562: point = 683, n_alt = 3
  BB 73
   Insn 560: point = 684, n_alt = -1
   Insn 559: point = 684, n_alt = 0
   Insn 558: point = 685, n_alt = 0
   Insn 557: point = 687, n_alt = 3
  BB 72
   Insn 555: point = 688, n_alt = -1
   Insn 554: point = 688, n_alt = 0
   Insn 553: point = 689, n_alt = 0
   Insn 552: point = 691, n_alt = 3
  BB 71
   Insn 550: point = 692, n_alt = -1
   Insn 549: point = 692, n_alt = 0
   Insn 548: point = 693, n_alt = 0
   Insn 547: point = 695, n_alt = 3
  BB 70
   Insn 545: point = 696, n_alt = -1
   Insn 544: point = 696, n_alt = 0
   Insn 543: point = 697, n_alt = 0
   Insn 542: point = 699, n_alt = 3
  BB 69
   Insn 540: point = 700, n_alt = -1
   Insn 539: point = 700, n_alt = 0
   Insn 538: point = 701, n_alt = 0
   Insn 537: point = 703, n_alt = 3
  BB 68
   Insn 535: point = 704, n_alt = -1
   Insn 534: point = 704, n_alt = 0
   Insn 533: point = 705, n_alt = 0
   Insn 532: point = 707, n_alt = 3
  BB 66
   Insn 1399: point = 708, n_alt = -1
   Insn 517: point = 708, n_alt = 0
   Insn 516: point = 708, n_alt = 3
   Insn 515: point = 708, n_alt = 4
   Insn 514: point = 708, n_alt = -2
   Insn 513: point = 709, n_alt = 3
   Insn 512: point = 709, n_alt = -2
   Insn 511: point = 710, n_alt = 3
   Insn 510: point = 711, n_alt = 3
  BB 67
   Insn 529: point = 712, n_alt = 0
   Insn 528: point = 712, n_alt = 3
   Insn 527: point = 712, n_alt = 4
   Insn 526: point = 712, n_alt = -2
   Insn 525: point = 713, n_alt = 3
   Insn 524: point = 713, n_alt = -2
   Insn 523: point = 714, n_alt = 3
   Insn 522: point = 715, n_alt = 3
  BB 65
   Insn 508: point = 716, n_alt = -1
   Insn 507: point = 716, n_alt = 0
   Insn 506: point = 717, n_alt = 0
   Insn 505: point = 719, n_alt = 3
  BB 64
   Insn 502: point = 720, n_alt = -1
   Insn 501: point = 720, n_alt = 0
   Insn 500: point = 721, n_alt = 0
  BB 63
   Insn 498: point = 723, n_alt = -1
   Insn 497: point = 723, n_alt = 0
   Insn 496: point = 724, n_alt = 0
  BB 62
   Insn 494: point = 726, n_alt = -1
   Insn 493: point = 726, n_alt = 0
   Insn 492: point = 727, n_alt = 0
  BB 61
   Insn 490: point = 729, n_alt = -1
   Insn 489: point = 729, n_alt = 0
   Insn 488: point = 730, n_alt = 0
  BB 60
   Insn 486: point = 732, n_alt = -1
   Insn 485: point = 732, n_alt = 0
   Insn 484: point = 733, n_alt = 0
  BB 59
   Insn 482: point = 735, n_alt = -1
   Insn 481: point = 735, n_alt = 0
   Insn 480: point = 736, n_alt = 0
  BB 58
   Insn 478: point = 738, n_alt = -1
   Insn 477: point = 738, n_alt = 0
   Insn 476: point = 739, n_alt = 0
  BB 57
   Insn 474: point = 741, n_alt = -1
   Insn 473: point = 741, n_alt = 0
   Insn 472: point = 742, n_alt = 0
  BB 56
   Insn 469: point = 744, n_alt = 0
   Insn 468: point = 744, n_alt = 3
   Insn 467: point = 744, n_alt = 2
   Insn 466: point = 744, n_alt = 2
   Insn 465: point = 744, n_alt = 4
   Insn 464: point = 744, n_alt = -2
   Insn 463: point = 745, n_alt = 3
  BB 55
   Insn 461: point = 747, n_alt = -1
   Insn 460: point = 747, n_alt = 0
   Insn 459: point = 748, n_alt = 0
   Insn 458: point = 749, n_alt = 1
   Insn 457: point = 750, n_alt = 0
   Insn 456: point = 752, n_alt = 0
   Insn 455: point = 754, n_alt = 0
   Insn 454: point = 756, n_alt = 0
   Insn 453: point = 758, n_alt = 0
   Insn 452: point = 760, n_alt = 0
   Insn 451: point = 762, n_alt = 0
   Insn 450: point = 764, n_alt = 0
   Insn 449: point = 766, n_alt = 0
   Insn 448: point = 768, n_alt = 3
   Insn 447: point = 769, n_alt = 0
   Insn 446: point = 769, n_alt = 3
   Insn 445: point = 769, n_alt = -2
   Insn 444: point = 770, n_alt = 4
   Insn 443: point = 770, n_alt = 2
   Insn 442: point = 770, n_alt = 2
   Insn 441: point = 770, n_alt = 2
   Insn 440: point = 770, n_alt = 3
  BB 54
   Insn 438: point = 772, n_alt = -1
   Insn 437: point = 772, n_alt = 0
   Insn 436: point = 773, n_alt = 0
   Insn 435: point = 775, n_alt = 0
   Insn 434: point = 777, n_alt = 0
   Insn 433: point = 779, n_alt = 0
   Insn 432: point = 781, n_alt = 0
   Insn 431: point = 783, n_alt = 3
  BB 48
   Insn 1397: point = 785, n_alt = -1
   Insn 384: point = 785, n_alt = 0
   Insn 383: point = 785, n_alt = 3
   Insn 382: point = 785, n_alt = -2
   Insn 381: point = 786, n_alt = 4
   Insn 380: point = 786, n_alt = -2
   Insn 379: point = 787, n_alt = 3
   Insn 378: point = 788, n_alt = 3
  BB 47
   Insn 376: point = 790, n_alt = -1
   Insn 375: point = 790, n_alt = 0
   Insn 374: point = 791, n_alt = 0
   Insn 373: point = 792, n_alt = 1
   Insn 372: point = 793, n_alt = 0
   Insn 371: point = 795, n_alt = 0
   Insn 370: point = 797, n_alt = 0
   Insn 369: point = 799, n_alt = 0
   Insn 368: point = 801, n_alt = 0
   Insn 367: point = 803, n_alt = 0
   Insn 366: point = 805, n_alt = 0
   Insn 365: point = 807, n_alt = 0
   Insn 364: point = 809, n_alt = 0
   Insn 363: point = 811, n_alt = 3
  BB 46
   Insn 361: point = 813, n_alt = -1
   Insn 360: point = 813, n_alt = 0
   Insn 359: point = 814, n_alt = 0
   Insn 358: point = 816, n_alt = 3
  BB 45
   Insn 355: point = 818, n_alt = 0
   Insn 354: point = 818, n_alt = 3
   Insn 353: point = 818, n_alt = -2
   Insn 352: point = 819, n_alt = 3
  BB 44
   Insn 349: point = 821, n_alt = -1
   Insn 348: point = 821, n_alt = 0
   Insn 347: point = 822, n_alt = 0
   Insn 346: point = 824, n_alt = 3
  BB 43
   Insn 344: point = 826, n_alt = -1
   Insn 343: point = 826, n_alt = 0
   Insn 342: point = 827, n_alt = 0
   Insn 341: point = 829, n_alt = 3
  BB 42
   Insn 339: point = 831, n_alt = -1
   Insn 338: point = 831, n_alt = 0
   Insn 337: point = 832, n_alt = 0
  BB 41
   Insn 334: point = 834, n_alt = 0
   Insn 333: point = 834, n_alt = 3
   Insn 332: point = 834, n_alt = -2
   Insn 331: point = 835, n_alt = 4
   Insn 330: point = 835, n_alt = -2
   Insn 329: point = 836, n_alt = 3
   Insn 328: point = 837, n_alt = 3
  BB 40
   Insn 326: point = 839, n_alt = -1
   Insn 325: point = 839, n_alt = 0
   Insn 324: point = 840, n_alt = 0
  BB 53
   Insn 428: point = 842, n_alt = 0
   Insn 427: point = 842, n_alt = 3
   Insn 426: point = 842, n_alt = -2
   Insn 425: point = 843, n_alt = 4
   Insn 424: point = 843, n_alt = -2
   Insn 423: point = 844, n_alt = 3
   Insn 422: point = 845, n_alt = 3
  BB 52
   Insn 420: point = 847, n_alt = -1
   Insn 419: point = 847, n_alt = 0
   Insn 418: point = 848, n_alt = 0
   Insn 417: point = 849, n_alt = 1
   Insn 416: point = 850, n_alt = 0
   Insn 415: point = 852, n_alt = 0
   Insn 414: point = 854, n_alt = 0
   Insn 413: point = 856, n_alt = 0
   Insn 412: point = 858, n_alt = 0
   Insn 411: point = 860, n_alt = 0
   Insn 410: point = 862, n_alt = 0
   Insn 409: point = 864, n_alt = 0
   Insn 408: point = 866, n_alt = 0
   Insn 407: point = 868, n_alt = 3
  BB 51
   Insn 405: point = 870, n_alt = -1
   Insn 404: point = 870, n_alt = 0
   Insn 403: point = 871, n_alt = 0
   Insn 402: point = 873, n_alt = 3
  BB 50
   Insn 399: point = 875, n_alt = 0
   Insn 398: point = 875, n_alt = 3
   Insn 397: point = 875, n_alt = -2
   Insn 396: point = 876, n_alt = 4
   Insn 395: point = 876, n_alt = -2
   Insn 394: point = 877, n_alt = 3
   Insn 393: point = 878, n_alt = 3
  BB 49
   Insn 391: point = 880, n_alt = -1
   Insn 390: point = 880, n_alt = 0
   Insn 389: point = 881, n_alt = 0
  BB 39
   Insn 322: point = 883, n_alt = -1
   Insn 321: point = 883, n_alt = 0
   Insn 320: point = 884, n_alt = 0
   Insn 319: point = 886, n_alt = 0
   Insn 318: point = 888, n_alt = 0
   Insn 317: point = 890, n_alt = 0
   Insn 316: point = 892, n_alt = 0
   Insn 315: point = 894, n_alt = 3
   Insn 314: point = 895, n_alt = 1
   Insn 313: point = 896, n_alt = 0
   Insn 312: point = 898, n_alt = 0
   Insn 311: point = 900, n_alt = 0
   Insn 310: point = 902, n_alt = 0
   Insn 309: point = 904, n_alt = 0
   Insn 308: point = 906, n_alt = 0
   Insn 307: point = 908, n_alt = 0
   Insn 306: point = 910, n_alt = 0
   Insn 305: point = 912, n_alt = 0
   Insn 304: point = 914, n_alt = 3
  BB 169
   Insn 1439: point = 916, n_alt = -1
  BB 38
   Insn 1395: point = 916, n_alt = -1
  BB 170
   Insn 1442: point = 916, n_alt = -1
  BB 33
   Insn 258: point = 916, n_alt = -1
   Insn 257: point = 916, n_alt = 0
   Insn 256: point = 917, n_alt = 0
   Insn 255: point = 919, n_alt = 0
   Insn 254: point = 920, n_alt = 0
  BB 37
   Insn 1393: point = 921, n_alt = -1
   Insn 292: point = 921, n_alt = 1
  BB 171
   Insn 1445: point = 922, n_alt = -1
  BB 35
   Insn 266: point = 923, n_alt = -1
   Insn 265: point = 923, n_alt = 0
   Insn 264: point = 924, n_alt = 0
   Insn 263: point = 926, n_alt = 0
   Insn 262: point = 927, n_alt = 0
  BB 36
   Insn 1391: point = 928, n_alt = -1
   Insn 286: point = 928, n_alt = 1
   Insn 285: point = 928, n_alt = 8
   Insn 284: point = 929, n_alt = 3
   Insn 283: point = 930, n_alt = 7
   Insn 282: point = 932, n_alt = 3
   Insn 281: point = 933, n_alt = 0
   Insn 280: point = 935, n_alt = 0
   Insn 279: point = 937, n_alt = 0
   Insn 278: point = 938, n_alt = 3
   Insn 277: point = 940, n_alt = 2
   Insn 276: point = 942, n_alt = 0
   Insn 275: point = 944, n_alt = 0
   Insn 274: point = 945, n_alt = 3
   Insn 273: point = 947, n_alt = 0
   Insn 272: point = 949, n_alt = 0
   Insn 271: point = 951, n_alt = 0
   Insn 270: point = 952, n_alt = 0
   Insn 269: point = 954, n_alt = 0
   Insn 268: point = 956, n_alt = 0
  BB 34
   Insn 260: point = 958, n_alt = 1
  BB 32
   Insn 252: point = 959, n_alt = 1
   Insn 251: point = 959, n_alt = 0
   Insn 250: point = 959, n_alt = 3
   Insn 249: point = 959, n_alt = -2
   Insn 248: point = 960, n_alt = 2
   Insn 247: point = 960, n_alt = 2
   Insn 246: point = 960, n_alt = 3
  BB 31
   Insn 244: point = 962, n_alt = -1
   Insn 243: point = 962, n_alt = 0
   Insn 242: point = 963, n_alt = 0
   Insn 241: point = 965, n_alt = 3
  BB 167
   Insn 1431: point = 967, n_alt = -1
  BB 26
   Insn 192: point = 968, n_alt = -1
   Insn 191: point = 968, n_alt = 0
   Insn 190: point = 969, n_alt = 0
   Insn 189: point = 971, n_alt = 0
   Insn 188: point = 972, n_alt = 0
  BB 30
   Insn 1389: point = 973, n_alt = -1
   Insn 235: point = 973, n_alt = 1
  BB 168
   Insn 1434: point = 974, n_alt = -1
  BB 28
   Insn 200: point = 975, n_alt = -1
   Insn 199: point = 975, n_alt = 0
   Insn 198: point = 976, n_alt = 0
   Insn 197: point = 978, n_alt = 0
   Insn 196: point = 979, n_alt = 0
  BB 29
   Insn 1387: point = 980, n_alt = -1
   Insn 229: point = 980, n_alt = 1
   Insn 228: point = 980, n_alt = 1
   Insn 227: point = 981, n_alt = 4
   Insn 226: point = 982, n_alt = 3
   Insn 225: point = 984, n_alt = 0
   Insn 224: point = 986, n_alt = 0
   Insn 223: point = 988, n_alt = 0
   Insn 222: point = 989, n_alt = 1
   Insn 221: point = 991, n_alt = 0
   Insn 220: point = 993, n_alt = 0
   Insn 219: point = 994, n_alt = 8
   Insn 218: point = 995, n_alt = 3
   Insn 217: point = 996, n_alt = 7
   Insn 216: point = 998, n_alt = 3
   Insn 215: point = 999, n_alt = 0
   Insn 214: point = 1001, n_alt = 0
   Insn 213: point = 1003, n_alt = 0
   Insn 212: point = 1004, n_alt = 3
   Insn 211: point = 1006, n_alt = 2
   Insn 210: point = 1008, n_alt = 0
   Insn 209: point = 1010, n_alt = 0
   Insn 208: point = 1011, n_alt = 3
   Insn 207: point = 1013, n_alt = 0
   Insn 206: point = 1015, n_alt = 0
   Insn 205: point = 1017, n_alt = 0
   Insn 204: point = 1018, n_alt = 0
   Insn 203: point = 1020, n_alt = 0
   Insn 202: point = 1022, n_alt = 0
  BB 27
   Insn 194: point = 1024, n_alt = 1
  BB 25
   Insn 186: point = 1025, n_alt = 1
   Insn 185: point = 1025, n_alt = 0
   Insn 184: point = 1025, n_alt = 3
   Insn 183: point = 1025, n_alt = -2
   Insn 182: point = 1026, n_alt = 2
   Insn 181: point = 1026, n_alt = 2
   Insn 180: point = 1026, n_alt = 3
  BB 24
   Insn 177: point = 1028, n_alt = -1
   Insn 176: point = 1028, n_alt = 0
   Insn 175: point = 1029, n_alt = 0
  BB 23
   Insn 173: point = 1031, n_alt = -1
   Insn 172: point = 1031, n_alt = 0
   Insn 171: point = 1032, n_alt = 0
  BB 22
   Insn 169: point = 1034, n_alt = -1
   Insn 168: point = 1034, n_alt = 0
   Insn 167: point = 1035, n_alt = 0
  BB 21
   Insn 165: point = 1037, n_alt = -1
   Insn 164: point = 1037, n_alt = 0
   Insn 163: point = 1038, n_alt = 0
  BB 20
   Insn 161: point = 1040, n_alt = -1
   Insn 160: point = 1040, n_alt = 0
   Insn 159: point = 1041, n_alt = 0
  BB 19
   Insn 157: point = 1043, n_alt = -1
   Insn 156: point = 1043, n_alt = 0
   Insn 155: point = 1044, n_alt = 0
  BB 18
   Insn 153: point = 1046, n_alt = -1
   Insn 152: point = 1046, n_alt = 0
   Insn 151: point = 1047, n_alt = 0
  BB 17
   Insn 149: point = 1049, n_alt = -1
   Insn 148: point = 1049, n_alt = 0
   Insn 147: point = 1050, n_alt = 0
  BB 16
   Insn 145: point = 1052, n_alt = -1
   Insn 144: point = 1052, n_alt = 0
   Insn 143: point = 1053, n_alt = 0
  BB 15
   Insn 141: point = 1055, n_alt = -1
   Insn 140: point = 1055, n_alt = 0
   Insn 139: point = 1056, n_alt = 0
  BB 10
   Insn 114: point = 1058, n_alt = -1
   Insn 113: point = 1058, n_alt = 0
  BB 14
   Insn 1385: point = 1059, n_alt = -1
   Insn 133: point = 1059, n_alt = 0
  BB 12
   Insn 121: point = 1060, n_alt = -1
   Insn 120: point = 1060, n_alt = 0
  BB 13
   Insn 1383: point = 1061, n_alt = -1
   Insn 127: point = 1061, n_alt = 0
   Insn 126: point = 1061, n_alt = 8
   Insn 125: point = 1062, n_alt = 7
   Insn 124: point = 1063, n_alt = 3
   Insn 123: point = 1064, n_alt = 3
  BB 11
   Insn 118: point = 1066, n_alt = 2
   Insn 117: point = 1067, n_alt = 3
   Insn 1499: point = 1069, n_alt = -2
	Hard reg 0 is preferable by r652 with profit 1000
   Insn 116: point = 1071, n_alt = 2
   Insn 1498: point = 1071, n_alt = -2
  BB 9
   Insn 111: point = 1073, n_alt = 2
   Insn 110: point = 1074, n_alt = 1
   Insn 109: point = 1076, n_alt = 0
   Insn 108: point = 1078, n_alt = 3
   Insn 107: point = 1079, n_alt = 1
   Insn 106: point = 1081, n_alt = 0
   Insn 105: point = 1083, n_alt = 3
  BB 4
   Insn 80: point = 1085, n_alt = -1
   Insn 79: point = 1085, n_alt = 0
  BB 8
   Insn 1381: point = 1086, n_alt = -1
   Insn 99: point = 1086, n_alt = 0
  BB 6
   Insn 87: point = 1087, n_alt = -1
   Insn 86: point = 1087, n_alt = 0
  BB 7
   Insn 1379: point = 1088, n_alt = -1
   Insn 93: point = 1088, n_alt = 0
   Insn 92: point = 1088, n_alt = 8
   Insn 91: point = 1089, n_alt = 7
   Insn 90: point = 1090, n_alt = 3
   Insn 89: point = 1091, n_alt = 3
  BB 5
   Insn 84: point = 1093, n_alt = 2
   Insn 83: point = 1094, n_alt = 3
   Insn 1497: point = 1096, n_alt = -2
	Hard reg 0 is preferable by r651 with profit 1000
   Insn 82: point = 1098, n_alt = 2
   Insn 1496: point = 1098, n_alt = -2
  BB 3
   Insn 77: point = 1100, n_alt = 2
   Insn 76: point = 1101, n_alt = 1
   Insn 75: point = 1103, n_alt = 0
   Insn 74: point = 1105, n_alt = 3
   Insn 73: point = 1106, n_alt = 1
   Insn 72: point = 1108, n_alt = 0
   Insn 71: point = 1110, n_alt = 3
  BB 2
   Insn 69: point = 1112, n_alt = -1
   Insn 68: point = 1112, n_alt = 0
   Insn 67: point = 1113, n_alt = 0
   Insn 66: point = 1114, n_alt = 0
   Insn 65: point = 1114, n_alt = 3
   Insn 64: point = 1114, n_alt = -2
   Insn 63: point = 1115, n_alt = 3
   Insn 62: point = 1116, n_alt = 0
   Insn 61: point = 1116, n_alt = 3
   Insn 60: point = 1116, n_alt = -2
   Insn 59: point = 1117, n_alt = 3
   Insn 1495: point = 1118, n_alt = -2
	Hard reg 43 is preferable by r650 with profit 1000
   Insn 58: point = 1120, n_alt = 0
   Insn 1494: point = 1120, n_alt = -2
   Insn 54: point = 1121, n_alt = 2
   Insn 53: point = 1122, n_alt = 3
   Insn 52: point = 1123, n_alt = -2
   Insn 50: point = 1125, n_alt = 1
   Insn 48: point = 1127, n_alt = 0
   Insn 49: point = 1127, n_alt = 2
   Insn 1493: point = 1128, n_alt = -2
	Hard reg 0 is preferable by r649 with profit 1000
   Insn 47: point = 1130, n_alt = 2
   Insn 1492: point = 1130, n_alt = -2
   Insn 46: point = 1131, n_alt = 5
   Insn 45: point = 1132, n_alt = 0
   Insn 44: point = 1134, n_alt = 0
   Insn 43: point = 1136, n_alt = 3
   Insn 1491: point = 1137, n_alt = -2
	Hard reg 41 is preferable by r648 with profit 1000
   Insn 42: point = 1139, n_alt = 0
   Insn 1490: point = 1140, n_alt = -2
	Hard reg 41 is preferable by r648 with profit 1000
	Hard reg 1 is preferable by r648 with profit 1000
   Insn 40: point = 1142, n_alt = 0
   Insn 41: point = 1142, n_alt = 2
   Insn 39: point = 1143, n_alt = 3
   Insn 38: point = 1144, n_alt = 5
   Insn 37: point = 1145, n_alt = 0
   Insn 36: point = 1147, n_alt = 0
   Insn 35: point = 1149, n_alt = 3
   Insn 1489: point = 1150, n_alt = -2
	Hard reg 42 is preferable by r647 with profit 1000
   Insn 34: point = 1152, n_alt = 0
   Insn 1488: point = 1152, n_alt = -2
   Insn 30: point = 1153, n_alt = 2
   Insn 29: point = 1154, n_alt = 3
   Insn 28: point = 1155, n_alt = -2
   Insn 26: point = 1157, n_alt = 1
   Insn 24: point = 1159, n_alt = 0
   Insn 25: point = 1159, n_alt = 2
   Insn 1487: point = 1160, n_alt = -2
	Hard reg 0 is preferable by r646 with profit 1000
   Insn 23: point = 1162, n_alt = 2
   Insn 1486: point = 1162, n_alt = -2
   Insn 22: point = 1163, n_alt = 5
   Insn 21: point = 1164, n_alt = 0
   Insn 20: point = 1166, n_alt = 0
   Insn 19: point = 1168, n_alt = 3
   Insn 1485: point = 1169, n_alt = -2
	Hard reg 3 is preferable by r645 with profit 1000
   Insn 18: point = 1171, n_alt = 0
   Insn 1484: point = 1172, n_alt = -2
	Hard reg 3 is preferable by r645 with profit 1000
	Hard reg 1 is preferable by r645 with profit 1000
   Insn 16: point = 1174, n_alt = 0
   Insn 17: point = 1174, n_alt = 2
   Insn 15: point = 1175, n_alt = 3
   Insn 14: point = 1176, n_alt = 5
   Insn 13: point = 1177, n_alt = 0
   Insn 12: point = 1179, n_alt = 0
   Insn 11: point = 1181, n_alt = 3
   Insn 7: point = 1182, n_alt = 5
   Insn 6: point = 1182, n_alt = 5
   Insn 5: point = 1182, n_alt = 5
   Insn 4: point = 1182, n_alt = 5
   Insn 3: point = 1182, n_alt = 5
   Insn 2: point = 1182, n_alt = 5
 r87: [1178..1179]
 r88: [1165..1166]
 r89: [1154..1155]
 r90: [1153..1182]
 r92: [1146..1147]
 r93: [1133..1134]
 r94: [1122..1123]
 r95: [1121..1182]
 r97: [1112..1113]
 r98: [1107..1108]
 r99: [1102..1103]
 r100: [1095..1096]
 r101: [1088..1091]
 r102: [1080..1081]
 r103: [1075..1076]
 r104: [1068..1069]
 r105: [1061..1064]
 r106: [1055..1056]
 r107: [1052..1053]
 r108: [1049..1050]
 r109: [1046..1047]
 r110: [1043..1044]
 r111: [1040..1041]
 r112: [1037..1038]
 r113: [1034..1035]
 r114: [1031..1032]
 r115: [1028..1029]
 r116: [1019..1020]
 r117: [1014..1018]
 r118: [1014..1015]
 r119: [1012..1013]
 r120: [997..1011]
 r121: [1007..1008]
 r122: [1005..1006]
 r123: [1000..1004]
 r124: [1000..1001]
 r125: [994..999]
 r126: [994..996]
 r127: [990..991]
 r128: [985..989]
 r129: [985..986]
 r130: [983..984]
 r131: [980..982]
 r132: [962..963]
 r133: [953..954]
 r134: [948..952]
 r135: [948..949]
 r136: [946..947]
 r137: [931..945]
 r138: [941..942]
 r139: [939..940]
 r140: [934..938]
 r141: [934..935]
 r142: [928..933]
 r143: [928..930]
 r144: [911..912]
 r145: [909..910]
 r146: [907..908]
 r147: [903..904]
 r148: [901..902]
 r149: [899..900]
 r150: [895..896]
 r151: [891..892]
 r152: [889..890]
 r153: [887..888]
 r154: [883..884]
 r155: [839..840]
 r156: [831..832]
 r157: [826..827]
 r158: [821..822]
 r159: [813..814]
 r160: [808..809]
 r161: [806..807]
 r162: [804..805]
 r163: [800..801]
 r164: [798..799]
 r165: [796..797]
 r166: [792..793]
 r167: [790..791]
 r168: [880..881]
 r169: [870..871]
 r170: [865..866]
 r171: [863..864]
 r172: [861..862]
 r173: [857..858]
 r174: [855..856]
 r175: [853..854]
 r176: [849..850]
 r177: [847..848]
 r178: [780..781]
 r179: [778..779]
 r180: [776..777]
 r181: [772..773]
 r182: [765..766]
 r183: [763..764]
 r184: [761..762]
 r185: [757..758]
 r186: [755..756]
 r187: [753..754]
 r188: [749..750]
 r189: [747..748]
 r190: [741..742]
 r191: [738..739]
 r192: [735..736]
 r193: [732..733]
 r194: [729..730]
 r195: [726..727]
 r196: [723..724]
 r197: [720..721]
 r198: [716..717]
 r199: [704..705]
 r200: [700..701]
 r201: [696..697]
 r202: [692..693]
 r203: [688..689]
 r204: [684..685]
 r205: [680..681]
 r206: [676..677]
 r207: [672..673]
 r208: [668..669]
 r209: [662..663]
 r210: [658..659]
 r211: [656..657]
 r212: [654..655]
 r213: [650..651]
 r214: [648..649]
 r215: [646..647]
 r216: [642..643]
 r217: [640..641]
 r218: [624..625]
 r219: [620..621]
 r220: [616..617]
 r221: [289..290]
 r222: [284..288]
 r223: [284..285]
 r224: [282..283]
 r225: [267..281]
 r226: [277..278]
 r227: [275..276]
 r228: [270..274]
 r229: [270..271]
 r230: [264..269]
 r231: [264..266]
 r232: [260..261]
 r233: [255..259]
 r234: [255..256]
 r235: [253..254]
 r236: [250..252]
 r237: [232..233]
 r238: [227..228]
 r239: [222..223]
 r240: [217..218]
 r241: [212..213]
 r242: [207..208]
 r243: [202..203]
 r244: [197..198]
 r245: [192..193]
 r246: [187..188]
 r247: [180..181]
 r248: [175..176]
 r249: [173..174]
 r250: [171..172]
 r251: [167..168]
 r252: [165..166]
 r253: [163..164]
 r254: [159..160]
 r255: [157..158]
 r256: [147..148]
 r257: [142..146]
 r258: [142..143]
 r259: [140..141]
 r260: [125..139]
 r261: [135..136]
 r262: [133..134]
 r263: [128..132]
 r264: [128..129]
 r265: [122..127]
 r266: [122..124]
 r267: [605..606]
 r268: [600..601]
 r269: [543..544]
 r270: [541..542]
 r271: [539..540]
 r272: [535..536]
 r273: [533..534]
 r274: [531..532]
 r275: [527..528]
 r276: [525..526]
 r277: [517..518]
 r278: [512..513]
 r279: [510..511]
 r280: [508..509]
 r281: [504..505]
 r282: [502..503]
 r283: [500..501]
 r284: [496..497]
 r285: [494..495]
 r286: [488..489]
 r287: [485..486]
 r288: [482..483]
 r289: [479..480]
 r290: [476..477]
 r291: [473..474]
 r292: [470..471]
 r293: [467..468]
 r294: [460..461]
 r295: [455..459]
 r296: [455..456]
 r297: [453..454]
 r298: [438..452]
 r299: [448..449]
 r300: [446..447]
 r301: [441..445]
 r302: [441..442]
 r303: [435..440]
 r304: [435..437]
 r305: [431..432]
 r306: [426..430]
 r307: [426..427]
 r308: [424..425]
 r309: [421..423]
 r310: [401..402]
 r311: [396..400]
 r312: [396..397]
 r313: [394..395]
 r314: [379..393]
 r315: [389..390]
 r316: [387..388]
 r317: [382..386]
 r318: [382..383]
 r319: [376..381]
 r320: [376..378]
 r321: [593..594]
 r322: [591..592]
 r323: [589..590]
 r324: [585..586]
 r325: [583..584]
 r326: [577..578]
 r327: [574..575]
 r328: [571..572]
 r329: [568..569]
 r330: [565..566]
 r331: [562..563]
 r332: [559..560]
 r333: [556..557]
 r334: [347..348]
 r335: [342..346]
 r336: [342..343]
 r337: [340..341]
 r338: [325..339]
 r339: [335..336]
 r340: [333..334]
 r341: [328..332]
 r342: [328..329]
 r343: [322..327]
 r344: [322..324]
 r345: [318..319]
 r346: [313..317]
 r347: [313..314]
 r348: [311..312]
 r349: [308..310]
 r350: [88..89]
 r351: [84..85]
 r352: [82..83]
 r353: [80..81]
 r354: [76..77]
 r355: [72..73]
 r356: [70..71]
 r357: [68..69]
 r358: [64..65]
 r359: [62..63]
 r360: [60..61]
 r361: [56..57]
 r362: [54..55]
 r363: [44..45]
 r364: [40..41]
 r365: [38..39]
 r366: [36..37]
 r367: [32..33]
 r368: [28..29]
 r369: [26..27]
 r370: [24..25]
 r371: [20..21]
 r372: [18..19]
 r373: [16..17]
 r374: [12..13]
 r375: [10..11]
 r376: [1085..1100]
 r377: [1087..1093]
 r378: [1058..1073]
 r379: [1060..1066]
 r380: [1171..1175]
 r381: [968..1169] [720..915] [556..609] [409..551] [238..353]
 r382: [1158..1160]
 r383: [1156..1157]
 r387: [968..1150] [720..915] [556..609] [409..551] [238..353]
 r388: [1139..1143]
 r389: [720..1137] [600..609] [364..551] [110..295]
 r390: [1126..1128]
 r391: [1124..1125]
 r395: [720..1118] [600..609] [364..551] [110..295]
 r396: [1085..1106]
 r397: [1085..1101]
 r398: [1087..1094]
 r399: [1058..1079]
 r400: [1058..1074]
 r401: [1060..1067]
 r402: [238..239]
 r403: [245..246]
 r404: [110..111]
 r405: [117..118]
 r406: [409..410]
 r407: [416..417]
 r408: [364..365]
 r409: [371..372]
 r410: [296..297]
 r411: [303..304]
 r412: [968..969]
 r413: [975..976]
 r414: [916..917]
 r415: [923..924]
 r416: [1180..1181]
 r417: [1176..1177]
 r418: [1173..1174]
 r419: [1167..1168]
 r420: [1163..1164]
 r421: [1158..1159]
 r422: [1148..1149]
 r423: [1144..1145]
 r424: [1141..1142]
 r425: [1135..1136]
 r426: [1131..1132]
 r427: [1126..1127]
 r428: [1116..1117]
 r429: [1114..1115]
 r430: [1109..1110]
 r431: [1104..1105]
 r432: [1088..1090]
 r433: [1088..1089]
 r434: [1082..1083]
 r435: [1077..1078]
 r436: [1061..1063]
 r437: [1061..1062]
 r438: [1025..1026]
 r439: [970..971]
 r440: [977..978]
 r441: [1021..1022]
 r442: [1016..1017]
 r443: [1009..1010]
 r444: [1002..1003]
 r445: [997..998]
 r446: [994..995]
 r447: [992..993]
 r448: [987..988]
 r449: [980..981]
 r450: [964..965]
 r451: [959..960]
 r452: [918..919]
 r453: [925..926]
 r454: [955..956]
 r455: [950..951]
 r456: [943..944]
 r457: [936..937]
 r458: [931..932]
 r459: [928..929]
 r460: [913..914]
 r461: [905..906]
 r462: [897..898]
 r463: [893..894]
 r464: [885..886]
 r465: [835..837]
 r466: [834..836]
 r467: [828..829]
 r468: [823..824]
 r469: [818..819]
 r470: [815..816]
 r471: [810..811]
 r472: [802..803]
 r473: [794..795]
 r474: [786..788]
 r475: [785..787]
 r476: [876..878]
 r477: [875..877]
 r478: [872..873]
 r479: [867..868]
 r480: [859..860]
 r481: [851..852]
 r482: [843..845]
 r483: [842..844]
 r484: [782..783]
 r485: [774..775]
 r486: [769..770]
 r487: [767..768]
 r488: [759..760]
 r489: [751..752]
 r490: [744..745]
 r491: [718..719]
 r492: [709..711]
 r493: [708..710]
 r494: [713..715]
 r495: [712..714]
 r496: [706..707]
 r497: [702..703]
 r498: [698..699]
 r499: [694..695]
 r500: [690..691]
 r501: [686..687]
 r502: [682..683]
 r503: [678..679]
 r504: [674..675]
 r505: [670..671]
 r506: [666..667]
 r507: [664..665]
 r508: [660..661]
 r509: [652..653]
 r510: [644..645]
 r511: [638..639]
 r512: [633..635]
 r513: [632..634]
 r514: [629..631]
 r515: [628..630]
 r516: [626..627]
 r517: [622..623]
 r518: [618..619]
 r519: [612..615]
 r520: [611..614]
 r521: [610..613]
 r522: [240..241]
 r523: [247..248]
 r524: [291..292]
 r525: [286..287]
 r526: [279..280]
 r527: [272..273]
 r528: [267..268]
 r529: [264..265]
 r530: [262..263]
 r531: [257..258]
 r532: [250..251]
 r533: [234..235]
 r534: [229..230]
 r535: [224..225]
 r536: [219..220]
 r537: [214..215]
 r538: [209..210]
 r539: [204..205]
 r540: [199..200]
 r541: [194..195]
 r542: [189..190]
 r543: [184..185]
 r544: [182..183]
 r545: [177..178]
 r546: [169..170]
 r547: [161..162]
 r548: [154..155]
 r549: [112..113]
 r550: [119..120]
 r551: [149..150]
 r552: [144..145]
 r553: [137..138]
 r554: [130..131]
 r555: [125..126]
 r556: [122..123]
 r557: [607..608]
 r558: [602..603]
 r559: [549..550]
 r560: [547..548]
 r561: [545..546]
 r562: [537..538]
 r563: [529..530]
 r564: [522..523]
 r565: [519..520]
 r566: [514..515]
 r567: [506..507]
 r568: [498..499]
 r569: [491..492]
 r570: [359..361]
 r571: [358..360]
 r572: [355..357]
 r573: [354..356]
 r574: [411..412]
 r575: [418..419]
 r576: [462..463]
 r577: [457..458]
 r578: [450..451]
 r579: [443..444]
 r580: [438..439]
 r581: [435..436]
 r582: [433..434]
 r583: [428..429]
 r584: [421..422]
 r585: [366..367]
 r586: [373..374]
 r587: [403..404]
 r588: [398..399]
 r589: [391..392]
 r590: [384..385]
 r591: [379..380]
 r592: [376..377]
 r593: [597..598]
 r594: [595..596]
 r595: [587..588]
 r596: [580..581]
 r597: [553..555]
 r598: [552..554]
 r599: [298..299]
 r600: [305..306]
 r601: [349..350]
 r602: [344..345]
 r603: [337..338]
 r604: [330..331]
 r605: [325..326]
 r606: [322..323]
 r607: [320..321]
 r608: [315..316]
 r609: [308..309]
 r610: [108..109]
 r611: [104..107]
 r612: [105..106]
 r615: [102..103]
 r616: [98..101]
 r617: [99..100]
 r620: [96..97]
 r621: [92..95]
 r622: [93..94]
 r625: [90..91]
 r626: [86..87]
 r627: [78..79]
 r628: [74..75]
 r629: [66..67]
 r630: [58..59]
 r631: [50..53]
 r632: [49..52]
 r633: [48..51]
 r634: [46..47]
 r635: [42..43]
 r636: [34..35]
 r637: [30..31]
 r638: [22..23]
 r639: [14..15]
 r640: [6..9]
 r641: [5..8]
 r642: [4..7]
 r643: [2..3]
 r644: [0..1]
 r645: [1170..1172]
 r646: [1161..1162]
 r647: [1151..1152]
 r648: [1138..1140]
 r649: [1129..1130]
 r650: [1119..1120]
 r651: [1097..1098]
 r652: [1070..1071]
 r653: [636..637]
 r654: [362..363]
Compressing live ranges: from 1183 to 934 - 78%
Ranges after the compression:
 r87: [930..931]
 r88: [920..921]
 r89: [910..911]
 r90: [910..933]
 r92: [904..905]
 r93: [894..895]
 r94: [884..885]
 r95: [884..933]
 r97: [876..877]
 r98: [872..873]
 r99: [868..869]
 r100: [864..865]
 r101: [862..863]
 r102: [858..859]
 r103: [854..855]
 r104: [850..851]
 r105: [848..849]
 r106: [846..847]
 r107: [844..845]
 r108: [842..843]
 r109: [840..841]
 r110: [838..839]
 r111: [836..837]
 r112: [834..835]
 r113: [832..833]
 r114: [830..831]
 r115: [828..829]
 r116: [822..823]
 r117: [818..821]
 r118: [818..819]
 r119: [816..817]
 r120: [804..815]
 r121: [812..813]
 r122: [810..811]
 r123: [806..809]
 r124: [806..807]
 r125: [802..805]
 r126: [802..803]
 r127: [798..799]
 r128: [794..797]
 r129: [794..795]
 r130: [792..793]
 r131: [790..791]
 r132: [778..779]
 r133: [772..773]
 r134: [768..771]
 r135: [768..769]
 r136: [766..767]
 r137: [754..765]
 r138: [762..763]
 r139: [760..761]
 r140: [756..759]
 r141: [756..757]
 r142: [752..755]
 r143: [752..753]
 r144: [740..741]
 r145: [738..739]
 r146: [736..737]
 r147: [732..733]
 r148: [730..731]
 r149: [728..729]
 r150: [724..725]
 r151: [720..721]
 r152: [718..719]
 r153: [716..717]
 r154: [712..713]
 r155: [678..679]
 r156: [674..675]
 r157: [670..671]
 r158: [666..667]
 r159: [660..661]
 r160: [656..657]
 r161: [654..655]
 r162: [652..653]
 r163: [648..649]
 r164: [646..647]
 r165: [644..645]
 r166: [640..641]
 r167: [638..639]
 r168: [710..711]
 r169: [704..705]
 r170: [700..701]
 r171: [698..699]
 r172: [696..697]
 r173: [692..693]
 r174: [690..691]
 r175: [688..689]
 r176: [684..685]
 r177: [682..683]
 r178: [632..633]
 r179: [630..631]
 r180: [628..629]
 r181: [624..625]
 r182: [618..619]
 r183: [616..617]
 r184: [614..615]
 r185: [610..611]
 r186: [608..609]
 r187: [606..607]
 r188: [602..603]
 r189: [600..601]
 r190: [596..597]
 r191: [594..595]
 r192: [592..593]
 r193: [590..591]
 r194: [588..589]
 r195: [586..587]
 r196: [584..585]
 r197: [582..583]
 r198: [578..579]
 r199: [570..571]
 r200: [566..567]
 r201: [562..563]
 r202: [558..559]
 r203: [554..555]
 r204: [550..551]
 r205: [546..547]
 r206: [542..543]
 r207: [538..539]
 r208: [534..535]
 r209: [528..529]
 r210: [524..525]
 r211: [522..523]
 r212: [520..521]
 r213: [516..517]
 r214: [514..515]
 r215: [512..513]
 r216: [508..509]
 r217: [506..507]
 r218: [494..495]
 r219: [490..491]
 r220: [486..487]
 r221: [238..239]
 r222: [234..237]
 r223: [234..235]
 r224: [232..233]
 r225: [220..231]
 r226: [228..229]
 r227: [226..227]
 r228: [222..225]
 r229: [222..223]
 r230: [218..221]
 r231: [218..219]
 r232: [214..215]
 r233: [210..213]
 r234: [210..211]
 r235: [208..209]
 r236: [206..207]
 r237: [194..195]
 r238: [190..191]
 r239: [186..187]
 r240: [182..183]
 r241: [178..179]
 r242: [174..175]
 r243: [170..171]
 r244: [166..167]
 r245: [162..163]
 r246: [158..159]
 r247: [152..153]
 r248: [148..149]
 r249: [146..147]
 r250: [144..145]
 r251: [140..141]
 r252: [138..139]
 r253: [136..137]
 r254: [132..133]
 r255: [130..131]
 r256: [124..125]
 r257: [120..123]
 r258: [120..121]
 r259: [118..119]
 r260: [106..117]
 r261: [114..115]
 r262: [112..113]
 r263: [108..111]
 r264: [108..109]
 r265: [104..107]
 r266: [104..105]
 r267: [480..481]
 r268: [476..477]
 r269: [432..433]
 r270: [430..431]
 r271: [428..429]
 r272: [424..425]
 r273: [422..423]
 r274: [420..421]
 r275: [416..417]
 r276: [414..415]
 r277: [408..409]
 r278: [404..405]
 r279: [402..403]
 r280: [400..401]
 r281: [396..397]
 r282: [394..395]
 r283: [392..393]
 r284: [388..389]
 r285: [386..387]
 r286: [382..383]
 r287: [380..381]
 r288: [378..379]
 r289: [376..377]
 r290: [374..375]
 r291: [372..373]
 r292: [370..371]
 r293: [368..369]
 r294: [364..365]
 r295: [360..363]
 r296: [360..361]
 r297: [358..359]
 r298: [346..357]
 r299: [354..355]
 r300: [352..353]
 r301: [348..351]
 r302: [348..349]
 r303: [344..347]
 r304: [344..345]
 r305: [340..341]
 r306: [336..339]
 r307: [336..337]
 r308: [334..335]
 r309: [332..333]
 r310: [320..321]
 r311: [316..319]
 r312: [316..317]
 r313: [314..315]
 r314: [302..313]
 r315: [310..311]
 r316: [308..309]
 r317: [304..307]
 r318: [304..305]
 r319: [300..303]
 r320: [300..301]
 r321: [470..471]
 r322: [468..469]
 r323: [466..467]
 r324: [462..463]
 r325: [460..461]
 r326: [456..457]
 r327: [454..455]
 r328: [452..453]
 r329: [450..451]
 r330: [448..449]
 r331: [446..447]
 r332: [444..445]
 r333: [442..443]
 r334: [282..283]
 r335: [278..281]
 r336: [278..279]
 r337: [276..277]
 r338: [264..275]
 r339: [272..273]
 r340: [270..271]
 r341: [266..269]
 r342: [266..267]
 r343: [262..265]
 r344: [262..263]
 r345: [258..259]
 r346: [254..257]
 r347: [254..255]
 r348: [252..253]
 r349: [250..251]
 r350: [80..81]
 r351: [76..77]
 r352: [74..75]
 r353: [72..73]
 r354: [68..69]
 r355: [64..65]
 r356: [62..63]
 r357: [60..61]
 r358: [56..57]
 r359: [54..55]
 r360: [52..53]
 r361: [48..49]
 r362: [46..47]
 r363: [40..41]
 r364: [36..37]
 r365: [34..35]
 r366: [32..33]
 r367: [28..29]
 r368: [24..25]
 r369: [22..23]
 r370: [20..21]
 r371: [16..17]
 r372: [14..15]
 r373: [12..13]
 r374: [8..9]
 r375: [6..7]
 r376: [862..867]
 r377: [862..863]
 r378: [848..853]
 r379: [848..849]
 r380: [924..927]
 r381: [782..923] [582..743] [442..483] [324..439] [198..285]
 r382: [914..915]
 r383: [912..913]
 r387: [782..907] [582..743] [442..483] [324..439] [198..285]
 r388: [898..901]
 r389: [582..897] [476..483] [292..439] [96..241]
 r390: [888..889]
 r391: [886..887]
 r395: [582..881] [476..483] [292..439] [96..241]
 r396: [862..871]
 r397: [862..867]
 r398: [862..863]
 r399: [848..857]
 r400: [848..853]
 r401: [848..849]
 r402: [198..199]
 r403: [202..203]
 r404: [96..97]
 r405: [100..101]
 r406: [324..325]
 r407: [328..329]
 r408: [292..293]
 r409: [296..297]
 r410: [242..243]
 r411: [246..247]
 r412: [782..783]
 r413: [786..787]
 r414: [744..745]
 r415: [748..749]
 r416: [932..933]
 r417: [928..929]
 r418: [926..927]
 r419: [922..923]
 r420: [918..919]
 r421: [914..915]
 r422: [906..907]
 r423: [902..903]
 r424: [900..901]
 r425: [896..897]
 r426: [892..893]
 r427: [888..889]
 r428: [880..881]
 r429: [878..879]
 r430: [874..875]
 r431: [870..871]
 r432: [862..863]
 r433: [862..863]
 r434: [860..861]
 r435: [856..857]
 r436: [848..849]
 r437: [848..849]
 r438: [826..827]
 r439: [784..785]
 r440: [788..789]
 r441: [824..825]
 r442: [820..821]
 r443: [814..815]
 r444: [808..809]
 r445: [804..805]
 r446: [802..803]
 r447: [800..801]
 r448: [796..797]
 r449: [790..791]
 r450: [780..781]
 r451: [776..777]
 r452: [746..747]
 r453: [750..751]
 r454: [774..775]
 r455: [770..771]
 r456: [764..765]
 r457: [758..759]
 r458: [754..755]
 r459: [752..753]
 r460: [742..743]
 r461: [734..735]
 r462: [726..727]
 r463: [722..723]
 r464: [714..715]
 r465: [676..677]
 r466: [676..677]
 r467: [672..673]
 r468: [668..669]
 r469: [664..665]
 r470: [662..663]
 r471: [658..659]
 r472: [650..651]
 r473: [642..643]
 r474: [636..637]
 r475: [636..637]
 r476: [708..709]
 r477: [708..709]
 r478: [706..707]
 r479: [702..703]
 r480: [694..695]
 r481: [686..687]
 r482: [680..681]
 r483: [680..681]
 r484: [634..635]
 r485: [626..627]
 r486: [622..623]
 r487: [620..621]
 r488: [612..613]
 r489: [604..605]
 r490: [598..599]
 r491: [580..581]
 r492: [574..575]
 r493: [574..575]
 r494: [576..577]
 r495: [576..577]
 r496: [572..573]
 r497: [568..569]
 r498: [564..565]
 r499: [560..561]
 r500: [556..557]
 r501: [552..553]
 r502: [548..549]
 r503: [544..545]
 r504: [540..541]
 r505: [536..537]
 r506: [532..533]
 r507: [530..531]
 r508: [526..527]
 r509: [518..519]
 r510: [510..511]
 r511: [504..505]
 r512: [500..501]
 r513: [500..501]
 r514: [498..499]
 r515: [498..499]
 r516: [496..497]
 r517: [492..493]
 r518: [488..489]
 r519: [484..485]
 r520: [484..485]
 r521: [484..485]
 r522: [200..201]
 r523: [204..205]
 r524: [240..241]
 r525: [236..237]
 r526: [230..231]
 r527: [224..225]
 r528: [220..221]
 r529: [218..219]
 r530: [216..217]
 r531: [212..213]
 r532: [206..207]
 r533: [196..197]
 r534: [192..193]
 r535: [188..189]
 r536: [184..185]
 r537: [180..181]
 r538: [176..177]
 r539: [172..173]
 r540: [168..169]
 r541: [164..165]
 r542: [160..161]
 r543: [156..157]
 r544: [154..155]
 r545: [150..151]
 r546: [142..143]
 r547: [134..135]
 r548: [128..129]
 r549: [98..99]
 r550: [102..103]
 r551: [126..127]
 r552: [122..123]
 r553: [116..117]
 r554: [110..111]
 r555: [106..107]
 r556: [104..105]
 r557: [482..483]
 r558: [478..479]
 r559: [438..439]
 r560: [436..437]
 r561: [434..435]
 r562: [426..427]
 r563: [418..419]
 r564: [412..413]
 r565: [410..411]
 r566: [406..407]
 r567: [398..399]
 r568: [390..391]
 r569: [384..385]
 r570: [288..289]
 r571: [288..289]
 r572: [286..287]
 r573: [286..287]
 r574: [326..327]
 r575: [330..331]
 r576: [366..367]
 r577: [362..363]
 r578: [356..357]
 r579: [350..351]
 r580: [346..347]
 r581: [344..345]
 r582: [342..343]
 r583: [338..339]
 r584: [332..333]
 r585: [294..295]
 r586: [298..299]
 r587: [322..323]
 r588: [318..319]
 r589: [312..313]
 r590: [306..307]
 r591: [302..303]
 r592: [300..301]
 r593: [474..475]
 r594: [472..473]
 r595: [464..465]
 r596: [458..459]
 r597: [440..441]
 r598: [440..441]
 r599: [244..245]
 r600: [248..249]
 r601: [284..285]
 r602: [280..281]
 r603: [274..275]
 r604: [268..269]
 r605: [264..265]
 r606: [262..263]
 r607: [260..261]
 r608: [256..257]
 r609: [250..251]
 r610: [94..95]
 r611: [92..93]
 r612: [92..93]
 r615: [90..91]
 r616: [88..89]
 r617: [88..89]
 r620: [86..87]
 r621: [84..85]
 r622: [84..85]
 r625: [82..83]
 r626: [78..79]
 r627: [70..71]
 r628: [66..67]
 r629: [58..59]
 r630: [50..51]
 r631: [44..45]
 r632: [44..45]
 r633: [44..45]
 r634: [42..43]
 r635: [38..39]
 r636: [30..31]
 r637: [26..27]
 r638: [18..19]
 r639: [10..11]
 r640: [4..5]
 r641: [4..5]
 r642: [4..5]
 r643: [2..3]
 r644: [0..1]
 r645: [924..925]
 r646: [916..917]
 r647: [908..909]
 r648: [898..899]
 r649: [890..891]
 r650: [882..883]
 r651: [866..867]
 r652: [852..853]
 r653: [502..503]
 r654: [290..291]

********** Assignment #1: **********

	 Assigning to 645 (cl=GENERAL_REGS, orig=418, freq=3000, tfirst=645, tfreq=3000)...
	   Assign 3 to reload r645 (freq=3000)
	 Assigning to 646 (cl=GENERAL_REGS, orig=382, freq=3000, tfirst=646, tfreq=3000)...
	   Assign 0 to reload r646 (freq=3000)
	 Assigning to 647 (cl=GENERAL_REGS, orig=387, freq=3000, tfirst=647, tfreq=3000)...
	   Assign 42 to reload r647 (freq=3000)
	 Assigning to 648 (cl=GENERAL_REGS, orig=424, freq=3000, tfirst=648, tfreq=3000)...
	   Assign 1 to reload r648 (freq=3000)
	 Assigning to 649 (cl=GENERAL_REGS, orig=390, freq=3000, tfirst=649, tfreq=3000)...
	   Assign 0 to reload r649 (freq=3000)
	 Assigning to 650 (cl=GENERAL_REGS, orig=395, freq=3000, tfirst=650, tfreq=3000)...
	   Assign 43 to reload r650 (freq=3000)
	 Assigning to 651 (cl=GENERAL_REGS, orig=100, freq=3000, tfirst=651, tfreq=3000)...
	   Assign 0 to reload r651 (freq=3000)
	 Assigning to 652 (cl=GENERAL_REGS, orig=104, freq=3000, tfirst=652, tfreq=3000)...
	   Assign 0 to reload r652 (freq=3000)
	 Assigning to 653 (cl=INDEX_REGS, orig=653, freq=2000, tfirst=653, tfreq=2000)...
	   Assign 0 to reload r653 (freq=2000)
	 Assigning to 654 (cl=INDEX_REGS, orig=654, freq=2000, tfirst=654, tfreq=2000)...
	   Assign 0 to reload r654 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 20
changing reg in insn 21
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 29
changing reg in insn 36
changing reg in insn 37
changing reg in insn 44
changing reg in insn 45
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 53
changing reg in insn 67
changing reg in insn 68
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 83
changing reg in insn 89
changing reg in insn 92
changing reg in insn 106
changing reg in insn 107
changing reg in insn 109
changing reg in insn 110
changing reg in insn 117
changing reg in insn 123
changing reg in insn 126
changing reg in insn 139
changing reg in insn 140
changing reg in insn 143
changing reg in insn 144
changing reg in insn 147
changing reg in insn 148
changing reg in insn 151
changing reg in insn 152
changing reg in insn 155
changing reg in insn 156
changing reg in insn 159
changing reg in insn 160
changing reg in insn 163
changing reg in insn 164
changing reg in insn 167
changing reg in insn 168
changing reg in insn 171
changing reg in insn 172
changing reg in insn 175
changing reg in insn 176
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 206
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 217
changing reg in insn 210
changing reg in insn 211
changing reg in insn 212
changing reg in insn 212
changing reg in insn 215
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 219
changing reg in insn 217
changing reg in insn 219
changing reg in insn 221
changing reg in insn 222
changing reg in insn 222
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 226
changing reg in insn 228
changing reg in insn 242
changing reg in insn 243
changing reg in insn 269
changing reg in insn 270
changing reg in insn 270
changing reg in insn 272
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 283
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 281
changing reg in insn 280
changing reg in insn 281
changing reg in insn 281
changing reg in insn 285
changing reg in insn 283
changing reg in insn 285
changing reg in insn 305
changing reg in insn 306
changing reg in insn 306
changing reg in insn 307
changing reg in insn 307
changing reg in insn 308
changing reg in insn 309
changing reg in insn 310
changing reg in insn 310
changing reg in insn 311
changing reg in insn 311
changing reg in insn 312
changing reg in insn 313
changing reg in insn 314
changing reg in insn 316
changing reg in insn 317
changing reg in insn 317
changing reg in insn 318
changing reg in insn 318
changing reg in insn 319
changing reg in insn 320
changing reg in insn 321
changing reg in insn 324
changing reg in insn 325
changing reg in insn 337
changing reg in insn 338
changing reg in insn 342
changing reg in insn 343
changing reg in insn 347
changing reg in insn 348
changing reg in insn 359
changing reg in insn 360
changing reg in insn 364
changing reg in insn 365
changing reg in insn 365
changing reg in insn 366
changing reg in insn 366
changing reg in insn 367
changing reg in insn 368
changing reg in insn 369
changing reg in insn 369
changing reg in insn 370
changing reg in insn 370
changing reg in insn 371
changing reg in insn 372
changing reg in insn 373
changing reg in insn 374
changing reg in insn 375
changing reg in insn 389
changing reg in insn 390
changing reg in insn 403
changing reg in insn 404
changing reg in insn 408
changing reg in insn 409
changing reg in insn 409
changing reg in insn 410
changing reg in insn 410
changing reg in insn 411
changing reg in insn 412
changing reg in insn 413
changing reg in insn 413
changing reg in insn 414
changing reg in insn 414
changing reg in insn 415
changing reg in insn 416
changing reg in insn 417
changing reg in insn 418
changing reg in insn 419
changing reg in insn 432
changing reg in insn 433
changing reg in insn 433
changing reg in insn 434
changing reg in insn 434
changing reg in insn 435
changing reg in insn 436
changing reg in insn 437
changing reg in insn 449
changing reg in insn 450
changing reg in insn 450
changing reg in insn 451
changing reg in insn 451
changing reg in insn 452
changing reg in insn 453
changing reg in insn 454
changing reg in insn 454
changing reg in insn 455
changing reg in insn 455
changing reg in insn 456
changing reg in insn 457
changing reg in insn 458
changing reg in insn 459
changing reg in insn 460
changing reg in insn 472
changing reg in insn 473
changing reg in insn 476
changing reg in insn 477
changing reg in insn 480
changing reg in insn 481
changing reg in insn 484
changing reg in insn 485
changing reg in insn 488
changing reg in insn 489
changing reg in insn 492
changing reg in insn 493
changing reg in insn 496
changing reg in insn 497
changing reg in insn 500
changing reg in insn 501
changing reg in insn 506
changing reg in insn 507
changing reg in insn 533
changing reg in insn 534
changing reg in insn 538
changing reg in insn 539
changing reg in insn 543
changing reg in insn 544
changing reg in insn 548
changing reg in insn 549
changing reg in insn 553
changing reg in insn 554
changing reg in insn 558
changing reg in insn 559
changing reg in insn 563
changing reg in insn 564
changing reg in insn 568
changing reg in insn 569
changing reg in insn 573
changing reg in insn 574
changing reg in insn 578
changing reg in insn 579
changing reg in insn 592
changing reg in insn 593
changing reg in insn 597
changing reg in insn 598
changing reg in insn 598
changing reg in insn 599
changing reg in insn 599
changing reg in insn 600
changing reg in insn 601
changing reg in insn 602
changing reg in insn 602
changing reg in insn 603
changing reg in insn 603
changing reg in insn 604
changing reg in insn 605
changing reg in insn 606
changing reg in insn 607
changing reg in insn 608
changing reg in insn 654
changing reg in insn 655
changing reg in insn 659
changing reg in insn 660
changing reg in insn 664
changing reg in insn 665
changing reg in insn 703
changing reg in insn 704
changing reg in insn 704
changing reg in insn 706
changing reg in insn 707
changing reg in insn 708
changing reg in insn 708
changing reg in insn 717
changing reg in insn 710
changing reg in insn 711
changing reg in insn 712
changing reg in insn 712
changing reg in insn 715
changing reg in insn 714
changing reg in insn 715
changing reg in insn 715
changing reg in insn 719
changing reg in insn 717
changing reg in insn 719
changing reg in insn 721
changing reg in insn 722
changing reg in insn 722
changing reg in insn 724
changing reg in insn 725
changing reg in insn 726
changing reg in insn 726
changing reg in insn 728
changing reg in insn 742
changing reg in insn 743
changing reg in insn 747
changing reg in insn 748
changing reg in insn 752
changing reg in insn 753
changing reg in insn 757
changing reg in insn 758
changing reg in insn 762
changing reg in insn 763
changing reg in insn 767
changing reg in insn 768
changing reg in insn 772
changing reg in insn 773
changing reg in insn 777
changing reg in insn 778
changing reg in insn 782
changing reg in insn 783
changing reg in insn 787
changing reg in insn 788
changing reg in insn 801
changing reg in insn 802
changing reg in insn 806
changing reg in insn 807
changing reg in insn 807
changing reg in insn 808
changing reg in insn 808
changing reg in insn 809
changing reg in insn 810
changing reg in insn 811
changing reg in insn 811
changing reg in insn 812
changing reg in insn 812
changing reg in insn 813
changing reg in insn 814
changing reg in insn 815
changing reg in insn 816
changing reg in insn 817
changing reg in insn 846
changing reg in insn 847
changing reg in insn 847
changing reg in insn 849
changing reg in insn 850
changing reg in insn 851
changing reg in insn 851
changing reg in insn 860
changing reg in insn 853
changing reg in insn 854
changing reg in insn 855
changing reg in insn 855
changing reg in insn 858
changing reg in insn 857
changing reg in insn 858
changing reg in insn 858
changing reg in insn 862
changing reg in insn 860
changing reg in insn 862
changing reg in insn 880
changing reg in insn 881
changing reg in insn 885
changing reg in insn 886
changing reg in insn 904
changing reg in insn 905
changing reg in insn 905
changing reg in insn 906
changing reg in insn 906
changing reg in insn 907
changing reg in insn 908
changing reg in insn 909
changing reg in insn 909
changing reg in insn 910
changing reg in insn 910
changing reg in insn 911
changing reg in insn 912
changing reg in insn 913
changing reg in insn 914
changing reg in insn 915
changing reg in insn 928
changing reg in insn 929
changing reg in insn 933
changing reg in insn 934
changing reg in insn 934
changing reg in insn 935
changing reg in insn 935
changing reg in insn 936
changing reg in insn 937
changing reg in insn 938
changing reg in insn 938
changing reg in insn 939
changing reg in insn 939
changing reg in insn 940
changing reg in insn 941
changing reg in insn 942
changing reg in insn 943
changing reg in insn 944
changing reg in insn 956
changing reg in insn 957
changing reg in insn 960
changing reg in insn 961
changing reg in insn 964
changing reg in insn 965
changing reg in insn 968
changing reg in insn 969
changing reg in insn 972
changing reg in insn 973
changing reg in insn 976
changing reg in insn 977
changing reg in insn 980
changing reg in insn 981
changing reg in insn 984
changing reg in insn 985
changing reg in insn 1041
changing reg in insn 1042
changing reg in insn 1042
changing reg in insn 1044
changing reg in insn 1045
changing reg in insn 1046
changing reg in insn 1046
changing reg in insn 1055
changing reg in insn 1048
changing reg in insn 1049
changing reg in insn 1050
changing reg in insn 1050
changing reg in insn 1053
changing reg in insn 1052
changing reg in insn 1053
changing reg in insn 1053
changing reg in insn 1057
changing reg in insn 1055
changing reg in insn 1057
changing reg in insn 1059
changing reg in insn 1060
changing reg in insn 1060
changing reg in insn 1062
changing reg in insn 1063
changing reg in insn 1064
changing reg in insn 1064
changing reg in insn 1066
changing reg in insn 1096
changing reg in insn 1097
changing reg in insn 1097
changing reg in insn 1099
changing reg in insn 1100
changing reg in insn 1101
changing reg in insn 1101
changing reg in insn 1110
changing reg in insn 1103
changing reg in insn 1104
changing reg in insn 1105
changing reg in insn 1105
changing reg in insn 1108
changing reg in insn 1107
changing reg in insn 1108
changing reg in insn 1108
changing reg in insn 1112
changing reg in insn 1110
changing reg in insn 1112
changing reg in insn 1137
changing reg in insn 1138
changing reg in insn 1138
changing reg in insn 1139
changing reg in insn 1139
changing reg in insn 1140
changing reg in insn 1141
changing reg in insn 1142
changing reg in insn 1143
changing reg in insn 1144
changing reg in insn 1156
changing reg in insn 1157
changing reg in insn 1160
changing reg in insn 1161
changing reg in insn 1164
changing reg in insn 1165
changing reg in insn 1168
changing reg in insn 1169
changing reg in insn 1172
changing reg in insn 1173
changing reg in insn 1176
changing reg in insn 1177
changing reg in insn 1180
changing reg in insn 1181
changing reg in insn 1184
changing reg in insn 1185
changing reg in insn 1218
changing reg in insn 1219
changing reg in insn 1219
changing reg in insn 1221
changing reg in insn 1222
changing reg in insn 1223
changing reg in insn 1223
changing reg in insn 1232
changing reg in insn 1225
changing reg in insn 1226
changing reg in insn 1227
changing reg in insn 1227
changing reg in insn 1230
changing reg in insn 1229
changing reg in insn 1230
changing reg in insn 1230
changing reg in insn 1234
changing reg in insn 1232
changing reg in insn 1234
changing reg in insn 1236
changing reg in insn 1237
changing reg in insn 1237
changing reg in insn 1239
changing reg in insn 1240
changing reg in insn 1241
changing reg in insn 1241
changing reg in insn 1243
changing reg in insn 1286
changing reg in insn 1287
changing reg in insn 1291
changing reg in insn 1292
changing reg in insn 1292
changing reg in insn 1293
changing reg in insn 1293
changing reg in insn 1294
changing reg in insn 1295
changing reg in insn 1296
changing reg in insn 1300
changing reg in insn 1301
changing reg in insn 1301
changing reg in insn 1302
changing reg in insn 1302
changing reg in insn 1303
changing reg in insn 1304
changing reg in insn 1305
changing reg in insn 1305
changing reg in insn 1306
changing reg in insn 1306
changing reg in insn 1307
changing reg in insn 1308
changing reg in insn 1309
changing reg in insn 1310
changing reg in insn 1311
changing reg in insn 1326
changing reg in insn 1327
changing reg in insn 1331
changing reg in insn 1332
changing reg in insn 1332
changing reg in insn 1333
changing reg in insn 1333
changing reg in insn 1334
changing reg in insn 1335
changing reg in insn 1336
changing reg in insn 1340
changing reg in insn 1341
changing reg in insn 1341
changing reg in insn 1342
changing reg in insn 1342
changing reg in insn 1343
changing reg in insn 1344
changing reg in insn 1345
changing reg in insn 1345
changing reg in insn 1346
changing reg in insn 1346
changing reg in insn 1347
changing reg in insn 1348
changing reg in insn 1349
changing reg in insn 1350
changing reg in insn 1351
changing reg in insn 99
changing reg in insn 77
changing reg in insn 99
changing reg in insn 79
changing reg in insn 93
changing reg in insn 84
changing reg in insn 93
changing reg in insn 89
changing reg in insn 86
changing reg in insn 133
changing reg in insn 111
changing reg in insn 133
changing reg in insn 113
changing reg in insn 127
changing reg in insn 118
changing reg in insn 127
changing reg in insn 123
changing reg in insn 120
changing reg in insn 15
changing reg in insn 18
changing reg in insn 16
changing reg in insn 82
changing reg in insn 26
changing reg in insn 24
changing reg in insn 26
changing reg in insn 28
changing reg in insn 1227
changing reg in insn 1050
changing reg in insn 712
changing reg in insn 212
changing reg in insn 83
changing reg in insn 39
changing reg in insn 42
changing reg in insn 40
changing reg in insn 116
changing reg in insn 50
changing reg in insn 48
changing reg in insn 50
changing reg in insn 52
changing reg in insn 1105
changing reg in insn 855
changing reg in insn 278
changing reg in insn 117
changing reg in insn 73
changing reg in insn 86
changing reg in insn 76
changing reg in insn 79
changing reg in insn 83
changing reg in insn 89
changing reg in insn 107
changing reg in insn 120
changing reg in insn 110
changing reg in insn 113
changing reg in insn 117
changing reg in insn 123
changing reg in insn 690
changing reg in insn 691
changing reg in insn 698
changing reg in insn 699
changing reg in insn 833
changing reg in insn 834
changing reg in insn 841
changing reg in insn 842
changing reg in insn 1028
changing reg in insn 1029
changing reg in insn 1036
changing reg in insn 1037
changing reg in insn 1083
changing reg in insn 1084
changing reg in insn 1091
changing reg in insn 1092
changing reg in insn 1205
changing reg in insn 1206
changing reg in insn 1213
changing reg in insn 1214
changing reg in insn 190
changing reg in insn 191
changing reg in insn 198
changing reg in insn 199
changing reg in insn 256
changing reg in insn 257
changing reg in insn 264
changing reg in insn 265
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 59
changing reg in insn 60
changing reg in insn 63
changing reg in insn 64
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 90
changing reg in insn 92
changing reg in insn 91
changing reg in insn 92
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 124
changing reg in insn 126
changing reg in insn 125
changing reg in insn 126
changing reg in insn 180
changing reg in insn 183
changing reg in insn 189
changing reg in insn 190
changing reg in insn 197
changing reg in insn 198
changing reg in insn 202
changing reg in insn 203
changing reg in insn 205
changing reg in insn 206
changing reg in insn 209
changing reg in insn 210
changing reg in insn 213
changing reg in insn 214
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 220
changing reg in insn 221
changing reg in insn 223
changing reg in insn 224
changing reg in insn 227
changing reg in insn 228
changing reg in insn 241
changing reg in insn 242
changing reg in insn 246
changing reg in insn 249
changing reg in insn 255
changing reg in insn 256
changing reg in insn 263
changing reg in insn 264
changing reg in insn 268
changing reg in insn 269
changing reg in insn 271
changing reg in insn 272
changing reg in insn 275
changing reg in insn 276
changing reg in insn 279
changing reg in insn 280
changing reg in insn 282
changing reg in insn 283
changing reg in insn 284
changing reg in insn 285
changing reg in insn 304
changing reg in insn 305
changing reg in insn 308
changing reg in insn 309
changing reg in insn 312
changing reg in insn 313
changing reg in insn 315
changing reg in insn 316
changing reg in insn 319
changing reg in insn 320
changing reg in insn 328
changing reg in insn 330
changing reg in insn 329
changing reg in insn 332
changing reg in insn 341
changing reg in insn 342
changing reg in insn 346
changing reg in insn 347
changing reg in insn 352
changing reg in insn 353
changing reg in insn 358
changing reg in insn 359
changing reg in insn 363
changing reg in insn 364
changing reg in insn 367
changing reg in insn 368
changing reg in insn 371
changing reg in insn 372
changing reg in insn 378
changing reg in insn 380
changing reg in insn 379
changing reg in insn 382
changing reg in insn 393
changing reg in insn 395
changing reg in insn 394
changing reg in insn 397
changing reg in insn 402
changing reg in insn 403
changing reg in insn 407
changing reg in insn 408
changing reg in insn 411
changing reg in insn 412
changing reg in insn 415
changing reg in insn 416
changing reg in insn 422
changing reg in insn 424
changing reg in insn 423
changing reg in insn 426
changing reg in insn 431
changing reg in insn 432
changing reg in insn 435
changing reg in insn 436
changing reg in insn 440
changing reg in insn 445
changing reg in insn 448
changing reg in insn 449
changing reg in insn 452
changing reg in insn 453
changing reg in insn 456
changing reg in insn 457
changing reg in insn 463
changing reg in insn 464
changing reg in insn 505
changing reg in insn 506
changing reg in insn 510
changing reg in insn 512
changing reg in insn 511
changing reg in insn 514
changing reg in insn 522
changing reg in insn 524
changing reg in insn 523
changing reg in insn 526
changing reg in insn 532
changing reg in insn 533
changing reg in insn 537
changing reg in insn 538
changing reg in insn 542
changing reg in insn 543
changing reg in insn 547
changing reg in insn 548
changing reg in insn 552
changing reg in insn 553
changing reg in insn 557
changing reg in insn 558
changing reg in insn 562
changing reg in insn 563
changing reg in insn 567
changing reg in insn 568
changing reg in insn 572
changing reg in insn 573
changing reg in insn 577
changing reg in insn 578
changing reg in insn 583
changing reg in insn 588
changing reg in insn 591
changing reg in insn 592
changing reg in insn 596
changing reg in insn 597
changing reg in insn 600
changing reg in insn 601
changing reg in insn 604
changing reg in insn 605
changing reg in insn 611
changing reg in insn 612
changing reg in insn 635
changing reg in insn 637
changing reg in insn 636
changing reg in insn 639
changing reg in insn 643
changing reg in insn 645
changing reg in insn 644
changing reg in insn 647
changing reg in insn 653
changing reg in insn 654
changing reg in insn 658
changing reg in insn 659
changing reg in insn 663
changing reg in insn 664
changing reg in insn 669
changing reg in insn 674
changing reg in insn 670
changing reg in insn 676
changing reg in insn 671
changing reg in insn 677
changing reg in insn 689
changing reg in insn 690
changing reg in insn 697
changing reg in insn 698
changing reg in insn 702
changing reg in insn 703
changing reg in insn 705
changing reg in insn 706
changing reg in insn 709
changing reg in insn 710
changing reg in insn 713
changing reg in insn 714
changing reg in insn 716
changing reg in insn 717
changing reg in insn 718
changing reg in insn 719
changing reg in insn 720
changing reg in insn 721
changing reg in insn 723
changing reg in insn 724
changing reg in insn 727
changing reg in insn 728
changing reg in insn 741
changing reg in insn 742
changing reg in insn 746
changing reg in insn 747
changing reg in insn 751
changing reg in insn 752
changing reg in insn 756
changing reg in insn 757
changing reg in insn 761
changing reg in insn 762
changing reg in insn 766
changing reg in insn 767
changing reg in insn 771
changing reg in insn 772
changing reg in insn 776
changing reg in insn 777
changing reg in insn 781
changing reg in insn 782
changing reg in insn 786
changing reg in insn 787
changing reg in insn 792
changing reg in insn 797
changing reg in insn 800
changing reg in insn 801
changing reg in insn 805
changing reg in insn 806
changing reg in insn 809
changing reg in insn 810
changing reg in insn 813
changing reg in insn 814
changing reg in insn 820
changing reg in insn 821
changing reg in insn 832
changing reg in insn 833
changing reg in insn 840
changing reg in insn 841
changing reg in insn 845
changing reg in insn 846
changing reg in insn 848
changing reg in insn 849
changing reg in insn 852
changing reg in insn 853
changing reg in insn 856
changing reg in insn 857
changing reg in insn 859
changing reg in insn 860
changing reg in insn 861
changing reg in insn 862
changing reg in insn 879
changing reg in insn 880
changing reg in insn 884
changing reg in insn 885
changing reg in insn 889
changing reg in insn 893
changing reg in insn 896
changing reg in insn 900
changing reg in insn 903
changing reg in insn 904
changing reg in insn 907
changing reg in insn 908
changing reg in insn 911
changing reg in insn 912
changing reg in insn 918
changing reg in insn 919
changing reg in insn 927
changing reg in insn 928
changing reg in insn 932
changing reg in insn 933
changing reg in insn 936
changing reg in insn 937
changing reg in insn 940
changing reg in insn 941
changing reg in insn 947
changing reg in insn 948
changing reg in insn 1004
changing reg in insn 1006
changing reg in insn 1005
changing reg in insn 1008
changing reg in insn 1012
changing reg in insn 1014
changing reg in insn 1013
changing reg in insn 1016
changing reg in insn 1027
changing reg in insn 1028
changing reg in insn 1035
changing reg in insn 1036
changing reg in insn 1040
changing reg in insn 1041
changing reg in insn 1043
changing reg in insn 1044
changing reg in insn 1047
changing reg in insn 1048
changing reg in insn 1051
changing reg in insn 1052
changing reg in insn 1054
changing reg in insn 1055
changing reg in insn 1056
changing reg in insn 1057
changing reg in insn 1058
changing reg in insn 1059
changing reg in insn 1061
changing reg in insn 1062
changing reg in insn 1065
changing reg in insn 1066
changing reg in insn 1082
changing reg in insn 1083
changing reg in insn 1090
changing reg in insn 1091
changing reg in insn 1095
changing reg in insn 1096
changing reg in insn 1098
changing reg in insn 1099
changing reg in insn 1102
changing reg in insn 1103
changing reg in insn 1106
changing reg in insn 1107
changing reg in insn 1109
changing reg in insn 1110
changing reg in insn 1111
changing reg in insn 1112
changing reg in insn 1129
changing reg in insn 1133
changing reg in insn 1136
changing reg in insn 1137
changing reg in insn 1140
changing reg in insn 1141
changing reg in insn 1147
changing reg in insn 1148
changing reg in insn 1189
changing reg in insn 1191
changing reg in insn 1190
changing reg in insn 1193
changing reg in insn 1204
changing reg in insn 1205
changing reg in insn 1212
changing reg in insn 1213
changing reg in insn 1217
changing reg in insn 1218
changing reg in insn 1220
changing reg in insn 1221
changing reg in insn 1224
changing reg in insn 1225
changing reg in insn 1228
changing reg in insn 1229
changing reg in insn 1231
changing reg in insn 1232
changing reg in insn 1233
changing reg in insn 1234
changing reg in insn 1235
changing reg in insn 1236
changing reg in insn 1238
changing reg in insn 1239
changing reg in insn 1242
changing reg in insn 1243
changing reg in insn 1256
changing reg in insn 1257
changing reg in insn 1257
changing reg in insn 1261
changing reg in insn 1258
changing reg in insn 1259
changing reg in insn 1265
changing reg in insn 1266
changing reg in insn 1266
changing reg in insn 1270
changing reg in insn 1267
changing reg in insn 1268
changing reg in insn 1274
changing reg in insn 1275
changing reg in insn 1275
changing reg in insn 1279
changing reg in insn 1276
changing reg in insn 1277
changing reg in insn 1285
changing reg in insn 1286
changing reg in insn 1290
changing reg in insn 1291
changing reg in insn 1294
changing reg in insn 1295
changing reg in insn 1299
changing reg in insn 1300
changing reg in insn 1303
changing reg in insn 1304
changing reg in insn 1307
changing reg in insn 1308
changing reg in insn 1314
changing reg in insn 1317
changing reg in insn 1315
changing reg in insn 1318
changing reg in insn 1316
changing reg in insn 1319
changing reg in insn 1325
changing reg in insn 1326
changing reg in insn 1330
changing reg in insn 1331
changing reg in insn 1334
changing reg in insn 1335
changing reg in insn 1339
changing reg in insn 1340
changing reg in insn 1343
changing reg in insn 1344
changing reg in insn 1347
changing reg in insn 1348
changing reg in insn 1354
changing reg in insn 1357
changing reg in insn 1355
changing reg in insn 1358
changing reg in insn 1356
changing reg in insn 1359
changing reg in insn 1365
changing reg in insn 1366
changing reg in insn 1369
changing reg in insn 1370
deleting insn with uid = 1485.
deleting insn with uid = 1487.
deleting insn with uid = 28.
deleting insn with uid = 1489.
deleting insn with uid = 1490.
deleting insn with uid = 1493.
deleting insn with uid = 52.
deleting insn with uid = 1495.
deleting insn with uid = 1497.
deleting insn with uid = 1499.
deleting insn with uid = 330.
deleting insn with uid = 380.
deleting insn with uid = 395.
deleting insn with uid = 424.
deleting insn with uid = 676.
deleting insn with uid = 1257.
deleting insn with uid = 1259.
deleting insn with uid = 1266.
deleting insn with uid = 1268.
deleting insn with uid = 1275.
deleting insn with uid = 1277.
deleting insn with uid = 1317.
deleting insn with uid = 1318.
deleting insn with uid = 1357.
deleting insn with uid = 1358.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 185.
verify found no changes in insn with uid = 251.
verify found no changes in insn with uid = 334.
verify found no changes in insn with uid = 355.
verify found no changes in insn with uid = 384.
verify found no changes in insn with uid = 399.
verify found no changes in insn with uid = 428.
verify found no changes in insn with uid = 447.
verify found no changes in insn with uid = 469.
verify found no changes in insn with uid = 517.
verify found no changes in insn with uid = 529.
verify found no changes in insn with uid = 590.
verify found no changes in insn with uid = 617.
verify found no changes in insn with uid = 633.
verify found no changes in insn with uid = 642.
verify found no changes in insn with uid = 650.
verify found no changes in insn with uid = 679.
verify found no changes in insn with uid = 799.
verify found no changes in insn with uid = 826.
verify found no changes in insn with uid = 895.
verify found no changes in insn with uid = 902.
verify found no changes in insn with uid = 924.
verify found no changes in insn with uid = 953.
verify found no changes in insn with uid = 1002.
verify found no changes in insn with uid = 1011.
verify found no changes in insn with uid = 1019.
verify found no changes in insn with uid = 1135.
verify found no changes in insn with uid = 1153.
verify found no changes in insn with uid = 1196.
verify found no changes in insn with uid = 1262.
verify found no changes in insn with uid = 1271.
verify found no changes in insn with uid = 1280.
verify found no changes in insn with uid = 1322.
verify found no changes in insn with uid = 1362.
verify found no changes in insn with uid = 1368.
verify found no changes in insn with uid = 1372.


e2out

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14]
;;  ref usage 	r0={534d,501u} r1={118d,82u} r2={72d,34u} r3={2d,8u} r4={74d,36u} r5={79d,41u} r6={1d,442u} r7={15d,236u} r8={38d} r9={38d} r10={38d} r11={38d} r12={38d} r13={38d} r14={38d} r15={38d} r17={306d,124u} r18={38d} r19={38d} r20={1d,1u} r21={48d,9u} r22={39d} r23={39d} r24={39d} r25={39d} r26={39d} r27={39d} r28={39d} r29={38d} r30={38d} r31={38d} r32={38d} r33={38d} r34={38d} r35={38d} r36={38d} r37={47d,9u} r38={44d,6u} r39={39d} r40={39d} r41={2d,6u} r42={3d,6u} r43={2d,5u} r45={38d} r46={38d} r47={38d} r48={38d} r49={38d} r50={38d} r51={38d} r52={38d} r53={38d} r54={38d} r55={38d} r56={38d} r57={38d} r58={38d} r59={38d} r60={38d} r61={38d} r62={38d} r63={38d} r64={38d} r65={38d} r66={38d} r67={38d} r68={38d} r69={38d} r70={38d} r71={38d} r72={38d} r73={38d} r74={38d} r75={38d} r76={38d} r77={38d} r78={38d} r79={38d} r80={38d} 
;;    total ref usage 5297{3751d,1546u,0e} in 1104{1066 regular + 38 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 90 95
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 90 95
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 92 93 94 97 380 381 382 383 387 388 389 390 391 395 416 417 418 419 420 421 422 423 424 425 426 427 428 429
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])
        (reg:DI 5 di [ itag1 ])) "E2OUT.f":1 85 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])
        (reg:DI 4 si [ itag2 ])) "E2OUT.f":1 85 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 egrid1+0 S8 A64])
        (reg:DI 1 dx [ egrid1 ])) "E2OUT.f":1 85 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [4 egrid2+0 S8 A64])
        (reg:DI 2 cx [ egrid2 ])) "E2OUT.f":1 85 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 grid1+0 S8 A64])
        (reg:DI 37 r8 [ grid1 ])) "E2OUT.f":1 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [4 grid2+0 S8 A64])
        (reg:DI 38 r9 [ grid2 ])) "E2OUT.f":1 85 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 0 ax [416])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [416]) [1 *imout_347(D)+0 S4 A32])) "E2OUT.f":2 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [417])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "E2OUT.f":2 149 {*extendsidi2_rex64}
     (nil))
(insn 14 13 15 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.0+0 S8 A64])
        (reg:DI 0 ax [417])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (set (reg:DI 0 ax [orig:380 stride.2_349 ] [380])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.0+0 S8 A64])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 17 15 16 2 (set (reg:DI 1 dx [418])
        (const_int 0 [0])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 16 17 1484 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:380 stride.2_349 ] [380])
            (const_int 0 [0]))) "E2OUT.f":2 8 {*cmpdi_ccno_1}
     (nil))
(insn 1484 16 18 2 (set (reg:DI 3 bx [418])
        (reg:DI 1 dx [418])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 18 1484 19 2 (set (reg:DI 3 bx [418])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:380 stride.2_349 ] [380])
            (reg:DI 3 bx [418]))) "E2OUT.f":2 1003 {*movdicc_noc}
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 0 ax [419])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (mem:SI (reg/f:DI 0 ax [419]) [1 *jmout_351(D)+0 S4 A32])) "E2OUT.f":2 86 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 0 ax [420])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _2 ] [88]))) "E2OUT.f":2 149 {*extendsidi2_rex64}
     (nil))
(insn 22 21 1486 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.1+0 S8 A64])
        (reg:DI 0 ax [420])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 1486 22 23 2 (set (reg:DI 0 ax [orig:382 size.4_353 ] [382])
        (reg:DI 3 bx [orig:381 stride.2_350 ] [381])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 23 1486 25 2 (parallel [
            (set (reg:DI 0 ax [orig:382 size.4_353 ] [382])
                (mult:DI (reg:DI 0 ax [orig:382 size.4_353 ] [382])
                    (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [2 ubound.1+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":2 349 {*muldi3_1}
     (nil))
(insn 25 23 24 2 (set (reg:DI 1 dx [421])
        (const_int 0 [0])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 24 25 26 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:382 size.4_353 ] [382])
            (const_int 0 [0]))) "E2OUT.f":2 8 {*cmpdi_ccno_1}
     (nil))
(insn 26 24 29 2 (set (reg:DI 0 ax [orig:383 size.4_354 ] [383])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:382 size.4_353 ] [382])
            (reg:DI 1 dx [421]))) "E2OUT.f":2 1003 {*movdicc_noc}
     (nil))
(insn 29 26 30 2 (set (reg:DI 41 r12 [orig:90 _4 ] [90])
        (reg:DI 0 ax [orig:89 size.14_3 ] [89])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 30 29 1488 2 (set (reg:DI 42 r13 [ _4+8 ])
        (const_int 0 [0])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 1488 30 34 2 (set (reg:DI 42 r13 [orig:387 offset.3_358 ] [387])
        (reg:DI 3 bx [orig:381 stride.2_350 ] [381])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 34 1488 35 2 (set (reg:DI 42 r13 [orig:387 offset.3_358 ] [387])
        (not:DI (reg:DI 42 r13 [orig:387 offset.3_358 ] [387]))) "E2OUT.f":2 532 {*one_cmpldi2_1}
     (nil))
(insn 35 34 36 2 (set (reg/f:DI 0 ax [422])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 36 35 37 2 (set (reg:SI 0 ax [orig:92 _6 ] [92])
        (mem:SI (reg/f:DI 0 ax [422]) [1 *imout_347(D)+0 S4 A32])) "E2OUT.f":2 86 {*movsi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:DI 0 ax [423])
        (sign_extend:DI (reg:SI 0 ax [orig:92 _6 ] [92]))) "E2OUT.f":2 149 {*extendsidi2_rex64}
     (nil))
(insn 38 37 39 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.5+0 S8 A64])
        (reg:DI 0 ax [423])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 39 38 41 2 (set (reg:DI 0 ax [orig:388 stride.7_360 ] [388])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.5+0 S8 A64])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 41 39 40 2 (set (reg:DI 1 dx [424])
        (const_int 0 [0])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 40 41 42 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:388 stride.7_360 ] [388])
            (const_int 0 [0]))) "E2OUT.f":2 8 {*cmpdi_ccno_1}
     (nil))
(insn 42 40 1491 2 (set (reg:DI 1 dx [424])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:388 stride.7_360 ] [388])
            (reg:DI 1 dx [424]))) "E2OUT.f":2 1003 {*movdicc_noc}
     (nil))
(insn 1491 42 43 2 (set (reg:DI 41 r12 [orig:389 stride.7_361 ] [389])
        (reg:DI 1 dx [424])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 43 1491 44 2 (set (reg/f:DI 0 ax [425])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 44 43 45 2 (set (reg:SI 0 ax [orig:93 _7 ] [93])
        (mem:SI (reg/f:DI 0 ax [425]) [1 *jmout_351(D)+0 S4 A32])) "E2OUT.f":2 86 {*movsi_internal}
     (nil))
(insn 45 44 46 2 (set (reg:DI 0 ax [426])
        (sign_extend:DI (reg:SI 0 ax [orig:93 _7 ] [93]))) "E2OUT.f":2 149 {*extendsidi2_rex64}
     (nil))
(insn 46 45 1492 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.6+0 S8 A64])
        (reg:DI 0 ax [426])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 1492 46 47 2 (set (reg:DI 0 ax [orig:390 size.9_363 ] [390])
        (reg:DI 41 r12 [orig:389 stride.7_361 ] [389])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 47 1492 49 2 (parallel [
            (set (reg:DI 0 ax [orig:390 size.9_363 ] [390])
                (mult:DI (reg:DI 0 ax [orig:390 size.9_363 ] [390])
                    (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -72 [0xffffffffffffffb8])) [2 ubound.6+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":2 349 {*muldi3_1}
     (nil))
(insn 49 47 48 2 (set (reg:DI 1 dx [427])
        (const_int 0 [0])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 48 49 50 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:390 size.9_363 ] [390])
            (const_int 0 [0]))) "E2OUT.f":2 8 {*cmpdi_ccno_1}
     (nil))
(insn 50 48 53 2 (set (reg:DI 0 ax [orig:391 size.9_364 ] [391])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:390 size.9_363 ] [390])
            (reg:DI 1 dx [427]))) "E2OUT.f":2 1003 {*movdicc_noc}
     (nil))
(insn 53 50 54 2 (set (reg:DI 39 r10 [orig:95 _9 ] [95])
        (reg:DI 0 ax [orig:94 size.16_8 ] [94])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 54 53 1494 2 (set (reg:DI 40 r11 [ _9+8 ])
        (const_int 0 [0])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 1494 54 58 2 (set (reg:DI 43 r14 [orig:395 offset.8_368 ] [395])
        (reg:DI 41 r12 [orig:389 stride.7_361 ] [389])) "E2OUT.f":2 85 {*movdi_internal}
     (nil))
(insn 58 1494 59 2 (set (reg:DI 43 r14 [orig:395 offset.8_368 ] [395])
        (not:DI (reg:DI 43 r14 [orig:395 offset.8_368 ] [395]))) "E2OUT.f":2 532 {*one_cmpldi2_1}
     (nil))
(insn 59 58 60 2 (set (reg:DI 0 ax [428])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 egrid1+0 S8 A64])) "E2OUT.f":107 85 {*movdi_internal}
     (nil))
(insn 60 59 61 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [428])) "E2OUT.f":107 85 {*movdi_internal}
     (nil))
(insn 61 60 62 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":107 88 {*movqi_internal}
     (nil))
(call_insn 62 61 63 2 (call (mem:QI (symbol_ref:DI ("collect_") [flags 0x41]  <function_decl 0x7f830f8f8600 collect>) [0 collect S1 A8])
        (const_int 0 [0])) "E2OUT.f":107 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 63 62 64 2 (set (reg:DI 0 ax [429])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [4 egrid2+0 S8 A64])) "E2OUT.f":114 85 {*movdi_internal}
     (nil))
(insn 64 63 65 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [429])) "E2OUT.f":114 85 {*movdi_internal}
     (nil))
(insn 65 64 66 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":114 88 {*movqi_internal}
     (nil))
(call_insn 66 65 67 2 (call (mem:QI (symbol_ref:DI ("collect_") [flags 0x41]  <function_decl 0x7f830f8f8600 collect>) [0 collect S1 A8])
        (const_int 0 [0])) "E2OUT.f":114 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 67 66 68 2 (set (reg:SI 0 ax [orig:97 _11 ] [97])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f830f90dbd0 parallel>)
                    (const_int 4 [0x4]))) [1 parallel.me+0 S4 A32])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 68 67 69 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:97 _11 ] [97])
            (const_int 0 [0]))) "E2OUT.f":116 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 69 68 70 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1363)
            (pc))) "E2OUT.f":116 682 {*jcc}
     (nil)
 -> 1363)
;;  succ:       3 (FALLTHRU)
;;              166
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 98 99 376 396 397 430 431
(note 70 69 71 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 3 (set (reg/f:DI 0 ax [430])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":120 85 {*movdi_internal}
     (nil))
(insn 72 71 73 3 (set (reg:SI 0 ax [orig:98 _12 ] [98])
        (mem:SI (reg/f:DI 0 ax [430]) [1 *imout_347(D)+0 S4 A32])) "E2OUT.f":120 86 {*movsi_internal}
     (nil))
(insn 73 72 74 3 (set (reg:DI 5 di [orig:396 _374 ] [396])
        (sign_extend:DI (reg:SI 0 ax [orig:98 _12 ] [98]))) "E2OUT.f":120 149 {*extendsidi2_rex64}
     (nil))
(insn 74 73 75 3 (set (reg/f:DI 0 ax [431])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":120 85 {*movdi_internal}
     (nil))
(insn 75 74 76 3 (set (reg:SI 0 ax [orig:99 _13 ] [99])
        (mem:SI (reg/f:DI 0 ax [431]) [1 *jmout_351(D)+0 S4 A32])) "E2OUT.f":120 86 {*movsi_internal}
     (nil))
(insn 76 75 77 3 (set (reg:DI 37 r8 [orig:397 _375 ] [397])
        (sign_extend:DI (reg:SI 0 ax [orig:99 _13 ] [99]))) "E2OUT.f":120 149 {*extendsidi2_rex64}
     (nil))
(insn 77 76 100 3 (set (reg:DI 1 dx [orig:376 S.10_304 ] [376])
        (const_int 1 [0x1])) "E2OUT.f":120 85 {*movdi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376 381 387 389 395 396 397

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              8 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376 381 387 389 395 396 397
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376 397
;; lr  def 	 17 [flags]
(code_label 100 77 78 4 6 (nil) [1 uses])
(note 78 100 79 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 1 dx [orig:376 S.10_304 ] [376])
            (reg:DI 37 r8 [orig:397 _375 ] [397]))) "E2OUT.f":120 12 {*cmpdi_1}
     (nil))
(jump_insn 80 79 81 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) "E2OUT.f":120 682 {*jcc}
     (nil)
 -> 103)
;;  succ:       9
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376 381 387 389 395 396 397

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376 381 387 389 395 396 397
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376 381 387
;; lr  def 	 17 [flags] 100 377 398
(note 81 80 1496 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 1496 81 82 5 (set (reg:DI 0 ax [orig:100 _14 ] [100])
        (reg:DI 1 dx [orig:376 S.10_304 ] [376])) "E2OUT.f":120 85 {*movdi_internal}
     (nil))
(insn 82 1496 83 5 (parallel [
            (set (reg:DI 0 ax [orig:100 _14 ] [100])
                (mult:DI (reg:DI 0 ax [orig:100 _14 ] [100])
                    (reg:DI 3 bx [orig:381 stride.2_350 ] [381])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":120 349 {*muldi3_1}
     (nil))
(insn 83 82 84 5 (parallel [
            (set (reg:DI 38 r9 [orig:398 _377 ] [398])
                (plus:DI (reg:DI 42 r13 [orig:387 offset.3_358 ] [387])
                    (reg:DI 0 ax [orig:100 _14 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":120 222 {*adddi_1}
     (nil))
(insn 84 83 94 5 (set (reg:DI 0 ax [orig:377 S.11_305 ] [377])
        (const_int 1 [0x1])) "E2OUT.f":120 85 {*movdi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376 377 381 387 389 395 396 397 398

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              7 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376 377 381 387 389 395 396 397 398
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 377 396
;; lr  def 	 17 [flags]
(code_label 94 84 85 6 5 (nil) [1 uses])
(note 85 94 86 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:377 S.11_305 ] [377])
            (reg:DI 5 di [orig:396 _374 ] [396]))) "E2OUT.f":120 12 {*cmpdi_1}
     (nil))
(jump_insn 87 86 88 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 97)
            (pc))) "E2OUT.f":120 682 {*jcc}
     (nil)
 -> 97)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376 377 381 387 389 395 396 397 398

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376 377 381 387 389 395 396 397 398
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 377 398
;; lr  def 	 17 [flags] 101 377 432 433
(note 88 87 89 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 7 (parallel [
            (set (reg:DI 4 si [orig:101 _15 ] [101])
                (plus:DI (reg:DI 0 ax [orig:377 S.11_305 ] [377])
                    (reg:DI 38 r9 [orig:398 _377 ] [398])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":120 222 {*adddi_1}
     (nil))
(insn 90 89 91 7 (set (reg/f:DI 2 cx [432])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 grid1+0 S8 A64])) "E2OUT.f":120 85 {*movdi_internal}
     (nil))
(insn 91 90 92 7 (set (reg:SF 21 xmm0 [433])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "E2OUT.f":120 131 {*movsf_internal}
     (nil))
(insn 92 91 93 7 (set (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:101 _15 ] [101])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [432])) [6 *grid1_379(D) S4 A32])
        (reg:SF 21 xmm0 [433])) "E2OUT.f":120 131 {*movsf_internal}
     (nil))
(insn 93 92 1379 7 (parallel [
            (set (reg:DI 0 ax [orig:377 S.11_305 ] [377])
                (plus:DI (reg:DI 0 ax [orig:377 S.11_305 ] [377])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":120 222 {*adddi_1}
     (nil))
(jump_insn 1379 93 1380 7 (set (pc)
        (label_ref 94)) "E2OUT.f":120 683 {jump}
     (nil)
 -> 94)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376 377 381 387 389 395 396 397 398

(barrier 1380 1379 97)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376 381 387 389 395 396 397
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376
;; lr  def 	 17 [flags] 376
(code_label 97 1380 98 8 4 (nil) [1 uses])
(note 98 97 99 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 1381 8 (parallel [
            (set (reg:DI 1 dx [orig:376 S.10_304 ] [376])
                (plus:DI (reg:DI 1 dx [orig:376 S.10_304 ] [376])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":120 222 {*adddi_1}
     (nil))
(jump_insn 1381 99 1382 8 (set (pc)
        (label_ref 100)) "E2OUT.f":120 683 {jump}
     (nil)
 -> 100)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 376 381 387 389 395 396 397

(barrier 1382 1381 103)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 102 103 378 399 400 434 435
(code_label 103 1382 104 9 3 (nil) [1 uses])
(note 104 103 105 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 9 (set (reg/f:DI 0 ax [434])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":121 85 {*movdi_internal}
     (nil))
(insn 106 105 107 9 (set (reg:SI 0 ax [orig:102 _16 ] [102])
        (mem:SI (reg/f:DI 0 ax [434]) [1 *imout_347(D)+0 S4 A32])) "E2OUT.f":121 86 {*movsi_internal}
     (nil))
(insn 107 106 108 9 (set (reg:DI 5 di [orig:399 _384 ] [399])
        (sign_extend:DI (reg:SI 0 ax [orig:102 _16 ] [102]))) "E2OUT.f":121 149 {*extendsidi2_rex64}
     (nil))
(insn 108 107 109 9 (set (reg/f:DI 0 ax [435])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":121 85 {*movdi_internal}
     (nil))
(insn 109 108 110 9 (set (reg:SI 0 ax [orig:103 _17 ] [103])
        (mem:SI (reg/f:DI 0 ax [435]) [1 *jmout_351(D)+0 S4 A32])) "E2OUT.f":121 86 {*movsi_internal}
     (nil))
(insn 110 109 111 9 (set (reg:DI 37 r8 [orig:400 _385 ] [400])
        (sign_extend:DI (reg:SI 0 ax [orig:103 _17 ] [103]))) "E2OUT.f":121 149 {*extendsidi2_rex64}
     (nil))
(insn 111 110 134 9 (set (reg:DI 1 dx [orig:378 S.12_306 ] [378])
        (const_int 1 [0x1])) "E2OUT.f":121 85 {*movdi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378 381 387 389 395 399 400

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              14 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378 381 387 389 395 399 400
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378 400
;; lr  def 	 17 [flags]
(code_label 134 111 112 10 10 (nil) [1 uses])
(note 112 134 113 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 1 dx [orig:378 S.12_306 ] [378])
            (reg:DI 37 r8 [orig:400 _385 ] [400]))) "E2OUT.f":121 12 {*cmpdi_1}
     (nil))
(jump_insn 114 113 115 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 137)
            (pc))) "E2OUT.f":121 682 {*jcc}
     (nil)
 -> 137)
;;  succ:       15
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378 381 387 389 395 399 400

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378 381 387 389 395 399 400
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378 389 395
;; lr  def 	 17 [flags] 104 379 401
(note 115 114 1498 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 1498 115 116 11 (set (reg:DI 0 ax [orig:104 _18 ] [104])
        (reg:DI 1 dx [orig:378 S.12_306 ] [378])) "E2OUT.f":121 85 {*movdi_internal}
     (nil))
(insn 116 1498 117 11 (parallel [
            (set (reg:DI 0 ax [orig:104 _18 ] [104])
                (mult:DI (reg:DI 0 ax [orig:104 _18 ] [104])
                    (reg:DI 41 r12 [orig:389 stride.7_361 ] [389])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":121 349 {*muldi3_1}
     (nil))
(insn 117 116 118 11 (parallel [
            (set (reg:DI 38 r9 [orig:401 _387 ] [401])
                (plus:DI (reg:DI 43 r14 [orig:395 offset.8_368 ] [395])
                    (reg:DI 0 ax [orig:104 _18 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":121 222 {*adddi_1}
     (nil))
(insn 118 117 128 11 (set (reg:DI 0 ax [orig:379 S.13_307 ] [379])
        (const_int 1 [0x1])) "E2OUT.f":121 85 {*movdi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378 379 381 387 389 395 399 400 401

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              13 [always] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378 379 381 387 389 395 399 400 401
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 379 399
;; lr  def 	 17 [flags]
(code_label 128 118 119 12 9 (nil) [1 uses])
(note 119 128 120 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:379 S.13_307 ] [379])
            (reg:DI 5 di [orig:399 _384 ] [399]))) "E2OUT.f":121 12 {*cmpdi_1}
     (nil))
(jump_insn 121 120 122 12 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) "E2OUT.f":121 682 {*jcc}
     (nil)
 -> 131)
;;  succ:       14
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378 379 381 387 389 395 399 400 401

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378 379 381 387 389 395 399 400 401
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 379 401
;; lr  def 	 17 [flags] 105 379 436 437
(note 122 121 123 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 124 13 (parallel [
            (set (reg:DI 4 si [orig:105 _19 ] [105])
                (plus:DI (reg:DI 0 ax [orig:379 S.13_307 ] [379])
                    (reg:DI 38 r9 [orig:401 _387 ] [401])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":121 222 {*adddi_1}
     (nil))
(insn 124 123 125 13 (set (reg/f:DI 2 cx [436])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [4 grid2+0 S8 A64])) "E2OUT.f":121 85 {*movdi_internal}
     (nil))
(insn 125 124 126 13 (set (reg:SF 21 xmm0 [437])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "E2OUT.f":121 131 {*movsf_internal}
     (nil))
(insn 126 125 127 13 (set (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:105 _19 ] [105])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [436])) [6 *grid2_389(D) S4 A32])
        (reg:SF 21 xmm0 [437])) "E2OUT.f":121 131 {*movsf_internal}
     (nil))
(insn 127 126 1383 13 (parallel [
            (set (reg:DI 0 ax [orig:379 S.13_307 ] [379])
                (plus:DI (reg:DI 0 ax [orig:379 S.13_307 ] [379])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":121 222 {*adddi_1}
     (nil))
(jump_insn 1383 127 1384 13 (set (pc)
        (label_ref 128)) "E2OUT.f":121 683 {jump}
     (nil)
 -> 128)
;;  succ:       12 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378 379 381 387 389 395 399 400 401

(barrier 1384 1383 131)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378 381 387 389 395 399 400
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378
;; lr  def 	 17 [flags] 378
(code_label 131 1384 132 14 8 (nil) [1 uses])
(note 132 131 133 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 1385 14 (parallel [
            (set (reg:DI 1 dx [orig:378 S.12_306 ] [378])
                (plus:DI (reg:DI 1 dx [orig:378 S.12_306 ] [378])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":121 222 {*adddi_1}
     (nil))
(jump_insn 1385 133 1386 14 (set (pc)
        (label_ref 134)) "E2OUT.f":121 683 {jump}
     (nil)
 -> 134)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 378 381 387 389 395 399 400

(barrier 1386 1385 137)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106
(code_label 137 1386 138 15 7 (nil) [1 uses])
(note 138 137 139 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 15 (set (reg:SI 0 ax [orig:106 _20 ] [106])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 140 139 141 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:106 _20 ] [106])
            (const_int 90 [0x5a]))) "E2OUT.f":132 11 {*cmpsi_1}
     (nil))
(jump_insn 141 140 142 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) "E2OUT.f":132 682 {*jcc}
     (nil)
 -> 178)
;;  succ:       25
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107
(note 142 141 143 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 16 (set (reg:SI 0 ax [orig:107 _21 ] [107])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 144 143 145 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:107 _21 ] [107])
            (const_int 92 [0x5c]))) "E2OUT.f":132 11 {*cmpsi_1}
     (nil))
(jump_insn 145 144 146 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) "E2OUT.f":132 682 {*jcc}
     (nil)
 -> 178)
;;  succ:       25
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108
(note 146 145 147 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 147 146 148 17 (set (reg:SI 0 ax [orig:108 _22 ] [108])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 148 147 149 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:108 _22 ] [108])
            (const_int 94 [0x5e]))) "E2OUT.f":132 11 {*cmpsi_1}
     (nil))
(jump_insn 149 148 150 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) "E2OUT.f":132 682 {*jcc}
     (nil)
 -> 178)
;;  succ:       25
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109
(note 150 149 151 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 18 (set (reg:SI 0 ax [orig:109 _23 ] [109])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 152 151 153 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:109 _23 ] [109])
            (const_int 96 [0x60]))) "E2OUT.f":132 11 {*cmpsi_1}
     (nil))
(jump_insn 153 152 154 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) "E2OUT.f":132 682 {*jcc}
     (nil)
 -> 178)
;;  succ:       25
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110
(note 154 153 155 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 155 154 156 19 (set (reg:SI 0 ax [orig:110 _24 ] [110])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 156 155 157 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:110 _24 ] [110])
            (const_int 99 [0x63]))) "E2OUT.f":132 11 {*cmpsi_1}
     (nil))
(jump_insn 157 156 158 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) "E2OUT.f":132 682 {*jcc}
     (nil)
 -> 178)
;;  succ:       25
;;              20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111
(note 158 157 159 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 20 (set (reg:SI 0 ax [orig:111 _25 ] [111])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 160 159 161 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:111 _25 ] [111])
            (const_int 190 [0xbe]))) "E2OUT.f":132 11 {*cmpsi_1}
     (nil))
(jump_insn 161 160 162 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) "E2OUT.f":132 682 {*jcc}
     (nil)
 -> 178)
;;  succ:       25
;;              21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112
(note 162 161 163 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 164 21 (set (reg:SI 0 ax [orig:112 _26 ] [112])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 164 163 165 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:112 _26 ] [112])
            (const_int 192 [0xc0]))) "E2OUT.f":132 11 {*cmpsi_1}
     (nil))
(jump_insn 165 164 166 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) "E2OUT.f":132 682 {*jcc}
     (nil)
 -> 178)
;;  succ:       25
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113
(note 166 165 167 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 167 166 168 22 (set (reg:SI 0 ax [orig:113 _27 ] [113])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 168 167 169 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:113 _27 ] [113])
            (const_int 194 [0xc2]))) "E2OUT.f":132 11 {*cmpsi_1}
     (nil))
(jump_insn 169 168 170 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) "E2OUT.f":132 682 {*jcc}
     (nil)
 -> 178)
;;  succ:       25
;;              23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114
(note 170 169 171 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 172 23 (set (reg:SI 0 ax [orig:114 _28 ] [114])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 172 171 173 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:114 _28 ] [114])
            (const_int 196 [0xc4]))) "E2OUT.f":132 11 {*cmpsi_1}
     (nil))
(jump_insn 173 172 174 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) "E2OUT.f":132 682 {*jcc}
     (nil)
 -> 178)
;;  succ:       25
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115
(note 174 173 175 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 175 174 176 24 (set (reg:SI 0 ax [orig:115 _29 ] [115])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 176 175 177 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:115 _29 ] [115])
            (const_int 255 [0xff]))) "E2OUT.f":132 11 {*cmpsi_1}
     (nil))
(jump_insn 177 176 178 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) "E2OUT.f":132 682 {*jcc}
     (nil)
 -> 302)
;;  succ:       25 (FALLTHRU)
;;              39
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       15
;;              16
;;              17
;;              18
;;              19
;;              20
;;              21
;;              22
;;              23
;;              24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 438
(code_label 178 177 179 25 11 (nil) [9 uses])
(note 179 178 180 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 25 (set (reg:DI 0 ax [438])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 egrid1+0 S8 A64])) "E2OUT.f":135 85 {*movdi_internal}
     (nil))
(insn 181 180 182 25 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":135 85 {*movdi_internal}
     (nil))
(insn 182 181 183 25 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f830f5566c0 *.LC2>)) "E2OUT.f":135 85 {*movdi_internal}
     (nil))
(insn 183 182 184 25 (set (reg:DI 5 di)
        (reg:DI 0 ax [438])) "E2OUT.f":135 85 {*movdi_internal}
     (nil))
(insn 184 183 185 25 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":135 88 {*movqi_internal}
     (nil))
(call_insn 185 184 186 25 (call (mem:QI (symbol_ref:DI ("efill_") [flags 0x41]  <function_decl 0x7f830f8f8700 efill>) [0 efill S1 A8])
        (const_int 0 [0])) "E2OUT.f":135 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 186 185 236 25 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":143 86 {*movsi_internal}
     (nil))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;;              30 [always] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 412 439
(code_label 236 186 187 26 16 (nil) [1 uses])
(note 187 236 188 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 188 187 189 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "E2OUT.f":143 11 {*cmpsi_1}
     (nil))
(insn 189 188 190 26 (set (reg:QI 0 ax [439])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":143 678 {*setcc_qi}
     (nil))
(insn 190 189 191 26 (set (reg:SI 0 ax [orig:412 _474 ] [412])
        (zero_extend:SI (reg:QI 0 ax [439]))) "E2OUT.f":143 140 {*zero_extendqisi2}
     (nil))
(insn 191 190 192 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:412 _474 ] [412])
            (const_int 0 [0]))) "E2OUT.f":143 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 192 191 193 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1430)
            (pc))) "E2OUT.f":143 682 {*jcc}
     (nil)
 -> 1430)
;;  succ:       167
;;              27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 193 192 194 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 230 27 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":144 86 {*movsi_internal}
     (nil))
;;  succ:       28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;;              29 [always] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 413 440
(code_label 230 194 195 28 15 (nil) [1 uses])
(note 195 230 196 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 28 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "E2OUT.f":144 11 {*cmpsi_1}
     (nil))
(insn 197 196 198 28 (set (reg:QI 0 ax [440])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":144 678 {*setcc_qi}
     (nil))
(insn 198 197 199 28 (set (reg:SI 0 ax [orig:413 _476 ] [413])
        (zero_extend:SI (reg:QI 0 ax [440]))) "E2OUT.f":144 140 {*zero_extendqisi2}
     (nil))
(insn 199 198 200 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:413 _476 ] [413])
            (const_int 0 [0]))) "E2OUT.f":144 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 200 199 201 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1433)
            (pc))) "E2OUT.f":144 682 {*jcc}
     (nil)
 -> 1433)
;;  succ:       168
;;              29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 168, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  def 	 17 [flags] 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 441 442 443 444 445 446 447 448 449
(note 201 200 202 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 29 (set (reg:SI 0 ax [441])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":145 86 {*movsi_internal}
     (nil))
(insn 203 202 204 29 (set (reg:DI 0 ax [orig:116 _30 ] [116])
        (sign_extend:DI (reg:SI 0 ax [441]))) "E2OUT.f":145 149 {*extendsidi2_rex64}
     (nil))
(insn 204 203 205 29 (parallel [
            (set (reg:DI 1 dx [orig:117 _31 ] [117])
                (mult:DI (reg:DI 0 ax [orig:116 _30 ] [116])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":145 349 {*muldi3_1}
     (nil))
(insn 205 204 206 29 (set (reg:SI 0 ax [442])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":145 86 {*movsi_internal}
     (nil))
(insn 206 205 207 29 (set (reg:DI 0 ax [orig:118 _32 ] [118])
        (sign_extend:DI (reg:SI 0 ax [442]))) "E2OUT.f":145 149 {*extendsidi2_rex64}
     (nil))
(insn 207 206 208 29 (parallel [
            (set (reg:DI 0 ax [orig:119 _33 ] [119])
                (plus:DI (reg:DI 0 ax [orig:118 _32 ] [118])
                    (reg:DI 1 dx [orig:117 _31 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":145 222 {*adddi_1}
     (nil))
(insn 208 207 209 29 (parallel [
            (set (reg:DI 2 cx [orig:120 _34 ] [120])
                (plus:DI (reg:DI 0 ax [orig:119 _33 ] [119])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":145 222 {*adddi_1}
     (nil))
(insn 209 208 210 29 (set (reg:SI 0 ax [443])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":145 86 {*movsi_internal}
     (nil))
(insn 210 209 211 29 (set (reg:DI 0 ax [orig:121 _35 ] [121])
        (sign_extend:DI (reg:SI 0 ax [443]))) "E2OUT.f":145 149 {*extendsidi2_rex64}
     (nil))
(insn 211 210 212 29 (parallel [
            (set (reg:DI 0 ax [orig:122 _36 ] [122])
                (mult:DI (reg:DI 0 ax [orig:121 _35 ] [121])
                    (reg:DI 3 bx [orig:381 stride.2_350 ] [381])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":145 349 {*muldi3_1}
     (nil))
(insn 212 211 213 29 (parallel [
            (set (reg:DI 1 dx [orig:123 _37 ] [123])
                (plus:DI (reg:DI 42 r13 [orig:387 offset.3_358 ] [387])
                    (reg:DI 0 ax [orig:122 _36 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":145 222 {*adddi_1}
     (nil))
(insn 213 212 214 29 (set (reg:SI 0 ax [444])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":145 86 {*movsi_internal}
     (nil))
(insn 214 213 215 29 (set (reg:DI 0 ax [orig:124 _38 ] [124])
        (sign_extend:DI (reg:SI 0 ax [444]))) "E2OUT.f":145 149 {*extendsidi2_rex64}
     (nil))
(insn 215 214 216 29 (parallel [
            (set (reg:DI 1 dx [orig:125 _39 ] [125])
                (plus:DI (reg:DI 1 dx [orig:123 _37 ] [123])
                    (reg:DI 0 ax [orig:124 _38 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":145 222 {*adddi_1}
     (nil))
(insn 216 215 217 29 (set (reg/f:DI 0 ax [445])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 egrid1+0 S8 A64])) "E2OUT.f":145 85 {*movdi_internal}
     (nil))
(insn 217 216 218 29 (set (reg:SF 21 xmm0 [orig:126 _40 ] [126])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:120 _34 ] [120])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [445])) [6 *egrid1_369(D) S4 A32])) "E2OUT.f":145 131 {*movsf_internal}
     (nil))
(insn 218 217 219 29 (set (reg/f:DI 0 ax [446])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 grid1+0 S8 A64])) "E2OUT.f":145 85 {*movdi_internal}
     (nil))
(insn 219 218 220 29 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:125 _39 ] [125])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [446])) [6 *grid1_379(D) S4 A32])
        (reg:SF 21 xmm0 [orig:126 _40 ] [126])) "E2OUT.f":145 131 {*movsf_internal}
     (nil))
(insn 220 219 221 29 (set (reg:SI 0 ax [447])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":146 86 {*movsi_internal}
     (nil))
(insn 221 220 222 29 (set (reg:DI 0 ax [orig:127 _41 ] [127])
        (sign_extend:DI (reg:SI 0 ax [447]))) "E2OUT.f":146 149 {*extendsidi2_rex64}
     (nil))
(insn 222 221 223 29 (parallel [
            (set (reg:DI 1 dx [orig:128 _42 ] [128])
                (mult:DI (reg:DI 0 ax [orig:127 _41 ] [127])
                    (const_int 4000 [0xfa0])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":146 349 {*muldi3_1}
     (nil))
(insn 223 222 224 29 (set (reg:SI 0 ax [448])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":146 86 {*movsi_internal}
     (nil))
(insn 224 223 225 29 (set (reg:DI 0 ax [orig:129 _43 ] [129])
        (sign_extend:DI (reg:SI 0 ax [448]))) "E2OUT.f":146 149 {*extendsidi2_rex64}
     (nil))
(insn 225 224 226 29 (parallel [
            (set (reg:DI 0 ax [orig:130 _44 ] [130])
                (plus:DI (reg:DI 0 ax [orig:129 _43 ] [129])
                    (reg:DI 1 dx [orig:128 _42 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":146 222 {*adddi_1}
     (nil))
(insn 226 225 227 29 (parallel [
            (set (reg:DI 1 dx [orig:131 _45 ] [131])
                (plus:DI (reg:DI 0 ax [orig:130 _44 ] [130])
                    (const_int -4001 [0xfffffffffffff05f])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":146 222 {*adddi_1}
     (nil))
(insn 227 226 228 29 (set (reg/f:DI 0 ax [449])
        (symbol_ref:DI ("bitmap_") [flags 0x202]  <var_decl 0x7f831696bab0 bitmap>)) "E2OUT.f":146 85 {*movdi_internal}
     (nil))
(insn 228 227 229 29 (set (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:131 _45 ] [131])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [449])) [1 bitmap.ibmap S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":146 86 {*movsi_internal}
     (nil))
(insn 229 228 1387 29 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":144 221 {*addsi_1}
     (nil))
(jump_insn 1387 229 1388 29 (set (pc)
        (label_ref 230)) "E2OUT.f":144 683 {jump}
     (nil)
 -> 230)
;;  succ:       28 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

(barrier 1388 1387 1433)
;; basic block 168, loop depth 0, maybe hot
;;  prev block 29, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28
;; bb 168 artificial_defs: { }
;; bb 168 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1433 1388 1432 168 73 (nil) [1 uses])
(note 1432 1433 1434 168 [bb 168] NOTE_INSN_BASIC_BLOCK)
(insn 1434 1432 233 168 (const_int 0 [0]) "E2OUT.f":146 718 {nop}
     (nil))
;;  succ:       30 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 30, loop depth 0, maybe hot
;;  prev block 168, next block 167, flags: (RTL, MODIFIED)
;;  pred:       168 [always]  (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 233 1434 234 30 14 (nil) [0 uses])
(note 234 233 235 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 235 234 1389 30 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":143 221 {*addsi_1}
     (nil))
(jump_insn 1389 235 1390 30 (set (pc)
        (label_ref 236)) "E2OUT.f":143 683 {jump}
     (nil)
 -> 236)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

(barrier 1390 1389 1430)
;; basic block 167, loop depth 0, maybe hot
;;  prev block 30, next block 31, flags: (RTL, MODIFIED)
;;  pred:       26
;; bb 167 artificial_defs: { }
;; bb 167 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1430 1390 1429 167 72 (nil) [1 uses])
(note 1429 1430 1431 167 [bb 167] NOTE_INSN_BASIC_BLOCK)
(insn 1431 1429 239 167 (const_int 0 [0]) "E2OUT.f":144 718 {nop}
     (nil))
;;  succ:       31 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 31, loop depth 0, maybe hot
;;  prev block 167, next block 32, flags: (RTL, MODIFIED)
;;  pred:       167 [always]  (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 132 450
(code_label 239 1431 240 31 13 (nil) [0 uses])
(note 240 239 241 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 31 (set (reg/f:DI 0 ax [450])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":150 85 {*movdi_internal}
     (nil))
(insn 242 241 243 31 (set (reg:SI 0 ax [orig:132 _46 ] [132])
        (mem:SI (reg/f:DI 0 ax [450]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":150 86 {*movsi_internal}
     (nil))
(insn 243 242 244 31 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:132 _46 ] [132])
            (const_int 0 [0]))) "E2OUT.f":150 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 244 243 245 31 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1438)
            (pc))) "E2OUT.f":150 682 {*jcc}
     (nil)
 -> 1438)
;;  succ:       32 (FALLTHRU)
;;              169
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 451
(note 245 244 246 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 246 245 247 32 (set (reg:DI 0 ax [451])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [4 egrid2+0 S8 A64])) "E2OUT.f":152 85 {*movdi_internal}
     (nil))
(insn 247 246 248 32 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":152 85 {*movdi_internal}
     (nil))
(insn 248 247 249 32 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f830f5566c0 *.LC2>)) "E2OUT.f":152 85 {*movdi_internal}
     (nil))
(insn 249 248 250 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [451])) "E2OUT.f":152 85 {*movdi_internal}
     (nil))
(insn 250 249 251 32 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":152 88 {*movqi_internal}
     (nil))
(call_insn 251 250 252 32 (call (mem:QI (symbol_ref:DI ("efill_") [flags 0x41]  <function_decl 0x7f830f8f8700 efill>) [0 efill S1 A8])
        (const_int 0 [0])) "E2OUT.f":152 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 252 251 293 32 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":154 86 {*movsi_internal}
     (nil))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;;              37 [always] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 414 452
(code_label 293 252 253 33 21 (nil) [1 uses])
(note 253 293 254 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 254 253 255 33 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "E2OUT.f":154 11 {*cmpsi_1}
     (nil))
(insn 255 254 256 33 (set (reg:QI 0 ax [452])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":154 678 {*setcc_qi}
     (nil))
(insn 256 255 257 33 (set (reg:SI 0 ax [orig:414 _483 ] [414])
        (zero_extend:SI (reg:QI 0 ax [452]))) "E2OUT.f":154 140 {*zero_extendqisi2}
     (nil))
(insn 257 256 258 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:414 _483 ] [414])
            (const_int 0 [0]))) "E2OUT.f":154 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 258 257 259 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1441)
            (pc))) "E2OUT.f":154 682 {*jcc}
     (nil)
 -> 1441)
;;  succ:       170
;;              34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 259 258 260 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 287 34 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":155 86 {*movsi_internal}
     (nil))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;;              36 [always] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 415 453
(code_label 287 260 261 35 20 (nil) [1 uses])
(note 261 287 262 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 262 261 263 35 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "E2OUT.f":155 11 {*cmpsi_1}
     (nil))
(insn 263 262 264 35 (set (reg:QI 0 ax [453])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":155 678 {*setcc_qi}
     (nil))
(insn 264 263 265 35 (set (reg:SI 0 ax [orig:415 _485 ] [415])
        (zero_extend:SI (reg:QI 0 ax [453]))) "E2OUT.f":155 140 {*zero_extendqisi2}
     (nil))
(insn 265 264 266 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:415 _485 ] [415])
            (const_int 0 [0]))) "E2OUT.f":155 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 266 265 267 35 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1444)
            (pc))) "E2OUT.f":155 682 {*jcc}
     (nil)
 -> 1444)
;;  succ:       171
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 171, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  def 	 17 [flags] 133 134 135 136 137 138 139 140 141 142 143 454 455 456 457 458 459
(note 267 266 268 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 268 267 269 36 (set (reg:SI 0 ax [454])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":156 86 {*movsi_internal}
     (nil))
(insn 269 268 270 36 (set (reg:DI 0 ax [orig:133 _47 ] [133])
        (sign_extend:DI (reg:SI 0 ax [454]))) "E2OUT.f":156 149 {*extendsidi2_rex64}
     (nil))
(insn 270 269 271 36 (parallel [
            (set (reg:DI 1 dx [orig:134 _48 ] [134])
                (mult:DI (reg:DI 0 ax [orig:133 _47 ] [133])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":156 349 {*muldi3_1}
     (nil))
(insn 271 270 272 36 (set (reg:SI 0 ax [455])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":156 86 {*movsi_internal}
     (nil))
(insn 272 271 273 36 (set (reg:DI 0 ax [orig:135 _49 ] [135])
        (sign_extend:DI (reg:SI 0 ax [455]))) "E2OUT.f":156 149 {*extendsidi2_rex64}
     (nil))
(insn 273 272 274 36 (parallel [
            (set (reg:DI 0 ax [orig:136 _50 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 _49 ] [135])
                    (reg:DI 1 dx [orig:134 _48 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":156 222 {*adddi_1}
     (nil))
(insn 274 273 275 36 (parallel [
            (set (reg:DI 2 cx [orig:137 _51 ] [137])
                (plus:DI (reg:DI 0 ax [orig:136 _50 ] [136])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":156 222 {*adddi_1}
     (nil))
(insn 275 274 276 36 (set (reg:SI 0 ax [456])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":156 86 {*movsi_internal}
     (nil))
(insn 276 275 277 36 (set (reg:DI 0 ax [orig:138 _52 ] [138])
        (sign_extend:DI (reg:SI 0 ax [456]))) "E2OUT.f":156 149 {*extendsidi2_rex64}
     (nil))
(insn 277 276 278 36 (parallel [
            (set (reg:DI 0 ax [orig:139 _53 ] [139])
                (mult:DI (reg:DI 0 ax [orig:138 _52 ] [138])
                    (reg:DI 41 r12 [orig:389 stride.7_361 ] [389])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":156 349 {*muldi3_1}
     (nil))
(insn 278 277 279 36 (parallel [
            (set (reg:DI 1 dx [orig:140 _54 ] [140])
                (plus:DI (reg:DI 43 r14 [orig:395 offset.8_368 ] [395])
                    (reg:DI 0 ax [orig:139 _53 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":156 222 {*adddi_1}
     (nil))
(insn 279 278 280 36 (set (reg:SI 0 ax [457])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":156 86 {*movsi_internal}
     (nil))
(insn 280 279 281 36 (set (reg:DI 0 ax [orig:141 _55 ] [141])
        (sign_extend:DI (reg:SI 0 ax [457]))) "E2OUT.f":156 149 {*extendsidi2_rex64}
     (nil))
(insn 281 280 282 36 (parallel [
            (set (reg:DI 1 dx [orig:142 _56 ] [142])
                (plus:DI (reg:DI 1 dx [orig:140 _54 ] [140])
                    (reg:DI 0 ax [orig:141 _55 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":156 222 {*adddi_1}
     (nil))
(insn 282 281 283 36 (set (reg/f:DI 0 ax [458])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [4 egrid2+0 S8 A64])) "E2OUT.f":156 85 {*movdi_internal}
     (nil))
(insn 283 282 284 36 (set (reg:SF 21 xmm0 [orig:143 _57 ] [143])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:137 _51 ] [137])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [458])) [6 *egrid2_371(D) S4 A32])) "E2OUT.f":156 131 {*movsf_internal}
     (nil))
(insn 284 283 285 36 (set (reg/f:DI 0 ax [459])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [4 grid2+0 S8 A64])) "E2OUT.f":156 85 {*movdi_internal}
     (nil))
(insn 285 284 286 36 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:142 _56 ] [142])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [459])) [6 *grid2_389(D) S4 A32])
        (reg:SF 21 xmm0 [orig:143 _57 ] [143])) "E2OUT.f":156 131 {*movsf_internal}
     (nil))
(insn 286 285 1391 36 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":155 221 {*addsi_1}
     (nil))
(jump_insn 1391 286 1392 36 (set (pc)
        (label_ref 287)) "E2OUT.f":155 683 {jump}
     (nil)
 -> 287)
;;  succ:       35 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

(barrier 1392 1391 1444)
;; basic block 171, loop depth 0, maybe hot
;;  prev block 36, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35
;; bb 171 artificial_defs: { }
;; bb 171 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1444 1392 1443 171 76 (nil) [1 uses])
(note 1443 1444 1445 171 [bb 171] NOTE_INSN_BASIC_BLOCK)
(insn 1445 1443 290 171 (const_int 0 [0]) "E2OUT.f":156 718 {nop}
     (nil))
;;  succ:       37 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 37, loop depth 0, maybe hot
;;  prev block 171, next block 170, flags: (RTL, MODIFIED)
;;  pred:       171 [always]  (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 290 1445 291 37 19 (nil) [0 uses])
(note 291 290 292 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 292 291 1393 37 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":154 221 {*addsi_1}
     (nil))
(jump_insn 1393 292 1394 37 (set (pc)
        (label_ref 293)) "E2OUT.f":154 683 {jump}
     (nil)
 -> 293)
;;  succ:       33 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

(barrier 1394 1393 1441)
;; basic block 170, loop depth 0, maybe hot
;;  prev block 37, next block 38, flags: (RTL, MODIFIED)
;;  pred:       33
;; bb 170 artificial_defs: { }
;; bb 170 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1441 1394 1440 170 75 (nil) [1 uses])
(note 1440 1441 1442 170 [bb 170] NOTE_INSN_BASIC_BLOCK)
(insn 1442 1440 298 170 (const_int 0 [0]) "E2OUT.f":155 718 {nop}
     (nil))
;;  succ:       38 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, maybe hot
;;  prev block 170, next block 39, flags: (RTL, MODIFIED)
;;  pred:       170 [always]  (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 298 1442 299 38 17 (nil) [0 uses])
(note 299 298 1395 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1395 299 1396 38 (set (pc)
        (label_ref:DI 1438)) "E2OUT.f":161 683 {jump}
     (nil)
 -> 1438)
;;  succ:       169 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1396 1395 302)
;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL, MODIFIED)
;;  pred:       24
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 144 145 146 147 148 149 150 151 152 153 154 460 461 462 463 464
(code_label 302 1396 303 39 12 (nil) [1 uses])
(note 303 302 304 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 304 303 305 39 (set (reg/f:DI 0 ax [460])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":167 85 {*movdi_internal}
     (nil))
(insn 305 304 306 39 (set (reg:SI 0 ax [orig:144 _58 ] [144])
        (mem:SI (reg/f:DI 0 ax [460]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":167 86 {*movsi_internal}
     (nil))
(insn 306 305 307 39 (set (reg:DI 0 ax [orig:145 _59 ] [145])
        (sign_extend:DI (reg:SI 0 ax [orig:144 _58 ] [144]))) "E2OUT.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 307 306 308 39 (parallel [
            (set (reg:DI 0 ax [orig:146 _60 ] [146])
                (plus:DI (reg:DI 0 ax [orig:145 _59 ] [145])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":167 222 {*adddi_1}
     (nil))
(insn 308 307 309 39 (parallel [
            (set (reg:DI 0 ax [461])
                (plus:DI (reg:DI 0 ax [orig:146 _60 ] [146])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":167 222 {*adddi_1}
     (nil))
(insn 309 308 310 39 (set (reg:SI 0 ax [orig:147 _61 ] [147])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [461])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.iget S4 A32])) "E2OUT.f":167 86 {*movsi_internal}
     (nil))
(insn 310 309 311 39 (set (reg:DI 0 ax [orig:148 _62 ] [148])
        (sign_extend:DI (reg:SI 0 ax [orig:147 _61 ] [147]))) "E2OUT.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 311 310 312 39 (parallel [
            (set (reg:DI 0 ax [orig:149 _63 ] [149])
                (plus:DI (reg:DI 0 ax [orig:148 _62 ] [148])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":167 222 {*adddi_1}
     (nil))
(insn 312 311 313 39 (parallel [
            (set (reg:DI 0 ax [462])
                (plus:DI (reg:DI 0 ax [orig:149 _63 ] [149])
                    (const_int 804 [0x324])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":167 222 {*adddi_1}
     (nil))
(insn 313 312 314 39 (set (reg:SI 0 ax [orig:150 _64 ] [150])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [462])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.ismstg S4 A32])) "E2OUT.f":167 86 {*movsi_internal}
     (nil))
(insn 314 313 315 39 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])
        (reg:SI 0 ax [orig:150 _64 ] [150])) "E2OUT.f":167 86 {*movsi_internal}
     (nil))
(insn 315 314 316 39 (set (reg/f:DI 0 ax [463])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":168 85 {*movdi_internal}
     (nil))
(insn 316 315 317 39 (set (reg:SI 0 ax [orig:151 _65 ] [151])
        (mem:SI (reg/f:DI 0 ax [463]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":168 86 {*movsi_internal}
     (nil))
(insn 317 316 318 39 (set (reg:DI 0 ax [orig:152 _66 ] [152])
        (sign_extend:DI (reg:SI 0 ax [orig:151 _65 ] [151]))) "E2OUT.f":168 149 {*extendsidi2_rex64}
     (nil))
(insn 318 317 319 39 (parallel [
            (set (reg:DI 0 ax [orig:153 _67 ] [153])
                (plus:DI (reg:DI 0 ax [orig:152 _66 ] [152])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":168 222 {*adddi_1}
     (nil))
(insn 319 318 320 39 (parallel [
            (set (reg:DI 0 ax [464])
                (plus:DI (reg:DI 0 ax [orig:153 _67 ] [153])
                    (const_int 13604 [0x3524])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":168 222 {*adddi_1}
     (nil))
(insn 320 319 321 39 (set (reg:SI 0 ax [orig:154 _68 ] [154])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [464])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.ifilv S4 A32])) "E2OUT.f":168 86 {*movsi_internal}
     (nil))
(insn 321 320 322 39 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:154 _68 ] [154])
            (const_int 0 [0]))) "E2OUT.f":168 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 322 321 323 39 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 387)
            (pc))) "E2OUT.f":168 682 {*jcc}
     (nil)
 -> 387)
;;  succ:       40 (FALLTHRU)
;;              49
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 41, flags: (RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 155
(note 323 322 324 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 324 323 325 40 (set (reg:SI 0 ax [orig:155 ismth.18_69 ] [155])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])) "E2OUT.f":169 86 {*movsi_internal}
     (nil))
(insn 325 324 326 40 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:155 ismth.18_69 ] [155])
            (const_int 0 [0]))) "E2OUT.f":169 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 326 325 327 40 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 335)
            (pc))) "E2OUT.f":169 682 {*jcc}
     (nil)
 -> 335)
;;  succ:       41 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 41, loop depth 0, maybe hot
;;  prev block 40, next block 42, flags: (RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 465 466
(note 327 326 328 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 328 327 329 41 (set (reg:DI 1 dx [465])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 egrid1+0 S8 A64])) "E2OUT.f":170 85 {*movdi_internal}
     (nil))
(insn 329 328 331 41 (parallel [
            (set (reg:DI 0 ax [466])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":170 222 {*adddi_1}
     (nil))
(insn 331 329 332 41 (set (reg:DI 4 si)
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f830f90abd0 masks>)) "E2OUT.f":170 85 {*movdi_internal}
     (nil))
(insn 332 331 333 41 (set (reg:DI 5 di)
        (reg:DI 0 ax [466])) "E2OUT.f":170 85 {*movdi_internal}
     (nil))
(insn 333 332 334 41 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":170 88 {*movqi_internal}
     (nil))
(call_insn 334 333 335 41 (call (mem:QI (symbol_ref:DI ("p2filtf_") [flags 0x41]  <function_decl 0x7f830f8f8800 p2filtf>) [0 p2filtf S1 A8])
        (const_int 0 [0])) "E2OUT.f":170 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 42, loop depth 0, maybe hot
;;  prev block 41, next block 43, flags: (RTL, MODIFIED)
;;  pred:       40
;;              41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 156
(code_label 335 334 336 42 24 (nil) [1 uses])
(note 336 335 337 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 337 336 338 42 (set (reg:SI 0 ax [orig:156 ismth.19_70 ] [156])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])) "E2OUT.f":172 86 {*movsi_internal}
     (nil))
(insn 338 337 339 42 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:156 ismth.19_70 ] [156])
            (const_int 0 [0]))) "E2OUT.f":172 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 339 338 340 42 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 356)
            (pc))) "E2OUT.f":172 682 {*jcc}
     (nil)
 -> 356)
;;  succ:       43 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 43, loop depth 0, maybe hot
;;  prev block 42, next block 44, flags: (RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 467
(note 340 339 341 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 341 340 342 43 (set (reg/f:DI 0 ax [467])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":172 85 {*movdi_internal}
     (nil))
(insn 342 341 343 43 (set (reg:SI 0 ax [orig:157 _71 ] [157])
        (mem:SI (reg/f:DI 0 ax [467]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":172 86 {*movsi_internal}
     (nil))
(insn 343 342 344 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:157 _71 ] [157])
            (const_int 10 [0xa]))) "E2OUT.f":172 11 {*cmpsi_1}
     (nil))
(jump_insn 344 343 345 43 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 350)
            (pc))) "E2OUT.f":172 682 {*jcc}
     (nil)
 -> 350)
;;  succ:       45
;;              44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 44, loop depth 0, maybe hot
;;  prev block 43, next block 45, flags: (RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158 468
(note 345 344 346 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 346 345 347 44 (set (reg/f:DI 0 ax [468])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":172 85 {*movdi_internal}
     (nil))
(insn 347 346 348 44 (set (reg:SI 0 ax [orig:158 _72 ] [158])
        (mem:SI (reg/f:DI 0 ax [468]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":172 86 {*movsi_internal}
     (nil))
(insn 348 347 349 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:158 _72 ] [158])
            (const_int 21 [0x15]))) "E2OUT.f":172 11 {*cmpsi_1}
     (nil))
(jump_insn 349 348 350 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 356)
            (pc))) "E2OUT.f":172 682 {*jcc}
     (nil)
 -> 356)
;;  succ:       45 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 45, loop depth 0, maybe hot
;;  prev block 44, next block 46, flags: (RTL, MODIFIED)
;;  pred:       43
;;              44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 469
(code_label 350 349 351 45 26 (nil) [1 uses])
(note 351 350 352 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 352 351 353 45 (set (reg:DI 0 ax [469])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 egrid1+0 S8 A64])) "E2OUT.f":173 85 {*movdi_internal}
     (nil))
(insn 353 352 354 45 (set (reg:DI 5 di)
        (reg:DI 0 ax [469])) "E2OUT.f":173 85 {*movdi_internal}
     (nil))
(insn 354 353 355 45 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":173 88 {*movqi_internal}
     (nil))
(call_insn 355 354 356 45 (call (mem:QI (symbol_ref:DI ("efilt_") [flags 0x41]  <function_decl 0x7f830f8f8900 efilt>) [0 efilt S1 A8])
        (const_int 0 [0])) "E2OUT.f":173 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
;;  succ:       46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 46, loop depth 0, maybe hot
;;  prev block 45, next block 47, flags: (RTL, MODIFIED)
;;  pred:       42
;;              44
;;              45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 159 470
(code_label 356 355 357 46 25 (nil) [2 uses])
(note 357 356 358 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 358 357 359 46 (set (reg/f:DI 0 ax [470])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":175 85 {*movdi_internal}
     (nil))
(insn 359 358 360 46 (set (reg:SI 0 ax [orig:159 _73 ] [159])
        (mem:SI (reg/f:DI 0 ax [470]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":175 86 {*movsi_internal}
     (nil))
(insn 360 359 361 46 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:159 _73 ] [159])
            (const_int 0 [0]))) "E2OUT.f":175 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 361 360 362 46 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 429)
            (pc))) "E2OUT.f":175 682 {*jcc}
     (nil)
 -> 429)
;;  succ:       47 (FALLTHRU)
;;              54
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 47, loop depth 0, maybe hot
;;  prev block 46, next block 48, flags: (RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 161 162 163 164 165 166 167 471 472 473
(note 362 361 363 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 363 362 364 47 (set (reg/f:DI 0 ax [471])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":176 85 {*movdi_internal}
     (nil))
(insn 364 363 365 47 (set (reg:SI 0 ax [orig:160 _74 ] [160])
        (mem:SI (reg/f:DI 0 ax [471]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":176 86 {*movsi_internal}
     (nil))
(insn 365 364 366 47 (set (reg:DI 0 ax [orig:161 _75 ] [161])
        (sign_extend:DI (reg:SI 0 ax [orig:160 _74 ] [160]))) "E2OUT.f":176 149 {*extendsidi2_rex64}
     (nil))
(insn 366 365 367 47 (parallel [
            (set (reg:DI 0 ax [orig:162 _76 ] [162])
                (plus:DI (reg:DI 0 ax [orig:161 _75 ] [161])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":176 222 {*adddi_1}
     (nil))
(insn 367 366 368 47 (parallel [
            (set (reg:DI 0 ax [472])
                (plus:DI (reg:DI 0 ax [orig:162 _76 ] [162])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":176 222 {*adddi_1}
     (nil))
(insn 368 367 369 47 (set (reg:SI 0 ax [orig:163 _77 ] [163])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [472])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.iget S4 A32])) "E2OUT.f":176 86 {*movsi_internal}
     (nil))
(insn 369 368 370 47 (set (reg:DI 0 ax [orig:164 _78 ] [164])
        (sign_extend:DI (reg:SI 0 ax [orig:163 _77 ] [163]))) "E2OUT.f":176 149 {*extendsidi2_rex64}
     (nil))
(insn 370 369 371 47 (parallel [
            (set (reg:DI 0 ax [orig:165 _79 ] [165])
                (plus:DI (reg:DI 0 ax [orig:164 _78 ] [164])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":176 222 {*adddi_1}
     (nil))
(insn 371 370 372 47 (parallel [
            (set (reg:DI 0 ax [473])
                (plus:DI (reg:DI 0 ax [orig:165 _79 ] [165])
                    (const_int 804 [0x324])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":176 222 {*adddi_1}
     (nil))
(insn 372 371 373 47 (set (reg:SI 0 ax [orig:166 _80 ] [166])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [473])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.ismstg S4 A32])) "E2OUT.f":176 86 {*movsi_internal}
     (nil))
(insn 373 372 374 47 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])
        (reg:SI 0 ax [orig:166 _80 ] [166])) "E2OUT.f":176 86 {*movsi_internal}
     (nil))
(insn 374 373 375 47 (set (reg:SI 0 ax [orig:167 ismth.20_81 ] [167])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])) "E2OUT.f":177 86 {*movsi_internal}
     (nil))
(insn 375 374 376 47 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:167 ismth.20_81 ] [167])
            (const_int 0 [0]))) "E2OUT.f":177 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 376 375 377 47 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 429)
            (pc))) "E2OUT.f":177 682 {*jcc}
     (nil)
 -> 429)
;;  succ:       48 (FALLTHRU)
;;              54
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 48, loop depth 0, maybe hot
;;  prev block 47, next block 49, flags: (RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 474 475
(note 377 376 378 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 378 377 379 48 (set (reg:DI 1 dx [474])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [4 egrid2+0 S8 A64])) "E2OUT.f":178 85 {*movdi_internal}
     (nil))
(insn 379 378 381 48 (parallel [
            (set (reg:DI 0 ax [475])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":178 222 {*adddi_1}
     (nil))
(insn 381 379 382 48 (set (reg:DI 4 si)
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f830f90abd0 masks>)) "E2OUT.f":178 85 {*movdi_internal}
     (nil))
(insn 382 381 383 48 (set (reg:DI 5 di)
        (reg:DI 0 ax [475])) "E2OUT.f":178 85 {*movdi_internal}
     (nil))
(insn 383 382 384 48 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":178 88 {*movqi_internal}
     (nil))
(call_insn 384 383 1397 48 (call (mem:QI (symbol_ref:DI ("p2filtf_") [flags 0x41]  <function_decl 0x7f830f8f8800 p2filtf>) [0 p2filtf S1 A8])
        (const_int 0 [0])) "E2OUT.f":178 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 1397 384 1398 48 (set (pc)
        (label_ref 429)) 683 {jump}
     (nil)
 -> 429)
;;  succ:       54 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

(barrier 1398 1397 387)
;; basic block 49, loop depth 0, maybe hot
;;  prev block 48, next block 50, flags: (RTL, MODIFIED)
;;  pred:       39
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 168
(code_label 387 1398 388 49 23 (nil) [1 uses])
(note 388 387 389 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 389 388 390 49 (set (reg:SI 0 ax [orig:168 ismth.21_82 ] [168])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])) "E2OUT.f":182 86 {*movsi_internal}
     (nil))
(insn 390 389 391 49 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:168 ismth.21_82 ] [168])
            (const_int 0 [0]))) "E2OUT.f":182 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 391 390 392 49 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 400)
            (pc))) "E2OUT.f":182 682 {*jcc}
     (nil)
 -> 400)
;;  succ:       50 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 50, loop depth 0, maybe hot
;;  prev block 49, next block 51, flags: (RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 476 477
(note 392 391 393 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 393 392 394 50 (set (reg:DI 1 dx [476])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 egrid1+0 S8 A64])) "E2OUT.f":183 85 {*movdi_internal}
     (nil))
(insn 394 393 396 50 (parallel [
            (set (reg:DI 0 ax [477])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":183 222 {*adddi_1}
     (nil))
(insn 396 394 397 50 (set (reg:DI 4 si)
        (const:DI (plus:DI (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f830f90abd0 masks>)
                (const_int 118524 [0x1cefc])))) "E2OUT.f":183 85 {*movdi_internal}
     (nil))
(insn 397 396 398 50 (set (reg:DI 5 di)
        (reg:DI 0 ax [477])) "E2OUT.f":183 85 {*movdi_internal}
     (nil))
(insn 398 397 399 50 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":183 88 {*movqi_internal}
     (nil))
(call_insn 399 398 400 50 (call (mem:QI (symbol_ref:DI ("p2fltvf_") [flags 0x41]  <function_decl 0x7f830f8f8a00 p2fltvf>) [0 p2fltvf S1 A8])
        (const_int 0 [0])) "E2OUT.f":183 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       51 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 51, loop depth 0, maybe hot
;;  prev block 50, next block 52, flags: (RTL, MODIFIED)
;;  pred:       49
;;              50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 169 478
(code_label 400 399 401 51 28 (nil) [1 uses])
(note 401 400 402 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 402 401 403 51 (set (reg/f:DI 0 ax [478])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":185 85 {*movdi_internal}
     (nil))
(insn 403 402 404 51 (set (reg:SI 0 ax [orig:169 _83 ] [169])
        (mem:SI (reg/f:DI 0 ax [478]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":185 86 {*movsi_internal}
     (nil))
(insn 404 403 405 51 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:169 _83 ] [169])
            (const_int 0 [0]))) "E2OUT.f":185 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 405 404 406 51 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 429)
            (pc))) "E2OUT.f":185 682 {*jcc}
     (nil)
 -> 429)
;;  succ:       52 (FALLTHRU)
;;              54
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 52, loop depth 0, maybe hot
;;  prev block 51, next block 53, flags: (RTL, MODIFIED)
;;  pred:       51 (FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 170 171 172 173 174 175 176 177 479 480 481
(note 406 405 407 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 407 406 408 52 (set (reg/f:DI 0 ax [479])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":186 85 {*movdi_internal}
     (nil))
(insn 408 407 409 52 (set (reg:SI 0 ax [orig:170 _84 ] [170])
        (mem:SI (reg/f:DI 0 ax [479]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":186 86 {*movsi_internal}
     (nil))
(insn 409 408 410 52 (set (reg:DI 0 ax [orig:171 _85 ] [171])
        (sign_extend:DI (reg:SI 0 ax [orig:170 _84 ] [170]))) "E2OUT.f":186 149 {*extendsidi2_rex64}
     (nil))
(insn 410 409 411 52 (parallel [
            (set (reg:DI 0 ax [orig:172 _86 ] [172])
                (plus:DI (reg:DI 0 ax [orig:171 _85 ] [171])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":186 222 {*adddi_1}
     (nil))
(insn 411 410 412 52 (parallel [
            (set (reg:DI 0 ax [480])
                (plus:DI (reg:DI 0 ax [orig:172 _86 ] [172])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":186 222 {*adddi_1}
     (nil))
(insn 412 411 413 52 (set (reg:SI 0 ax [orig:173 _87 ] [173])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [480])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.iget S4 A32])) "E2OUT.f":186 86 {*movsi_internal}
     (nil))
(insn 413 412 414 52 (set (reg:DI 0 ax [orig:174 _88 ] [174])
        (sign_extend:DI (reg:SI 0 ax [orig:173 _87 ] [173]))) "E2OUT.f":186 149 {*extendsidi2_rex64}
     (nil))
(insn 414 413 415 52 (parallel [
            (set (reg:DI 0 ax [orig:175 _89 ] [175])
                (plus:DI (reg:DI 0 ax [orig:174 _88 ] [174])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":186 222 {*adddi_1}
     (nil))
(insn 415 414 416 52 (parallel [
            (set (reg:DI 0 ax [481])
                (plus:DI (reg:DI 0 ax [orig:175 _89 ] [175])
                    (const_int 804 [0x324])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":186 222 {*adddi_1}
     (nil))
(insn 416 415 417 52 (set (reg:SI 0 ax [orig:176 _90 ] [176])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [481])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.ismstg S4 A32])) "E2OUT.f":186 86 {*movsi_internal}
     (nil))
(insn 417 416 418 52 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])
        (reg:SI 0 ax [orig:176 _90 ] [176])) "E2OUT.f":186 86 {*movsi_internal}
     (nil))
(insn 418 417 419 52 (set (reg:SI 0 ax [orig:177 ismth.22_91 ] [177])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])) "E2OUT.f":187 86 {*movsi_internal}
     (nil))
(insn 419 418 420 52 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:177 ismth.22_91 ] [177])
            (const_int 0 [0]))) "E2OUT.f":187 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 420 419 421 52 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 429)
            (pc))) "E2OUT.f":187 682 {*jcc}
     (nil)
 -> 429)
;;  succ:       53 (FALLTHRU)
;;              54
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 53, loop depth 0, maybe hot
;;  prev block 52, next block 54, flags: (RTL, MODIFIED)
;;  pred:       52 (FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 482 483
(note 421 420 422 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 422 421 423 53 (set (reg:DI 1 dx [482])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [4 egrid2+0 S8 A64])) "E2OUT.f":188 85 {*movdi_internal}
     (nil))
(insn 423 422 425 53 (parallel [
            (set (reg:DI 0 ax [483])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":188 222 {*adddi_1}
     (nil))
(insn 425 423 426 53 (set (reg:DI 4 si)
        (const:DI (plus:DI (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f830f90abd0 masks>)
                (const_int 118524 [0x1cefc])))) "E2OUT.f":188 85 {*movdi_internal}
     (nil))
(insn 426 425 427 53 (set (reg:DI 5 di)
        (reg:DI 0 ax [483])) "E2OUT.f":188 85 {*movdi_internal}
     (nil))
(insn 427 426 428 53 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":188 88 {*movqi_internal}
     (nil))
(call_insn 428 427 429 53 (call (mem:QI (symbol_ref:DI ("p2fltvf_") [flags 0x41]  <function_decl 0x7f830f8f8a00 p2fltvf>) [0 p2fltvf S1 A8])
        (const_int 0 [0])) "E2OUT.f":188 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       54 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 54, loop depth 0, maybe hot
;;  prev block 53, next block 55, flags: (RTL, MODIFIED)
;;  pred:       52
;;              51
;;              53 (FALLTHRU)
;;              46
;;              47
;;              48 [always] 
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 178 179 180 181 484 485
(code_label 429 428 430 54 27 (nil) [5 uses])
(note 430 429 431 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 431 430 432 54 (set (reg/f:DI 0 ax [484])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":195 85 {*movdi_internal}
     (nil))
(insn 432 431 433 54 (set (reg:SI 0 ax [orig:178 _92 ] [178])
        (mem:SI (reg/f:DI 0 ax [484]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":195 86 {*movsi_internal}
     (nil))
(insn 433 432 434 54 (set (reg:DI 0 ax [orig:179 _93 ] [179])
        (sign_extend:DI (reg:SI 0 ax [orig:178 _92 ] [178]))) "E2OUT.f":195 149 {*extendsidi2_rex64}
     (nil))
(insn 434 433 435 54 (parallel [
            (set (reg:DI 0 ax [orig:180 _94 ] [180])
                (plus:DI (reg:DI 0 ax [orig:179 _93 ] [179])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":195 222 {*adddi_1}
     (nil))
(insn 435 434 436 54 (parallel [
            (set (reg:DI 0 ax [485])
                (plus:DI (reg:DI 0 ax [orig:180 _94 ] [180])
                    (const_int 13604 [0x3524])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":195 222 {*adddi_1}
     (nil))
(insn 436 435 437 54 (set (reg:SI 0 ax [orig:181 _95 ] [181])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [485])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.ifilv S4 A32])) "E2OUT.f":195 86 {*movsi_internal}
     (nil))
(insn 437 436 438 54 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:181 _95 ] [181])
            (const_int 0 [0]))) "E2OUT.f":195 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 438 437 439 54 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 877)
            (pc))) "E2OUT.f":195 682 {*jcc}
     (nil)
 -> 877)
;;  succ:       55 (FALLTHRU)
;;              111
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 55, loop depth 0, maybe hot
;;  prev block 54, next block 56, flags: (RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 182 183 184 185 186 187 188 189 486 487 488 489
(note 439 438 440 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 440 439 441 55 (set (reg:DI 0 ax [486])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 egrid1+0 S8 A64])) "E2OUT.f":199 85 {*movdi_internal}
     (nil))
(insn 441 440 442 55 (set (reg:DI 37 r8)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":199 85 {*movdi_internal}
     (nil))
(insn 442 441 443 55 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":199 85 {*movdi_internal}
     (nil))
(insn 443 442 444 55 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f830f90d090 options>)
                (const_int 16 [0x10])))) "E2OUT.f":199 85 {*movdi_internal}
     (nil))
(insn 444 443 445 55 (set (reg:DI 4 si)
        (symbol_ref:DI ("hful.4073") [flags 0x202]  <var_decl 0x7f830f917630 hful>)) "E2OUT.f":199 85 {*movdi_internal}
     (nil))
(insn 445 444 446 55 (set (reg:DI 5 di)
        (reg:DI 0 ax [486])) "E2OUT.f":199 85 {*movdi_internal}
     (nil))
(insn 446 445 447 55 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":199 88 {*movqi_internal}
     (nil))
(call_insn 447 446 448 55 (call (mem:QI (symbol_ref:DI ("fillv_") [flags 0x41]  <function_decl 0x7f830f8f8b00 fillv>) [0 fillv S1 A8])
        (const_int 0 [0])) "E2OUT.f":199 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (nil))))))))
(insn 448 447 449 55 (set (reg/f:DI 0 ax [487])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":203 85 {*movdi_internal}
     (nil))
(insn 449 448 450 55 (set (reg:SI 0 ax [orig:182 _96 ] [182])
        (mem:SI (reg/f:DI 0 ax [487]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":203 86 {*movsi_internal}
     (nil))
(insn 450 449 451 55 (set (reg:DI 0 ax [orig:183 _97 ] [183])
        (sign_extend:DI (reg:SI 0 ax [orig:182 _96 ] [182]))) "E2OUT.f":203 149 {*extendsidi2_rex64}
     (nil))
(insn 451 450 452 55 (parallel [
            (set (reg:DI 0 ax [orig:184 _98 ] [184])
                (plus:DI (reg:DI 0 ax [orig:183 _97 ] [183])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":203 222 {*adddi_1}
     (nil))
(insn 452 451 453 55 (parallel [
            (set (reg:DI 0 ax [488])
                (plus:DI (reg:DI 0 ax [orig:184 _98 ] [184])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":203 222 {*adddi_1}
     (nil))
(insn 453 452 454 55 (set (reg:SI 0 ax [orig:185 _99 ] [185])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [488])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.iget S4 A32])) "E2OUT.f":203 86 {*movsi_internal}
     (nil))
(insn 454 453 455 55 (set (reg:DI 0 ax [orig:186 _100 ] [186])
        (sign_extend:DI (reg:SI 0 ax [orig:185 _99 ] [185]))) "E2OUT.f":203 149 {*extendsidi2_rex64}
     (nil))
(insn 455 454 456 55 (parallel [
            (set (reg:DI 0 ax [orig:187 _101 ] [187])
                (plus:DI (reg:DI 0 ax [orig:186 _100 ] [186])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":203 222 {*adddi_1}
     (nil))
(insn 456 455 457 55 (parallel [
            (set (reg:DI 0 ax [489])
                (plus:DI (reg:DI 0 ax [orig:187 _101 ] [187])
                    (const_int 1004 [0x3ec])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":203 222 {*adddi_1}
     (nil))
(insn 457 456 458 55 (set (reg:SI 0 ax [orig:188 _102 ] [188])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [489])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.ismful S4 A32])) "E2OUT.f":203 86 {*movsi_internal}
     (nil))
(insn 458 457 459 55 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])
        (reg:SI 0 ax [orig:188 _102 ] [188])) "E2OUT.f":203 86 {*movsi_internal}
     (nil))
(insn 459 458 460 55 (set (reg:SI 0 ax [orig:189 ismth.23_103 ] [189])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])) "E2OUT.f":204 86 {*movsi_internal}
     (nil))
(insn 460 459 461 55 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:189 ismth.23_103 ] [189])
            (const_int 0 [0]))) "E2OUT.f":204 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 461 460 462 55 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 470)
            (pc))) "E2OUT.f":204 682 {*jcc}
     (nil)
 -> 470)
;;  succ:       56 (FALLTHRU)
;;              57
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 56, loop depth 0, maybe hot
;;  prev block 55, next block 57, flags: (RTL, MODIFIED)
;;  pred:       55 (FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 490
(note 462 461 463 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 463 462 464 56 (parallel [
            (set (reg:DI 0 ax [490])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":204 222 {*adddi_1}
     (nil))
(insn 464 463 465 56 (set (reg:DI 2 cx)
        (reg:DI 0 ax [490])) "E2OUT.f":204 85 {*movdi_internal}
     (nil))
(insn 465 464 466 56 (set (reg:DI 1 dx)
        (symbol_ref:DI ("hful.4073") [flags 0x202]  <var_decl 0x7f830f917630 hful>)) "E2OUT.f":204 85 {*movdi_internal}
     (nil))
(insn 466 465 467 56 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":204 85 {*movdi_internal}
     (nil))
(insn 467 466 468 56 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":204 85 {*movdi_internal}
     (nil))
(insn 468 467 469 56 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":204 88 {*movqi_internal}
     (nil))
(call_insn 469 468 470 56 (call (mem:QI (symbol_ref:DI ("filter_") [flags 0x41]  <function_decl 0x7f830f8f8c00 filter>) [0 filter S1 A8])
        (const_int 0 [0])) "E2OUT.f":204 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
;;  succ:       57 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 57, loop depth 0, maybe hot
;;  prev block 56, next block 58, flags: (RTL, MODIFIED)
;;  pred:       55
;;              56 (FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 190
(code_label 470 469 471 57 30 (nil) [1 uses])
(note 471 470 472 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 472 471 473 57 (set (reg:SI 0 ax [orig:190 _104 ] [190])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 473 472 474 57 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:190 _104 ] [190])
            (const_int 89 [0x59]))) "E2OUT.f":207 11 {*cmpsi_1}
     (nil))
(jump_insn 474 473 475 57 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 503)
            (pc))) "E2OUT.f":207 682 {*jcc}
     (nil)
 -> 503)
;;  succ:       65
;;              58 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 58, loop depth 0, maybe hot
;;  prev block 57, next block 59, flags: (RTL, MODIFIED)
;;  pred:       57 (FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 191
(note 475 474 476 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 476 475 477 58 (set (reg:SI 0 ax [orig:191 _105 ] [191])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 477 476 478 58 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:191 _105 ] [191])
            (const_int 97 [0x61]))) "E2OUT.f":207 11 {*cmpsi_1}
     (nil))
(jump_insn 478 477 479 58 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 684)
            (pc))) "E2OUT.f":207 682 {*jcc}
     (nil)
 -> 684)
;;  succ:       59 (FALLTHRU)
;;              86
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 59, loop depth 0, maybe hot
;;  prev block 58, next block 60, flags: (RTL, MODIFIED)
;;  pred:       58 (FALLTHRU)
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 192
(note 479 478 480 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 480 479 481 59 (set (reg:SI 0 ax [orig:192 _106 ] [192])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 481 480 482 59 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:192 _106 ] [192])
            (const_int 99 [0x63]))) "E2OUT.f":207 11 {*cmpsi_1}
     (nil))
(jump_insn 482 481 483 59 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 684)
            (pc))) "E2OUT.f":207 682 {*jcc}
     (nil)
 -> 684)
;;  succ:       60 (FALLTHRU)
;;              86
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 60, loop depth 0, maybe hot
;;  prev block 59, next block 61, flags: (RTL, MODIFIED)
;;  pred:       59 (FALLTHRU)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 193
(note 483 482 484 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 484 483 485 60 (set (reg:SI 0 ax [orig:193 _107 ] [193])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 485 484 486 60 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:193 _107 ] [193])
            (const_int 190 [0xbe]))) "E2OUT.f":207 11 {*cmpsi_1}
     (nil))
(jump_insn 486 485 487 60 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 684)
            (pc))) "E2OUT.f":207 682 {*jcc}
     (nil)
 -> 684)
;;  succ:       61 (FALLTHRU)
;;              86
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 61, loop depth 0, maybe hot
;;  prev block 60, next block 62, flags: (RTL, MODIFIED)
;;  pred:       60 (FALLTHRU)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 194
(note 487 486 488 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 488 487 489 61 (set (reg:SI 0 ax [orig:194 _108 ] [194])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 489 488 490 61 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:194 _108 ] [194])
            (const_int 192 [0xc0]))) "E2OUT.f":207 11 {*cmpsi_1}
     (nil))
(jump_insn 490 489 491 61 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 684)
            (pc))) "E2OUT.f":207 682 {*jcc}
     (nil)
 -> 684)
;;  succ:       62 (FALLTHRU)
;;              86
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 62, loop depth 0, maybe hot
;;  prev block 61, next block 63, flags: (RTL, MODIFIED)
;;  pred:       61 (FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 195
(note 491 490 492 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 492 491 493 62 (set (reg:SI 0 ax [orig:195 _109 ] [195])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 493 492 494 62 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:195 _109 ] [195])
            (const_int 194 [0xc2]))) "E2OUT.f":207 11 {*cmpsi_1}
     (nil))
(jump_insn 494 493 495 62 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 684)
            (pc))) "E2OUT.f":207 682 {*jcc}
     (nil)
 -> 684)
;;  succ:       63 (FALLTHRU)
;;              86
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 63, loop depth 0, maybe hot
;;  prev block 62, next block 64, flags: (RTL, MODIFIED)
;;  pred:       62 (FALLTHRU)
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 196
(note 495 494 496 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 496 495 497 63 (set (reg:SI 0 ax [orig:196 _110 ] [196])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 497 496 498 63 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:196 _110 ] [196])
            (const_int 196 [0xc4]))) "E2OUT.f":207 11 {*cmpsi_1}
     (nil))
(jump_insn 498 497 499 63 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 684)
            (pc))) "E2OUT.f":207 682 {*jcc}
     (nil)
 -> 684)
;;  succ:       64 (FALLTHRU)
;;              86
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 64, loop depth 0, maybe hot
;;  prev block 63, next block 65, flags: (RTL, MODIFIED)
;;  pred:       63 (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 197
(note 499 498 500 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 500 499 501 64 (set (reg:SI 0 ax [orig:197 _111 ] [197])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 501 500 502 64 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:197 _111 ] [197])
            (const_int 255 [0xff]))) "E2OUT.f":207 11 {*cmpsi_1}
     (nil))
(jump_insn 502 501 503 64 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 684)
            (pc))) "E2OUT.f":207 682 {*jcc}
     (nil)
 -> 684)
;;  succ:       65 (FALLTHRU)
;;              86
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 65, loop depth 0, maybe hot
;;  prev block 64, next block 66, flags: (RTL, MODIFIED)
;;  pred:       57
;;              64 (FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 198 491
(code_label 503 502 504 65 31 (nil) [1 uses])
(note 504 503 505 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 505 504 506 65 (set (reg/f:DI 0 ax [491])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":214 85 {*movdi_internal}
     (nil))
(insn 506 505 507 65 (set (reg:SI 0 ax [orig:198 _112 ] [198])
        (mem:SI (reg/f:DI 0 ax [491]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":214 86 {*movsi_internal}
     (nil))
(insn 507 506 508 65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:198 _112 ] [198])
            (const_int 50 [0x32]))) "E2OUT.f":214 11 {*cmpsi_1}
     (nil))
(jump_insn 508 507 509 65 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 520)
            (pc))) "E2OUT.f":214 682 {*jcc}
     (nil)
 -> 520)
;;  succ:       66 (FALLTHRU)
;;              67
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 66, loop depth 0, maybe hot
;;  prev block 65, next block 67, flags: (RTL, MODIFIED)
;;  pred:       65 (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 492 493
(note 509 508 510 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 510 509 511 66 (set (reg:DI 1 dx [492])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":215 85 {*movdi_internal}
     (nil))
(insn 511 510 512 66 (set (reg:DI 0 ax [493])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 grid1+0 S8 A64])) "E2OUT.f":215 85 {*movdi_internal}
     (nil))
(insn 512 511 513 66 (set (reg:DI 2 cx)
        (reg:DI 1 dx [492])) "E2OUT.f":215 85 {*movdi_internal}
     (nil))
(insn 513 512 514 66 (set (reg:DI 1 dx)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":215 85 {*movdi_internal}
     (nil))
(insn 514 513 515 66 (set (reg:DI 4 si)
        (reg:DI 0 ax [493])) "E2OUT.f":215 85 {*movdi_internal}
     (nil))
(insn 515 514 516 66 (set (reg:DI 5 di)
        (symbol_ref:DI ("hful.4073") [flags 0x202]  <var_decl 0x7f830f917630 hful>)) "E2OUT.f":215 85 {*movdi_internal}
     (nil))
(insn 516 515 517 66 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":215 88 {*movqi_internal}
     (nil))
(call_insn 517 516 1399 66 (call (mem:QI (symbol_ref:DI ("out_masks_") [flags 0x41]  <function_decl 0x7f830f8f8d00 out_masks>) [0 out_masks S1 A8])
        (const_int 0 [0])) "E2OUT.f":215 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(jump_insn 1399 517 1400 66 (set (pc)
        (label_ref 530)) 683 {jump}
     (nil)
 -> 530)
;;  succ:       68 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1400 1399 520)
;; basic block 67, loop depth 0, maybe hot
;;  prev block 66, next block 68, flags: (RTL, MODIFIED)
;;  pred:       65
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 494 495
(code_label 520 1400 521 67 33 (nil) [1 uses])
(note 521 520 522 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 522 521 523 67 (set (reg:DI 1 dx [494])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":223 85 {*movdi_internal}
     (nil))
(insn 523 522 524 67 (set (reg:DI 0 ax [495])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 grid1+0 S8 A64])) "E2OUT.f":223 85 {*movdi_internal}
     (nil))
(insn 524 523 525 67 (set (reg:DI 2 cx)
        (reg:DI 1 dx [494])) "E2OUT.f":223 85 {*movdi_internal}
     (nil))
(insn 525 524 526 67 (set (reg:DI 1 dx)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":223 85 {*movdi_internal}
     (nil))
(insn 526 525 527 67 (set (reg:DI 4 si)
        (reg:DI 0 ax [495])) "E2OUT.f":223 85 {*movdi_internal}
     (nil))
(insn 527 526 528 67 (set (reg:DI 5 di)
        (symbol_ref:DI ("hful.4073") [flags 0x202]  <var_decl 0x7f830f917630 hful>)) "E2OUT.f":223 85 {*movdi_internal}
     (nil))
(insn 528 527 529 67 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":223 88 {*movqi_internal}
     (nil))
(call_insn 529 528 530 67 (call (mem:QI (symbol_ref:DI ("interp3_") [flags 0x41]  <function_decl 0x7f830f8f8e00 interp3>) [0 interp3 S1 A8])
        (const_int 0 [0])) "E2OUT.f":223 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
;;  succ:       68 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 68, loop depth 0, maybe hot
;;  prev block 67, next block 69, flags: (RTL, MODIFIED)
;;  pred:       67 (FALLTHRU)
;;              66 [always] 
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 199 496
(code_label 530 529 531 68 34 (nil) [1 uses])
(note 531 530 532 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 532 531 533 68 (set (reg/f:DI 0 ax [496])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":231 85 {*movdi_internal}
     (nil))
(insn 533 532 534 68 (set (reg:SI 0 ax [orig:199 _113 ] [199])
        (mem:SI (reg/f:DI 0 ax [496]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":231 86 {*movsi_internal}
     (nil))
(insn 534 533 535 68 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:199 _113 ] [199])
            (const_int 56 [0x38]))) "E2OUT.f":231 11 {*cmpsi_1}
     (nil))
(jump_insn 535 534 536 68 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 581)
            (pc))) "E2OUT.f":231 682 {*jcc}
     (nil)
 -> 581)
;;  succ:       78
;;              69 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, maybe hot
;;  prev block 68, next block 70, flags: (RTL, MODIFIED)
;;  pred:       68 (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 200 497
(note 536 535 537 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 537 536 538 69 (set (reg/f:DI 0 ax [497])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":231 85 {*movdi_internal}
     (nil))
(insn 538 537 539 69 (set (reg:SI 0 ax [orig:200 _114 ] [200])
        (mem:SI (reg/f:DI 0 ax [497]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":231 86 {*movsi_internal}
     (nil))
(insn 539 538 540 69 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:200 _114 ] [200])
            (const_int 57 [0x39]))) "E2OUT.f":231 11 {*cmpsi_1}
     (nil))
(jump_insn 540 539 541 69 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 581)
            (pc))) "E2OUT.f":231 682 {*jcc}
     (nil)
 -> 581)
;;  succ:       78
;;              70 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 70, loop depth 0, maybe hot
;;  prev block 69, next block 71, flags: (RTL, MODIFIED)
;;  pred:       69 (FALLTHRU)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 201 498
(note 541 540 542 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 542 541 543 70 (set (reg/f:DI 0 ax [498])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":231 85 {*movdi_internal}
     (nil))
(insn 543 542 544 70 (set (reg:SI 0 ax [orig:201 _115 ] [201])
        (mem:SI (reg/f:DI 0 ax [498]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":231 86 {*movsi_internal}
     (nil))
(insn 544 543 545 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:201 _115 ] [201])
            (const_int 60 [0x3c]))) "E2OUT.f":231 11 {*cmpsi_1}
     (nil))
(jump_insn 545 544 546 70 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 581)
            (pc))) "E2OUT.f":231 682 {*jcc}
     (nil)
 -> 581)
;;  succ:       78
;;              71 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 71, loop depth 0, maybe hot
;;  prev block 70, next block 72, flags: (RTL, MODIFIED)
;;  pred:       70 (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 202 499
(note 546 545 547 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 547 546 548 71 (set (reg/f:DI 0 ax [499])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":231 85 {*movdi_internal}
     (nil))
(insn 548 547 549 71 (set (reg:SI 0 ax [orig:202 _116 ] [202])
        (mem:SI (reg/f:DI 0 ax [499]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":231 86 {*movsi_internal}
     (nil))
(insn 549 548 550 71 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:202 _116 ] [202])
            (const_int 61 [0x3d]))) "E2OUT.f":231 11 {*cmpsi_1}
     (nil))
(jump_insn 550 549 551 71 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 581)
            (pc))) "E2OUT.f":231 682 {*jcc}
     (nil)
 -> 581)
;;  succ:       78
;;              72 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 72, loop depth 0, maybe hot
;;  prev block 71, next block 73, flags: (RTL, MODIFIED)
;;  pred:       71 (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 203 500
(note 551 550 552 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 552 551 553 72 (set (reg/f:DI 0 ax [500])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":231 85 {*movdi_internal}
     (nil))
(insn 553 552 554 72 (set (reg:SI 0 ax [orig:203 _117 ] [203])
        (mem:SI (reg/f:DI 0 ax [500]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":231 86 {*movsi_internal}
     (nil))
(insn 554 553 555 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:203 _117 ] [203])
            (const_int 64 [0x40]))) "E2OUT.f":231 11 {*cmpsi_1}
     (nil))
(jump_insn 555 554 556 72 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 581)
            (pc))) "E2OUT.f":231 682 {*jcc}
     (nil)
 -> 581)
;;  succ:       78
;;              73 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, maybe hot
;;  prev block 72, next block 74, flags: (RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 204 501
(note 556 555 557 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 557 556 558 73 (set (reg/f:DI 0 ax [501])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":231 85 {*movdi_internal}
     (nil))
(insn 558 557 559 73 (set (reg:SI 0 ax [orig:204 _118 ] [204])
        (mem:SI (reg/f:DI 0 ax [501]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":231 86 {*movsi_internal}
     (nil))
(insn 559 558 560 73 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:204 _118 ] [204])
            (const_int 65 [0x41]))) "E2OUT.f":231 11 {*cmpsi_1}
     (nil))
(jump_insn 560 559 561 73 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 581)
            (pc))) "E2OUT.f":231 682 {*jcc}
     (nil)
 -> 581)
;;  succ:       78
;;              74 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 74, loop depth 0, maybe hot
;;  prev block 73, next block 75, flags: (RTL, MODIFIED)
;;  pred:       73 (FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 205 502
(note 561 560 562 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 562 561 563 74 (set (reg/f:DI 0 ax [502])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":231 85 {*movdi_internal}
     (nil))
(insn 563 562 564 74 (set (reg:SI 0 ax [orig:205 _119 ] [205])
        (mem:SI (reg/f:DI 0 ax [502]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":231 86 {*movsi_internal}
     (nil))
(insn 564 563 565 74 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:205 _119 ] [205])
            (const_int 73 [0x49]))) "E2OUT.f":231 11 {*cmpsi_1}
     (nil))
(jump_insn 565 564 566 74 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 581)
            (pc))) "E2OUT.f":231 682 {*jcc}
     (nil)
 -> 581)
;;  succ:       78
;;              75 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 75, loop depth 0, maybe hot
;;  prev block 74, next block 76, flags: (RTL, MODIFIED)
;;  pred:       74 (FALLTHRU)
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 206 503
(note 566 565 567 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 567 566 568 75 (set (reg/f:DI 0 ax [503])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":231 85 {*movdi_internal}
     (nil))
(insn 568 567 569 75 (set (reg:SI 0 ax [orig:206 _120 ] [206])
        (mem:SI (reg/f:DI 0 ax [503]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":231 86 {*movsi_internal}
     (nil))
(insn 569 568 570 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:206 _120 ] [206])
            (const_int 74 [0x4a]))) "E2OUT.f":231 11 {*cmpsi_1}
     (nil))
(jump_insn 570 569 571 75 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 581)
            (pc))) "E2OUT.f":231 682 {*jcc}
     (nil)
 -> 581)
;;  succ:       78
;;              76 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 76, loop depth 0, maybe hot
;;  prev block 75, next block 77, flags: (RTL, MODIFIED)
;;  pred:       75 (FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 207 504
(note 571 570 572 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 572 571 573 76 (set (reg/f:DI 0 ax [504])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":231 85 {*movdi_internal}
     (nil))
(insn 573 572 574 76 (set (reg:SI 0 ax [orig:207 _121 ] [207])
        (mem:SI (reg/f:DI 0 ax [504]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":231 86 {*movsi_internal}
     (nil))
(insn 574 573 575 76 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:207 _121 ] [207])
            (const_int 95 [0x5f]))) "E2OUT.f":231 11 {*cmpsi_1}
     (nil))
(jump_insn 575 574 576 76 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 581)
            (pc))) "E2OUT.f":231 682 {*jcc}
     (nil)
 -> 581)
;;  succ:       78
;;              77 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 77, loop depth 0, maybe hot
;;  prev block 76, next block 78, flags: (RTL, MODIFIED)
;;  pred:       76 (FALLTHRU)
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 208 505
(note 576 575 577 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 577 576 578 77 (set (reg/f:DI 0 ax [505])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":231 85 {*movdi_internal}
     (nil))
(insn 578 577 579 77 (set (reg:SI 0 ax [orig:208 _122 ] [208])
        (mem:SI (reg/f:DI 0 ax [505]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":231 86 {*movsi_internal}
     (nil))
(insn 579 578 580 77 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:208 _122 ] [208])
            (const_int 96 [0x60]))) "E2OUT.f":231 11 {*cmpsi_1}
     (nil))
(jump_insn 580 579 581 77 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 651)
            (pc))) "E2OUT.f":231 682 {*jcc}
     (nil)
 -> 651)
;;  succ:       78 (FALLTHRU)
;;              82
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 78, loop depth 0, maybe hot
;;  prev block 77, next block 79, flags: (RTL, MODIFIED)
;;  pred:       68
;;              69
;;              70
;;              71
;;              72
;;              73
;;              74
;;              75
;;              76
;;              77 (FALLTHRU)
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 209 506 507
(code_label 581 580 582 78 35 (nil) [9 uses])
(note 582 581 583 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 583 582 584 78 (set (reg:DI 0 ax [506])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [4 egrid2+0 S8 A64])) "E2OUT.f":232 85 {*movdi_internal}
     (nil))
(insn 584 583 585 78 (set (reg:DI 37 r8)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":232 85 {*movdi_internal}
     (nil))
(insn 585 584 586 78 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":232 85 {*movdi_internal}
     (nil))
(insn 586 585 587 78 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f830f90d090 options>)
                (const_int 16 [0x10])))) "E2OUT.f":232 85 {*movdi_internal}
     (nil))
(insn 587 586 588 78 (set (reg:DI 4 si)
        (symbol_ref:DI ("vful.4080") [flags 0x202]  <var_decl 0x7f830f917900 vful>)) "E2OUT.f":232 85 {*movdi_internal}
     (nil))
(insn 588 587 589 78 (set (reg:DI 5 di)
        (reg:DI 0 ax [506])) "E2OUT.f":232 85 {*movdi_internal}
     (nil))
(insn 589 588 590 78 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":232 88 {*movqi_internal}
     (nil))
(call_insn 590 589 591 78 (call (mem:QI (symbol_ref:DI ("fillv_") [flags 0x41]  <function_decl 0x7f830f8f8b00 fillv>) [0 fillv S1 A8])
        (const_int 0 [0])) "E2OUT.f":232 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (nil))))))))
(insn 591 590 592 78 (set (reg/f:DI 0 ax [507])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":233 85 {*movdi_internal}
     (nil))
(insn 592 591 593 78 (set (reg:SI 0 ax [orig:209 _123 ] [209])
        (mem:SI (reg/f:DI 0 ax [507]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":233 86 {*movsi_internal}
     (nil))
(insn 593 592 594 78 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:209 _123 ] [209])
            (const_int 0 [0]))) "E2OUT.f":233 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 594 593 595 78 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 618)
            (pc))) "E2OUT.f":233 682 {*jcc}
     (nil)
 -> 618)
;;  succ:       79 (FALLTHRU)
;;              81
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 79, loop depth 0, maybe hot
;;  prev block 78, next block 80, flags: (RTL, MODIFIED)
;;  pred:       78 (FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 210 211 212 213 214 215 216 217 508 509 510
(note 595 594 596 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 596 595 597 79 (set (reg/f:DI 0 ax [508])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":234 85 {*movdi_internal}
     (nil))
(insn 597 596 598 79 (set (reg:SI 0 ax [orig:210 _124 ] [210])
        (mem:SI (reg/f:DI 0 ax [508]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":234 86 {*movsi_internal}
     (nil))
(insn 598 597 599 79 (set (reg:DI 0 ax [orig:211 _125 ] [211])
        (sign_extend:DI (reg:SI 0 ax [orig:210 _124 ] [210]))) "E2OUT.f":234 149 {*extendsidi2_rex64}
     (nil))
(insn 599 598 600 79 (parallel [
            (set (reg:DI 0 ax [orig:212 _126 ] [212])
                (plus:DI (reg:DI 0 ax [orig:211 _125 ] [211])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":234 222 {*adddi_1}
     (nil))
(insn 600 599 601 79 (parallel [
            (set (reg:DI 0 ax [509])
                (plus:DI (reg:DI 0 ax [orig:212 _126 ] [212])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":234 222 {*adddi_1}
     (nil))
(insn 601 600 602 79 (set (reg:SI 0 ax [orig:213 _127 ] [213])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [509])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.iget S4 A32])) "E2OUT.f":234 86 {*movsi_internal}
     (nil))
(insn 602 601 603 79 (set (reg:DI 0 ax [orig:214 _128 ] [214])
        (sign_extend:DI (reg:SI 0 ax [orig:213 _127 ] [213]))) "E2OUT.f":234 149 {*extendsidi2_rex64}
     (nil))
(insn 603 602 604 79 (parallel [
            (set (reg:DI 0 ax [orig:215 _129 ] [215])
                (plus:DI (reg:DI 0 ax [orig:214 _128 ] [214])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":234 222 {*adddi_1}
     (nil))
(insn 604 603 605 79 (parallel [
            (set (reg:DI 0 ax [510])
                (plus:DI (reg:DI 0 ax [orig:215 _129 ] [215])
                    (const_int 1004 [0x3ec])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":234 222 {*adddi_1}
     (nil))
(insn 605 604 606 79 (set (reg:SI 0 ax [orig:216 _130 ] [216])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [510])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.ismful S4 A32])) "E2OUT.f":234 86 {*movsi_internal}
     (nil))
(insn 606 605 607 79 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])
        (reg:SI 0 ax [orig:216 _130 ] [216])) "E2OUT.f":234 86 {*movsi_internal}
     (nil))
(insn 607 606 608 79 (set (reg:SI 0 ax [orig:217 ismth.24_131 ] [217])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])) "E2OUT.f":235 86 {*movsi_internal}
     (nil))
(insn 608 607 609 79 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:217 ismth.24_131 ] [217])
            (const_int 0 [0]))) "E2OUT.f":235 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 609 608 610 79 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 618)
            (pc))) "E2OUT.f":235 682 {*jcc}
     (nil)
 -> 618)
;;  succ:       80 (FALLTHRU)
;;              81
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 80, loop depth 0, maybe hot
;;  prev block 79, next block 81, flags: (RTL, MODIFIED)
;;  pred:       79 (FALLTHRU)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 511
(note 610 609 611 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 611 610 612 80 (parallel [
            (set (reg:DI 0 ax [511])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":235 222 {*adddi_1}
     (nil))
(insn 612 611 613 80 (set (reg:DI 2 cx)
        (reg:DI 0 ax [511])) "E2OUT.f":235 85 {*movdi_internal}
     (nil))
(insn 613 612 614 80 (set (reg:DI 1 dx)
        (symbol_ref:DI ("vful.4080") [flags 0x202]  <var_decl 0x7f830f917900 vful>)) "E2OUT.f":235 85 {*movdi_internal}
     (nil))
(insn 614 613 615 80 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":235 85 {*movdi_internal}
     (nil))
(insn 615 614 616 80 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":235 85 {*movdi_internal}
     (nil))
(insn 616 615 617 80 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":235 88 {*movqi_internal}
     (nil))
(call_insn 617 616 618 80 (call (mem:QI (symbol_ref:DI ("filter_") [flags 0x41]  <function_decl 0x7f830f8f8c00 filter>) [0 filter S1 A8])
        (const_int 0 [0])) "E2OUT.f":235 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
;;  succ:       81 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 81, loop depth 0, maybe hot
;;  prev block 80, next block 82, flags: (RTL, MODIFIED)
;;  pred:       78
;;              80 (FALLTHRU)
;;              79
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 512 513 514 515
(code_label 618 617 619 81 37 (nil) [2 uses])
(note 619 618 620 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 620 619 621 81 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [2  S8 A64])
        (const_int 6 [0x6])) "E2OUT.f":238 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 621 620 622 81 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [15  S8 A64])
        (const:DI (plus:DI (symbol_ref:DI ("outgrd_") [flags 0x2]  <var_decl 0x7f830f90d480 outgrd>)
                (const_int 44 [0x2c])))) "E2OUT.f":238 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 622 621 623 81 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [16  S8 A64])
        (const:DI (plus:DI (symbol_ref:DI ("outgrd_") [flags 0x2]  <var_decl 0x7f830f90d480 outgrd>)
                (const_int 40 [0x28])))) "E2OUT.f":238 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 623 622 624 81 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [4  S8 A64])
        (const:DI (plus:DI (symbol_ref:DI ("outgrd_") [flags 0x2]  <var_decl 0x7f830f90d480 outgrd>)
                (const_int 4 [0x4])))) "E2OUT.f":238 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 624 623 1500 81 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [4  S8 A64])
        (symbol_ref:DI ("outgrd_") [flags 0x2]  <var_decl 0x7f830f90d480 outgrd>)) "E2OUT.f":238 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 40 [0x28])
        (nil)))
(insn 1500 624 625 81 (set (reg:DI 0 ax [653])
        (const:DI (plus:DI (symbol_ref:DI ("llgrds_") [flags 0x202]  <var_decl 0x7f830f901ea0 llgrds>)
                (const_int 193183248 [0xb83be10])))) "E2OUT.f":238 85 {*movdi_internal}
     (nil))
(insn 625 1500 626 81 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [4  S8 A64])
        (reg:DI 0 ax [653])) "E2OUT.f":238 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 48 [0x30])
        (nil)))
(insn 626 625 627 81 (set (reg:DI 38 r9)
        (const:DI (plus:DI (symbol_ref:DI ("llgrds_") [flags 0x202]  <var_decl 0x7f830f901ea0 llgrds>)
                (const_int 192947196 [0xb8023fc])))) "E2OUT.f":238 85 {*movdi_internal}
     (nil))
(insn 627 626 628 81 (set (reg:DI 37 r8)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":238 85 {*movdi_internal}
     (nil))
(insn 628 627 629 81 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":238 85 {*movdi_internal}
     (nil))
(insn 629 628 630 81 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("llgrds_") [flags 0x202]  <var_decl 0x7f830f901ea0 llgrds>)
                (const_int 192711144 [0xb7c89e8])))) "E2OUT.f":238 85 {*movdi_internal}
     (nil))
(insn 630 629 631 81 (set (reg:DI 4 si)
        (symbol_ref:DI ("vful.4080") [flags 0x202]  <var_decl 0x7f830f917900 vful>)) "E2OUT.f":238 85 {*movdi_internal}
     (nil))
(insn 631 630 632 81 (set (reg:DI 5 di)
        (symbol_ref:DI ("hful.4073") [flags 0x202]  <var_decl 0x7f830f917630 hful>)) "E2OUT.f":238 85 {*movdi_internal}
     (nil))
(insn 632 631 633 81 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":238 88 {*movqi_internal}
     (nil))
(call_insn 633 632 634 81 (call (mem:QI (symbol_ref:DI ("euvguv_") [flags 0x41]  <function_decl 0x7f830f927000 euvguv>) [0 euvguv S1 A8])
        (const_int 48 [0x30])) "E2OUT.f":238 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 634 633 635 81 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":238 222 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 635 634 636 81 (set (reg:DI 1 dx [512])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":240 85 {*movdi_internal}
     (nil))
(insn 636 635 637 81 (set (reg:DI 0 ax [513])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 grid1+0 S8 A64])) "E2OUT.f":240 85 {*movdi_internal}
     (nil))
(insn 637 636 638 81 (set (reg:DI 2 cx)
        (reg:DI 1 dx [512])) "E2OUT.f":240 85 {*movdi_internal}
     (nil))
(insn 638 637 639 81 (set (reg:DI 1 dx)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":240 85 {*movdi_internal}
     (nil))
(insn 639 638 640 81 (set (reg:DI 4 si)
        (reg:DI 0 ax [513])) "E2OUT.f":240 85 {*movdi_internal}
     (nil))
(insn 640 639 641 81 (set (reg:DI 5 di)
        (symbol_ref:DI ("hful.4073") [flags 0x202]  <var_decl 0x7f830f917630 hful>)) "E2OUT.f":240 85 {*movdi_internal}
     (nil))
(insn 641 640 642 81 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":240 88 {*movqi_internal}
     (nil))
(call_insn 642 641 643 81 (call (mem:QI (symbol_ref:DI ("interp3_") [flags 0x41]  <function_decl 0x7f830f8f8e00 interp3>) [0 interp3 S1 A8])
        (const_int 0 [0])) "E2OUT.f":240 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(insn 643 642 644 81 (set (reg:DI 1 dx [514])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":241 85 {*movdi_internal}
     (nil))
(insn 644 643 645 81 (set (reg:DI 0 ax [515])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [4 grid2+0 S8 A64])) "E2OUT.f":241 85 {*movdi_internal}
     (nil))
(insn 645 644 646 81 (set (reg:DI 2 cx)
        (reg:DI 1 dx [514])) "E2OUT.f":241 85 {*movdi_internal}
     (nil))
(insn 646 645 647 81 (set (reg:DI 1 dx)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":241 85 {*movdi_internal}
     (nil))
(insn 647 646 648 81 (set (reg:DI 4 si)
        (reg:DI 0 ax [515])) "E2OUT.f":241 85 {*movdi_internal}
     (nil))
(insn 648 647 649 81 (set (reg:DI 5 di)
        (symbol_ref:DI ("vful.4080") [flags 0x202]  <var_decl 0x7f830f917900 vful>)) "E2OUT.f":241 85 {*movdi_internal}
     (nil))
(insn 649 648 650 81 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":241 88 {*movqi_internal}
     (nil))
(call_insn 650 649 651 81 (call (mem:QI (symbol_ref:DI ("interp3_") [flags 0x41]  <function_decl 0x7f830f8f8e00 interp3>) [0 interp3 S1 A8])
        (const_int 0 [0])) "E2OUT.f":241 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
;;  succ:       82 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 82, loop depth 0, maybe hot
;;  prev block 81, next block 83, flags: (RTL, MODIFIED)
;;  pred:       77
;;              81 (FALLTHRU)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 218 516
(code_label 651 650 652 82 36 (nil) [1 uses])
(note 652 651 653 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 653 652 654 82 (set (reg/f:DI 0 ax [516])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":247 85 {*movdi_internal}
     (nil))
(insn 654 653 655 82 (set (reg:SI 0 ax [orig:218 _132 ] [218])
        (mem:SI (reg/f:DI 0 ax [516]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":247 86 {*movsi_internal}
     (nil))
(insn 655 654 656 82 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:218 _132 ] [218])
            (const_int 33 [0x21]))) "E2OUT.f":247 11 {*cmpsi_1}
     (nil))
(jump_insn 656 655 657 82 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 667)
            (pc))) "E2OUT.f":247 682 {*jcc}
     (nil)
 -> 667)
;;  succ:       85
;;              83 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 83, loop depth 0, maybe hot
;;  prev block 82, next block 84, flags: (RTL, MODIFIED)
;;  pred:       82 (FALLTHRU)
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 219 517
(note 657 656 658 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 658 657 659 83 (set (reg/f:DI 0 ax [517])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":247 85 {*movdi_internal}
     (nil))
(insn 659 658 660 83 (set (reg:SI 0 ax [orig:219 _133 ] [219])
        (mem:SI (reg/f:DI 0 ax [517]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":247 86 {*movsi_internal}
     (nil))
(insn 660 659 661 83 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:219 _133 ] [219])
            (const_int 34 [0x22]))) "E2OUT.f":247 11 {*cmpsi_1}
     (nil))
(jump_insn 661 660 662 83 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 667)
            (pc))) "E2OUT.f":247 682 {*jcc}
     (nil)
 -> 667)
;;  succ:       85
;;              84 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 84, loop depth 0, maybe hot
;;  prev block 83, next block 85, flags: (RTL, MODIFIED)
;;  pred:       83 (FALLTHRU)
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 220 518
(note 662 661 663 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 663 662 664 84 (set (reg/f:DI 0 ax [518])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":247 85 {*movdi_internal}
     (nil))
(insn 664 663 665 84 (set (reg:SI 0 ax [orig:220 _134 ] [220])
        (mem:SI (reg/f:DI 0 ax [518]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":247 86 {*movsi_internal}
     (nil))
(insn 665 664 666 84 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:220 _134 ] [220])
            (const_int 87 [0x57]))) "E2OUT.f":247 11 {*cmpsi_1}
     (nil))
(jump_insn 666 665 667 84 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1447)
            (pc))) "E2OUT.f":247 682 {*jcc}
     (nil)
 -> 1447)
;;  succ:       85 (FALLTHRU)
;;              172
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 85, loop depth 0, maybe hot
;;  prev block 84, next block 86, flags: (RTL, MODIFIED)
;;  pred:       82
;;              83
;;              84 (FALLTHRU)
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 519 520 521
(code_label 667 666 668 85 38 (nil) [2 uses])
(note 668 667 669 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 669 668 670 85 (set (reg:DI 1 dx [519])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":249 85 {*movdi_internal}
     (nil))
(insn 670 669 671 85 (set (reg:DI 4 si [520])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 grid1+0 S8 A64])) "E2OUT.f":249 85 {*movdi_internal}
     (nil))
(insn 671 670 672 85 (set (reg:DI 0 ax [521])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 egrid1+0 S8 A64])) "E2OUT.f":249 85 {*movdi_internal}
     (nil))
(insn 672 671 673 85 (set (reg:DI 38 r9)
        (const:DI (plus:DI (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f830f90d090 options>)
                (const_int 12 [0xc])))) "E2OUT.f":249 85 {*movdi_internal}
     (nil))
(insn 673 672 674 85 (set (reg:DI 37 r8)
        (const:DI (plus:DI (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f830f90d090 options>)
                (const_int 8 [0x8])))) "E2OUT.f":249 85 {*movdi_internal}
     (nil))
(insn 674 673 675 85 (set (reg:DI 2 cx)
        (reg:DI 1 dx [519])) "E2OUT.f":249 85 {*movdi_internal}
     (nil))
(insn 675 674 677 85 (set (reg:DI 1 dx)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":249 85 {*movdi_internal}
     (nil))
(insn 677 675 678 85 (set (reg:DI 5 di)
        (reg:DI 0 ax [521])) "E2OUT.f":249 85 {*movdi_internal}
     (nil))
(insn 678 677 679 85 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":249 88 {*movqi_internal}
     (nil))
(call_insn 679 678 1401 85 (call (mem:QI (symbol_ref:DI ("cetlih4_") [flags 0x41]  <function_decl 0x7f830f927100 cetlih4>) [0 cetlih4 S1 A8])
        (const_int 0 [0])) "E2OUT.f":249 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(jump_insn 1401 679 1402 85 (set (pc)
        (label_ref:DI 1447)) "E2OUT.f":249 683 {jump}
     (nil)
 -> 1447)
;;  succ:       172 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1402 1401 684)
;; basic block 86, loop depth 0, maybe hot
;;  prev block 85, next block 87, flags: (RTL, MODIFIED)
;;  pred:       58
;;              59
;;              60
;;              61
;;              62
;;              63
;;              64
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 684 1402 685 86 32 (nil) [7 uses])
(note 685 684 686 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 686 685 736 86 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":253 86 {*movsi_internal}
     (nil))
;;  succ:       87 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 87, loop depth 0, maybe hot
;;  prev block 86, next block 88, flags: (RTL, MODIFIED)
;;  pred:       86 (FALLTHRU)
;;              91 [always] 
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 402 522
(code_label 736 686 687 87 44 (nil) [1 uses])
(note 687 736 688 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 688 687 689 87 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "E2OUT.f":253 11 {*cmpsi_1}
     (nil))
(insn 689 688 690 87 (set (reg:QI 0 ax [522])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":253 678 {*setcc_qi}
     (nil))
(insn 690 689 691 87 (set (reg:SI 0 ax [orig:402 _407 ] [402])
        (zero_extend:SI (reg:QI 0 ax [522]))) "E2OUT.f":253 140 {*zero_extendqisi2}
     (nil))
(insn 691 690 692 87 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:402 _407 ] [402])
            (const_int 0 [0]))) "E2OUT.f":253 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 692 691 693 87 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1450)
            (pc))) "E2OUT.f":253 682 {*jcc}
     (nil)
 -> 1450)
;;  succ:       173
;;              88 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 88, loop depth 0, maybe hot
;;  prev block 87, next block 89, flags: (RTL, MODIFIED)
;;  pred:       87 (FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 693 692 694 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 694 693 730 88 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":254 86 {*movsi_internal}
     (nil))
;;  succ:       89 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 89, loop depth 0, maybe hot
;;  prev block 88, next block 90, flags: (RTL, MODIFIED)
;;  pred:       88 (FALLTHRU)
;;              90 [always] 
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 403 523
(code_label 730 694 695 89 43 (nil) [1 uses])
(note 695 730 696 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 696 695 697 89 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
            (const_int 237 [0xed]))) "E2OUT.f":254 11 {*cmpsi_1}
     (nil))
(insn 697 696 698 89 (set (reg:QI 0 ax [523])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":254 678 {*setcc_qi}
     (nil))
(insn 698 697 699 89 (set (reg:SI 0 ax [orig:403 _409 ] [403])
        (zero_extend:SI (reg:QI 0 ax [523]))) "E2OUT.f":254 140 {*zero_extendqisi2}
     (nil))
(insn 699 698 700 89 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:403 _409 ] [403])
            (const_int 0 [0]))) "E2OUT.f":254 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 700 699 701 89 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1453)
            (pc))) "E2OUT.f":254 682 {*jcc}
     (nil)
 -> 1453)
;;  succ:       174
;;              90 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 90, loop depth 0, maybe hot
;;  prev block 89, next block 174, flags: (RTL, MODIFIED)
;;  pred:       89 (FALLTHRU)
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  def 	 17 [flags] 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 524 525 526 527 528 529 530 531 532
(note 701 700 702 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 702 701 703 90 (set (reg:SI 0 ax [524])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":255 86 {*movsi_internal}
     (nil))
(insn 703 702 704 90 (set (reg:DI 0 ax [orig:221 _135 ] [221])
        (sign_extend:DI (reg:SI 0 ax [524]))) "E2OUT.f":255 149 {*extendsidi2_rex64}
     (nil))
(insn 704 703 705 90 (parallel [
            (set (reg:DI 1 dx [orig:222 _136 ] [222])
                (mult:DI (reg:DI 0 ax [orig:221 _135 ] [221])
                    (const_int 237 [0xed])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":255 349 {*muldi3_1}
     (nil))
(insn 705 704 706 90 (set (reg:SI 0 ax [525])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":255 86 {*movsi_internal}
     (nil))
(insn 706 705 707 90 (set (reg:DI 0 ax [orig:223 _137 ] [223])
        (sign_extend:DI (reg:SI 0 ax [525]))) "E2OUT.f":255 149 {*extendsidi2_rex64}
     (nil))
(insn 707 706 708 90 (parallel [
            (set (reg:DI 0 ax [orig:224 _138 ] [224])
                (plus:DI (reg:DI 0 ax [orig:223 _137 ] [223])
                    (reg:DI 1 dx [orig:222 _136 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":255 222 {*adddi_1}
     (nil))
(insn 708 707 709 90 (parallel [
            (set (reg:DI 2 cx [orig:225 _139 ] [225])
                (plus:DI (reg:DI 0 ax [orig:224 _138 ] [224])
                    (const_int -238 [0xffffffffffffff12])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":255 222 {*adddi_1}
     (nil))
(insn 709 708 710 90 (set (reg:SI 0 ax [526])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":255 86 {*movsi_internal}
     (nil))
(insn 710 709 711 90 (set (reg:DI 0 ax [orig:226 _140 ] [226])
        (sign_extend:DI (reg:SI 0 ax [526]))) "E2OUT.f":255 149 {*extendsidi2_rex64}
     (nil))
(insn 711 710 712 90 (parallel [
            (set (reg:DI 0 ax [orig:227 _141 ] [227])
                (mult:DI (reg:DI 0 ax [orig:226 _140 ] [226])
                    (reg:DI 3 bx [orig:381 stride.2_350 ] [381])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":255 349 {*muldi3_1}
     (nil))
(insn 712 711 713 90 (parallel [
            (set (reg:DI 1 dx [orig:228 _142 ] [228])
                (plus:DI (reg:DI 42 r13 [orig:387 offset.3_358 ] [387])
                    (reg:DI 0 ax [orig:227 _141 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":255 222 {*adddi_1}
     (nil))
(insn 713 712 714 90 (set (reg:SI 0 ax [527])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":255 86 {*movsi_internal}
     (nil))
(insn 714 713 715 90 (set (reg:DI 0 ax [orig:229 _143 ] [229])
        (sign_extend:DI (reg:SI 0 ax [527]))) "E2OUT.f":255 149 {*extendsidi2_rex64}
     (nil))
(insn 715 714 716 90 (parallel [
            (set (reg:DI 1 dx [orig:230 _144 ] [230])
                (plus:DI (reg:DI 1 dx [orig:228 _142 ] [228])
                    (reg:DI 0 ax [orig:229 _143 ] [229])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":255 222 {*adddi_1}
     (nil))
(insn 716 715 717 90 (set (reg/f:DI 0 ax [528])
        (symbol_ref:DI ("hful.4073") [flags 0x202]  <var_decl 0x7f830f917630 hful>)) "E2OUT.f":255 85 {*movdi_internal}
     (nil))
(insn 717 716 718 90 (set (reg:SF 21 xmm0 [orig:231 _145 ] [231])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:225 _139 ] [225])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [528])) [6 hful S4 A32])) "E2OUT.f":255 131 {*movsf_internal}
     (nil))
(insn 718 717 719 90 (set (reg/f:DI 0 ax [529])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 grid1+0 S8 A64])) "E2OUT.f":255 85 {*movdi_internal}
     (nil))
(insn 719 718 720 90 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:230 _144 ] [230])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [529])) [6 *grid1_379(D) S4 A32])
        (reg:SF 21 xmm0 [orig:231 _145 ] [231])) "E2OUT.f":255 131 {*movsf_internal}
     (nil))
(insn 720 719 721 90 (set (reg:SI 0 ax [530])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":256 86 {*movsi_internal}
     (nil))
(insn 721 720 722 90 (set (reg:DI 0 ax [orig:232 _146 ] [232])
        (sign_extend:DI (reg:SI 0 ax [530]))) "E2OUT.f":256 149 {*extendsidi2_rex64}
     (nil))
(insn 722 721 723 90 (parallel [
            (set (reg:DI 1 dx [orig:233 _147 ] [233])
                (mult:DI (reg:DI 0 ax [orig:232 _146 ] [232])
                    (const_int 4000 [0xfa0])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":256 349 {*muldi3_1}
     (nil))
(insn 723 722 724 90 (set (reg:SI 0 ax [531])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":256 86 {*movsi_internal}
     (nil))
(insn 724 723 725 90 (set (reg:DI 0 ax [orig:234 _148 ] [234])
        (sign_extend:DI (reg:SI 0 ax [531]))) "E2OUT.f":256 149 {*extendsidi2_rex64}
     (nil))
(insn 725 724 726 90 (parallel [
            (set (reg:DI 0 ax [orig:235 _149 ] [235])
                (plus:DI (reg:DI 0 ax [orig:234 _148 ] [234])
                    (reg:DI 1 dx [orig:233 _147 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":256 222 {*adddi_1}
     (nil))
(insn 726 725 727 90 (parallel [
            (set (reg:DI 1 dx [orig:236 _150 ] [236])
                (plus:DI (reg:DI 0 ax [orig:235 _149 ] [235])
                    (const_int -4001 [0xfffffffffffff05f])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":256 222 {*adddi_1}
     (nil))
(insn 727 726 728 90 (set (reg/f:DI 0 ax [532])
        (symbol_ref:DI ("bitmap_") [flags 0x202]  <var_decl 0x7f831696bab0 bitmap>)) "E2OUT.f":256 85 {*movdi_internal}
     (nil))
(insn 728 727 729 90 (set (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:236 _150 ] [236])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [532])) [1 bitmap.ibmap S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":256 86 {*movsi_internal}
     (nil))
(insn 729 728 1403 90 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":254 221 {*addsi_1}
     (nil))
(jump_insn 1403 729 1404 90 (set (pc)
        (label_ref 730)) "E2OUT.f":254 683 {jump}
     (nil)
 -> 730)
;;  succ:       89 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

(barrier 1404 1403 1453)
;; basic block 174, loop depth 0, maybe hot
;;  prev block 90, next block 91, flags: (RTL, MODIFIED)
;;  pred:       89
;; bb 174 artificial_defs: { }
;; bb 174 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1453 1404 1452 174 79 (nil) [1 uses])
(note 1452 1453 1454 174 [bb 174] NOTE_INSN_BASIC_BLOCK)
(insn 1454 1452 733 174 (const_int 0 [0]) "E2OUT.f":256 718 {nop}
     (nil))
;;  succ:       91 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 91, loop depth 0, maybe hot
;;  prev block 174, next block 173, flags: (RTL, MODIFIED)
;;  pred:       174 [always]  (FALLTHRU)
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 733 1454 734 91 42 (nil) [0 uses])
(note 734 733 735 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn 735 734 1405 91 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":253 221 {*addsi_1}
     (nil))
(jump_insn 1405 735 1406 91 (set (pc)
        (label_ref 736)) "E2OUT.f":253 683 {jump}
     (nil)
 -> 736)
;;  succ:       87 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

(barrier 1406 1405 1450)
;; basic block 173, loop depth 0, maybe hot
;;  prev block 91, next block 92, flags: (RTL, MODIFIED)
;;  pred:       87
;; bb 173 artificial_defs: { }
;; bb 173 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1450 1406 1449 173 78 (nil) [1 uses])
(note 1449 1450 1451 173 [bb 173] NOTE_INSN_BASIC_BLOCK)
(insn 1451 1449 739 173 (const_int 0 [0]) "E2OUT.f":254 718 {nop}
     (nil))
;;  succ:       92 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 92, loop depth 0, maybe hot
;;  prev block 173, next block 93, flags: (RTL, MODIFIED)
;;  pred:       173 [always]  (FALLTHRU)
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 237 533
(code_label 739 1451 740 92 41 (nil) [0 uses])
(note 740 739 741 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(insn 741 740 742 92 (set (reg/f:DI 0 ax [533])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":264 85 {*movdi_internal}
     (nil))
(insn 742 741 743 92 (set (reg:SI 0 ax [orig:237 _151 ] [237])
        (mem:SI (reg/f:DI 0 ax [533]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":264 86 {*movsi_internal}
     (nil))
(insn 743 742 744 92 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:237 _151 ] [237])
            (const_int 56 [0x38]))) "E2OUT.f":264 11 {*cmpsi_1}
     (nil))
(jump_insn 744 743 745 92 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 790)
            (pc))) "E2OUT.f":264 682 {*jcc}
     (nil)
 -> 790)
;;  succ:       102
;;              93 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 93, loop depth 0, maybe hot
;;  prev block 92, next block 94, flags: (RTL, MODIFIED)
;;  pred:       92 (FALLTHRU)
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 238 534
(note 745 744 746 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 746 745 747 93 (set (reg/f:DI 0 ax [534])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":264 85 {*movdi_internal}
     (nil))
(insn 747 746 748 93 (set (reg:SI 0 ax [orig:238 _152 ] [238])
        (mem:SI (reg/f:DI 0 ax [534]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":264 86 {*movsi_internal}
     (nil))
(insn 748 747 749 93 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:238 _152 ] [238])
            (const_int 57 [0x39]))) "E2OUT.f":264 11 {*cmpsi_1}
     (nil))
(jump_insn 749 748 750 93 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 790)
            (pc))) "E2OUT.f":264 682 {*jcc}
     (nil)
 -> 790)
;;  succ:       102
;;              94 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 94, loop depth 0, maybe hot
;;  prev block 93, next block 95, flags: (RTL, MODIFIED)
;;  pred:       93 (FALLTHRU)
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 239 535
(note 750 749 751 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(insn 751 750 752 94 (set (reg/f:DI 0 ax [535])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":264 85 {*movdi_internal}
     (nil))
(insn 752 751 753 94 (set (reg:SI 0 ax [orig:239 _153 ] [239])
        (mem:SI (reg/f:DI 0 ax [535]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":264 86 {*movsi_internal}
     (nil))
(insn 753 752 754 94 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:239 _153 ] [239])
            (const_int 60 [0x3c]))) "E2OUT.f":264 11 {*cmpsi_1}
     (nil))
(jump_insn 754 753 755 94 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 790)
            (pc))) "E2OUT.f":264 682 {*jcc}
     (nil)
 -> 790)
;;  succ:       102
;;              95 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 95, loop depth 0, maybe hot
;;  prev block 94, next block 96, flags: (RTL, MODIFIED)
;;  pred:       94 (FALLTHRU)
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 240 536
(note 755 754 756 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn 756 755 757 95 (set (reg/f:DI 0 ax [536])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":264 85 {*movdi_internal}
     (nil))
(insn 757 756 758 95 (set (reg:SI 0 ax [orig:240 _154 ] [240])
        (mem:SI (reg/f:DI 0 ax [536]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":264 86 {*movsi_internal}
     (nil))
(insn 758 757 759 95 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:240 _154 ] [240])
            (const_int 61 [0x3d]))) "E2OUT.f":264 11 {*cmpsi_1}
     (nil))
(jump_insn 759 758 760 95 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 790)
            (pc))) "E2OUT.f":264 682 {*jcc}
     (nil)
 -> 790)
;;  succ:       102
;;              96 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 96, loop depth 0, maybe hot
;;  prev block 95, next block 97, flags: (RTL, MODIFIED)
;;  pred:       95 (FALLTHRU)
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 241 537
(note 760 759 761 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 761 760 762 96 (set (reg/f:DI 0 ax [537])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":264 85 {*movdi_internal}
     (nil))
(insn 762 761 763 96 (set (reg:SI 0 ax [orig:241 _155 ] [241])
        (mem:SI (reg/f:DI 0 ax [537]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":264 86 {*movsi_internal}
     (nil))
(insn 763 762 764 96 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:241 _155 ] [241])
            (const_int 64 [0x40]))) "E2OUT.f":264 11 {*cmpsi_1}
     (nil))
(jump_insn 764 763 765 96 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 790)
            (pc))) "E2OUT.f":264 682 {*jcc}
     (nil)
 -> 790)
;;  succ:       102
;;              97 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 97, loop depth 0, maybe hot
;;  prev block 96, next block 98, flags: (RTL, MODIFIED)
;;  pred:       96 (FALLTHRU)
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 242 538
(note 765 764 766 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 766 765 767 97 (set (reg/f:DI 0 ax [538])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":264 85 {*movdi_internal}
     (nil))
(insn 767 766 768 97 (set (reg:SI 0 ax [orig:242 _156 ] [242])
        (mem:SI (reg/f:DI 0 ax [538]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":264 86 {*movsi_internal}
     (nil))
(insn 768 767 769 97 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:242 _156 ] [242])
            (const_int 65 [0x41]))) "E2OUT.f":264 11 {*cmpsi_1}
     (nil))
(jump_insn 769 768 770 97 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 790)
            (pc))) "E2OUT.f":264 682 {*jcc}
     (nil)
 -> 790)
;;  succ:       102
;;              98 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 98, loop depth 0, maybe hot
;;  prev block 97, next block 99, flags: (RTL, MODIFIED)
;;  pred:       97 (FALLTHRU)
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 243 539
(note 770 769 771 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn 771 770 772 98 (set (reg/f:DI 0 ax [539])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":264 85 {*movdi_internal}
     (nil))
(insn 772 771 773 98 (set (reg:SI 0 ax [orig:243 _157 ] [243])
        (mem:SI (reg/f:DI 0 ax [539]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":264 86 {*movsi_internal}
     (nil))
(insn 773 772 774 98 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:243 _157 ] [243])
            (const_int 73 [0x49]))) "E2OUT.f":264 11 {*cmpsi_1}
     (nil))
(jump_insn 774 773 775 98 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 790)
            (pc))) "E2OUT.f":264 682 {*jcc}
     (nil)
 -> 790)
;;  succ:       102
;;              99 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 99, loop depth 0, maybe hot
;;  prev block 98, next block 100, flags: (RTL, MODIFIED)
;;  pred:       98 (FALLTHRU)
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 244 540
(note 775 774 776 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn 776 775 777 99 (set (reg/f:DI 0 ax [540])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":264 85 {*movdi_internal}
     (nil))
(insn 777 776 778 99 (set (reg:SI 0 ax [orig:244 _158 ] [244])
        (mem:SI (reg/f:DI 0 ax [540]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":264 86 {*movsi_internal}
     (nil))
(insn 778 777 779 99 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:244 _158 ] [244])
            (const_int 74 [0x4a]))) "E2OUT.f":264 11 {*cmpsi_1}
     (nil))
(jump_insn 779 778 780 99 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 790)
            (pc))) "E2OUT.f":264 682 {*jcc}
     (nil)
 -> 790)
;;  succ:       102
;;              100 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 100, loop depth 0, maybe hot
;;  prev block 99, next block 101, flags: (RTL, MODIFIED)
;;  pred:       99 (FALLTHRU)
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 245 541
(note 780 779 781 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(insn 781 780 782 100 (set (reg/f:DI 0 ax [541])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":264 85 {*movdi_internal}
     (nil))
(insn 782 781 783 100 (set (reg:SI 0 ax [orig:245 _159 ] [245])
        (mem:SI (reg/f:DI 0 ax [541]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":264 86 {*movsi_internal}
     (nil))
(insn 783 782 784 100 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:245 _159 ] [245])
            (const_int 95 [0x5f]))) "E2OUT.f":264 11 {*cmpsi_1}
     (nil))
(jump_insn 784 783 785 100 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 790)
            (pc))) "E2OUT.f":264 682 {*jcc}
     (nil)
 -> 790)
;;  succ:       102
;;              101 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 101, loop depth 0, maybe hot
;;  prev block 100, next block 102, flags: (RTL, MODIFIED)
;;  pred:       100 (FALLTHRU)
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 246 542
(note 785 784 786 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(insn 786 785 787 101 (set (reg/f:DI 0 ax [542])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":264 85 {*movdi_internal}
     (nil))
(insn 787 786 788 101 (set (reg:SI 0 ax [orig:246 _160 ] [246])
        (mem:SI (reg/f:DI 0 ax [542]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":264 86 {*movsi_internal}
     (nil))
(insn 788 787 789 101 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:246 _160 ] [246])
            (const_int 96 [0x60]))) "E2OUT.f":264 11 {*cmpsi_1}
     (nil))
(jump_insn 789 788 790 101 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1458)
            (pc))) "E2OUT.f":264 682 {*jcc}
     (nil)
 -> 1458)
;;  succ:       102 (FALLTHRU)
;;              175
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 102, loop depth 0, maybe hot
;;  prev block 101, next block 103, flags: (RTL, MODIFIED)
;;  pred:       92
;;              93
;;              94
;;              95
;;              96
;;              97
;;              98
;;              99
;;              100
;;              101 (FALLTHRU)
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 247 543 544
(code_label 790 789 791 102 45 (nil) [9 uses])
(note 791 790 792 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn 792 791 793 102 (set (reg:DI 0 ax [543])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [4 egrid2+0 S8 A64])) "E2OUT.f":265 85 {*movdi_internal}
     (nil))
(insn 793 792 794 102 (set (reg:DI 37 r8)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":265 85 {*movdi_internal}
     (nil))
(insn 794 793 795 102 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":265 85 {*movdi_internal}
     (nil))
(insn 795 794 796 102 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f830f90d090 options>)
                (const_int 16 [0x10])))) "E2OUT.f":265 85 {*movdi_internal}
     (nil))
(insn 796 795 797 102 (set (reg:DI 4 si)
        (symbol_ref:DI ("vful.4080") [flags 0x202]  <var_decl 0x7f830f917900 vful>)) "E2OUT.f":265 85 {*movdi_internal}
     (nil))
(insn 797 796 798 102 (set (reg:DI 5 di)
        (reg:DI 0 ax [543])) "E2OUT.f":265 85 {*movdi_internal}
     (nil))
(insn 798 797 799 102 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":265 88 {*movqi_internal}
     (nil))
(call_insn 799 798 800 102 (call (mem:QI (symbol_ref:DI ("fillv_") [flags 0x41]  <function_decl 0x7f830f8f8b00 fillv>) [0 fillv S1 A8])
        (const_int 0 [0])) "E2OUT.f":265 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (nil))))))))
(insn 800 799 801 102 (set (reg/f:DI 0 ax [544])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":266 85 {*movdi_internal}
     (nil))
(insn 801 800 802 102 (set (reg:SI 0 ax [orig:247 _161 ] [247])
        (mem:SI (reg/f:DI 0 ax [544]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":266 86 {*movsi_internal}
     (nil))
(insn 802 801 803 102 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:247 _161 ] [247])
            (const_int 0 [0]))) "E2OUT.f":266 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 803 802 804 102 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 827)
            (pc))) "E2OUT.f":266 682 {*jcc}
     (nil)
 -> 827)
;;  succ:       103 (FALLTHRU)
;;              105
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 103, loop depth 0, maybe hot
;;  prev block 102, next block 104, flags: (RTL, MODIFIED)
;;  pred:       102 (FALLTHRU)
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 248 249 250 251 252 253 254 255 545 546 547
(note 804 803 805 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(insn 805 804 806 103 (set (reg/f:DI 0 ax [545])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":267 85 {*movdi_internal}
     (nil))
(insn 806 805 807 103 (set (reg:SI 0 ax [orig:248 _162 ] [248])
        (mem:SI (reg/f:DI 0 ax [545]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":267 86 {*movsi_internal}
     (nil))
(insn 807 806 808 103 (set (reg:DI 0 ax [orig:249 _163 ] [249])
        (sign_extend:DI (reg:SI 0 ax [orig:248 _162 ] [248]))) "E2OUT.f":267 149 {*extendsidi2_rex64}
     (nil))
(insn 808 807 809 103 (parallel [
            (set (reg:DI 0 ax [orig:250 _164 ] [250])
                (plus:DI (reg:DI 0 ax [orig:249 _163 ] [249])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":267 222 {*adddi_1}
     (nil))
(insn 809 808 810 103 (parallel [
            (set (reg:DI 0 ax [546])
                (plus:DI (reg:DI 0 ax [orig:250 _164 ] [250])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":267 222 {*adddi_1}
     (nil))
(insn 810 809 811 103 (set (reg:SI 0 ax [orig:251 _165 ] [251])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [546])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.iget S4 A32])) "E2OUT.f":267 86 {*movsi_internal}
     (nil))
(insn 811 810 812 103 (set (reg:DI 0 ax [orig:252 _166 ] [252])
        (sign_extend:DI (reg:SI 0 ax [orig:251 _165 ] [251]))) "E2OUT.f":267 149 {*extendsidi2_rex64}
     (nil))
(insn 812 811 813 103 (parallel [
            (set (reg:DI 0 ax [orig:253 _167 ] [253])
                (plus:DI (reg:DI 0 ax [orig:252 _166 ] [252])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":267 222 {*adddi_1}
     (nil))
(insn 813 812 814 103 (parallel [
            (set (reg:DI 0 ax [547])
                (plus:DI (reg:DI 0 ax [orig:253 _167 ] [253])
                    (const_int 1004 [0x3ec])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":267 222 {*adddi_1}
     (nil))
(insn 814 813 815 103 (set (reg:SI 0 ax [orig:254 _168 ] [254])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [547])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.ismful S4 A32])) "E2OUT.f":267 86 {*movsi_internal}
     (nil))
(insn 815 814 816 103 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])
        (reg:SI 0 ax [orig:254 _168 ] [254])) "E2OUT.f":267 86 {*movsi_internal}
     (nil))
(insn 816 815 817 103 (set (reg:SI 0 ax [orig:255 ismth.25_169 ] [255])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])) "E2OUT.f":268 86 {*movsi_internal}
     (nil))
(insn 817 816 818 103 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:255 ismth.25_169 ] [255])
            (const_int 0 [0]))) "E2OUT.f":268 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 818 817 819 103 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 827)
            (pc))) "E2OUT.f":268 682 {*jcc}
     (nil)
 -> 827)
;;  succ:       104 (FALLTHRU)
;;              105
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 104, loop depth 0, maybe hot
;;  prev block 103, next block 105, flags: (RTL, MODIFIED)
;;  pred:       103 (FALLTHRU)
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 548
(note 819 818 820 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(insn 820 819 821 104 (parallel [
            (set (reg:DI 0 ax [548])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":268 222 {*adddi_1}
     (nil))
(insn 821 820 822 104 (set (reg:DI 2 cx)
        (reg:DI 0 ax [548])) "E2OUT.f":268 85 {*movdi_internal}
     (nil))
(insn 822 821 823 104 (set (reg:DI 1 dx)
        (symbol_ref:DI ("vful.4080") [flags 0x202]  <var_decl 0x7f830f917900 vful>)) "E2OUT.f":268 85 {*movdi_internal}
     (nil))
(insn 823 822 824 104 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":268 85 {*movdi_internal}
     (nil))
(insn 824 823 825 104 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":268 85 {*movdi_internal}
     (nil))
(insn 825 824 826 104 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":268 88 {*movqi_internal}
     (nil))
(call_insn 826 825 827 104 (call (mem:QI (symbol_ref:DI ("filter_") [flags 0x41]  <function_decl 0x7f830f8f8c00 filter>) [0 filter S1 A8])
        (const_int 0 [0])) "E2OUT.f":268 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
;;  succ:       105 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 105, loop depth 0, maybe hot
;;  prev block 104, next block 106, flags: (RTL, MODIFIED)
;;  pred:       102
;;              104 (FALLTHRU)
;;              103
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 827 826 828 105 46 (nil) [2 uses])
(note 828 827 829 105 [bb 105] NOTE_INSN_BASIC_BLOCK)
(insn 829 828 870 105 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":271 86 {*movsi_internal}
     (nil))
;;  succ:       106 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 106, loop depth 0, maybe hot
;;  prev block 105, next block 107, flags: (RTL, MODIFIED)
;;  pred:       105 (FALLTHRU)
;;              110 [always] 
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 404 549
(code_label 870 829 830 106 49 (nil) [1 uses])
(note 830 870 831 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(insn 831 830 832 106 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "E2OUT.f":271 11 {*cmpsi_1}
     (nil))
(insn 832 831 833 106 (set (reg:QI 0 ax [549])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":271 678 {*setcc_qi}
     (nil))
(insn 833 832 834 106 (set (reg:SI 0 ax [orig:404 _418 ] [404])
        (zero_extend:SI (reg:QI 0 ax [549]))) "E2OUT.f":271 140 {*zero_extendqisi2}
     (nil))
(insn 834 833 835 106 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:404 _418 ] [404])
            (const_int 0 [0]))) "E2OUT.f":271 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 835 834 836 106 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1458)
            (pc))) "E2OUT.f":271 682 {*jcc}
     (nil)
 -> 1458)
;;  succ:       175
;;              107 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 107, loop depth 0, maybe hot
;;  prev block 106, next block 108, flags: (RTL, MODIFIED)
;;  pred:       106 (FALLTHRU)
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 836 835 837 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
(insn 837 836 864 107 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":272 86 {*movsi_internal}
     (nil))
;;  succ:       108 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 108, loop depth 0, maybe hot
;;  prev block 107, next block 109, flags: (RTL, MODIFIED)
;;  pred:       107 (FALLTHRU)
;;              109 [always] 
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 405 550
(code_label 864 837 838 108 48 (nil) [1 uses])
(note 838 864 839 108 [bb 108] NOTE_INSN_BASIC_BLOCK)
(insn 839 838 840 108 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
            (const_int 237 [0xed]))) "E2OUT.f":272 11 {*cmpsi_1}
     (nil))
(insn 840 839 841 108 (set (reg:QI 0 ax [550])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":272 678 {*setcc_qi}
     (nil))
(insn 841 840 842 108 (set (reg:SI 0 ax [orig:405 _420 ] [405])
        (zero_extend:SI (reg:QI 0 ax [550]))) "E2OUT.f":272 140 {*zero_extendqisi2}
     (nil))
(insn 842 841 843 108 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:405 _420 ] [405])
            (const_int 0 [0]))) "E2OUT.f":272 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 843 842 844 108 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1461)
            (pc))) "E2OUT.f":272 682 {*jcc}
     (nil)
 -> 1461)
;;  succ:       176
;;              109 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 109, loop depth 0, maybe hot
;;  prev block 108, next block 176, flags: (RTL, MODIFIED)
;;  pred:       108 (FALLTHRU)
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  def 	 17 [flags] 256 257 258 259 260 261 262 263 264 265 266 551 552 553 554 555 556
(note 844 843 845 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
(insn 845 844 846 109 (set (reg:SI 0 ax [551])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":273 86 {*movsi_internal}
     (nil))
(insn 846 845 847 109 (set (reg:DI 0 ax [orig:256 _170 ] [256])
        (sign_extend:DI (reg:SI 0 ax [551]))) "E2OUT.f":273 149 {*extendsidi2_rex64}
     (nil))
(insn 847 846 848 109 (parallel [
            (set (reg:DI 1 dx [orig:257 _171 ] [257])
                (mult:DI (reg:DI 0 ax [orig:256 _170 ] [256])
                    (const_int 237 [0xed])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":273 349 {*muldi3_1}
     (nil))
(insn 848 847 849 109 (set (reg:SI 0 ax [552])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":273 86 {*movsi_internal}
     (nil))
(insn 849 848 850 109 (set (reg:DI 0 ax [orig:258 _172 ] [258])
        (sign_extend:DI (reg:SI 0 ax [552]))) "E2OUT.f":273 149 {*extendsidi2_rex64}
     (nil))
(insn 850 849 851 109 (parallel [
            (set (reg:DI 0 ax [orig:259 _173 ] [259])
                (plus:DI (reg:DI 0 ax [orig:258 _172 ] [258])
                    (reg:DI 1 dx [orig:257 _171 ] [257])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":273 222 {*adddi_1}
     (nil))
(insn 851 850 852 109 (parallel [
            (set (reg:DI 2 cx [orig:260 _174 ] [260])
                (plus:DI (reg:DI 0 ax [orig:259 _173 ] [259])
                    (const_int -238 [0xffffffffffffff12])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":273 222 {*adddi_1}
     (nil))
(insn 852 851 853 109 (set (reg:SI 0 ax [553])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":273 86 {*movsi_internal}
     (nil))
(insn 853 852 854 109 (set (reg:DI 0 ax [orig:261 _175 ] [261])
        (sign_extend:DI (reg:SI 0 ax [553]))) "E2OUT.f":273 149 {*extendsidi2_rex64}
     (nil))
(insn 854 853 855 109 (parallel [
            (set (reg:DI 0 ax [orig:262 _176 ] [262])
                (mult:DI (reg:DI 0 ax [orig:261 _175 ] [261])
                    (reg:DI 41 r12 [orig:389 stride.7_361 ] [389])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":273 349 {*muldi3_1}
     (nil))
(insn 855 854 856 109 (parallel [
            (set (reg:DI 1 dx [orig:263 _177 ] [263])
                (plus:DI (reg:DI 43 r14 [orig:395 offset.8_368 ] [395])
                    (reg:DI 0 ax [orig:262 _176 ] [262])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":273 222 {*adddi_1}
     (nil))
(insn 856 855 857 109 (set (reg:SI 0 ax [554])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":273 86 {*movsi_internal}
     (nil))
(insn 857 856 858 109 (set (reg:DI 0 ax [orig:264 _178 ] [264])
        (sign_extend:DI (reg:SI 0 ax [554]))) "E2OUT.f":273 149 {*extendsidi2_rex64}
     (nil))
(insn 858 857 859 109 (parallel [
            (set (reg:DI 1 dx [orig:265 _179 ] [265])
                (plus:DI (reg:DI 1 dx [orig:263 _177 ] [263])
                    (reg:DI 0 ax [orig:264 _178 ] [264])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":273 222 {*adddi_1}
     (nil))
(insn 859 858 860 109 (set (reg/f:DI 0 ax [555])
        (symbol_ref:DI ("vful.4080") [flags 0x202]  <var_decl 0x7f830f917900 vful>)) "E2OUT.f":273 85 {*movdi_internal}
     (nil))
(insn 860 859 861 109 (set (reg:SF 21 xmm0 [orig:266 _180 ] [266])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:260 _174 ] [260])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [555])) [6 vful S4 A32])) "E2OUT.f":273 131 {*movsf_internal}
     (nil))
(insn 861 860 862 109 (set (reg/f:DI 0 ax [556])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [4 grid2+0 S8 A64])) "E2OUT.f":273 85 {*movdi_internal}
     (nil))
(insn 862 861 863 109 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:265 _179 ] [265])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [556])) [6 *grid2_389(D) S4 A32])
        (reg:SF 21 xmm0 [orig:266 _180 ] [266])) "E2OUT.f":273 131 {*movsf_internal}
     (nil))
(insn 863 862 1407 109 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":272 221 {*addsi_1}
     (nil))
(jump_insn 1407 863 1408 109 (set (pc)
        (label_ref 864)) "E2OUT.f":272 683 {jump}
     (nil)
 -> 864)
;;  succ:       108 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

(barrier 1408 1407 1461)
;; basic block 176, loop depth 0, maybe hot
;;  prev block 109, next block 110, flags: (RTL, MODIFIED)
;;  pred:       108
;; bb 176 artificial_defs: { }
;; bb 176 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1461 1408 1460 176 81 (nil) [1 uses])
(note 1460 1461 1462 176 [bb 176] NOTE_INSN_BASIC_BLOCK)
(insn 1462 1460 867 176 (const_int 0 [0]) "E2OUT.f":273 718 {nop}
     (nil))
;;  succ:       110 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 110, loop depth 0, maybe hot
;;  prev block 176, next block 111, flags: (RTL, MODIFIED)
;;  pred:       176 [always]  (FALLTHRU)
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 867 1462 868 110 47 (nil) [0 uses])
(note 868 867 869 110 [bb 110] NOTE_INSN_BASIC_BLOCK)
(insn 869 868 1409 110 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":271 221 {*addsi_1}
     (nil))
(jump_insn 1409 869 1410 110 (set (pc)
        (label_ref 870)) "E2OUT.f":271 683 {jump}
     (nil)
 -> 870)
;;  succ:       106 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

(barrier 1410 1409 877)
;; basic block 111, loop depth 0, maybe hot
;;  prev block 110, next block 112, flags: (RTL, MODIFIED)
;;  pred:       54
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 267 557
(code_label 877 1410 878 111 29 (nil) [1 uses])
(note 878 877 879 111 [bb 111] NOTE_INSN_BASIC_BLOCK)
(insn 879 878 880 111 (set (reg/f:DI 0 ax [557])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":283 85 {*movdi_internal}
     (nil))
(insn 880 879 881 111 (set (reg:SI 0 ax [orig:267 _181 ] [267])
        (mem:SI (reg/f:DI 0 ax [557]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":283 86 {*movsi_internal}
     (nil))
(insn 881 880 882 111 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:267 _181 ] [267])
            (const_int 53 [0x35]))) "E2OUT.f":283 11 {*cmpsi_1}
     (nil))
(jump_insn 882 881 883 111 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1127)
            (pc))) "E2OUT.f":283 682 {*jcc}
     (nil)
 -> 1127)
;;  succ:       112 (FALLTHRU)
;;              140
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 112, loop depth 0, maybe hot
;;  prev block 111, next block 113, flags: (RTL, MODIFIED)
;;  pred:       111 (FALLTHRU)
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 268 558
(note 883 882 884 112 [bb 112] NOTE_INSN_BASIC_BLOCK)
(insn 884 883 885 112 (set (reg/f:DI 0 ax [558])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":283 85 {*movdi_internal}
     (nil))
(insn 885 884 886 112 (set (reg:SI 0 ax [orig:268 _182 ] [268])
        (mem:SI (reg/f:DI 0 ax [558]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":283 86 {*movsi_internal}
     (nil))
(insn 886 885 887 112 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:268 _182 ] [268])
            (const_int 162 [0xa2]))) "E2OUT.f":283 11 {*cmpsi_1}
     (nil))
(jump_insn 887 886 888 112 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1127)
            (pc))) "E2OUT.f":283 682 {*jcc}
     (nil)
 -> 1127)
;;  succ:       113 (FALLTHRU)
;;              140
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 113, loop depth 0, maybe hot
;;  prev block 112, next block 114, flags: (RTL, MODIFIED)
;;  pred:       112 (FALLTHRU)
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 269 270 271 272 273 274 275 276 559 560 561 562 563
(note 888 887 889 113 [bb 113] NOTE_INSN_BASIC_BLOCK)
(insn 889 888 890 113 (set (reg:DI 0 ax [559])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 egrid1+0 S8 A64])) "E2OUT.f":284 85 {*movdi_internal}
     (nil))
(insn 890 889 891 113 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":284 85 {*movdi_internal}
     (nil))
(insn 891 890 892 113 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":284 85 {*movdi_internal}
     (nil))
(insn 892 891 893 113 (set (reg:DI 4 si)
        (symbol_ref:DI ("uful.4078") [flags 0x202]  <var_decl 0x7f830f917870 uful>)) "E2OUT.f":284 85 {*movdi_internal}
     (nil))
(insn 893 892 894 113 (set (reg:DI 5 di)
        (reg:DI 0 ax [559])) "E2OUT.f":284 85 {*movdi_internal}
     (nil))
(insn 894 893 895 113 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":284 88 {*movqi_internal}
     (nil))
(call_insn 895 894 896 113 (call (mem:QI (symbol_ref:DI ("fillh_") [flags 0x41]  <function_decl 0x7f830f927200 fillh>) [0 fillh S1 A8])
        (const_int 0 [0])) "E2OUT.f":284 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(insn 896 895 897 113 (set (reg:DI 0 ax [560])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [4 egrid2+0 S8 A64])) "E2OUT.f":285 85 {*movdi_internal}
     (nil))
(insn 897 896 898 113 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":285 85 {*movdi_internal}
     (nil))
(insn 898 897 899 113 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":285 85 {*movdi_internal}
     (nil))
(insn 899 898 900 113 (set (reg:DI 4 si)
        (symbol_ref:DI ("vful.4080") [flags 0x202]  <var_decl 0x7f830f917900 vful>)) "E2OUT.f":285 85 {*movdi_internal}
     (nil))
(insn 900 899 901 113 (set (reg:DI 5 di)
        (reg:DI 0 ax [560])) "E2OUT.f":285 85 {*movdi_internal}
     (nil))
(insn 901 900 902 113 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":285 88 {*movqi_internal}
     (nil))
(call_insn 902 901 903 113 (call (mem:QI (symbol_ref:DI ("fillh_") [flags 0x41]  <function_decl 0x7f830f927200 fillh>) [0 fillh S1 A8])
        (const_int 0 [0])) "E2OUT.f":285 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(insn 903 902 904 113 (set (reg/f:DI 0 ax [561])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":286 85 {*movdi_internal}
     (nil))
(insn 904 903 905 113 (set (reg:SI 0 ax [orig:269 _183 ] [269])
        (mem:SI (reg/f:DI 0 ax [561]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":286 86 {*movsi_internal}
     (nil))
(insn 905 904 906 113 (set (reg:DI 0 ax [orig:270 _184 ] [270])
        (sign_extend:DI (reg:SI 0 ax [orig:269 _183 ] [269]))) "E2OUT.f":286 149 {*extendsidi2_rex64}
     (nil))
(insn 906 905 907 113 (parallel [
            (set (reg:DI 0 ax [orig:271 _185 ] [271])
                (plus:DI (reg:DI 0 ax [orig:270 _184 ] [270])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":286 222 {*adddi_1}
     (nil))
(insn 907 906 908 113 (parallel [
            (set (reg:DI 0 ax [562])
                (plus:DI (reg:DI 0 ax [orig:271 _185 ] [271])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":286 222 {*adddi_1}
     (nil))
(insn 908 907 909 113 (set (reg:SI 0 ax [orig:272 _186 ] [272])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [562])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.iget S4 A32])) "E2OUT.f":286 86 {*movsi_internal}
     (nil))
(insn 909 908 910 113 (set (reg:DI 0 ax [orig:273 _187 ] [273])
        (sign_extend:DI (reg:SI 0 ax [orig:272 _186 ] [272]))) "E2OUT.f":286 149 {*extendsidi2_rex64}
     (nil))
(insn 910 909 911 113 (parallel [
            (set (reg:DI 0 ax [orig:274 _188 ] [274])
                (plus:DI (reg:DI 0 ax [orig:273 _187 ] [273])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":286 222 {*adddi_1}
     (nil))
(insn 911 910 912 113 (parallel [
            (set (reg:DI 0 ax [563])
                (plus:DI (reg:DI 0 ax [orig:274 _188 ] [274])
                    (const_int 1004 [0x3ec])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":286 222 {*adddi_1}
     (nil))
(insn 912 911 913 113 (set (reg:SI 0 ax [orig:275 _189 ] [275])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [563])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.ismful S4 A32])) "E2OUT.f":286 86 {*movsi_internal}
     (nil))
(insn 913 912 914 113 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])
        (reg:SI 0 ax [orig:275 _189 ] [275])) "E2OUT.f":286 86 {*movsi_internal}
     (nil))
(insn 914 913 915 113 (set (reg:SI 0 ax [orig:276 ismth.26_190 ] [276])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])) "E2OUT.f":287 86 {*movsi_internal}
     (nil))
(insn 915 914 916 113 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:276 ismth.26_190 ] [276])
            (const_int 0 [0]))) "E2OUT.f":287 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 916 915 917 113 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 925)
            (pc))) "E2OUT.f":287 682 {*jcc}
     (nil)
 -> 925)
;;  succ:       114 (FALLTHRU)
;;              115
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 114, loop depth 0, maybe hot
;;  prev block 113, next block 115, flags: (RTL, MODIFIED)
;;  pred:       113 (FALLTHRU)
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 564
(note 917 916 918 114 [bb 114] NOTE_INSN_BASIC_BLOCK)
(insn 918 917 919 114 (parallel [
            (set (reg:DI 0 ax [564])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":287 222 {*adddi_1}
     (nil))
(insn 919 918 920 114 (set (reg:DI 2 cx)
        (reg:DI 0 ax [564])) "E2OUT.f":287 85 {*movdi_internal}
     (nil))
(insn 920 919 921 114 (set (reg:DI 1 dx)
        (symbol_ref:DI ("uful.4078") [flags 0x202]  <var_decl 0x7f830f917870 uful>)) "E2OUT.f":287 85 {*movdi_internal}
     (nil))
(insn 921 920 922 114 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":287 85 {*movdi_internal}
     (nil))
(insn 922 921 923 114 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":287 85 {*movdi_internal}
     (nil))
(insn 923 922 924 114 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":287 88 {*movqi_internal}
     (nil))
(call_insn 924 923 925 114 (call (mem:QI (symbol_ref:DI ("filter_") [flags 0x41]  <function_decl 0x7f830f8f8c00 filter>) [0 filter S1 A8])
        (const_int 0 [0])) "E2OUT.f":287 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
;;  succ:       115 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 115, loop depth 0, maybe hot
;;  prev block 114, next block 116, flags: (RTL, MODIFIED)
;;  pred:       113
;;              114 (FALLTHRU)
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 277 565
(code_label 925 924 926 115 52 (nil) [1 uses])
(note 926 925 927 115 [bb 115] NOTE_INSN_BASIC_BLOCK)
(insn 927 926 928 115 (set (reg/f:DI 0 ax [565])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":288 85 {*movdi_internal}
     (nil))
(insn 928 927 929 115 (set (reg:SI 0 ax [orig:277 _191 ] [277])
        (mem:SI (reg/f:DI 0 ax [565]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":288 86 {*movsi_internal}
     (nil))
(insn 929 928 930 115 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:277 _191 ] [277])
            (const_int 0 [0]))) "E2OUT.f":288 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 930 929 931 115 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 954)
            (pc))) "E2OUT.f":288 682 {*jcc}
     (nil)
 -> 954)
;;  succ:       116 (FALLTHRU)
;;              118
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 116, loop depth 0, maybe hot
;;  prev block 115, next block 117, flags: (RTL, MODIFIED)
;;  pred:       115 (FALLTHRU)
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 278 279 280 281 282 283 284 285 566 567 568
(note 931 930 932 116 [bb 116] NOTE_INSN_BASIC_BLOCK)
(insn 932 931 933 116 (set (reg/f:DI 0 ax [566])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":289 85 {*movdi_internal}
     (nil))
(insn 933 932 934 116 (set (reg:SI 0 ax [orig:278 _192 ] [278])
        (mem:SI (reg/f:DI 0 ax [566]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":289 86 {*movsi_internal}
     (nil))
(insn 934 933 935 116 (set (reg:DI 0 ax [orig:279 _193 ] [279])
        (sign_extend:DI (reg:SI 0 ax [orig:278 _192 ] [278]))) "E2OUT.f":289 149 {*extendsidi2_rex64}
     (nil))
(insn 935 934 936 116 (parallel [
            (set (reg:DI 0 ax [orig:280 _194 ] [280])
                (plus:DI (reg:DI 0 ax [orig:279 _193 ] [279])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":289 222 {*adddi_1}
     (nil))
(insn 936 935 937 116 (parallel [
            (set (reg:DI 0 ax [567])
                (plus:DI (reg:DI 0 ax [orig:280 _194 ] [280])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":289 222 {*adddi_1}
     (nil))
(insn 937 936 938 116 (set (reg:SI 0 ax [orig:281 _195 ] [281])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [567])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.iget S4 A32])) "E2OUT.f":289 86 {*movsi_internal}
     (nil))
(insn 938 937 939 116 (set (reg:DI 0 ax [orig:282 _196 ] [282])
        (sign_extend:DI (reg:SI 0 ax [orig:281 _195 ] [281]))) "E2OUT.f":289 149 {*extendsidi2_rex64}
     (nil))
(insn 939 938 940 116 (parallel [
            (set (reg:DI 0 ax [orig:283 _197 ] [283])
                (plus:DI (reg:DI 0 ax [orig:282 _196 ] [282])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":289 222 {*adddi_1}
     (nil))
(insn 940 939 941 116 (parallel [
            (set (reg:DI 0 ax [568])
                (plus:DI (reg:DI 0 ax [orig:283 _197 ] [283])
                    (const_int 1004 [0x3ec])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":289 222 {*adddi_1}
     (nil))
(insn 941 940 942 116 (set (reg:SI 0 ax [orig:284 _198 ] [284])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [568])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.ismful S4 A32])) "E2OUT.f":289 86 {*movsi_internal}
     (nil))
(insn 942 941 943 116 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])
        (reg:SI 0 ax [orig:284 _198 ] [284])) "E2OUT.f":289 86 {*movsi_internal}
     (nil))
(insn 943 942 944 116 (set (reg:SI 0 ax [orig:285 ismth.27_199 ] [285])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])) "E2OUT.f":290 86 {*movsi_internal}
     (nil))
(insn 944 943 945 116 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:285 ismth.27_199 ] [285])
            (const_int 0 [0]))) "E2OUT.f":290 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 945 944 946 116 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 954)
            (pc))) "E2OUT.f":290 682 {*jcc}
     (nil)
 -> 954)
;;  succ:       117 (FALLTHRU)
;;              118
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 117, loop depth 0, maybe hot
;;  prev block 116, next block 118, flags: (RTL, MODIFIED)
;;  pred:       116 (FALLTHRU)
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 569
(note 946 945 947 117 [bb 117] NOTE_INSN_BASIC_BLOCK)
(insn 947 946 948 117 (parallel [
            (set (reg:DI 0 ax [569])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":291 222 {*adddi_1}
     (nil))
(insn 948 947 949 117 (set (reg:DI 2 cx)
        (reg:DI 0 ax [569])) "E2OUT.f":291 85 {*movdi_internal}
     (nil))
(insn 949 948 950 117 (set (reg:DI 1 dx)
        (symbol_ref:DI ("vful.4080") [flags 0x202]  <var_decl 0x7f830f917900 vful>)) "E2OUT.f":291 85 {*movdi_internal}
     (nil))
(insn 950 949 951 117 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":291 85 {*movdi_internal}
     (nil))
(insn 951 950 952 117 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":291 85 {*movdi_internal}
     (nil))
(insn 952 951 953 117 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":291 88 {*movqi_internal}
     (nil))
(call_insn 953 952 954 117 (call (mem:QI (symbol_ref:DI ("filter_") [flags 0x41]  <function_decl 0x7f830f8f8c00 filter>) [0 filter S1 A8])
        (const_int 0 [0])) "E2OUT.f":291 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
;;  succ:       118 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 118, loop depth 0, maybe hot
;;  prev block 117, next block 119, flags: (RTL, MODIFIED)
;;  pred:       115
;;              117 (FALLTHRU)
;;              116
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 286
(code_label 954 953 955 118 53 (nil) [2 uses])
(note 955 954 956 118 [bb 118] NOTE_INSN_BASIC_BLOCK)
(insn 956 955 957 118 (set (reg:SI 0 ax [orig:286 _200 ] [286])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 957 956 958 118 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:286 _200 ] [286])
            (const_int 89 [0x59]))) "E2OUT.f":294 11 {*cmpsi_1}
     (nil))
(jump_insn 958 957 959 118 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 987)
            (pc))) "E2OUT.f":294 682 {*jcc}
     (nil)
 -> 987)
;;  succ:       126
;;              119 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 119, loop depth 0, maybe hot
;;  prev block 118, next block 120, flags: (RTL, MODIFIED)
;;  pred:       118 (FALLTHRU)
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 287
(note 959 958 960 119 [bb 119] NOTE_INSN_BASIC_BLOCK)
(insn 960 959 961 119 (set (reg:SI 0 ax [orig:287 _201 ] [287])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 961 960 962 119 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:287 _201 ] [287])
            (const_int 97 [0x61]))) "E2OUT.f":294 11 {*cmpsi_1}
     (nil))
(jump_insn 962 961 963 119 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1022)
            (pc))) "E2OUT.f":294 682 {*jcc}
     (nil)
 -> 1022)
;;  succ:       120 (FALLTHRU)
;;              127
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 120, loop depth 0, maybe hot
;;  prev block 119, next block 121, flags: (RTL, MODIFIED)
;;  pred:       119 (FALLTHRU)
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 288
(note 963 962 964 120 [bb 120] NOTE_INSN_BASIC_BLOCK)
(insn 964 963 965 120 (set (reg:SI 0 ax [orig:288 _202 ] [288])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 965 964 966 120 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:288 _202 ] [288])
            (const_int 99 [0x63]))) "E2OUT.f":294 11 {*cmpsi_1}
     (nil))
(jump_insn 966 965 967 120 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1022)
            (pc))) "E2OUT.f":294 682 {*jcc}
     (nil)
 -> 1022)
;;  succ:       121 (FALLTHRU)
;;              127
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 121, loop depth 0, maybe hot
;;  prev block 120, next block 122, flags: (RTL, MODIFIED)
;;  pred:       120 (FALLTHRU)
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 289
(note 967 966 968 121 [bb 121] NOTE_INSN_BASIC_BLOCK)
(insn 968 967 969 121 (set (reg:SI 0 ax [orig:289 _203 ] [289])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 969 968 970 121 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:289 _203 ] [289])
            (const_int 190 [0xbe]))) "E2OUT.f":294 11 {*cmpsi_1}
     (nil))
(jump_insn 970 969 971 121 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1022)
            (pc))) "E2OUT.f":294 682 {*jcc}
     (nil)
 -> 1022)
;;  succ:       122 (FALLTHRU)
;;              127
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 122, loop depth 0, maybe hot
;;  prev block 121, next block 123, flags: (RTL, MODIFIED)
;;  pred:       121 (FALLTHRU)
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 290
(note 971 970 972 122 [bb 122] NOTE_INSN_BASIC_BLOCK)
(insn 972 971 973 122 (set (reg:SI 0 ax [orig:290 _204 ] [290])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 973 972 974 122 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:290 _204 ] [290])
            (const_int 192 [0xc0]))) "E2OUT.f":294 11 {*cmpsi_1}
     (nil))
(jump_insn 974 973 975 122 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1022)
            (pc))) "E2OUT.f":294 682 {*jcc}
     (nil)
 -> 1022)
;;  succ:       123 (FALLTHRU)
;;              127
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 123, loop depth 0, maybe hot
;;  prev block 122, next block 124, flags: (RTL, MODIFIED)
;;  pred:       122 (FALLTHRU)
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 291
(note 975 974 976 123 [bb 123] NOTE_INSN_BASIC_BLOCK)
(insn 976 975 977 123 (set (reg:SI 0 ax [orig:291 _205 ] [291])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 977 976 978 123 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:291 _205 ] [291])
            (const_int 194 [0xc2]))) "E2OUT.f":294 11 {*cmpsi_1}
     (nil))
(jump_insn 978 977 979 123 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1022)
            (pc))) "E2OUT.f":294 682 {*jcc}
     (nil)
 -> 1022)
;;  succ:       124 (FALLTHRU)
;;              127
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 124, loop depth 0, maybe hot
;;  prev block 123, next block 125, flags: (RTL, MODIFIED)
;;  pred:       123 (FALLTHRU)
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 292
(note 979 978 980 124 [bb 124] NOTE_INSN_BASIC_BLOCK)
(insn 980 979 981 124 (set (reg:SI 0 ax [orig:292 _206 ] [292])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 981 980 982 124 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:292 _206 ] [292])
            (const_int 196 [0xc4]))) "E2OUT.f":294 11 {*cmpsi_1}
     (nil))
(jump_insn 982 981 983 124 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1022)
            (pc))) "E2OUT.f":294 682 {*jcc}
     (nil)
 -> 1022)
;;  succ:       125 (FALLTHRU)
;;              127
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 125, loop depth 0, maybe hot
;;  prev block 124, next block 126, flags: (RTL, MODIFIED)
;;  pred:       124 (FALLTHRU)
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 293
(note 983 982 984 125 [bb 125] NOTE_INSN_BASIC_BLOCK)
(insn 984 983 985 125 (set (reg:SI 0 ax [orig:293 _207 ] [293])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 985 984 986 125 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:293 _207 ] [293])
            (const_int 255 [0xff]))) "E2OUT.f":294 11 {*cmpsi_1}
     (nil))
(jump_insn 986 985 987 125 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1022)
            (pc))) "E2OUT.f":294 682 {*jcc}
     (nil)
 -> 1022)
;;  succ:       126 (FALLTHRU)
;;              127
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 126, loop depth 0, maybe hot
;;  prev block 125, next block 127, flags: (RTL, MODIFIED)
;;  pred:       118
;;              125 (FALLTHRU)
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 570 571 572 573
(code_label 987 986 988 126 54 (nil) [1 uses])
(note 988 987 989 126 [bb 126] NOTE_INSN_BASIC_BLOCK)
(insn 989 988 990 126 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [2  S8 A64])
        (const_int 6 [0x6])) "E2OUT.f":299 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 990 989 991 126 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [15  S8 A64])
        (const:DI (plus:DI (symbol_ref:DI ("outgrd_") [flags 0x2]  <var_decl 0x7f830f90d480 outgrd>)
                (const_int 44 [0x2c])))) "E2OUT.f":299 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 991 990 992 126 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [16  S8 A64])
        (const:DI (plus:DI (symbol_ref:DI ("outgrd_") [flags 0x2]  <var_decl 0x7f830f90d480 outgrd>)
                (const_int 40 [0x28])))) "E2OUT.f":299 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 992 991 993 126 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [4  S8 A64])
        (const:DI (plus:DI (symbol_ref:DI ("outgrd_") [flags 0x2]  <var_decl 0x7f830f90d480 outgrd>)
                (const_int 4 [0x4])))) "E2OUT.f":299 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 993 992 1501 126 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [4  S8 A64])
        (symbol_ref:DI ("outgrd_") [flags 0x2]  <var_decl 0x7f830f90d480 outgrd>)) "E2OUT.f":299 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 40 [0x28])
        (nil)))
(insn 1501 993 994 126 (set (reg:DI 0 ax [654])
        (const:DI (plus:DI (symbol_ref:DI ("llgrds_") [flags 0x202]  <var_decl 0x7f830f901ea0 llgrds>)
                (const_int 193183248 [0xb83be10])))) "E2OUT.f":299 85 {*movdi_internal}
     (nil))
(insn 994 1501 995 126 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [4  S8 A64])
        (reg:DI 0 ax [654])) "E2OUT.f":299 61 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 48 [0x30])
        (nil)))
(insn 995 994 996 126 (set (reg:DI 38 r9)
        (const:DI (plus:DI (symbol_ref:DI ("llgrds_") [flags 0x202]  <var_decl 0x7f830f901ea0 llgrds>)
                (const_int 192947196 [0xb8023fc])))) "E2OUT.f":299 85 {*movdi_internal}
     (nil))
(insn 996 995 997 126 (set (reg:DI 37 r8)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":299 85 {*movdi_internal}
     (nil))
(insn 997 996 998 126 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":299 85 {*movdi_internal}
     (nil))
(insn 998 997 999 126 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("llgrds_") [flags 0x202]  <var_decl 0x7f830f901ea0 llgrds>)
                (const_int 192711144 [0xb7c89e8])))) "E2OUT.f":299 85 {*movdi_internal}
     (nil))
(insn 999 998 1000 126 (set (reg:DI 4 si)
        (symbol_ref:DI ("vful.4080") [flags 0x202]  <var_decl 0x7f830f917900 vful>)) "E2OUT.f":299 85 {*movdi_internal}
     (nil))
(insn 1000 999 1001 126 (set (reg:DI 5 di)
        (symbol_ref:DI ("uful.4078") [flags 0x202]  <var_decl 0x7f830f917870 uful>)) "E2OUT.f":299 85 {*movdi_internal}
     (nil))
(insn 1001 1000 1002 126 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":299 88 {*movqi_internal}
     (nil))
(call_insn 1002 1001 1003 126 (call (mem:QI (symbol_ref:DI ("euvguv_") [flags 0x41]  <function_decl 0x7f830f927000 euvguv>) [0 euvguv S1 A8])
        (const_int 48 [0x30])) "E2OUT.f":299 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 1003 1002 1004 126 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":299 222 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 1004 1003 1005 126 (set (reg:DI 1 dx [570])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":300 85 {*movdi_internal}
     (nil))
(insn 1005 1004 1006 126 (set (reg:DI 0 ax [571])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 grid1+0 S8 A64])) "E2OUT.f":300 85 {*movdi_internal}
     (nil))
(insn 1006 1005 1007 126 (set (reg:DI 2 cx)
        (reg:DI 1 dx [570])) "E2OUT.f":300 85 {*movdi_internal}
     (nil))
(insn 1007 1006 1008 126 (set (reg:DI 1 dx)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":300 85 {*movdi_internal}
     (nil))
(insn 1008 1007 1009 126 (set (reg:DI 4 si)
        (reg:DI 0 ax [571])) "E2OUT.f":300 85 {*movdi_internal}
     (nil))
(insn 1009 1008 1010 126 (set (reg:DI 5 di)
        (symbol_ref:DI ("uful.4078") [flags 0x202]  <var_decl 0x7f830f917870 uful>)) "E2OUT.f":300 85 {*movdi_internal}
     (nil))
(insn 1010 1009 1011 126 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":300 88 {*movqi_internal}
     (nil))
(call_insn 1011 1010 1012 126 (call (mem:QI (symbol_ref:DI ("interp3_") [flags 0x41]  <function_decl 0x7f830f8f8e00 interp3>) [0 interp3 S1 A8])
        (const_int 0 [0])) "E2OUT.f":300 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(insn 1012 1011 1013 126 (set (reg:DI 1 dx [572])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":301 85 {*movdi_internal}
     (nil))
(insn 1013 1012 1014 126 (set (reg:DI 0 ax [573])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [4 grid2+0 S8 A64])) "E2OUT.f":301 85 {*movdi_internal}
     (nil))
(insn 1014 1013 1015 126 (set (reg:DI 2 cx)
        (reg:DI 1 dx [572])) "E2OUT.f":301 85 {*movdi_internal}
     (nil))
(insn 1015 1014 1016 126 (set (reg:DI 1 dx)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":301 85 {*movdi_internal}
     (nil))
(insn 1016 1015 1017 126 (set (reg:DI 4 si)
        (reg:DI 0 ax [573])) "E2OUT.f":301 85 {*movdi_internal}
     (nil))
(insn 1017 1016 1018 126 (set (reg:DI 5 di)
        (symbol_ref:DI ("vful.4080") [flags 0x202]  <var_decl 0x7f830f917900 vful>)) "E2OUT.f":301 85 {*movdi_internal}
     (nil))
(insn 1018 1017 1019 126 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":301 88 {*movqi_internal}
     (nil))
(call_insn 1019 1018 1411 126 (call (mem:QI (symbol_ref:DI ("interp3_") [flags 0x41]  <function_decl 0x7f830f8f8e00 interp3>) [0 interp3 S1 A8])
        (const_int 0 [0])) "E2OUT.f":301 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(jump_insn 1411 1019 1412 126 (set (pc)
        (label_ref 1123)) "E2OUT.f":301 683 {jump}
     (nil)
 -> 1123)
;;  succ:       139 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1412 1411 1022)
;; basic block 127, loop depth 0, maybe hot
;;  prev block 126, next block 128, flags: (RTL, MODIFIED)
;;  pred:       119
;;              120
;;              121
;;              122
;;              123
;;              124
;;              125
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1022 1412 1023 127 55 (nil) [7 uses])
(note 1023 1022 1024 127 [bb 127] NOTE_INSN_BASIC_BLOCK)
(insn 1024 1023 1074 127 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":304 86 {*movsi_internal}
     (nil))
;;  succ:       128 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 128, loop depth 0, maybe hot
;;  prev block 127, next block 129, flags: (RTL, MODIFIED)
;;  pred:       127 (FALLTHRU)
;;              132 [always] 
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 406 574
(code_label 1074 1024 1025 128 60 (nil) [1 uses])
(note 1025 1074 1026 128 [bb 128] NOTE_INSN_BASIC_BLOCK)
(insn 1026 1025 1027 128 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "E2OUT.f":304 11 {*cmpsi_1}
     (nil))
(insn 1027 1026 1028 128 (set (reg:QI 0 ax [574])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":304 678 {*setcc_qi}
     (nil))
(insn 1028 1027 1029 128 (set (reg:SI 0 ax [orig:406 _440 ] [406])
        (zero_extend:SI (reg:QI 0 ax [574]))) "E2OUT.f":304 140 {*zero_extendqisi2}
     (nil))
(insn 1029 1028 1030 128 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:406 _440 ] [406])
            (const_int 0 [0]))) "E2OUT.f":304 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1030 1029 1031 128 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1464)
            (pc))) "E2OUT.f":304 682 {*jcc}
     (nil)
 -> 1464)
;;  succ:       177
;;              129 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 129, loop depth 0, maybe hot
;;  prev block 128, next block 130, flags: (RTL, MODIFIED)
;;  pred:       128 (FALLTHRU)
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1031 1030 1032 129 [bb 129] NOTE_INSN_BASIC_BLOCK)
(insn 1032 1031 1068 129 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":305 86 {*movsi_internal}
     (nil))
;;  succ:       130 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 130, loop depth 0, maybe hot
;;  prev block 129, next block 131, flags: (RTL, MODIFIED)
;;  pred:       129 (FALLTHRU)
;;              131 [always] 
;; bb 130 artificial_defs: { }
;; bb 130 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 407 575
(code_label 1068 1032 1033 130 59 (nil) [1 uses])
(note 1033 1068 1034 130 [bb 130] NOTE_INSN_BASIC_BLOCK)
(insn 1034 1033 1035 130 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
            (const_int 237 [0xed]))) "E2OUT.f":305 11 {*cmpsi_1}
     (nil))
(insn 1035 1034 1036 130 (set (reg:QI 0 ax [575])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":305 678 {*setcc_qi}
     (nil))
(insn 1036 1035 1037 130 (set (reg:SI 0 ax [orig:407 _442 ] [407])
        (zero_extend:SI (reg:QI 0 ax [575]))) "E2OUT.f":305 140 {*zero_extendqisi2}
     (nil))
(insn 1037 1036 1038 130 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:407 _442 ] [407])
            (const_int 0 [0]))) "E2OUT.f":305 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1038 1037 1039 130 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1467)
            (pc))) "E2OUT.f":305 682 {*jcc}
     (nil)
 -> 1467)
;;  succ:       178
;;              131 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 131, loop depth 0, maybe hot
;;  prev block 130, next block 178, flags: (RTL, MODIFIED)
;;  pred:       130 (FALLTHRU)
;; bb 131 artificial_defs: { }
;; bb 131 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  def 	 17 [flags] 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 576 577 578 579 580 581 582 583 584
(note 1039 1038 1040 131 [bb 131] NOTE_INSN_BASIC_BLOCK)
(insn 1040 1039 1041 131 (set (reg:SI 0 ax [576])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":306 86 {*movsi_internal}
     (nil))
(insn 1041 1040 1042 131 (set (reg:DI 0 ax [orig:294 _208 ] [294])
        (sign_extend:DI (reg:SI 0 ax [576]))) "E2OUT.f":306 149 {*extendsidi2_rex64}
     (nil))
(insn 1042 1041 1043 131 (parallel [
            (set (reg:DI 1 dx [orig:295 _209 ] [295])
                (mult:DI (reg:DI 0 ax [orig:294 _208 ] [294])
                    (const_int 237 [0xed])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":306 349 {*muldi3_1}
     (nil))
(insn 1043 1042 1044 131 (set (reg:SI 0 ax [577])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":306 86 {*movsi_internal}
     (nil))
(insn 1044 1043 1045 131 (set (reg:DI 0 ax [orig:296 _210 ] [296])
        (sign_extend:DI (reg:SI 0 ax [577]))) "E2OUT.f":306 149 {*extendsidi2_rex64}
     (nil))
(insn 1045 1044 1046 131 (parallel [
            (set (reg:DI 0 ax [orig:297 _211 ] [297])
                (plus:DI (reg:DI 0 ax [orig:296 _210 ] [296])
                    (reg:DI 1 dx [orig:295 _209 ] [295])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":306 222 {*adddi_1}
     (nil))
(insn 1046 1045 1047 131 (parallel [
            (set (reg:DI 2 cx [orig:298 _212 ] [298])
                (plus:DI (reg:DI 0 ax [orig:297 _211 ] [297])
                    (const_int -238 [0xffffffffffffff12])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":306 222 {*adddi_1}
     (nil))
(insn 1047 1046 1048 131 (set (reg:SI 0 ax [578])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":306 86 {*movsi_internal}
     (nil))
(insn 1048 1047 1049 131 (set (reg:DI 0 ax [orig:299 _213 ] [299])
        (sign_extend:DI (reg:SI 0 ax [578]))) "E2OUT.f":306 149 {*extendsidi2_rex64}
     (nil))
(insn 1049 1048 1050 131 (parallel [
            (set (reg:DI 0 ax [orig:300 _214 ] [300])
                (mult:DI (reg:DI 0 ax [orig:299 _213 ] [299])
                    (reg:DI 3 bx [orig:381 stride.2_350 ] [381])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":306 349 {*muldi3_1}
     (nil))
(insn 1050 1049 1051 131 (parallel [
            (set (reg:DI 1 dx [orig:301 _215 ] [301])
                (plus:DI (reg:DI 42 r13 [orig:387 offset.3_358 ] [387])
                    (reg:DI 0 ax [orig:300 _214 ] [300])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":306 222 {*adddi_1}
     (nil))
(insn 1051 1050 1052 131 (set (reg:SI 0 ax [579])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":306 86 {*movsi_internal}
     (nil))
(insn 1052 1051 1053 131 (set (reg:DI 0 ax [orig:302 _216 ] [302])
        (sign_extend:DI (reg:SI 0 ax [579]))) "E2OUT.f":306 149 {*extendsidi2_rex64}
     (nil))
(insn 1053 1052 1054 131 (parallel [
            (set (reg:DI 1 dx [orig:303 _217 ] [303])
                (plus:DI (reg:DI 1 dx [orig:301 _215 ] [301])
                    (reg:DI 0 ax [orig:302 _216 ] [302])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":306 222 {*adddi_1}
     (nil))
(insn 1054 1053 1055 131 (set (reg/f:DI 0 ax [580])
        (symbol_ref:DI ("uful.4078") [flags 0x202]  <var_decl 0x7f830f917870 uful>)) "E2OUT.f":306 85 {*movdi_internal}
     (nil))
(insn 1055 1054 1056 131 (set (reg:SF 21 xmm0 [orig:304 _218 ] [304])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:298 _212 ] [298])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [580])) [6 uful S4 A32])) "E2OUT.f":306 131 {*movsf_internal}
     (nil))
(insn 1056 1055 1057 131 (set (reg/f:DI 0 ax [581])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 grid1+0 S8 A64])) "E2OUT.f":306 85 {*movdi_internal}
     (nil))
(insn 1057 1056 1058 131 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:303 _217 ] [303])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [581])) [6 *grid1_379(D) S4 A32])
        (reg:SF 21 xmm0 [orig:304 _218 ] [304])) "E2OUT.f":306 131 {*movsf_internal}
     (nil))
(insn 1058 1057 1059 131 (set (reg:SI 0 ax [582])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":307 86 {*movsi_internal}
     (nil))
(insn 1059 1058 1060 131 (set (reg:DI 0 ax [orig:305 _219 ] [305])
        (sign_extend:DI (reg:SI 0 ax [582]))) "E2OUT.f":307 149 {*extendsidi2_rex64}
     (nil))
(insn 1060 1059 1061 131 (parallel [
            (set (reg:DI 1 dx [orig:306 _220 ] [306])
                (mult:DI (reg:DI 0 ax [orig:305 _219 ] [305])
                    (const_int 4000 [0xfa0])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":307 349 {*muldi3_1}
     (nil))
(insn 1061 1060 1062 131 (set (reg:SI 0 ax [583])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":307 86 {*movsi_internal}
     (nil))
(insn 1062 1061 1063 131 (set (reg:DI 0 ax [orig:307 _221 ] [307])
        (sign_extend:DI (reg:SI 0 ax [583]))) "E2OUT.f":307 149 {*extendsidi2_rex64}
     (nil))
(insn 1063 1062 1064 131 (parallel [
            (set (reg:DI 0 ax [orig:308 _222 ] [308])
                (plus:DI (reg:DI 0 ax [orig:307 _221 ] [307])
                    (reg:DI 1 dx [orig:306 _220 ] [306])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":307 222 {*adddi_1}
     (nil))
(insn 1064 1063 1065 131 (parallel [
            (set (reg:DI 1 dx [orig:309 _223 ] [309])
                (plus:DI (reg:DI 0 ax [orig:308 _222 ] [308])
                    (const_int -4001 [0xfffffffffffff05f])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":307 222 {*adddi_1}
     (nil))
(insn 1065 1064 1066 131 (set (reg/f:DI 0 ax [584])
        (symbol_ref:DI ("bitmap_") [flags 0x202]  <var_decl 0x7f831696bab0 bitmap>)) "E2OUT.f":307 85 {*movdi_internal}
     (nil))
(insn 1066 1065 1067 131 (set (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:309 _223 ] [309])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [584])) [1 bitmap.ibmap S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":307 86 {*movsi_internal}
     (nil))
(insn 1067 1066 1413 131 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":305 221 {*addsi_1}
     (nil))
(jump_insn 1413 1067 1414 131 (set (pc)
        (label_ref 1068)) "E2OUT.f":305 683 {jump}
     (nil)
 -> 1068)
;;  succ:       130 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

(barrier 1414 1413 1467)
;; basic block 178, loop depth 0, maybe hot
;;  prev block 131, next block 132, flags: (RTL, MODIFIED)
;;  pred:       130
;; bb 178 artificial_defs: { }
;; bb 178 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1467 1414 1466 178 83 (nil) [1 uses])
(note 1466 1467 1468 178 [bb 178] NOTE_INSN_BASIC_BLOCK)
(insn 1468 1466 1071 178 (const_int 0 [0]) "E2OUT.f":307 718 {nop}
     (nil))
;;  succ:       132 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

;; basic block 132, loop depth 0, maybe hot
;;  prev block 178, next block 177, flags: (RTL, MODIFIED)
;;  pred:       178 [always]  (FALLTHRU)
;; bb 132 artificial_defs: { }
;; bb 132 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1071 1468 1072 132 58 (nil) [0 uses])
(note 1072 1071 1073 132 [bb 132] NOTE_INSN_BASIC_BLOCK)
(insn 1073 1072 1415 132 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":304 221 {*addsi_1}
     (nil))
(jump_insn 1415 1073 1416 132 (set (pc)
        (label_ref 1074)) "E2OUT.f":304 683 {jump}
     (nil)
 -> 1074)
;;  succ:       128 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387 389 395

(barrier 1416 1415 1464)
;; basic block 177, loop depth 0, maybe hot
;;  prev block 132, next block 133, flags: (RTL, MODIFIED)
;;  pred:       128
;; bb 177 artificial_defs: { }
;; bb 177 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1464 1416 1463 177 82 (nil) [1 uses])
(note 1463 1464 1465 177 [bb 177] NOTE_INSN_BASIC_BLOCK)
(insn 1465 1463 1077 177 (const_int 0 [0]) "E2OUT.f":305 718 {nop}
     (nil))
;;  succ:       133 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 133, loop depth 0, maybe hot
;;  prev block 177, next block 134, flags: (RTL, MODIFIED)
;;  pred:       177 [always]  (FALLTHRU)
;; bb 133 artificial_defs: { }
;; bb 133 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1077 1465 1078 133 57 (nil) [0 uses])
(note 1078 1077 1079 133 [bb 133] NOTE_INSN_BASIC_BLOCK)
(insn 1079 1078 1120 133 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":311 86 {*movsi_internal}
     (nil))
;;  succ:       134 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 134, loop depth 0, maybe hot
;;  prev block 133, next block 135, flags: (RTL, MODIFIED)
;;  pred:       133 (FALLTHRU)
;;              138 [always] 
;; bb 134 artificial_defs: { }
;; bb 134 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 408 585
(code_label 1120 1079 1080 134 63 (nil) [1 uses])
(note 1080 1120 1081 134 [bb 134] NOTE_INSN_BASIC_BLOCK)
(insn 1081 1080 1082 134 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "E2OUT.f":311 11 {*cmpsi_1}
     (nil))
(insn 1082 1081 1083 134 (set (reg:QI 0 ax [585])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":311 678 {*setcc_qi}
     (nil))
(insn 1083 1082 1084 134 (set (reg:SI 0 ax [orig:408 _448 ] [408])
        (zero_extend:SI (reg:QI 0 ax [585]))) "E2OUT.f":311 140 {*zero_extendqisi2}
     (nil))
(insn 1084 1083 1085 134 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:408 _448 ] [408])
            (const_int 0 [0]))) "E2OUT.f":311 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1085 1084 1086 134 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1470)
            (pc))) "E2OUT.f":311 682 {*jcc}
     (nil)
 -> 1470)
;;  succ:       179
;;              135 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 135, loop depth 0, maybe hot
;;  prev block 134, next block 136, flags: (RTL, MODIFIED)
;;  pred:       134 (FALLTHRU)
;; bb 135 artificial_defs: { }
;; bb 135 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1086 1085 1087 135 [bb 135] NOTE_INSN_BASIC_BLOCK)
(insn 1087 1086 1114 135 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":312 86 {*movsi_internal}
     (nil))
;;  succ:       136 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 136, loop depth 0, maybe hot
;;  prev block 135, next block 137, flags: (RTL, MODIFIED)
;;  pred:       135 (FALLTHRU)
;;              137 [always] 
;; bb 136 artificial_defs: { }
;; bb 136 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 409 586
(code_label 1114 1087 1088 136 62 (nil) [1 uses])
(note 1088 1114 1089 136 [bb 136] NOTE_INSN_BASIC_BLOCK)
(insn 1089 1088 1090 136 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
            (const_int 237 [0xed]))) "E2OUT.f":312 11 {*cmpsi_1}
     (nil))
(insn 1090 1089 1091 136 (set (reg:QI 0 ax [586])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":312 678 {*setcc_qi}
     (nil))
(insn 1091 1090 1092 136 (set (reg:SI 0 ax [orig:409 _450 ] [409])
        (zero_extend:SI (reg:QI 0 ax [586]))) "E2OUT.f":312 140 {*zero_extendqisi2}
     (nil))
(insn 1092 1091 1093 136 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:409 _450 ] [409])
            (const_int 0 [0]))) "E2OUT.f":312 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1093 1092 1094 136 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1473)
            (pc))) "E2OUT.f":312 682 {*jcc}
     (nil)
 -> 1473)
;;  succ:       180
;;              137 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 137, loop depth 0, maybe hot
;;  prev block 136, next block 180, flags: (RTL, MODIFIED)
;;  pred:       136 (FALLTHRU)
;; bb 137 artificial_defs: { }
;; bb 137 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  def 	 17 [flags] 310 311 312 313 314 315 316 317 318 319 320 587 588 589 590 591 592
(note 1094 1093 1095 137 [bb 137] NOTE_INSN_BASIC_BLOCK)
(insn 1095 1094 1096 137 (set (reg:SI 0 ax [587])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":313 86 {*movsi_internal}
     (nil))
(insn 1096 1095 1097 137 (set (reg:DI 0 ax [orig:310 _224 ] [310])
        (sign_extend:DI (reg:SI 0 ax [587]))) "E2OUT.f":313 149 {*extendsidi2_rex64}
     (nil))
(insn 1097 1096 1098 137 (parallel [
            (set (reg:DI 1 dx [orig:311 _225 ] [311])
                (mult:DI (reg:DI 0 ax [orig:310 _224 ] [310])
                    (const_int 237 [0xed])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":313 349 {*muldi3_1}
     (nil))
(insn 1098 1097 1099 137 (set (reg:SI 0 ax [588])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":313 86 {*movsi_internal}
     (nil))
(insn 1099 1098 1100 137 (set (reg:DI 0 ax [orig:312 _226 ] [312])
        (sign_extend:DI (reg:SI 0 ax [588]))) "E2OUT.f":313 149 {*extendsidi2_rex64}
     (nil))
(insn 1100 1099 1101 137 (parallel [
            (set (reg:DI 0 ax [orig:313 _227 ] [313])
                (plus:DI (reg:DI 0 ax [orig:312 _226 ] [312])
                    (reg:DI 1 dx [orig:311 _225 ] [311])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":313 222 {*adddi_1}
     (nil))
(insn 1101 1100 1102 137 (parallel [
            (set (reg:DI 2 cx [orig:314 _228 ] [314])
                (plus:DI (reg:DI 0 ax [orig:313 _227 ] [313])
                    (const_int -238 [0xffffffffffffff12])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":313 222 {*adddi_1}
     (nil))
(insn 1102 1101 1103 137 (set (reg:SI 0 ax [589])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":313 86 {*movsi_internal}
     (nil))
(insn 1103 1102 1104 137 (set (reg:DI 0 ax [orig:315 _229 ] [315])
        (sign_extend:DI (reg:SI 0 ax [589]))) "E2OUT.f":313 149 {*extendsidi2_rex64}
     (nil))
(insn 1104 1103 1105 137 (parallel [
            (set (reg:DI 0 ax [orig:316 _230 ] [316])
                (mult:DI (reg:DI 0 ax [orig:315 _229 ] [315])
                    (reg:DI 41 r12 [orig:389 stride.7_361 ] [389])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":313 349 {*muldi3_1}
     (nil))
(insn 1105 1104 1106 137 (parallel [
            (set (reg:DI 1 dx [orig:317 _231 ] [317])
                (plus:DI (reg:DI 43 r14 [orig:395 offset.8_368 ] [395])
                    (reg:DI 0 ax [orig:316 _230 ] [316])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":313 222 {*adddi_1}
     (nil))
(insn 1106 1105 1107 137 (set (reg:SI 0 ax [590])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":313 86 {*movsi_internal}
     (nil))
(insn 1107 1106 1108 137 (set (reg:DI 0 ax [orig:318 _232 ] [318])
        (sign_extend:DI (reg:SI 0 ax [590]))) "E2OUT.f":313 149 {*extendsidi2_rex64}
     (nil))
(insn 1108 1107 1109 137 (parallel [
            (set (reg:DI 1 dx [orig:319 _233 ] [319])
                (plus:DI (reg:DI 1 dx [orig:317 _231 ] [317])
                    (reg:DI 0 ax [orig:318 _232 ] [318])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":313 222 {*adddi_1}
     (nil))
(insn 1109 1108 1110 137 (set (reg/f:DI 0 ax [591])
        (symbol_ref:DI ("vful.4080") [flags 0x202]  <var_decl 0x7f830f917900 vful>)) "E2OUT.f":313 85 {*movdi_internal}
     (nil))
(insn 1110 1109 1111 137 (set (reg:SF 21 xmm0 [orig:320 _234 ] [320])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:314 _228 ] [314])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [591])) [6 vful S4 A32])) "E2OUT.f":313 131 {*movsf_internal}
     (nil))
(insn 1111 1110 1112 137 (set (reg/f:DI 0 ax [592])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [4 grid2+0 S8 A64])) "E2OUT.f":313 85 {*movdi_internal}
     (nil))
(insn 1112 1111 1113 137 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:319 _233 ] [319])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [592])) [6 *grid2_389(D) S4 A32])
        (reg:SF 21 xmm0 [orig:320 _234 ] [320])) "E2OUT.f":313 131 {*movsf_internal}
     (nil))
(insn 1113 1112 1417 137 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":312 221 {*addsi_1}
     (nil))
(jump_insn 1417 1113 1418 137 (set (pc)
        (label_ref 1114)) "E2OUT.f":312 683 {jump}
     (nil)
 -> 1114)
;;  succ:       136 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

(barrier 1418 1417 1473)
;; basic block 180, loop depth 0, maybe hot
;;  prev block 137, next block 138, flags: (RTL, MODIFIED)
;;  pred:       136
;; bb 180 artificial_defs: { }
;; bb 180 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1473 1418 1472 180 85 (nil) [1 uses])
(note 1472 1473 1474 180 [bb 180] NOTE_INSN_BASIC_BLOCK)
(insn 1474 1472 1117 180 (const_int 0 [0]) "E2OUT.f":313 718 {nop}
     (nil))
;;  succ:       138 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

;; basic block 138, loop depth 0, maybe hot
;;  prev block 180, next block 179, flags: (RTL, MODIFIED)
;;  pred:       180 [always]  (FALLTHRU)
;; bb 138 artificial_defs: { }
;; bb 138 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1117 1474 1118 138 61 (nil) [0 uses])
(note 1118 1117 1119 138 [bb 138] NOTE_INSN_BASIC_BLOCK)
(insn 1119 1118 1419 138 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":311 221 {*addsi_1}
     (nil))
(jump_insn 1419 1119 1420 138 (set (pc)
        (label_ref 1120)) "E2OUT.f":311 683 {jump}
     (nil)
 -> 1120)
;;  succ:       134 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 389 395

(barrier 1420 1419 1470)
;; basic block 179, loop depth 0, maybe hot
;;  prev block 138, next block 139, flags: (RTL, MODIFIED)
;;  pred:       134
;; bb 179 artificial_defs: { }
;; bb 179 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1470 1420 1469 179 84 (nil) [1 uses])
(note 1469 1470 1471 179 [bb 179] NOTE_INSN_BASIC_BLOCK)
(insn 1471 1469 1123 179 (const_int 0 [0]) "E2OUT.f":312 718 {nop}
     (nil))
;;  succ:       139 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 139, loop depth 0, maybe hot
;;  prev block 179, next block 140, flags: (RTL, MODIFIED)
;;  pred:       179 [always]  (FALLTHRU)
;;              126 [always] 
;; bb 139 artificial_defs: { }
;; bb 139 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1123 1471 1124 139 56 (nil) [1 uses])
(note 1124 1123 1421 139 [bb 139] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1421 1124 1422 139 (set (pc)
        (label_ref 1254)) "E2OUT.f":311 683 {jump}
     (nil)
 -> 1254)
;;  succ:       157 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1422 1421 1127)
;; basic block 140, loop depth 0, maybe hot
;;  prev block 139, next block 141, flags: (RTL, MODIFIED)
;;  pred:       111
;;              112
;; bb 140 artificial_defs: { }
;; bb 140 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 321 322 323 324 325 593 594 595
(code_label 1127 1422 1128 140 51 (nil) [2 uses])
(note 1128 1127 1129 140 [bb 140] NOTE_INSN_BASIC_BLOCK)
(insn 1129 1128 1130 140 (set (reg:DI 0 ax [593])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 egrid1+0 S8 A64])) "E2OUT.f":319 85 {*movdi_internal}
     (nil))
(insn 1130 1129 1131 140 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":319 85 {*movdi_internal}
     (nil))
(insn 1131 1130 1132 140 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":319 85 {*movdi_internal}
     (nil))
(insn 1132 1131 1133 140 (set (reg:DI 4 si)
        (symbol_ref:DI ("hful.4073") [flags 0x202]  <var_decl 0x7f830f917630 hful>)) "E2OUT.f":319 85 {*movdi_internal}
     (nil))
(insn 1133 1132 1134 140 (set (reg:DI 5 di)
        (reg:DI 0 ax [593])) "E2OUT.f":319 85 {*movdi_internal}
     (nil))
(insn 1134 1133 1135 140 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":319 88 {*movqi_internal}
     (nil))
(call_insn 1135 1134 1136 140 (call (mem:QI (symbol_ref:DI ("fillh_") [flags 0x41]  <function_decl 0x7f830f927200 fillh>) [0 fillh S1 A8])
        (const_int 0 [0])) "E2OUT.f":319 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(insn 1136 1135 1137 140 (set (reg/f:DI 0 ax [594])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":320 85 {*movdi_internal}
     (nil))
(insn 1137 1136 1138 140 (set (reg:SI 0 ax [orig:321 _235 ] [321])
        (mem:SI (reg/f:DI 0 ax [594]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":320 86 {*movsi_internal}
     (nil))
(insn 1138 1137 1139 140 (set (reg:DI 0 ax [orig:322 _236 ] [322])
        (sign_extend:DI (reg:SI 0 ax [orig:321 _235 ] [321]))) "E2OUT.f":320 149 {*extendsidi2_rex64}
     (nil))
(insn 1139 1138 1140 140 (parallel [
            (set (reg:DI 0 ax [orig:323 _237 ] [323])
                (plus:DI (reg:DI 0 ax [orig:322 _236 ] [322])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":320 222 {*adddi_1}
     (nil))
(insn 1140 1139 1141 140 (parallel [
            (set (reg:DI 0 ax [595])
                (plus:DI (reg:DI 0 ax [orig:323 _237 ] [323])
                    (const_int 1004 [0x3ec])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":320 222 {*adddi_1}
     (nil))
(insn 1141 1140 1142 140 (set (reg:SI 0 ax [orig:324 _238 ] [324])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [595])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.ismful S4 A32])) "E2OUT.f":320 86 {*movsi_internal}
     (nil))
(insn 1142 1141 1143 140 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])
        (reg:SI 0 ax [orig:324 _238 ] [324])) "E2OUT.f":320 86 {*movsi_internal}
     (nil))
(insn 1143 1142 1144 140 (set (reg:SI 0 ax [orig:325 ismth.28_239 ] [325])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])) "E2OUT.f":321 86 {*movsi_internal}
     (nil))
(insn 1144 1143 1145 140 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:325 ismth.28_239 ] [325])
            (const_int 0 [0]))) "E2OUT.f":321 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1145 1144 1146 140 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1154)
            (pc))) "E2OUT.f":321 682 {*jcc}
     (nil)
 -> 1154)
;;  succ:       141 (FALLTHRU)
;;              142
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 141, loop depth 0, maybe hot
;;  prev block 140, next block 142, flags: (RTL, MODIFIED)
;;  pred:       140 (FALLTHRU)
;; bb 141 artificial_defs: { }
;; bb 141 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 596
(note 1146 1145 1147 141 [bb 141] NOTE_INSN_BASIC_BLOCK)
(insn 1147 1146 1148 141 (parallel [
            (set (reg:DI 0 ax [596])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":321 222 {*adddi_1}
     (nil))
(insn 1148 1147 1149 141 (set (reg:DI 2 cx)
        (reg:DI 0 ax [596])) "E2OUT.f":321 85 {*movdi_internal}
     (nil))
(insn 1149 1148 1150 141 (set (reg:DI 1 dx)
        (symbol_ref:DI ("hful.4073") [flags 0x202]  <var_decl 0x7f830f917630 hful>)) "E2OUT.f":321 85 {*movdi_internal}
     (nil))
(insn 1150 1149 1151 141 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f830f556630 *.LC1>)) "E2OUT.f":321 85 {*movdi_internal}
     (nil))
(insn 1151 1150 1152 141 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f830f556750 *.LC3>)) "E2OUT.f":321 85 {*movdi_internal}
     (nil))
(insn 1152 1151 1153 141 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":321 88 {*movqi_internal}
     (nil))
(call_insn 1153 1152 1154 141 (call (mem:QI (symbol_ref:DI ("filter_") [flags 0x41]  <function_decl 0x7f830f8f8c00 filter>) [0 filter S1 A8])
        (const_int 0 [0])) "E2OUT.f":321 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
;;  succ:       142 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 142, loop depth 0, maybe hot
;;  prev block 141, next block 143, flags: (RTL, MODIFIED)
;;  pred:       140
;;              141 (FALLTHRU)
;; bb 142 artificial_defs: { }
;; bb 142 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 326
(code_label 1154 1153 1155 142 64 (nil) [1 uses])
(note 1155 1154 1156 142 [bb 142] NOTE_INSN_BASIC_BLOCK)
(insn 1156 1155 1157 142 (set (reg:SI 0 ax [orig:326 _240 ] [326])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 1157 1156 1158 142 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:326 _240 ] [326])
            (const_int 89 [0x59]))) "E2OUT.f":322 11 {*cmpsi_1}
     (nil))
(jump_insn 1158 1157 1159 142 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1187)
            (pc))) "E2OUT.f":322 682 {*jcc}
     (nil)
 -> 1187)
;;  succ:       150
;;              143 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 143, loop depth 0, maybe hot
;;  prev block 142, next block 144, flags: (RTL, MODIFIED)
;;  pred:       142 (FALLTHRU)
;; bb 143 artificial_defs: { }
;; bb 143 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 327
(note 1159 1158 1160 143 [bb 143] NOTE_INSN_BASIC_BLOCK)
(insn 1160 1159 1161 143 (set (reg:SI 0 ax [orig:327 _241 ] [327])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 1161 1160 1162 143 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:327 _241 ] [327])
            (const_int 97 [0x61]))) "E2OUT.f":322 11 {*cmpsi_1}
     (nil))
(jump_insn 1162 1161 1163 143 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1199)
            (pc))) "E2OUT.f":322 682 {*jcc}
     (nil)
 -> 1199)
;;  succ:       144 (FALLTHRU)
;;              151
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 144, loop depth 0, maybe hot
;;  prev block 143, next block 145, flags: (RTL, MODIFIED)
;;  pred:       143 (FALLTHRU)
;; bb 144 artificial_defs: { }
;; bb 144 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 328
(note 1163 1162 1164 144 [bb 144] NOTE_INSN_BASIC_BLOCK)
(insn 1164 1163 1165 144 (set (reg:SI 0 ax [orig:328 _242 ] [328])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 1165 1164 1166 144 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:328 _242 ] [328])
            (const_int 99 [0x63]))) "E2OUT.f":322 11 {*cmpsi_1}
     (nil))
(jump_insn 1166 1165 1167 144 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1199)
            (pc))) "E2OUT.f":322 682 {*jcc}
     (nil)
 -> 1199)
;;  succ:       145 (FALLTHRU)
;;              151
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 145, loop depth 0, maybe hot
;;  prev block 144, next block 146, flags: (RTL, MODIFIED)
;;  pred:       144 (FALLTHRU)
;; bb 145 artificial_defs: { }
;; bb 145 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 329
(note 1167 1166 1168 145 [bb 145] NOTE_INSN_BASIC_BLOCK)
(insn 1168 1167 1169 145 (set (reg:SI 0 ax [orig:329 _243 ] [329])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 1169 1168 1170 145 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:329 _243 ] [329])
            (const_int 190 [0xbe]))) "E2OUT.f":322 11 {*cmpsi_1}
     (nil))
(jump_insn 1170 1169 1171 145 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1199)
            (pc))) "E2OUT.f":322 682 {*jcc}
     (nil)
 -> 1199)
;;  succ:       146 (FALLTHRU)
;;              151
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 146, loop depth 0, maybe hot
;;  prev block 145, next block 147, flags: (RTL, MODIFIED)
;;  pred:       145 (FALLTHRU)
;; bb 146 artificial_defs: { }
;; bb 146 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 330
(note 1171 1170 1172 146 [bb 146] NOTE_INSN_BASIC_BLOCK)
(insn 1172 1171 1173 146 (set (reg:SI 0 ax [orig:330 _244 ] [330])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 1173 1172 1174 146 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:330 _244 ] [330])
            (const_int 192 [0xc0]))) "E2OUT.f":322 11 {*cmpsi_1}
     (nil))
(jump_insn 1174 1173 1175 146 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1199)
            (pc))) "E2OUT.f":322 682 {*jcc}
     (nil)
 -> 1199)
;;  succ:       147 (FALLTHRU)
;;              151
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 147, loop depth 0, maybe hot
;;  prev block 146, next block 148, flags: (RTL, MODIFIED)
;;  pred:       146 (FALLTHRU)
;; bb 147 artificial_defs: { }
;; bb 147 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 331
(note 1175 1174 1176 147 [bb 147] NOTE_INSN_BASIC_BLOCK)
(insn 1176 1175 1177 147 (set (reg:SI 0 ax [orig:331 _245 ] [331])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 1177 1176 1178 147 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:331 _245 ] [331])
            (const_int 194 [0xc2]))) "E2OUT.f":322 11 {*cmpsi_1}
     (nil))
(jump_insn 1178 1177 1179 147 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1199)
            (pc))) "E2OUT.f":322 682 {*jcc}
     (nil)
 -> 1199)
;;  succ:       148 (FALLTHRU)
;;              151
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 148, loop depth 0, maybe hot
;;  prev block 147, next block 149, flags: (RTL, MODIFIED)
;;  pred:       147 (FALLTHRU)
;; bb 148 artificial_defs: { }
;; bb 148 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 332
(note 1179 1178 1180 148 [bb 148] NOTE_INSN_BASIC_BLOCK)
(insn 1180 1179 1181 148 (set (reg:SI 0 ax [orig:332 _246 ] [332])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 1181 1180 1182 148 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:332 _246 ] [332])
            (const_int 196 [0xc4]))) "E2OUT.f":322 11 {*cmpsi_1}
     (nil))
(jump_insn 1182 1181 1183 148 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1199)
            (pc))) "E2OUT.f":322 682 {*jcc}
     (nil)
 -> 1199)
;;  succ:       149 (FALLTHRU)
;;              151
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 149, loop depth 0, maybe hot
;;  prev block 148, next block 150, flags: (RTL, MODIFIED)
;;  pred:       148 (FALLTHRU)
;; bb 149 artificial_defs: { }
;; bb 149 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 333
(note 1183 1182 1184 149 [bb 149] NOTE_INSN_BASIC_BLOCK)
(insn 1184 1183 1185 149 (set (reg:SI 0 ax [orig:333 _247 ] [333])
        (mem/c:SI (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>) [1 rqstfld.kgtype+0 S4 A128])) "E2OUT.f":1 86 {*movsi_internal}
     (nil))
(insn 1185 1184 1186 149 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:333 _247 ] [333])
            (const_int 255 [0xff]))) "E2OUT.f":322 11 {*cmpsi_1}
     (nil))
(jump_insn 1186 1185 1187 149 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1199)
            (pc))) "E2OUT.f":322 682 {*jcc}
     (nil)
 -> 1199)
;;  succ:       150 (FALLTHRU)
;;              151
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 150, loop depth 0, maybe hot
;;  prev block 149, next block 151, flags: (RTL, MODIFIED)
;;  pred:       142
;;              149 (FALLTHRU)
;; bb 150 artificial_defs: { }
;; bb 150 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 597 598
(code_label 1187 1186 1188 150 65 (nil) [1 uses])
(note 1188 1187 1189 150 [bb 150] NOTE_INSN_BASIC_BLOCK)
(insn 1189 1188 1190 150 (set (reg:DI 1 dx [597])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":327 85 {*movdi_internal}
     (nil))
(insn 1190 1189 1191 150 (set (reg:DI 0 ax [598])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 grid1+0 S8 A64])) "E2OUT.f":327 85 {*movdi_internal}
     (nil))
(insn 1191 1190 1192 150 (set (reg:DI 2 cx)
        (reg:DI 1 dx [597])) "E2OUT.f":327 85 {*movdi_internal}
     (nil))
(insn 1192 1191 1193 150 (set (reg:DI 1 dx)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":327 85 {*movdi_internal}
     (nil))
(insn 1193 1192 1194 150 (set (reg:DI 4 si)
        (reg:DI 0 ax [598])) "E2OUT.f":327 85 {*movdi_internal}
     (nil))
(insn 1194 1193 1195 150 (set (reg:DI 5 di)
        (symbol_ref:DI ("hful.4073") [flags 0x202]  <var_decl 0x7f830f917630 hful>)) "E2OUT.f":327 85 {*movdi_internal}
     (nil))
(insn 1195 1194 1196 150 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":327 88 {*movqi_internal}
     (nil))
(call_insn 1196 1195 1423 150 (call (mem:QI (symbol_ref:DI ("interp3_") [flags 0x41]  <function_decl 0x7f830f8f8e00 interp3>) [0 interp3 S1 A8])
        (const_int 0 [0])) "E2OUT.f":327 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(jump_insn 1423 1196 1424 150 (set (pc)
        (label_ref 1254)) "E2OUT.f":327 683 {jump}
     (nil)
 -> 1254)
;;  succ:       157 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1424 1423 1199)
;; basic block 151, loop depth 0, maybe hot
;;  prev block 150, next block 152, flags: (RTL, MODIFIED)
;;  pred:       143
;;              144
;;              145
;;              146
;;              147
;;              148
;;              149
;; bb 151 artificial_defs: { }
;; bb 151 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1199 1424 1200 151 66 (nil) [7 uses])
(note 1200 1199 1201 151 [bb 151] NOTE_INSN_BASIC_BLOCK)
(insn 1201 1200 1251 151 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":329 86 {*movsi_internal}
     (nil))
;;  succ:       152 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 152, loop depth 0, maybe hot
;;  prev block 151, next block 153, flags: (RTL, MODIFIED)
;;  pred:       151 (FALLTHRU)
;;              156 [always] 
;; bb 152 artificial_defs: { }
;; bb 152 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 410 599
(code_label 1251 1201 1202 152 69 (nil) [1 uses])
(note 1202 1251 1203 152 [bb 152] NOTE_INSN_BASIC_BLOCK)
(insn 1203 1202 1204 152 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "E2OUT.f":329 11 {*cmpsi_1}
     (nil))
(insn 1204 1203 1205 152 (set (reg:QI 0 ax [599])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":329 678 {*setcc_qi}
     (nil))
(insn 1205 1204 1206 152 (set (reg:SI 0 ax [orig:410 _461 ] [410])
        (zero_extend:SI (reg:QI 0 ax [599]))) "E2OUT.f":329 140 {*zero_extendqisi2}
     (nil))
(insn 1206 1205 1207 152 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:410 _461 ] [410])
            (const_int 0 [0]))) "E2OUT.f":329 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1207 1206 1208 152 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1478)
            (pc))) "E2OUT.f":329 682 {*jcc}
     (nil)
 -> 1478)
;;  succ:       181
;;              153 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 153, loop depth 0, maybe hot
;;  prev block 152, next block 154, flags: (RTL, MODIFIED)
;;  pred:       152 (FALLTHRU)
;; bb 153 artificial_defs: { }
;; bb 153 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1208 1207 1209 153 [bb 153] NOTE_INSN_BASIC_BLOCK)
(insn 1209 1208 1245 153 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":330 86 {*movsi_internal}
     (nil))
;;  succ:       154 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 154, loop depth 0, maybe hot
;;  prev block 153, next block 155, flags: (RTL, MODIFIED)
;;  pred:       153 (FALLTHRU)
;;              155 [always] 
;; bb 154 artificial_defs: { }
;; bb 154 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 411 600
(code_label 1245 1209 1210 154 68 (nil) [1 uses])
(note 1210 1245 1211 154 [bb 154] NOTE_INSN_BASIC_BLOCK)
(insn 1211 1210 1212 154 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
            (const_int 237 [0xed]))) "E2OUT.f":330 11 {*cmpsi_1}
     (nil))
(insn 1212 1211 1213 154 (set (reg:QI 0 ax [600])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2OUT.f":330 678 {*setcc_qi}
     (nil))
(insn 1213 1212 1214 154 (set (reg:SI 0 ax [orig:411 _463 ] [411])
        (zero_extend:SI (reg:QI 0 ax [600]))) "E2OUT.f":330 140 {*zero_extendqisi2}
     (nil))
(insn 1214 1213 1215 154 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:411 _463 ] [411])
            (const_int 0 [0]))) "E2OUT.f":330 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1215 1214 1216 154 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1481)
            (pc))) "E2OUT.f":330 682 {*jcc}
     (nil)
 -> 1481)
;;  succ:       182
;;              155 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 155, loop depth 0, maybe hot
;;  prev block 154, next block 182, flags: (RTL, MODIFIED)
;;  pred:       154 (FALLTHRU)
;; bb 155 artificial_defs: { }
;; bb 155 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  def 	 17 [flags] 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 601 602 603 604 605 606 607 608 609
(note 1216 1215 1217 155 [bb 155] NOTE_INSN_BASIC_BLOCK)
(insn 1217 1216 1218 155 (set (reg:SI 0 ax [601])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":331 86 {*movsi_internal}
     (nil))
(insn 1218 1217 1219 155 (set (reg:DI 0 ax [orig:334 _248 ] [334])
        (sign_extend:DI (reg:SI 0 ax [601]))) "E2OUT.f":331 149 {*extendsidi2_rex64}
     (nil))
(insn 1219 1218 1220 155 (parallel [
            (set (reg:DI 1 dx [orig:335 _249 ] [335])
                (mult:DI (reg:DI 0 ax [orig:334 _248 ] [334])
                    (const_int 237 [0xed])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":331 349 {*muldi3_1}
     (nil))
(insn 1220 1219 1221 155 (set (reg:SI 0 ax [602])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":331 86 {*movsi_internal}
     (nil))
(insn 1221 1220 1222 155 (set (reg:DI 0 ax [orig:336 _250 ] [336])
        (sign_extend:DI (reg:SI 0 ax [602]))) "E2OUT.f":331 149 {*extendsidi2_rex64}
     (nil))
(insn 1222 1221 1223 155 (parallel [
            (set (reg:DI 0 ax [orig:337 _251 ] [337])
                (plus:DI (reg:DI 0 ax [orig:336 _250 ] [336])
                    (reg:DI 1 dx [orig:335 _249 ] [335])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":331 222 {*adddi_1}
     (nil))
(insn 1223 1222 1224 155 (parallel [
            (set (reg:DI 2 cx [orig:338 _252 ] [338])
                (plus:DI (reg:DI 0 ax [orig:337 _251 ] [337])
                    (const_int -238 [0xffffffffffffff12])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":331 222 {*adddi_1}
     (nil))
(insn 1224 1223 1225 155 (set (reg:SI 0 ax [603])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":331 86 {*movsi_internal}
     (nil))
(insn 1225 1224 1226 155 (set (reg:DI 0 ax [orig:339 _253 ] [339])
        (sign_extend:DI (reg:SI 0 ax [603]))) "E2OUT.f":331 149 {*extendsidi2_rex64}
     (nil))
(insn 1226 1225 1227 155 (parallel [
            (set (reg:DI 0 ax [orig:340 _254 ] [340])
                (mult:DI (reg:DI 0 ax [orig:339 _253 ] [339])
                    (reg:DI 3 bx [orig:381 stride.2_350 ] [381])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":331 349 {*muldi3_1}
     (nil))
(insn 1227 1226 1228 155 (parallel [
            (set (reg:DI 1 dx [orig:341 _255 ] [341])
                (plus:DI (reg:DI 42 r13 [orig:387 offset.3_358 ] [387])
                    (reg:DI 0 ax [orig:340 _254 ] [340])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":331 222 {*adddi_1}
     (nil))
(insn 1228 1227 1229 155 (set (reg:SI 0 ax [604])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":331 86 {*movsi_internal}
     (nil))
(insn 1229 1228 1230 155 (set (reg:DI 0 ax [orig:342 _256 ] [342])
        (sign_extend:DI (reg:SI 0 ax [604]))) "E2OUT.f":331 149 {*extendsidi2_rex64}
     (nil))
(insn 1230 1229 1231 155 (parallel [
            (set (reg:DI 1 dx [orig:343 _257 ] [343])
                (plus:DI (reg:DI 1 dx [orig:341 _255 ] [341])
                    (reg:DI 0 ax [orig:342 _256 ] [342])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":331 222 {*adddi_1}
     (nil))
(insn 1231 1230 1232 155 (set (reg/f:DI 0 ax [605])
        (symbol_ref:DI ("hful.4073") [flags 0x202]  <var_decl 0x7f830f917630 hful>)) "E2OUT.f":331 85 {*movdi_internal}
     (nil))
(insn 1232 1231 1233 155 (set (reg:SF 21 xmm0 [orig:344 _258 ] [344])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:338 _252 ] [338])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [605])) [6 hful S4 A32])) "E2OUT.f":331 131 {*movsf_internal}
     (nil))
(insn 1233 1232 1234 155 (set (reg/f:DI 0 ax [606])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 grid1+0 S8 A64])) "E2OUT.f":331 85 {*movdi_internal}
     (nil))
(insn 1234 1233 1235 155 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:343 _257 ] [343])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [606])) [6 *grid1_379(D) S4 A32])
        (reg:SF 21 xmm0 [orig:344 _258 ] [344])) "E2OUT.f":331 131 {*movsf_internal}
     (nil))
(insn 1235 1234 1236 155 (set (reg:SI 0 ax [607])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])) "E2OUT.f":332 86 {*movsi_internal}
     (nil))
(insn 1236 1235 1237 155 (set (reg:DI 0 ax [orig:345 _259 ] [345])
        (sign_extend:DI (reg:SI 0 ax [607]))) "E2OUT.f":332 149 {*extendsidi2_rex64}
     (nil))
(insn 1237 1236 1238 155 (parallel [
            (set (reg:DI 1 dx [orig:346 _260 ] [346])
                (mult:DI (reg:DI 0 ax [orig:345 _259 ] [345])
                    (const_int 4000 [0xfa0])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":332 349 {*muldi3_1}
     (nil))
(insn 1238 1237 1239 155 (set (reg:SI 0 ax [608])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "E2OUT.f":332 86 {*movsi_internal}
     (nil))
(insn 1239 1238 1240 155 (set (reg:DI 0 ax [orig:347 _261 ] [347])
        (sign_extend:DI (reg:SI 0 ax [608]))) "E2OUT.f":332 149 {*extendsidi2_rex64}
     (nil))
(insn 1240 1239 1241 155 (parallel [
            (set (reg:DI 0 ax [orig:348 _262 ] [348])
                (plus:DI (reg:DI 0 ax [orig:347 _261 ] [347])
                    (reg:DI 1 dx [orig:346 _260 ] [346])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":332 222 {*adddi_1}
     (nil))
(insn 1241 1240 1242 155 (parallel [
            (set (reg:DI 1 dx [orig:349 _263 ] [349])
                (plus:DI (reg:DI 0 ax [orig:348 _262 ] [348])
                    (const_int -4001 [0xfffffffffffff05f])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":332 222 {*adddi_1}
     (nil))
(insn 1242 1241 1243 155 (set (reg/f:DI 0 ax [609])
        (symbol_ref:DI ("bitmap_") [flags 0x202]  <var_decl 0x7f831696bab0 bitmap>)) "E2OUT.f":332 85 {*movdi_internal}
     (nil))
(insn 1243 1242 1244 155 (set (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:349 _263 ] [349])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [609])) [1 bitmap.ibmap S4 A32])
        (const_int 1 [0x1])) "E2OUT.f":332 86 {*movsi_internal}
     (nil))
(insn 1244 1243 1425 155 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":330 221 {*addsi_1}
     (nil))
(jump_insn 1425 1244 1426 155 (set (pc)
        (label_ref 1245)) "E2OUT.f":330 683 {jump}
     (nil)
 -> 1245)
;;  succ:       154 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

(barrier 1426 1425 1481)
;; basic block 182, loop depth 0, maybe hot
;;  prev block 155, next block 156, flags: (RTL, MODIFIED)
;;  pred:       154
;; bb 182 artificial_defs: { }
;; bb 182 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1481 1426 1480 182 87 (nil) [1 uses])
(note 1480 1481 1482 182 [bb 182] NOTE_INSN_BASIC_BLOCK)
(insn 1482 1480 1248 182 (const_int 0 [0]) "E2OUT.f":332 718 {nop}
     (nil))
;;  succ:       156 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

;; basic block 156, loop depth 0, maybe hot
;;  prev block 182, next block 172, flags: (RTL, MODIFIED)
;;  pred:       182 [always]  (FALLTHRU)
;; bb 156 artificial_defs: { }
;; bb 156 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1248 1482 1249 156 67 (nil) [0 uses])
(note 1249 1248 1250 156 [bb 156] NOTE_INSN_BASIC_BLOCK)
(insn 1250 1249 1427 156 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":329 221 {*addsi_1}
     (nil))
(jump_insn 1427 1250 1428 156 (set (pc)
        (label_ref 1251)) "E2OUT.f":329 683 {jump}
     (nil)
 -> 1251)
;;  succ:       152 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 381 387

(barrier 1428 1427 1447)
;; basic block 172, loop depth 0, maybe hot
;;  prev block 156, next block 175, flags: (RTL, MODIFIED)
;;  pred:       84
;;              85 [always] 
;; bb 172 artificial_defs: { }
;; bb 172 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1447 1428 1446 172 77 (nil) [2 uses])
(note 1446 1447 1448 172 [bb 172] NOTE_INSN_BASIC_BLOCK)
(insn 1448 1446 1455 172 (const_int 0 [0]) "E2OUT.f":249 718 {nop}
     (nil))
(jump_insn 1455 1448 1456 172 (set (pc)
        (label_ref 1254)) 683 {jump}
     (nil)
 -> 1254)
;;  succ:       157 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1456 1455 1458)
;; basic block 175, loop depth 0, maybe hot
;;  prev block 172, next block 181, flags: (RTL, MODIFIED)
;;  pred:       101
;;              106
;; bb 175 artificial_defs: { }
;; bb 175 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1458 1456 1457 175 80 (nil) [2 uses])
(note 1457 1458 1459 175 [bb 175] NOTE_INSN_BASIC_BLOCK)
(insn 1459 1457 1475 175 (const_int 0 [0]) "E2OUT.f":272 718 {nop}
     (nil))
(jump_insn 1475 1459 1476 175 (set (pc)
        (label_ref 1254)) 683 {jump}
     (nil)
 -> 1254)
;;  succ:       157 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1476 1475 1478)
;; basic block 181, loop depth 0, maybe hot
;;  prev block 175, next block 157, flags: (RTL, MODIFIED)
;;  pred:       152
;; bb 181 artificial_defs: { }
;; bb 181 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1478 1476 1477 181 86 (nil) [1 uses])
(note 1477 1478 1479 181 [bb 181] NOTE_INSN_BASIC_BLOCK)
(insn 1479 1477 1254 181 (const_int 0 [0]) "E2OUT.f":330 718 {nop}
     (nil))
;;  succ:       157 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 157, loop depth 0, maybe hot
;;  prev block 181, next block 169, flags: (RTL, MODIFIED)
;;  pred:       172 [always] 
;;              150 [always] 
;;              139 [always] 
;;              181 [always]  (FALLTHRU)
;;              175 [always] 
;; bb 157 artificial_defs: { }
;; bb 157 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 610 611 612 615 616 617 620 621 622
(code_label 1254 1479 1255 157 50 (nil) [4 uses])
(note 1255 1254 1256 157 [bb 157] NOTE_INSN_BASIC_BLOCK)
(insn 1256 1255 1258 157 (set (reg/f:DI 0 ax [610])
        (symbol_ref:DI ("hful.4073") [flags 0x202]  <var_decl 0x7f830f917630 hful>)) "E2OUT.f":341 85 {*movdi_internal}
     (nil))
(insn 1258 1256 1260 157 (set (reg:DI 1 dx [612])
        (const_int 236052 [0x39a14])) "E2OUT.f":341 85 {*movdi_internal}
     (nil))
(insn 1260 1258 1261 157 (set (reg:SI 4 si)
        (const_int 0 [0])) "E2OUT.f":341 86 {*movsi_internal}
     (nil))
(insn 1261 1260 1262 157 (set (reg:DI 5 di)
        (reg:DI 0 ax [611])) "E2OUT.f":341 85 {*movdi_internal}
     (nil))
(call_insn 1262 1261 1265 157 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7f830f7a5900 __builtin_memset>) [0 __builtin_memset S1 A8])
            (const_int 0 [0]))) "E2OUT.f":341 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 1265 1262 1267 157 (set (reg/f:DI 0 ax [615])
        (symbol_ref:DI ("uful.4078") [flags 0x202]  <var_decl 0x7f830f917870 uful>)) "E2OUT.f":342 85 {*movdi_internal}
     (nil))
(insn 1267 1265 1269 157 (set (reg:DI 1 dx [617])
        (const_int 236052 [0x39a14])) "E2OUT.f":342 85 {*movdi_internal}
     (nil))
(insn 1269 1267 1270 157 (set (reg:SI 4 si)
        (const_int 0 [0])) "E2OUT.f":342 86 {*movsi_internal}
     (nil))
(insn 1270 1269 1271 157 (set (reg:DI 5 di)
        (reg:DI 0 ax [616])) "E2OUT.f":342 85 {*movdi_internal}
     (nil))
(call_insn 1271 1270 1274 157 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7f830f7a5900 __builtin_memset>) [0 __builtin_memset S1 A8])
            (const_int 0 [0]))) "E2OUT.f":342 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 1274 1271 1276 157 (set (reg/f:DI 0 ax [620])
        (symbol_ref:DI ("vful.4080") [flags 0x202]  <var_decl 0x7f830f917900 vful>)) "E2OUT.f":343 85 {*movdi_internal}
     (nil))
(insn 1276 1274 1278 157 (set (reg:DI 1 dx [622])
        (const_int 236052 [0x39a14])) "E2OUT.f":343 85 {*movdi_internal}
     (nil))
(insn 1278 1276 1279 157 (set (reg:SI 4 si)
        (const_int 0 [0])) "E2OUT.f":343 86 {*movsi_internal}
     (nil))
(insn 1279 1278 1280 157 (set (reg:DI 5 di)
        (reg:DI 0 ax [621])) "E2OUT.f":343 85 {*movdi_internal}
     (nil))
(call_insn 1280 1279 1435 157 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7f830f7a5900 __builtin_memset>) [0 __builtin_memset S1 A8])
            (const_int 0 [0]))) "E2OUT.f":343 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 1435 1280 1436 157 (set (pc)
        (label_ref 1283)) 683 {jump}
     (nil)
 -> 1283)
;;  succ:       158
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1436 1435 1438)
;; basic block 169, loop depth 0, maybe hot
;;  prev block 157, next block 158, flags: (RTL, MODIFIED)
;;  pred:       31
;;              38 [always] 
;; bb 169 artificial_defs: { }
;; bb 169 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1438 1436 1437 169 74 (nil) [2 uses])
(note 1437 1438 1439 169 [bb 169] NOTE_INSN_BASIC_BLOCK)
(insn 1439 1437 1283 169 (const_int 0 [0]) "E2OUT.f":161 718 {nop}
     (nil))
;;  succ:       158 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 158, loop depth 0, maybe hot
;;  prev block 169, next block 159, flags: (RTL, MODIFIED)
;;  pred:       169 [always]  (FALLTHRU)
;;              157
;; bb 158 artificial_defs: { }
;; bb 158 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 350 625
(code_label 1283 1439 1284 158 22 (nil) [1 uses])
(note 1284 1283 1285 158 [bb 158] NOTE_INSN_BASIC_BLOCK)
(insn 1285 1284 1286 158 (set (reg/f:DI 0 ax [625])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":349 85 {*movdi_internal}
     (nil))
(insn 1286 1285 1287 158 (set (reg:SI 0 ax [orig:350 _264 ] [350])
        (mem:SI (reg/f:DI 0 ax [625]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":349 86 {*movsi_internal}
     (nil))
(insn 1287 1286 1288 158 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:350 _264 ] [350])
            (const_int 0 [0]))) "E2OUT.f":349 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1288 1287 1289 158 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1323)
            (pc))) "E2OUT.f":349 682 {*jcc}
     (nil)
 -> 1323)
;;  succ:       159 (FALLTHRU)
;;              162
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 159, loop depth 0, maybe hot
;;  prev block 158, next block 160, flags: (RTL, MODIFIED)
;;  pred:       158 (FALLTHRU)
;; bb 159 artificial_defs: { }
;; bb 159 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 351 352 353 354 626 627
(note 1289 1288 1290 159 [bb 159] NOTE_INSN_BASIC_BLOCK)
(insn 1290 1289 1291 159 (set (reg/f:DI 0 ax [626])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":350 85 {*movdi_internal}
     (nil))
(insn 1291 1290 1292 159 (set (reg:SI 0 ax [orig:351 _265 ] [351])
        (mem:SI (reg/f:DI 0 ax [626]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":350 86 {*movsi_internal}
     (nil))
(insn 1292 1291 1293 159 (set (reg:DI 0 ax [orig:352 _266 ] [352])
        (sign_extend:DI (reg:SI 0 ax [orig:351 _265 ] [351]))) "E2OUT.f":350 149 {*extendsidi2_rex64}
     (nil))
(insn 1293 1292 1294 159 (parallel [
            (set (reg:DI 0 ax [orig:353 _267 ] [353])
                (plus:DI (reg:DI 0 ax [orig:352 _266 ] [352])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":350 222 {*adddi_1}
     (nil))
(insn 1294 1293 1295 159 (parallel [
            (set (reg:DI 0 ax [627])
                (plus:DI (reg:DI 0 ax [orig:353 _267 ] [353])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":350 222 {*adddi_1}
     (nil))
(insn 1295 1294 1296 159 (set (reg:SI 0 ax [orig:354 _268 ] [354])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [627])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.iget S4 A32])) "E2OUT.f":350 86 {*movsi_internal}
     (nil))
(insn 1296 1295 1297 159 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:354 _268 ] [354])
            (const_int 0 [0]))) "E2OUT.f":350 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1297 1296 1298 159 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1323)
            (pc))) "E2OUT.f":350 682 {*jcc}
     (nil)
 -> 1323)
;;  succ:       160 (FALLTHRU)
;;              162
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 160, loop depth 0, maybe hot
;;  prev block 159, next block 161, flags: (RTL, MODIFIED)
;;  pred:       159 (FALLTHRU)
;; bb 160 artificial_defs: { }
;; bb 160 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 355 356 357 358 359 360 361 362 628 629 630
(note 1298 1297 1299 160 [bb 160] NOTE_INSN_BASIC_BLOCK)
(insn 1299 1298 1300 160 (set (reg/f:DI 0 ax [628])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 itag1+0 S8 A64])) "E2OUT.f":351 85 {*movdi_internal}
     (nil))
(insn 1300 1299 1301 160 (set (reg:SI 0 ax [orig:355 _269 ] [355])
        (mem:SI (reg/f:DI 0 ax [628]) [1 *itag1_393(D)+0 S4 A32])) "E2OUT.f":351 86 {*movsi_internal}
     (nil))
(insn 1301 1300 1302 160 (set (reg:DI 0 ax [orig:356 _270 ] [356])
        (sign_extend:DI (reg:SI 0 ax [orig:355 _269 ] [355]))) "E2OUT.f":351 149 {*extendsidi2_rex64}
     (nil))
(insn 1302 1301 1303 160 (parallel [
            (set (reg:DI 0 ax [orig:357 _271 ] [357])
                (plus:DI (reg:DI 0 ax [orig:356 _270 ] [356])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":351 222 {*adddi_1}
     (nil))
(insn 1303 1302 1304 160 (parallel [
            (set (reg:DI 0 ax [629])
                (plus:DI (reg:DI 0 ax [orig:357 _271 ] [357])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":351 222 {*adddi_1}
     (nil))
(insn 1304 1303 1305 160 (set (reg:SI 0 ax [orig:358 _272 ] [358])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [629])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.iget S4 A32])) "E2OUT.f":351 86 {*movsi_internal}
     (nil))
(insn 1305 1304 1306 160 (set (reg:DI 0 ax [orig:359 _273 ] [359])
        (sign_extend:DI (reg:SI 0 ax [orig:358 _272 ] [358]))) "E2OUT.f":351 149 {*extendsidi2_rex64}
     (nil))
(insn 1306 1305 1307 160 (parallel [
            (set (reg:DI 0 ax [orig:360 _274 ] [360])
                (plus:DI (reg:DI 0 ax [orig:359 _273 ] [359])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":351 222 {*adddi_1}
     (nil))
(insn 1307 1306 1308 160 (parallel [
            (set (reg:DI 0 ax [630])
                (plus:DI (reg:DI 0 ax [orig:360 _274 ] [360])
                    (const_int 1204 [0x4b4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":351 222 {*adddi_1}
     (nil))
(insn 1308 1307 1309 160 (set (reg:SI 0 ax [orig:361 _275 ] [361])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [630])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.ismout S4 A32])) "E2OUT.f":351 86 {*movsi_internal}
     (nil))
(insn 1309 1308 1310 160 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])
        (reg:SI 0 ax [orig:361 _275 ] [361])) "E2OUT.f":351 86 {*movsi_internal}
     (nil))
(insn 1310 1309 1311 160 (set (reg:SI 0 ax [orig:362 ismth.29_276 ] [362])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])) "E2OUT.f":352 86 {*movsi_internal}
     (nil))
(insn 1311 1310 1312 160 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:362 ismth.29_276 ] [362])
            (const_int 0 [0]))) "E2OUT.f":352 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1312 1311 1313 160 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1323)
            (pc))) "E2OUT.f":352 682 {*jcc}
     (nil)
 -> 1323)
;;  succ:       161 (FALLTHRU)
;;              162
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 161, loop depth 0, maybe hot
;;  prev block 160, next block 162, flags: (RTL, MODIFIED)
;;  pred:       160 (FALLTHRU)
;; bb 161 artificial_defs: { }
;; bb 161 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 631 632 633
(note 1313 1312 1314 161 [bb 161] NOTE_INSN_BASIC_BLOCK)
(insn 1314 1313 1315 161 (parallel [
            (set (reg:DI 2 cx [631])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":352 222 {*adddi_1}
     (nil))
(insn 1315 1314 1316 161 (set (reg:DI 1 dx [632])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 grid1+0 S8 A64])) "E2OUT.f":352 85 {*movdi_internal}
     (nil))
(insn 1316 1315 1319 161 (set (reg:DI 0 ax [633])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":352 85 {*movdi_internal}
     (nil))
(insn 1319 1316 1320 161 (set (reg:DI 4 si)
        (reg:DI 0 ax [633])) "E2OUT.f":352 85 {*movdi_internal}
     (nil))
(insn 1320 1319 1321 161 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":352 85 {*movdi_internal}
     (nil))
(insn 1321 1320 1322 161 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":352 88 {*movqi_internal}
     (nil))
(call_insn 1322 1321 1323 161 (call (mem:QI (symbol_ref:DI ("filter_") [flags 0x41]  <function_decl 0x7f830f8f8c00 filter>) [0 filter S1 A8])
        (const_int 0 [0])) "E2OUT.f":352 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
;;  succ:       162 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 162, loop depth 0, maybe hot
;;  prev block 161, next block 163, flags: (RTL, MODIFIED)
;;  pred:       158
;;              161 (FALLTHRU)
;;              159
;;              160
;; bb 162 artificial_defs: { }
;; bb 162 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 363 634
(code_label 1323 1322 1324 162 70 (nil) [3 uses])
(note 1324 1323 1325 162 [bb 162] NOTE_INSN_BASIC_BLOCK)
(insn 1325 1324 1326 162 (set (reg/f:DI 0 ax [634])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":356 85 {*movdi_internal}
     (nil))
(insn 1326 1325 1327 162 (set (reg:SI 0 ax [orig:363 _277 ] [363])
        (mem:SI (reg/f:DI 0 ax [634]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":356 86 {*movsi_internal}
     (nil))
(insn 1327 1326 1328 162 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:363 _277 ] [363])
            (const_int 0 [0]))) "E2OUT.f":356 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1328 1327 1329 162 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1363)
            (pc))) "E2OUT.f":356 682 {*jcc}
     (nil)
 -> 1363)
;;  succ:       163 (FALLTHRU)
;;              166
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 163, loop depth 0, maybe hot
;;  prev block 162, next block 164, flags: (RTL, MODIFIED)
;;  pred:       162 (FALLTHRU)
;; bb 163 artificial_defs: { }
;; bb 163 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 364 365 366 367 635 636
(note 1329 1328 1330 163 [bb 163] NOTE_INSN_BASIC_BLOCK)
(insn 1330 1329 1331 163 (set (reg/f:DI 0 ax [635])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":357 85 {*movdi_internal}
     (nil))
(insn 1331 1330 1332 163 (set (reg:SI 0 ax [orig:364 _278 ] [364])
        (mem:SI (reg/f:DI 0 ax [635]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":357 86 {*movsi_internal}
     (nil))
(insn 1332 1331 1333 163 (set (reg:DI 0 ax [orig:365 _279 ] [365])
        (sign_extend:DI (reg:SI 0 ax [orig:364 _278 ] [364]))) "E2OUT.f":357 149 {*extendsidi2_rex64}
     (nil))
(insn 1333 1332 1334 163 (parallel [
            (set (reg:DI 0 ax [orig:366 _280 ] [366])
                (plus:DI (reg:DI 0 ax [orig:365 _279 ] [365])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":357 222 {*adddi_1}
     (nil))
(insn 1334 1333 1335 163 (parallel [
            (set (reg:DI 0 ax [636])
                (plus:DI (reg:DI 0 ax [orig:366 _280 ] [366])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":357 222 {*adddi_1}
     (nil))
(insn 1335 1334 1336 163 (set (reg:SI 0 ax [orig:367 _281 ] [367])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [636])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.iget S4 A32])) "E2OUT.f":357 86 {*movsi_internal}
     (nil))
(insn 1336 1335 1337 163 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:367 _281 ] [367])
            (const_int 0 [0]))) "E2OUT.f":357 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1337 1336 1338 163 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1363)
            (pc))) "E2OUT.f":357 682 {*jcc}
     (nil)
 -> 1363)
;;  succ:       164 (FALLTHRU)
;;              166
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 164, loop depth 0, maybe hot
;;  prev block 163, next block 165, flags: (RTL, MODIFIED)
;;  pred:       163 (FALLTHRU)
;; bb 164 artificial_defs: { }
;; bb 164 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 368 369 370 371 372 373 374 375 637 638 639
(note 1338 1337 1339 164 [bb 164] NOTE_INSN_BASIC_BLOCK)
(insn 1339 1338 1340 164 (set (reg/f:DI 0 ax [637])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 itag2+0 S8 A64])) "E2OUT.f":358 85 {*movdi_internal}
     (nil))
(insn 1340 1339 1341 164 (set (reg:SI 0 ax [orig:368 _282 ] [368])
        (mem:SI (reg/f:DI 0 ax [637]) [1 *itag2_397(D)+0 S4 A32])) "E2OUT.f":358 86 {*movsi_internal}
     (nil))
(insn 1341 1340 1342 164 (set (reg:DI 0 ax [orig:369 _283 ] [369])
        (sign_extend:DI (reg:SI 0 ax [orig:368 _282 ] [368]))) "E2OUT.f":358 149 {*extendsidi2_rex64}
     (nil))
(insn 1342 1341 1343 164 (parallel [
            (set (reg:DI 0 ax [orig:370 _284 ] [370])
                (plus:DI (reg:DI 0 ax [orig:369 _283 ] [369])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":358 222 {*adddi_1}
     (nil))
(insn 1343 1342 1344 164 (parallel [
            (set (reg:DI 0 ax [638])
                (plus:DI (reg:DI 0 ax [orig:370 _284 ] [370])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":358 222 {*adddi_1}
     (nil))
(insn 1344 1343 1345 164 (set (reg:SI 0 ax [orig:371 _285 ] [371])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [638])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.iget S4 A32])) "E2OUT.f":358 86 {*movsi_internal}
     (nil))
(insn 1345 1344 1346 164 (set (reg:DI 0 ax [orig:372 _286 ] [372])
        (sign_extend:DI (reg:SI 0 ax [orig:371 _285 ] [371]))) "E2OUT.f":358 149 {*extendsidi2_rex64}
     (nil))
(insn 1346 1345 1347 164 (parallel [
            (set (reg:DI 0 ax [orig:373 _287 ] [373])
                (plus:DI (reg:DI 0 ax [orig:372 _286 ] [372])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":358 222 {*adddi_1}
     (nil))
(insn 1347 1346 1348 164 (parallel [
            (set (reg:DI 0 ax [639])
                (plus:DI (reg:DI 0 ax [orig:373 _287 ] [373])
                    (const_int 1204 [0x4b4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":358 222 {*adddi_1}
     (nil))
(insn 1348 1347 1349 164 (set (reg:SI 0 ax [orig:374 _288 ] [374])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [639])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("rqstfld_") [flags 0x2]  <var_decl 0x7f830f90f480 rqstfld>)) [1 rqstfld.ismout S4 A32])) "E2OUT.f":358 86 {*movsi_internal}
     (nil))
(insn 1349 1348 1350 164 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])
        (reg:SI 0 ax [orig:374 _288 ] [374])) "E2OUT.f":358 86 {*movsi_internal}
     (nil))
(insn 1350 1349 1351 164 (set (reg:SI 0 ax [orig:375 ismth.30_289 ] [375])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 ismth+0 S4 A32])) "E2OUT.f":359 86 {*movsi_internal}
     (nil))
(insn 1351 1350 1352 164 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:375 ismth.30_289 ] [375])
            (const_int 0 [0]))) "E2OUT.f":359 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1352 1351 1353 164 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1363)
            (pc))) "E2OUT.f":359 682 {*jcc}
     (nil)
 -> 1363)
;;  succ:       165 (FALLTHRU)
;;              166
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 165, loop depth 0, maybe hot
;;  prev block 164, next block 166, flags: (RTL, MODIFIED)
;;  pred:       164 (FALLTHRU)
;; bb 165 artificial_defs: { }
;; bb 165 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 640 641 642
(note 1353 1352 1354 165 [bb 165] NOTE_INSN_BASIC_BLOCK)
(insn 1354 1353 1355 165 (parallel [
            (set (reg:DI 2 cx [640])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "E2OUT.f":359 222 {*adddi_1}
     (nil))
(insn 1355 1354 1356 165 (set (reg:DI 1 dx [641])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [4 grid2+0 S8 A64])) "E2OUT.f":359 85 {*movdi_internal}
     (nil))
(insn 1356 1355 1359 165 (set (reg:DI 0 ax [642])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [3 jmout+0 S8 A64])) "E2OUT.f":359 85 {*movdi_internal}
     (nil))
(insn 1359 1356 1360 165 (set (reg:DI 4 si)
        (reg:DI 0 ax [642])) "E2OUT.f":359 85 {*movdi_internal}
     (nil))
(insn 1360 1359 1361 165 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 imout+0 S8 A64])) "E2OUT.f":359 85 {*movdi_internal}
     (nil))
(insn 1361 1360 1362 165 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":359 88 {*movqi_internal}
     (nil))
(call_insn 1362 1361 1363 165 (call (mem:QI (symbol_ref:DI ("filter_") [flags 0x41]  <function_decl 0x7f830f8f8c00 filter>) [0 filter S1 A8])
        (const_int 0 [0])) "E2OUT.f":359 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
;;  succ:       166 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 166, loop depth 0, maybe hot
;;  prev block 165, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;;              165 (FALLTHRU)
;;              162
;;              164
;;              163
;; bb 166 artificial_defs: { }
;; bb 166 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 643 644
(code_label 1363 1362 1364 166 2 (nil) [4 uses])
(note 1364 1363 1365 166 [bb 166] NOTE_INSN_BASIC_BLOCK)
(insn 1365 1364 1366 166 (set (reg:DI 0 ax [643])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 egrid1+0 S8 A64])) "E2OUT.f":385 85 {*movdi_internal}
     (nil))
(insn 1366 1365 1367 166 (set (reg:DI 5 di)
        (reg:DI 0 ax [643])) "E2OUT.f":385 85 {*movdi_internal}
     (nil))
(insn 1367 1366 1368 166 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":385 88 {*movqi_internal}
     (nil))
(call_insn 1368 1367 1369 166 (call (mem:QI (symbol_ref:DI ("dist_") [flags 0x41]  <function_decl 0x7f830f927400 dist>) [0 dist S1 A8])
        (const_int 0 [0])) "E2OUT.f":385 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 1369 1368 1370 166 (set (reg:DI 0 ax [644])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [4 egrid2+0 S8 A64])) "E2OUT.f":386 85 {*movdi_internal}
     (nil))
(insn 1370 1369 1371 166 (set (reg:DI 5 di)
        (reg:DI 0 ax [644])) "E2OUT.f":386 85 {*movdi_internal}
     (nil))
(insn 1371 1370 1372 166 (set (reg:QI 0 ax)
        (const_int 0 [0])) "E2OUT.f":386 88 {*movqi_internal}
     (nil))
(call_insn 1372 1371 1378 166 (call (mem:QI (symbol_ref:DI ("dist_") [flags 0x41]  <function_decl 0x7f830f927400 dist>) [0 dist S1 A8])
        (const_int 0 [0])) "E2OUT.f":386 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 1378 1372 1483 166 (const_int 0 [0]) "E2OUT.f":391 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 1483 1378 0 NOTE_INSN_DELETED)
