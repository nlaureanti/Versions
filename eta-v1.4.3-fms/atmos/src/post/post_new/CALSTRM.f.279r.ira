
;; Function calstrm (calstrm_, funcdef_no=0, decl_uid=3770, cgraph_uid=0, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 11 n_edges 12 count 13 (  1.2)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 10 7 9 8
;;
;; Loop 1
;;  header 3, latch 7
;;  depth 1, outer 0
;;  nodes: 3 7 10 5 4 6
;;
;; Loop 2
;;  header 5, latch 6
;;  depth 2, outer 1
;;  nodes: 5 6
;; 2 succs { 3 }
;; 3 succs { 9 4 }
;; 4 succs { 5 }
;; 5 succs { 10 6 }
;; 6 succs { 5 }
;; 10 succs { 7 }
;; 7 succs { 3 }
;; 9 succs { 8 }
;; 8 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a25 (r111,l0) best SSE_REGS, allocno SSE_REGS
    r110: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a24 (r110,l0) best SSE_REGS, allocno SSE_REGS
    r109: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a27 (r109,l0) best SSE_REGS, allocno SSE_REGS
    r108: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a26 (r108,l0) best SSE_REGS, allocno SSE_REGS
    r107: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a30 (r107,l0) best SSE_REGS, allocno SSE_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a3 (r101,l0) best SSE_REGS, allocno SSE_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a4 (r95,l0) best SSE_REGS, allocno SSE_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a28 (r89,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r88: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a29 (r88,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r87: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a31 (r87,l0) best SSE_REGS, allocno SSE_REGS

  a0(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a3(r101,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a4(r95,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a5(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a6(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a7(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a8(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a9(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a10(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a13(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a14(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a15(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a16(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a17(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a18(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a19(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a20(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a21(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a22(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a23(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r110,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a25(r111,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a26(r108,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a27(r109,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a28(r89,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:19000 FP_TOP_SSE_REGS:19000 FP_SECOND_SSE_REGS:19000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 ALL_REGS:19000 MEM:6000
  a29(r88,l0) costs: AREG:14000 DREG:14000 CREG:14000 BREG:14000 SIREG:14000 DIREG:14000 AD_REGS:14000 CLOBBERED_REGS:14000 Q_REGS:14000 NON_Q_REGS:14000 TLS_GOTBASE_REGS:14000 GENERAL_REGS:14000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:19000 FP_TOP_SSE_REGS:19000 FP_SECOND_SSE_REGS:19000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 ALL_REGS:19000 MEM:7000
  a30(r107,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a31(r87,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a32(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000

   Insn 73(l0): point = 0
   Insn 80(l0): point = 3
   Insn 28(l0): point = 6
   Insn 27(l0): point = 8
   Insn 26(l0): point = 10
   Insn 25(l0): point = 12
   Insn 24(l0): point = 14
   Insn 76(l0): point = 17
   Insn 63(l0): point = 19
   Insn 83(l0): point = 22
   Insn 36(l0): point = 25
   Insn 35(l0): point = 27
   Insn 34(l0): point = 29
   Insn 33(l0): point = 31
   Insn 32(l0): point = 33
   Insn 30(l0): point = 36
   Insn 74(l0): point = 39
   Insn 57(l0): point = 41
   Insn 56(l0): point = 43
   Insn 55(l0): point = 45
   Insn 54(l0): point = 47
   Insn 53(l0): point = 49
   Insn 52(l0): point = 51
   Insn 51(l0): point = 53
   Insn 50(l0): point = 55
   Insn 49(l0): point = 57
   Insn 48(l0): point = 59
   Insn 47(l0): point = 61
   Insn 46(l0): point = 63
   Insn 45(l0): point = 65
   Insn 44(l0): point = 67
   Insn 43(l0): point = 69
   Insn 42(l0): point = 71
   Insn 41(l0): point = 73
   Insn 40(l0): point = 75
   Insn 39(l0): point = 77
   Insn 38(l0): point = 79
   Insn 22(l0): point = 82
   Insn 21(l0): point = 84
   Insn 20(l0): point = 86
   Insn 19(l0): point = 88
   Insn 18(l0): point = 90
   Insn 17(l0): point = 92
   Insn 16(l0): point = 94
   Insn 15(l0): point = 96
   Insn 14(l0): point = 98
   Insn 13(l0): point = 100
   Insn 12(l0): point = 102
   Insn 11(l0): point = 104
   Insn 10(l0): point = 106
   Insn 9(l0): point = 108
   Insn 8(l0): point = 110
   Insn 7(l0): point = 112
   Insn 3(l0): point = 114
   Insn 2(l0): point = 116
 a0(r103): [6..84]
 a1(r119): [44..45]
 a2(r100): [44..49]
 a3(r101): [44..47]
 a4(r95): [48..63]
 a5(r99): [50..51]
 a6(r98): [52..53]
 a7(r97): [52..57]
 a8(r118): [54..55]
 a9(r96): [58..59]
 a10(r117): [60..61]
 a11(r116): [64..65]
 a12(r94): [64..67]
 a13(r93): [68..69]
 a14(r92): [70..71]
 a15(r91): [70..75]
 a16(r115): [72..73]
 a17(r90): [76..77]
 a18(r114): [78..79]
 a19(r105): [28..29]
 a20(r113): [30..31]
 a21(r104): [9..10]
 a22(r112): [11..12]
 a23(r102): [83..86]
 a24(r110): [89..90]
 a25(r111): [91..92]
 a26(r108): [95..96]
 a27(r109): [97..98]
 a28(r89): [97..100]
 a29(r88): [105..106]
 a30(r107): [107..108]
 a31(r87): [107..110]
 a32(r106): [111..112]
Compressing live ranges: from 119 to 50 - 42%
Ranges after the compression:
 a0(r103): [0..35]
 a1(r119): [8..9]
 a2(r100): [8..11]
 a3(r101): [8..9]
 a4(r95): [10..21]
 a5(r99): [12..13]
 a6(r98): [14..15]
 a7(r97): [14..17]
 a8(r118): [16..17]
 a9(r96): [18..19]
 a10(r117): [20..21]
 a11(r116): [22..23]
 a12(r94): [22..23]
 a13(r93): [24..25]
 a14(r92): [26..27]
 a15(r91): [26..29]
 a16(r115): [28..29]
 a17(r90): [30..31]
 a18(r114): [32..33]
 a19(r105): [4..5]
 a20(r113): [6..7]
 a21(r104): [0..1]
 a22(r112): [2..3]
 a23(r102): [34..35]
 a24(r110): [36..37]
 a25(r111): [38..39]
 a26(r108): [40..41]
 a27(r109): [42..43]
 a28(r89): [42..43]
 a29(r88): [44..45]
 a30(r107): [46..47]
 a31(r87): [46..47]
 a32(r106): [48..49]
  pref0:a28(r89)<-hr21@500
  pref1:a29(r88)<-hr21@500
  regions=1, blocks=11, points=50
    allocnos=33 (big 0), copies=0, conflicts=0, ranges=33
Disposition:
   31:r87  l0    22   29:r88  l0    21   28:r89  l0    22   17:r90  l0     1
   15:r91  l0     2   14:r92  l0     1   13:r93  l0     1   12:r94  l0     2
    4:r95  l0    21    9:r96  l0     1    7:r97  l0     2    6:r98  l0     1
    5:r99  l0     1    2:r100 l0     2    3:r101 l0    21   23:r102 l0     1
    0:r103 l0     0   21:r104 l0     1   19:r105 l0     1   32:r106 l0     0
   30:r107 l0    21   26:r108 l0    21   27:r109 l0    21   24:r110 l0    21
   25:r111 l0    21   22:r112 l0     1   20:r113 l0     1   18:r114 l0     1
   16:r115 l0     1   11:r116 l0     1   10:r117 l0     1    8:r118 l0     1
    1:r119 l0     1
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


calstrm

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d,1u} r5={2d,1u} r6={1d,10u} r7={1d,11u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,9u} r17={13d,4u} r18={1d} r19={1d} r20={1d,30u} r21={3d,2u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} 
;;    total ref usage 238{137d,101u,0e} in 55{54 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 102 103 106 107 108 109 110 111
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 z1d+0 S8 A64])
        (reg:DI 5 di [ z1d ])) "CALSTRM.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ z1d ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 strm+0 S8 A64])
        (reg:DI 4 si [ strm ])) "CALSTRM.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ strm ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 106)
        (symbol_ref:DI ("mapot_") [flags 0x202]  <var_decl 0x7fd0b9c63870 mapot>)) "CALSTRM.f":1 85 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SF 87 [ _1 ])
        (mem/c:SF (plus:DI (reg/f:DI 106)
                (const_int 4000032 [0x3d0920])) [2 mapot.tph0d+0 S4 A128])) "CALSTRM.f":1 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 106)
        (nil)))
(insn 9 8 10 2 (set (reg:SF 107)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALSTRM.f":66 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.7453290522098541259765625e-2 [0x0.8efa34p-5])
        (nil)))
(insn 10 9 11 2 (set (reg:SF 88 [ _2 ])
        (mult:SF (reg:SF 87 [ _1 ])
            (reg:SF 107))) "CALSTRM.f":66 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 107)
        (expr_list:REG_DEAD (reg:SF 87 [ _1 ])
            (nil))))
(insn 11 10 12 2 (set (reg:SF 21 xmm0)
        (reg:SF 88 [ _2 ])) "CALSTRM.f":66 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 88 [ _2 ])
        (nil)))
(call_insn/u 12 11 13 2 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sinf") [flags 0x41]  <function_decl 0x7fd0b9ad4500 __builtin_sinf>) [0 __builtin_sinf S1 A8])
            (const_int 0 [0]))) "CALSTRM.f":66 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 13 12 14 2 (set (reg:SF 89 [ _3 ])
        (reg:SF 21 xmm0)) "CALSTRM.f":66 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 21 xmm0)
        (nil)))
(insn 14 13 15 2 (set (reg:SF 109)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALSTRM.f":66 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.458399929106235504150390625e-4 [0x0.98ecap-12])
        (nil)))
(insn 15 14 16 2 (set (reg:SF 108)
        (mult:SF (reg:SF 89 [ _3 ])
            (reg:SF 109))) "CALSTRM.f":66 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 109)
        (expr_list:REG_DEAD (reg:SF 89 [ _3 ])
            (nil))))
(insn 16 15 17 2 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 f0+0 S4 A32])
        (reg:SF 108)) "CALSTRM.f":66 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 108)
        (nil)))
(insn 17 16 18 2 (set (reg:SF 111)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "CALSTRM.f":67 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.80000019073486328125e+0 [0x0.9ccccdp+4])
        (nil)))
(insn 18 17 19 2 (set (reg:SF 110)
        (div:SF (reg:SF 111)
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 f0+0 S4 A32]))) "CALSTRM.f":67 841 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 111)
        (nil)))
(insn 19 18 20 2 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 gof0+0 S4 A32])
        (reg:SF 110)) "CALSTRM.f":67 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 110)
        (nil)))
(insn 20 19 21 2 (set (reg:SI 102 [ _23 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fd0b9c68bd0 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "CALSTRM.f":71 86 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 103 [ _24 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fd0b9c68bd0 parallel>)
                    (const_int 12 [0xc]))) [1 parallel.jend+0 S4 A32])) "CALSTRM.f":71 86 {*movsi_internal}
     (nil))
(insn 22 21 64 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (reg:SI 102 [ _23 ])) "CALSTRM.f":71 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 102 [ _23 ])
        (nil)))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;;              7 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  def 	 17 [flags] 104 112
(code_label 64 22 23 3 5 (nil) [1 uses])
(note 23 64 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 103 [ _24 ]))) "CALSTRM.f":71 11 {*cmpsi_1}
     (nil))
(insn 25 24 26 3 (set (reg:QI 112)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALSTRM.f":71 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 26 25 27 3 (set (reg:SI 104 [ _26 ])
        (zero_extend:SI (reg:QI 112))) "CALSTRM.f":71 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 112)
        (nil)))
(insn 27 26 28 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 104 [ _26 ])
            (const_int 0 [0]))) "CALSTRM.f":71 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 104 [ _26 ])
        (nil)))
(jump_insn 28 27 29 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 79)
            (pc))) "CALSTRM.f":71 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 79)
;;  succ:       9
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 58 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALSTRM.f":72 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              6 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 113
(code_label 58 30 31 5 4 (nil) [1 uses])
(note 31 58 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALSTRM.f":72 11 {*cmpsi_1}
     (nil))
(insn 33 32 34 5 (set (reg:QI 113)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALSTRM.f":72 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 34 33 35 5 (set (reg:SI 105 [ _28 ])
        (zero_extend:SI (reg:QI 113))) "CALSTRM.f":72 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 113)
        (nil)))
(insn 35 34 36 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 105 [ _28 ])
            (const_int 0 [0]))) "CALSTRM.f":72 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 105 [ _28 ])
        (nil)))
(jump_insn 36 35 37 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 82)
            (pc))) "CALSTRM.f":72 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 82)
;;  succ:       10
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 10, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 94 95 96 97 98 99 100 101 114 115 116 117 118 119
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 6 (set (reg:SI 114)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALSTRM.f":73 86 {*movsi_internal}
     (nil))
(insn 39 38 40 6 (set (reg:DI 90 [ _4 ])
        (sign_extend:DI (reg:SI 114))) "CALSTRM.f":73 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 114)
        (nil)))
(insn 40 39 41 6 (parallel [
            (set (reg:DI 91 [ _5 ])
                (mult:DI (reg:DI 90 [ _4 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":73 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 90 [ _4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 41 40 42 6 (set (reg:SI 115)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALSTRM.f":73 86 {*movsi_internal}
     (nil))
(insn 42 41 43 6 (set (reg:DI 92 [ _6 ])
        (sign_extend:DI (reg:SI 115))) "CALSTRM.f":73 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 115)
        (nil)))
(insn 43 42 44 6 (parallel [
            (set (reg:DI 93 [ _7 ])
                (plus:DI (reg:DI 91 [ _5 ])
                    (reg:DI 92 [ _6 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":73 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 92 [ _6 ])
        (expr_list:REG_DEAD (reg:DI 91 [ _5 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 44 43 45 6 (parallel [
            (set (reg:DI 94 [ _8 ])
                (plus:DI (reg:DI 93 [ _7 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":73 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 93 [ _7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 45 44 46 6 (set (reg/f:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 z1d+0 S8 A64])) "CALSTRM.f":73 85 {*movdi_internal}
     (nil))
(insn 46 45 47 6 (set (reg:SF 95 [ _9 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 94 [ _8 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 116)) [2 *z1d_29(D) S4 A32])) "CALSTRM.f":73 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 116)
        (expr_list:REG_DEAD (reg:DI 94 [ _8 ])
            (nil))))
(insn 47 46 48 6 (set (reg:SI 117)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALSTRM.f":73 86 {*movsi_internal}
     (nil))
(insn 48 47 49 6 (set (reg:DI 96 [ _10 ])
        (sign_extend:DI (reg:SI 117))) "CALSTRM.f":73 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 117)
        (nil)))
(insn 49 48 50 6 (parallel [
            (set (reg:DI 97 [ _11 ])
                (mult:DI (reg:DI 96 [ _10 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":73 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 96 [ _10 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 50 49 51 6 (set (reg:SI 118)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALSTRM.f":73 86 {*movsi_internal}
     (nil))
(insn 51 50 52 6 (set (reg:DI 98 [ _12 ])
        (sign_extend:DI (reg:SI 118))) "CALSTRM.f":73 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(insn 52 51 53 6 (parallel [
            (set (reg:DI 99 [ _13 ])
                (plus:DI (reg:DI 97 [ _11 ])
                    (reg:DI 98 [ _12 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":73 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 98 [ _12 ])
        (expr_list:REG_DEAD (reg:DI 97 [ _11 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 53 52 54 6 (parallel [
            (set (reg:DI 100 [ _14 ])
                (plus:DI (reg:DI 99 [ _13 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":73 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 99 [ _13 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 54 53 55 6 (set (reg:SF 101 [ _15 ])
        (mult:SF (reg:SF 95 [ _9 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 gof0+0 S4 A32]))) "CALSTRM.f":73 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 95 [ _9 ])
        (nil)))
(insn 55 54 56 6 (set (reg/f:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 strm+0 S8 A64])) "CALSTRM.f":73 85 {*movdi_internal}
     (nil))
(insn 56 55 57 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 100 [ _14 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 119)) [2 *strm_30(D) S4 A32])
        (reg:SF 101 [ _15 ])) "CALSTRM.f":73 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 119)
        (expr_list:REG_DEAD (reg:SF 101 [ _15 ])
            (expr_list:REG_DEAD (reg:DI 100 [ _14 ])
                (nil)))))
(insn 57 56 74 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":72 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 74 57 75 6 (set (pc)
        (label_ref 58)) "CALSTRM.f":72 683 {jump}
     (nil)
 -> 58)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

(barrier 75 74 82)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 6, next block 7, flags: (RTL)
;;  pred:       5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 82 75 81 10 8 (nil) [1 uses])
(note 81 82 83 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 83 81 61 10 (const_int 0 [0]) "CALSTRM.f":73 718 {nop}
     (nil))
;;  succ:       7 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

;; basic block 7, loop depth 0, maybe hot
;;  prev block 10, next block 9, flags: (RTL)
;;  pred:       10 [always]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 61 83 62 7 3 (nil) [0 uses])
(note 62 61 63 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 76 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALSTRM.f":71 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 76 63 77 7 (set (pc)
        (label_ref 64)) "CALSTRM.f":71 683 {jump}
     (nil)
 -> 64)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103

(barrier 77 76 79)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL)
;;  pred:       3
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 79 77 78 9 7 (nil) [1 uses])
(note 78 79 80 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 80 78 67 9 (const_int 0 [0]) "CALSTRM.f":72 718 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL)
;;  pred:       9 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 67 80 68 8 2 (nil) [0 uses])
(note 68 67 73 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 73 68 0 8 (const_int 0 [0]) "CALSTRM.f":78 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

