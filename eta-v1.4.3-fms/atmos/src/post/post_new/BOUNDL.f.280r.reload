
;; Function boundl (boundl_, funcdef_no=0, decl_uid=3768, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) m  (1) re {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 24:  (0) r  (1) 0  (2) mr {*muldi3_1}
      Creating newreg=163 from oldreg=122, assigning class GENERAL_REGS to r163
   24: {r163:DI=r163:DI*[frame:DI-0x18];clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  148: r163:DI=r121:DI
    Inserting insn reload after:
  149: r122:DI=r163:DI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 26:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0 {*one_cmpldi2_1}
      Creating newreg=164 from oldreg=127, assigning class GENERAL_REGS to r164
   35: r164:DI=~r164:DI
    Inserting insn reload before:
  150: r164:DI=r121:DI
    Inserting insn reload after:
  151: r127:DI=r164:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 57:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 2 in insn 60:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 66:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 73
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*iorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 81
	 Choosing alt 2 in insn 81:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 87:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 2 in insn 90:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 96:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 98:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*iorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 113
	 Choosing alt 2 in insn 113:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 119:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 120:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 126:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6 7
EBB 8 9
EBB 10
EBB 14
EBB 11
EBB 13
EBB 12

********** Pseudo live ranges #1: **********

  BB 12
   Insn 136: point = 0, n_alt = -1
  BB 13
   Insn 143: point = 0, n_alt = -1
  BB 3
   Insn 44: point = 0, n_alt = -1
   Insn 43: point = 0, n_alt = 0
   Insn 42: point = 1, n_alt = 0
   Insn 41: point = 3, n_alt = 0
   Insn 40: point = 4, n_alt = 0
  BB 11
   Insn 139: point = 5, n_alt = -1
   Insn 126: point = 5, n_alt = 1
  BB 14
   Insn 146: point = 6, n_alt = -1
  BB 5
   Insn 54: point = 7, n_alt = -1
   Insn 53: point = 7, n_alt = 0
   Insn 52: point = 8, n_alt = 0
   Insn 51: point = 10, n_alt = 0
   Insn 50: point = 11, n_alt = 0
  BB 10
   Insn 137: point = 12, n_alt = -1
   Insn 120: point = 12, n_alt = 1
   Insn 119: point = 12, n_alt = 8
   Insn 118: point = 13, n_alt = 3
   Insn 117: point = 14, n_alt = 0
   Insn 116: point = 16, n_alt = 1
   Insn 115: point = 18, n_alt = 0
   Insn 114: point = 19, n_alt = 3
   Insn 113: point = 21, n_alt = 2
   Insn 112: point = 23, n_alt = 1
   Insn 111: point = 25, n_alt = 0
  BB 9
   Insn 9: point = 27, n_alt = -2
  BB 8
   Insn 107: point = 30, n_alt = -1
   Insn 106: point = 30, n_alt = 0
   Insn 105: point = 31, n_alt = 0
   Insn 104: point = 33, n_alt = 0
   Insn 103: point = 35, n_alt = 0
   Insn 102: point = 36, n_alt = 1
   Insn 101: point = 36, n_alt = 0
   Insn 100: point = 38, n_alt = 0
   Insn 99: point = 39, n_alt = 1
   Insn 98: point = 39, n_alt = 7
   Insn 97: point = 41, n_alt = 3
   Insn 96: point = 42, n_alt = 7
   Insn 95: point = 44, n_alt = 3
   Insn 94: point = 45, n_alt = 0
   Insn 93: point = 47, n_alt = 1
   Insn 92: point = 49, n_alt = 0
   Insn 91: point = 50, n_alt = 3
   Insn 90: point = 52, n_alt = 2
   Insn 89: point = 54, n_alt = 1
   Insn 88: point = 56, n_alt = 0
   Insn 87: point = 57, n_alt = 8
   Insn 86: point = 58, n_alt = 3
   Insn 85: point = 59, n_alt = 0
   Insn 84: point = 61, n_alt = 1
   Insn 83: point = 63, n_alt = 0
   Insn 82: point = 64, n_alt = 3
   Insn 81: point = 66, n_alt = 2
   Insn 80: point = 68, n_alt = 1
   Insn 79: point = 70, n_alt = 0
  BB 7
   Insn 8: point = 72, n_alt = -2
  BB 6
   Insn 75: point = 75, n_alt = -1
   Insn 74: point = 75, n_alt = 0
   Insn 73: point = 76, n_alt = 0
   Insn 72: point = 78, n_alt = 0
   Insn 71: point = 80, n_alt = 0
   Insn 70: point = 81, n_alt = 1
   Insn 69: point = 81, n_alt = 0
   Insn 68: point = 83, n_alt = 0
   Insn 67: point = 84, n_alt = 1
   Insn 66: point = 84, n_alt = 7
   Insn 65: point = 86, n_alt = 3
   Insn 64: point = 87, n_alt = 0
   Insn 63: point = 89, n_alt = 1
   Insn 62: point = 91, n_alt = 0
   Insn 61: point = 92, n_alt = 3
   Insn 60: point = 94, n_alt = 2
   Insn 59: point = 96, n_alt = 1
   Insn 58: point = 98, n_alt = 0
   Insn 57: point = 99, n_alt = 7
   Insn 56: point = 101, n_alt = 3
  BB 4
   Insn 48: point = 103, n_alt = 1
   Insn 47: point = 103, n_alt = 0
   Insn 46: point = 105, n_alt = 3
  BB 2
   Insn 38: point = 107, n_alt = 1
   Insn 37: point = 108, n_alt = 0
   Insn 36: point = 109, n_alt = 0
   Insn 151: point = 110, n_alt = -2
	Hard reg 1 is preferable by r164 with profit 1000
   Insn 35: point = 112, n_alt = 0
   Insn 150: point = 112, n_alt = -2
   Insn 31: point = 113, n_alt = 2
   Insn 30: point = 114, n_alt = 3
   Insn 29: point = 115, n_alt = -2
   Insn 27: point = 117, n_alt = 1
   Insn 25: point = 119, n_alt = 0
   Insn 26: point = 119, n_alt = 2
   Insn 149: point = 120, n_alt = -2
	Hard reg 1 is preferable by r163 with profit 1000
   Insn 24: point = 122, n_alt = 2
   Insn 148: point = 122, n_alt = -2
   Insn 23: point = 123, n_alt = 5
   Insn 22: point = 124, n_alt = 1
   Insn 21: point = 126, n_alt = 0
   Insn 20: point = 128, n_alt = 3
   Insn 19: point = 129, n_alt = 1
   Insn 17: point = 131, n_alt = 0
   Insn 18: point = 131, n_alt = 2
   Insn 16: point = 132, n_alt = 3
   Insn 15: point = 133, n_alt = 5
   Insn 14: point = 134, n_alt = 0
   Insn 13: point = 136, n_alt = 0
   Insn 12: point = 138, n_alt = 3
   Insn 6: point = 139, n_alt = 5
   Insn 5: point = 139, n_alt = 5
   Insn 4: point = 139, n_alt = 5
   Insn 3: point = 139, n_alt = 5
   Insn 2: point = 139, n_alt = 5
 r87: [135..136]
 r88: [125..126]
 r89: [114..115]
 r90: [113..139]
 r92: [95..96]
 r93: [93..94]
 r94: [88..92]
 r95: [88..89]
 r96: [85..87]
 r97: [77..81]
 r98: [77..78]
 r99: [75..76]
 r100: [67..68]
 r101: [65..66]
 r102: [60..64]
 r103: [60..61]
 r104: [57..59]
 r105: [53..54]
 r106: [51..52]
 r107: [46..50]
 r108: [46..47]
 r109: [43..45]
 r110: [32..36]
 r111: [32..33]
 r112: [30..31]
 r113: [22..23]
 r114: [20..21]
 r115: [15..19]
 r116: [15..16]
 r117: [12..14]
 r118: [75..99] [57..72]
 r119: [30..42] [12..27]
 r120: [130..132]
 r121: [0..129]
 r122: [118..120]
 r123: [116..117]
 r127: [0..110]
 r128: [107..109]
 r129: [0..108]
 r130: [0..1]
 r131: [7..103]
 r132: [7..8]
 r133: [73..84]
 r134: [28..39]
 r135: [137..138]
 r136: [133..134]
 r137: [130..131]
 r138: [127..128]
 r139: [123..124]
 r140: [118..119]
 r141: [2..3]
 r142: [104..105]
 r143: [9..10]
 r144: [100..101]
 r145: [97..98]
 r146: [90..91]
 r147: [85..86]
 r148: [82..83]
 r149: [79..80]
 r150: [69..70]
 r151: [62..63]
 r152: [57..58]
 r153: [55..56]
 r154: [48..49]
 r155: [43..44]
 r156: [40..41]
 r158: [37..38]
 r159: [34..35]
 r160: [24..25]
 r161: [17..18]
 r162: [12..13]
 r163: [121..122]
 r164: [111..112]
Compressing live ranges: from 140 to 104 - 74%
Ranges after the compression:
 r87: [100..101]
 r88: [92..93]
 r89: [82..83]
 r90: [82..103]
 r92: [70..71]
 r93: [68..69]
 r94: [64..67]
 r95: [64..65]
 r96: [62..63]
 r97: [56..59]
 r98: [56..57]
 r99: [54..55]
 r100: [50..51]
 r101: [48..49]
 r102: [44..47]
 r103: [44..45]
 r104: [42..43]
 r105: [38..39]
 r106: [36..37]
 r107: [32..35]
 r108: [32..33]
 r109: [30..31]
 r110: [22..25]
 r111: [22..23]
 r112: [20..21]
 r113: [16..17]
 r114: [14..15]
 r115: [10..13]
 r116: [10..11]
 r117: [8..9]
 r118: [42..73]
 r119: [8..29]
 r120: [96..97]
 r121: [0..95]
 r122: [86..87]
 r123: [84..85]
 r127: [0..79]
 r128: [78..79]
 r129: [0..79]
 r130: [0..1]
 r131: [4..75]
 r132: [4..5]
 r133: [54..61]
 r134: [20..27]
 r135: [102..103]
 r136: [98..99]
 r137: [96..97]
 r138: [94..95]
 r139: [90..91]
 r140: [86..87]
 r141: [2..3]
 r142: [76..77]
 r143: [6..7]
 r144: [74..75]
 r145: [72..73]
 r146: [66..67]
 r147: [62..63]
 r148: [60..61]
 r149: [58..59]
 r150: [52..53]
 r151: [46..47]
 r152: [42..43]
 r153: [40..41]
 r154: [34..35]
 r155: [30..31]
 r156: [28..29]
 r158: [26..27]
 r159: [24..25]
 r160: [18..19]
 r161: [12..13]
 r162: [8..9]
 r163: [88..89]
 r164: [80..81]

********** Assignment #1: **********

	 Assigning to 163 (cl=GENERAL_REGS, orig=122, freq=3000, tfirst=163, tfreq=3000)...
	   Assign 1 to reload r163 (freq=3000)
	 Assigning to 164 (cl=GENERAL_REGS, orig=127, freq=3000, tfirst=164, tfreq=3000)...
	   Assign 1 to reload r164 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 21
changing reg in insn 22
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 30
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 64
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 69
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 85
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 94
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 96
changing reg in insn 101
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 117
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 119
changing reg in insn 8
changing reg in insn 57
changing reg in insn 87
changing reg in insn 70
changing reg in insn 70
changing reg in insn 67
changing reg in insn 9
changing reg in insn 96
changing reg in insn 119
changing reg in insn 102
changing reg in insn 102
changing reg in insn 99
changing reg in insn 16
changing reg in insn 19
changing reg in insn 17
changing reg in insn 19
changing reg in insn 27
changing reg in insn 25
changing reg in insn 27
changing reg in insn 29
changing reg in insn 114
changing reg in insn 91
changing reg in insn 82
changing reg in insn 61
changing reg in insn 36
changing reg in insn 38
changing reg in insn 37
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 47
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 66
changing reg in insn 8
changing reg in insn 67
changing reg in insn 98
changing reg in insn 9
changing reg in insn 99
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 51
changing reg in insn 52
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 111
changing reg in insn 112
changing reg in insn 115
changing reg in insn 116
changing reg in insn 118
changing reg in insn 119
deleting insn with uid = 149.
deleting insn with uid = 29.
deleting insn with uid = 151.
starting the processing of deferred insns
ending the processing of deferred insns


boundl

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9] 39 [r10]
;;  ref usage 	r0={6d,11u} r1={10d,14u} r2={3d,3u} r4={41d,41u} r5={2d,2u} r6={1d,48u} r7={1d,14u} r17={29d,12u} r20={1d,1u} r21={5d,8u} r22={3d,4u} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={11d,11u} r38={2d} r39={1d} 
;;    total ref usage 291{122d,169u,0e} in 109{109 regular + 0 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 90
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 90
;; lr  def 	 17 [flags] 87 88 89 120 121 122 123 127 128 129 135 136 137 138 139 140
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])
        (reg:DI 5 di [ fld ])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [4 fmin+0 S8 A64])
        (reg:DI 4 si [ fmin ])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [4 fmax+0 S8 A64])
        (reg:DI 1 dx [ fmax ])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [5 im+0 S8 A64])
        (reg:DI 2 cx [ im ])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [5 jm+0 S8 A64])
        (reg:DI 37 r8 [ jm ])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(note 7 6 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 7 13 2 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [5 im+0 S8 A64])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [135]) [1 *im_39(D)+0 S4 A32])) "BOUNDL.f":1 86 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 0 ax [136])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "BOUNDL.f":1 149 {*extendsidi2_rex64}
     (nil))
(insn 15 14 16 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 ubound.0+0 S8 A64])
        (reg:DI 0 ax [136])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 16 15 18 2 (set (reg:DI 0 ax [orig:120 stride.2_41 ] [120])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 ubound.0+0 S8 A64])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 18 16 17 2 (set (reg:DI 1 dx [137])
        (const_int 0 [0])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 17 18 19 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:120 stride.2_41 ] [120])
            (const_int 0 [0]))) "BOUNDL.f":1 8 {*cmpdi_ccno_1}
     (nil))
(insn 19 17 20 2 (set (reg:DI 0 ax [orig:121 stride.2_42 ] [121])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:120 stride.2_41 ] [120])
            (reg:DI 1 dx [137]))) "BOUNDL.f":1 1003 {*movdicc_noc}
     (nil))
(insn 20 19 21 2 (set (reg/f:DI 1 dx [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [5 jm+0 S8 A64])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 1 dx [orig:88 _2 ] [88])
        (mem:SI (reg/f:DI 1 dx [138]) [1 *jm_43(D)+0 S4 A32])) "BOUNDL.f":1 86 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 1 dx [139])
        (sign_extend:DI (reg:SI 1 dx [orig:88 _2 ] [88]))) "BOUNDL.f":1 149 {*extendsidi2_rex64}
     (nil))
(insn 23 22 148 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 ubound.1+0 S8 A64])
        (reg:DI 1 dx [139])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 148 23 24 2 (set (reg:DI 1 dx [orig:122 size.4_45 ] [122])
        (reg:DI 0 ax [orig:121 stride.2_42 ] [121])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 24 148 26 2 (parallel [
            (set (reg:DI 1 dx [orig:122 size.4_45 ] [122])
                (mult:DI (reg:DI 1 dx [orig:122 size.4_45 ] [122])
                    (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [2 ubound.1+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":1 349 {*muldi3_1}
     (nil))
(insn 26 24 25 2 (set (reg:DI 2 cx [140])
        (const_int 0 [0])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 25 26 27 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 1 dx [orig:122 size.4_45 ] [122])
            (const_int 0 [0]))) "BOUNDL.f":1 8 {*cmpdi_ccno_1}
     (nil))
(insn 27 25 30 2 (set (reg:DI 1 dx [orig:123 size.4_46 ] [123])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 1 dx [orig:122 size.4_45 ] [122])
            (reg:DI 2 cx [140]))) "BOUNDL.f":1 1003 {*movdicc_noc}
     (nil))
(insn 30 27 31 2 (set (reg:DI 38 r9 [orig:90 _4 ] [90])
        (reg:DI 1 dx [orig:89 size.7_3 ] [89])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 31 30 150 2 (set (reg:DI 39 r10 [ _4+8 ])
        (const_int 0 [0])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 150 31 35 2 (set (reg:DI 1 dx [orig:127 offset.3_50 ] [127])
        (reg:DI 0 ax [orig:121 stride.2_42 ] [121])) "BOUNDL.f":1 85 {*movdi_internal}
     (nil))
(insn 35 150 36 2 (set (reg:DI 1 dx [orig:127 offset.3_50 ] [127])
        (not:DI (reg:DI 1 dx [orig:127 offset.3_50 ] [127]))) "BOUNDL.f":1 532 {*one_cmpldi2_1}
     (nil))
(insn 36 35 37 2 (set (reg:SI 4 si [orig:128 _51 ] [128])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f065e850870 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "BOUNDL.f":57 86 {*movsi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:SI 2 cx [orig:129 _52 ] [129])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f065e850870 parallel>)
                    (const_int 12 [0xc]))) [1 parallel.jend+0 S4 A32])) "BOUNDL.f":57 86 {*movsi_internal}
     (nil))
(insn 38 37 127 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (reg:SI 4 si [orig:128 _51 ] [128])) "BOUNDL.f":57 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              11 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 129
;; lr  def 	 17 [flags] 130 141
(code_label 127 38 39 3 7 (nil) [1 uses])
(note 39 127 40 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 2 cx [orig:129 _52 ] [129]))) "BOUNDL.f":57 11 {*cmpsi_1}
     (nil))
(insn 41 40 42 3 (set (reg:QI 4 si [141])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "BOUNDL.f":57 678 {*setcc_qi}
     (nil))
(insn 42 41 43 3 (set (reg:SI 4 si [orig:130 _54 ] [130])
        (zero_extend:SI (reg:QI 4 si [141]))) "BOUNDL.f":57 140 {*zero_extendqisi2}
     (nil))
(insn 43 42 44 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [orig:130 _54 ] [130])
            (const_int 0 [0]))) "BOUNDL.f":57 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 44 43 45 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 142)
            (pc))) "BOUNDL.f":57 682 {*jcc}
     (nil)
 -> 142)
;;  succ:       13
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 131 142
(note 45 44 46 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 4 (set (reg/f:DI 4 si [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [5 im+0 S8 A64])) "BOUNDL.f":58 85 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:SI 5 di [orig:131 _55 ] [131])
        (mem:SI (reg/f:DI 4 si [142]) [1 *im_39(D)+0 S4 A32])) "BOUNDL.f":58 86 {*movsi_internal}
     (nil))
(insn 48 47 121 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "BOUNDL.f":58 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              10 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
;; lr  def 	 17 [flags] 132 143
(code_label 121 48 49 5 6 (nil) [1 uses])
(note 49 121 50 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (reg:SI 5 di [orig:131 _55 ] [131]))) "BOUNDL.f":58 11 {*cmpsi_1}
     (nil))
(insn 51 50 52 5 (set (reg:QI 4 si [143])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "BOUNDL.f":58 678 {*setcc_qi}
     (nil))
(insn 52 51 53 5 (set (reg:SI 4 si [orig:132 _57 ] [132])
        (zero_extend:SI (reg:QI 4 si [143]))) "BOUNDL.f":58 140 {*zero_extendqisi2}
     (nil))
(insn 53 52 54 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [orig:132 _57 ] [132])
            (const_int 0 [0]))) "BOUNDL.f":58 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 54 53 55 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 145)
            (pc))) "BOUNDL.f":58 682 {*jcc}
     (nil)
 -> 145)
;;  succ:       14
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127
;; lr  def 	 17 [flags] 92 93 94 95 96 97 98 99 118 133 144 145 146 147 148 149
(note 55 54 56 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 6 (set (reg/f:DI 4 si [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [4 fmin+0 S8 A64])) "BOUNDL.f":59 85 {*movdi_internal}
     (nil))
(insn 57 56 58 6 (set (reg:SF 21 xmm0 [orig:118 M.5_34 ] [118])
        (mem:SF (reg/f:DI 4 si [144]) [7 *fmin_58(D)+0 S4 A32])) "BOUNDL.f":59 131 {*movsf_internal}
     (nil))
(insn 58 57 59 6 (set (reg:SI 4 si [145])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUNDL.f":59 86 {*movsi_internal}
     (nil))
(insn 59 58 60 6 (set (reg:DI 4 si [orig:92 _6 ] [92])
        (sign_extend:DI (reg:SI 4 si [145]))) "BOUNDL.f":59 149 {*extendsidi2_rex64}
     (nil))
(insn 60 59 61 6 (parallel [
            (set (reg:DI 4 si [orig:93 _7 ] [93])
                (mult:DI (reg:DI 4 si [orig:92 _6 ] [92])
                    (reg:DI 0 ax [orig:121 stride.2_42 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 349 {*muldi3_1}
     (nil))
(insn 61 60 62 6 (parallel [
            (set (reg:DI 37 r8 [orig:94 _8 ] [94])
                (plus:DI (reg:DI 1 dx [orig:127 offset.3_50 ] [127])
                    (reg:DI 4 si [orig:93 _7 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 222 {*adddi_1}
     (nil))
(insn 62 61 63 6 (set (reg:SI 4 si [146])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUNDL.f":59 86 {*movsi_internal}
     (nil))
(insn 63 62 64 6 (set (reg:DI 4 si [orig:95 _9 ] [95])
        (sign_extend:DI (reg:SI 4 si [146]))) "BOUNDL.f":59 149 {*extendsidi2_rex64}
     (nil))
(insn 64 63 65 6 (parallel [
            (set (reg:DI 37 r8 [orig:96 _10 ] [96])
                (plus:DI (reg:DI 37 r8 [orig:94 _8 ] [94])
                    (reg:DI 4 si [orig:95 _9 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 222 {*adddi_1}
     (nil))
(insn 65 64 66 6 (set (reg/f:DI 4 si [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUNDL.f":59 85 {*movdi_internal}
     (nil))
(insn 66 65 67 6 (set (reg:SF 22 xmm1 [orig:133 _62 ] [133])
        (mem:SF (plus:DI (mult:DI (reg:DI 37 r8 [orig:96 _10 ] [96])
                    (const_int 4 [0x4]))
                (reg/f:DI 4 si [147])) [7 *fld_61(D) S4 A32])) "BOUNDL.f":59 131 {*movsf_internal}
     (nil))
(insn 67 66 68 6 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 22 xmm1 [orig:133 _62 ] [133])
            (reg:SF 21 xmm0 [orig:118 M.5_34 ] [118]))) "BOUNDL.f":59 53 {*cmpisf}
     (nil))
(insn 68 67 69 6 (set (reg:QI 4 si [148])
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUNDL.f":59 678 {*setcc_qi}
     (nil))
(insn 69 68 70 6 (set (reg:SI 37 r8 [orig:97 _11 ] [97])
        (zero_extend:SI (reg:QI 4 si [148]))) "BOUNDL.f":59 140 {*zero_extendqisi2}
     (nil))
(insn 70 69 71 6 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [orig:118 M.5_34 ] [118])
                    (reg:SF 21 xmm0 [orig:118 M.5_34 ] [118]))
            ] UNSPEC_NOTRAP)) "BOUNDL.f":59 54 {*cmpiusf}
     (nil))
(insn 71 70 72 6 (set (reg:QI 4 si [149])
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUNDL.f":59 678 {*setcc_qi}
     (nil))
(insn 72 71 73 6 (set (reg:SI 4 si [orig:98 _12 ] [98])
        (zero_extend:SI (reg:QI 4 si [149]))) "BOUNDL.f":59 140 {*zero_extendqisi2}
     (nil))
(insn 73 72 74 6 (parallel [
            (set (reg:SI 4 si [orig:99 _13 ] [99])
                (ior:SI (reg:SI 4 si [orig:98 _12 ] [98])
                    (reg:SI 37 r8 [orig:97 _11 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 450 {*iorsi_1}
     (nil))
(insn 74 73 75 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [orig:99 _13 ] [99])
            (const_int 0 [0]))) "BOUNDL.f":59 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 75 74 76 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "BOUNDL.f":59 682 {*jcc}
     (nil)
 -> 77)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 121 127 129 131 133

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131 133
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 133
;; lr  def 	 118
(note 76 75 8 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 8 76 77 7 (set (reg:SF 21 xmm0 [orig:118 M.5_34 ] [118])
        (reg:SF 22 xmm1 [orig:133 _62 ] [133])) "BOUNDL.f":59 131 {*movsf_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 121 127 129 131

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 121 127 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118 121 127
;; lr  def 	 17 [flags] 100 101 102 103 104 105 106 107 108 109 110 111 112 119 134 150 151 152 153 154 155 156 158 159
(code_label 77 8 78 8 4 (nil) [1 uses])
(note 78 77 79 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 8 (set (reg:SI 4 si [150])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUNDL.f":59 86 {*movsi_internal}
     (nil))
(insn 80 79 81 8 (set (reg:DI 4 si [orig:100 _14 ] [100])
        (sign_extend:DI (reg:SI 4 si [150]))) "BOUNDL.f":59 149 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 8 (parallel [
            (set (reg:DI 4 si [orig:101 _15 ] [101])
                (mult:DI (reg:DI 4 si [orig:100 _14 ] [100])
                    (reg:DI 0 ax [orig:121 stride.2_42 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 349 {*muldi3_1}
     (nil))
(insn 82 81 83 8 (parallel [
            (set (reg:DI 37 r8 [orig:102 _16 ] [102])
                (plus:DI (reg:DI 1 dx [orig:127 offset.3_50 ] [127])
                    (reg:DI 4 si [orig:101 _15 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 222 {*adddi_1}
     (nil))
(insn 83 82 84 8 (set (reg:SI 4 si [151])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUNDL.f":59 86 {*movsi_internal}
     (nil))
(insn 84 83 85 8 (set (reg:DI 4 si [orig:103 _17 ] [103])
        (sign_extend:DI (reg:SI 4 si [151]))) "BOUNDL.f":59 149 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 8 (parallel [
            (set (reg:DI 37 r8 [orig:104 _18 ] [104])
                (plus:DI (reg:DI 37 r8 [orig:102 _16 ] [102])
                    (reg:DI 4 si [orig:103 _17 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":59 222 {*adddi_1}
     (nil))
(insn 86 85 87 8 (set (reg/f:DI 4 si [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUNDL.f":59 85 {*movdi_internal}
     (nil))
(insn 87 86 88 8 (set (mem:SF (plus:DI (mult:DI (reg:DI 37 r8 [orig:104 _18 ] [104])
                    (const_int 4 [0x4]))
                (reg/f:DI 4 si [152])) [7 *fld_61(D) S4 A32])
        (reg:SF 21 xmm0 [orig:118 M.5_34 ] [118])) "BOUNDL.f":59 131 {*movsf_internal}
     (nil))
(insn 88 87 89 8 (set (reg:SI 4 si [153])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUNDL.f":60 86 {*movsi_internal}
     (nil))
(insn 89 88 90 8 (set (reg:DI 4 si [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 4 si [153]))) "BOUNDL.f":60 149 {*extendsidi2_rex64}
     (nil))
(insn 90 89 91 8 (parallel [
            (set (reg:DI 4 si [orig:106 _20 ] [106])
                (mult:DI (reg:DI 4 si [orig:105 _19 ] [105])
                    (reg:DI 0 ax [orig:121 stride.2_42 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 349 {*muldi3_1}
     (nil))
(insn 91 90 92 8 (parallel [
            (set (reg:DI 37 r8 [orig:107 _21 ] [107])
                (plus:DI (reg:DI 1 dx [orig:127 offset.3_50 ] [127])
                    (reg:DI 4 si [orig:106 _20 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 222 {*adddi_1}
     (nil))
(insn 92 91 93 8 (set (reg:SI 4 si [154])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUNDL.f":60 86 {*movsi_internal}
     (nil))
(insn 93 92 94 8 (set (reg:DI 4 si [orig:108 _22 ] [108])
        (sign_extend:DI (reg:SI 4 si [154]))) "BOUNDL.f":60 149 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 8 (parallel [
            (set (reg:DI 37 r8 [orig:109 _23 ] [109])
                (plus:DI (reg:DI 37 r8 [orig:107 _21 ] [107])
                    (reg:DI 4 si [orig:108 _22 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 222 {*adddi_1}
     (nil))
(insn 95 94 96 8 (set (reg/f:DI 4 si [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUNDL.f":60 85 {*movdi_internal}
     (nil))
(insn 96 95 97 8 (set (reg:SF 21 xmm0 [orig:119 M.6_35 ] [119])
        (mem:SF (plus:DI (mult:DI (reg:DI 37 r8 [orig:109 _23 ] [109])
                    (const_int 4 [0x4]))
                (reg/f:DI 4 si [155])) [7 *fld_61(D) S4 A32])) "BOUNDL.f":60 131 {*movsf_internal}
     (nil))
(insn 97 96 98 8 (set (reg/f:DI 4 si [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [4 fmax+0 S8 A64])) "BOUNDL.f":60 85 {*movdi_internal}
     (nil))
(insn 98 97 99 8 (set (reg:SF 22 xmm1 [orig:134 _68 ] [134])
        (mem:SF (reg/f:DI 4 si [156]) [7 *fmax_67(D)+0 S4 A32])) "BOUNDL.f":60 131 {*movsf_internal}
     (nil))
(insn 99 98 100 8 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [orig:119 M.6_35 ] [119])
            (reg:SF 22 xmm1 [orig:134 _68 ] [134]))) "BOUNDL.f":60 53 {*cmpisf}
     (nil))
(insn 100 99 101 8 (set (reg:QI 4 si [158])
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUNDL.f":60 678 {*setcc_qi}
     (nil))
(insn 101 100 102 8 (set (reg:SI 37 r8 [orig:110 _24 ] [110])
        (zero_extend:SI (reg:QI 4 si [158]))) "BOUNDL.f":60 140 {*zero_extendqisi2}
     (nil))
(insn 102 101 103 8 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [orig:119 M.6_35 ] [119])
                    (reg:SF 21 xmm0 [orig:119 M.6_35 ] [119]))
            ] UNSPEC_NOTRAP)) "BOUNDL.f":60 54 {*cmpiusf}
     (nil))
(insn 103 102 104 8 (set (reg:QI 4 si [159])
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "BOUNDL.f":60 678 {*setcc_qi}
     (nil))
(insn 104 103 105 8 (set (reg:SI 4 si [orig:111 _25 ] [111])
        (zero_extend:SI (reg:QI 4 si [159]))) "BOUNDL.f":60 140 {*zero_extendqisi2}
     (nil))
(insn 105 104 106 8 (parallel [
            (set (reg:SI 4 si [orig:112 _26 ] [112])
                (ior:SI (reg:SI 4 si [orig:111 _25 ] [111])
                    (reg:SI 37 r8 [orig:110 _24 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 450 {*iorsi_1}
     (nil))
(insn 106 105 107 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [orig:112 _26 ] [112])
            (const_int 0 [0]))) "BOUNDL.f":60 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 107 106 108 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) "BOUNDL.f":60 682 {*jcc}
     (nil)
 -> 109)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 121 127 129 131 134

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131 134
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 134
;; lr  def 	 119
(note 108 107 9 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 9 108 109 9 (set (reg:SF 21 xmm0 [orig:119 M.6_35 ] [119])
        (reg:SF 22 xmm1 [orig:134 _68 ] [134])) "BOUNDL.f":60 131 {*movsf_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 121 127 129 131

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 14, flags: (RTL, MODIFIED)
;;  pred:       8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 121 127 129 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 121 127
;; lr  def 	 17 [flags] 113 114 115 116 117 160 161 162
(code_label 109 9 110 10 5 (nil) [1 uses])
(note 110 109 111 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 10 (set (reg:SI 4 si [160])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "BOUNDL.f":60 86 {*movsi_internal}
     (nil))
(insn 112 111 113 10 (set (reg:DI 4 si [orig:113 _27 ] [113])
        (sign_extend:DI (reg:SI 4 si [160]))) "BOUNDL.f":60 149 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 10 (parallel [
            (set (reg:DI 4 si [orig:114 _28 ] [114])
                (mult:DI (reg:DI 4 si [orig:113 _27 ] [113])
                    (reg:DI 0 ax [orig:121 stride.2_42 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 349 {*muldi3_1}
     (nil))
(insn 114 113 115 10 (parallel [
            (set (reg:DI 37 r8 [orig:115 _29 ] [115])
                (plus:DI (reg:DI 1 dx [orig:127 offset.3_50 ] [127])
                    (reg:DI 4 si [orig:114 _28 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 222 {*adddi_1}
     (nil))
(insn 115 114 116 10 (set (reg:SI 4 si [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "BOUNDL.f":60 86 {*movsi_internal}
     (nil))
(insn 116 115 117 10 (set (reg:DI 4 si [orig:116 _30 ] [116])
        (sign_extend:DI (reg:SI 4 si [161]))) "BOUNDL.f":60 149 {*extendsidi2_rex64}
     (nil))
(insn 117 116 118 10 (parallel [
            (set (reg:DI 37 r8 [orig:117 _31 ] [117])
                (plus:DI (reg:DI 37 r8 [orig:115 _29 ] [115])
                    (reg:DI 4 si [orig:116 _30 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":60 222 {*adddi_1}
     (nil))
(insn 118 117 119 10 (set (reg/f:DI 4 si [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 fld+0 S8 A64])) "BOUNDL.f":60 85 {*movdi_internal}
     (nil))
(insn 119 118 120 10 (set (mem:SF (plus:DI (mult:DI (reg:DI 37 r8 [orig:117 _31 ] [117])
                    (const_int 4 [0x4]))
                (reg/f:DI 4 si [162])) [7 *fld_61(D) S4 A32])
        (reg:SF 21 xmm0 [orig:119 M.6_35 ] [119])) "BOUNDL.f":60 131 {*movsf_internal}
     (nil))
(insn 120 119 137 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":58 221 {*addsi_1}
     (nil))
(jump_insn 137 120 138 10 (set (pc)
        (label_ref 121)) "BOUNDL.f":58 683 {jump}
     (nil)
 -> 121)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129 131

(barrier 138 137 145)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 10, next block 11, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 145 138 144 14 10 (nil) [1 uses])
(note 144 145 146 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 146 144 124 14 (const_int 0 [0]) "BOUNDL.f":60 718 {nop}
     (nil))
;;  succ:       11 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129

;; basic block 11, loop depth 0, maybe hot
;;  prev block 14, next block 13, flags: (RTL, MODIFIED)
;;  pred:       14 [always]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 124 146 125 11 3 (nil) [0 uses])
(note 125 124 126 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 126 125 139 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "BOUNDL.f":57 221 {*addsi_1}
     (nil))
(jump_insn 139 126 140 11 (set (pc)
        (label_ref 127)) "BOUNDL.f":57 683 {jump}
     (nil)
 -> 127)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 127 129

(barrier 140 139 142)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 11, next block 12, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 142 140 141 13 9 (nil) [1 uses])
(note 141 142 143 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 143 141 130 13 (const_int 0 [0]) "BOUNDL.f":58 718 {nop}
     (nil))
;;  succ:       12 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 13, next block 1, flags: (RTL, MODIFIED)
;;  pred:       13 [always]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 130 143 131 12 2 (nil) [0 uses])
(note 131 130 136 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 136 131 147 12 (const_int 0 [0]) "BOUNDL.f":66 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 147 136 0 NOTE_INSN_DELETED)
