
;; Function calpw (calpw_, funcdef_no=0, decl_uid=3769, cgraph_uid=0, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 15 n_edges 17 count 17 (  1.1)
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 14 9 13 10 12 11
;;
;; Loop 1
;;  header 3, latch 10
;;  depth 1, outer 0
;;  nodes: 3 10 13 5 4 9 14 7 6 8
;;
;; Loop 2
;;  header 5, latch 9
;;  depth 2, outer 1
;;  nodes: 5 9 14 7 6 8
;;
;; Loop 3
;;  header 7, latch 8
;;  depth 3, outer 2
;;  nodes: 7 8
;; 2 succs { 3 }
;; 3 succs { 12 4 }
;; 4 succs { 5 }
;; 5 succs { 13 6 }
;; 6 succs { 7 }
;; 7 succs { 14 8 }
;; 8 succs { 7 }
;; 14 succs { 9 }
;; 9 succs { 5 }
;; 13 succs { 10 }
;; 10 succs { 3 }
;; 12 succs { 11 }
;; 11 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a27 (r184,l0) best SSE_REGS, allocno SSE_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a66 (r171,l0) best SSE_REGS, allocno SSE_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a102 (r157,l0) best DREG, allocno GENERAL_REGS
    r156: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a101 (r156,l0) best DIREG, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a3 (r149,l0) best SSE_REGS, allocno SSE_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a4 (r143,l0) best SSE_REGS, allocno SSE_REGS
    r142: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a12 (r142,l0) best SSE_REGS, allocno SSE_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a13 (r133,l0) best SSE_REGS, allocno SSE_REGS
    r132: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a28 (r132,l0) best SSE_REGS, allocno SSE_REGS
    r131: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a29 (r131,l0) best SSE_REGS, allocno SSE_REGS
    r130: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a30 (r130,l0) best SSE_REGS, allocno SSE_REGS
    r129: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a31 (r129,l0) best SSE_REGS, allocno SSE_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a32 (r120,l0) best SSE_REGS, allocno SSE_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a5 (r111,l0) best SSE_REGS, allocno SSE_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a67 (r105,l0) best SSE_REGS, allocno SSE_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a68 (r96,l0) best SSE_REGS, allocno SSE_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a3(r149,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a4(r143,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a5(r111,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a6(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a7(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a8(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a10(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a11(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r142,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a13(r133,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a14(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a15(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a16(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a17(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a18(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a19(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a20(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a21(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a22(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a23(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a24(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a25(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a26(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a27(r184,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a28(r132,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a29(r131,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:19000 FP_TOP_SSE_REGS:19000 FP_SECOND_SSE_REGS:19000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 ALL_REGS:19000 MEM:7000
  a30(r130,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:19000 FP_TOP_SSE_REGS:19000 FP_SECOND_SSE_REGS:19000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 ALL_REGS:19000 MEM:7000
  a31(r129,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a32(r120,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a33(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a34(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a35(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a36(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a37(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a38(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a39(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a40(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a41(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a42(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a43(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a44(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a45(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a46(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a47(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a48(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a49(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a50(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a51(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a52(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a53(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a54(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a55(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a56(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a57(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a58(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a59(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a60(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a61(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a62(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a63(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a64(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a65(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a66(r171,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a67(r105,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a68(r96,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a69(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a70(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a71(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a72(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a73(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a74(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a75(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a76(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a77(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a78(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a79(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a80(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a81(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a82(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a83(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a84(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a85(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a86(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a87(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a88(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a89(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a90(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a91(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a92(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a93(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a94(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a95(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a96(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a97(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a98(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a99(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a100(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a101(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a102(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a103(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 158(l0): point = 0
   Insn 167(l0): point = 3
   Insn 21(l0): point = 6
   Insn 20(l0): point = 8
   Insn 19(l0): point = 10
   Insn 18(l0): point = 12
   Insn 17(l0): point = 14
   Insn 163(l0): point = 17
   Insn 148(l0): point = 19
   Insn 170(l0): point = 22
   Insn 31(l0): point = 25
   Insn 30(l0): point = 27
   Insn 29(l0): point = 29
   Insn 28(l0): point = 31
   Insn 27(l0): point = 33
   Insn 25(l0): point = 36
   Insn 24(l0): point = 38
   Insn 23(l0): point = 40
   Insn 161(l0): point = 43
   Insn 142(l0): point = 45
   Insn 173(l0): point = 48
   Insn 39(l0): point = 51
   Insn 38(l0): point = 53
   Insn 37(l0): point = 55
   Insn 36(l0): point = 57
   Insn 35(l0): point = 59
   Insn 33(l0): point = 62
   Insn 159(l0): point = 65
   Insn 136(l0): point = 67
   Insn 135(l0): point = 69
   Insn 134(l0): point = 71
   Insn 133(l0): point = 73
   Insn 132(l0): point = 75
   Insn 131(l0): point = 77
   Insn 130(l0): point = 79
   Insn 129(l0): point = 81
   Insn 128(l0): point = 83
   Insn 127(l0): point = 85
   Insn 126(l0): point = 87
   Insn 125(l0): point = 89
   Insn 124(l0): point = 91
   Insn 123(l0): point = 93
   Insn 122(l0): point = 95
   Insn 121(l0): point = 97
   Insn 120(l0): point = 99
   Insn 119(l0): point = 101
   Insn 118(l0): point = 103
   Insn 117(l0): point = 105
   Insn 116(l0): point = 107
   Insn 115(l0): point = 109
   Insn 114(l0): point = 111
   Insn 113(l0): point = 113
   Insn 112(l0): point = 115
   Insn 111(l0): point = 117
   Insn 110(l0): point = 119
   Insn 109(l0): point = 121
   Insn 108(l0): point = 123
   Insn 107(l0): point = 125
   Insn 106(l0): point = 127
   Insn 105(l0): point = 129
   Insn 104(l0): point = 131
   Insn 103(l0): point = 133
   Insn 102(l0): point = 135
   Insn 101(l0): point = 137
   Insn 100(l0): point = 139
   Insn 99(l0): point = 141
   Insn 98(l0): point = 143
   Insn 97(l0): point = 145
   Insn 96(l0): point = 147
   Insn 95(l0): point = 149
   Insn 94(l0): point = 151
   Insn 93(l0): point = 153
   Insn 92(l0): point = 155
   Insn 91(l0): point = 157
   Insn 90(l0): point = 159
   Insn 89(l0): point = 161
   Insn 88(l0): point = 163
   Insn 87(l0): point = 165
   Insn 86(l0): point = 167
   Insn 85(l0): point = 169
   Insn 84(l0): point = 171
   Insn 83(l0): point = 173
   Insn 82(l0): point = 175
   Insn 81(l0): point = 177
   Insn 80(l0): point = 179
   Insn 79(l0): point = 181
   Insn 78(l0): point = 183
   Insn 77(l0): point = 185
   Insn 76(l0): point = 187
   Insn 75(l0): point = 189
   Insn 74(l0): point = 191
   Insn 73(l0): point = 193
   Insn 72(l0): point = 195
   Insn 71(l0): point = 197
   Insn 70(l0): point = 199
   Insn 69(l0): point = 201
   Insn 68(l0): point = 203
   Insn 67(l0): point = 205
   Insn 66(l0): point = 207
   Insn 65(l0): point = 209
   Insn 64(l0): point = 211
   Insn 63(l0): point = 213
   Insn 62(l0): point = 215
   Insn 61(l0): point = 217
   Insn 60(l0): point = 219
   Insn 59(l0): point = 221
   Insn 58(l0): point = 223
   Insn 57(l0): point = 225
   Insn 56(l0): point = 227
   Insn 55(l0): point = 229
   Insn 54(l0): point = 231
   Insn 53(l0): point = 233
   Insn 52(l0): point = 235
   Insn 51(l0): point = 237
   Insn 50(l0): point = 239
   Insn 49(l0): point = 241
   Insn 48(l0): point = 243
   Insn 47(l0): point = 245
   Insn 46(l0): point = 247
   Insn 45(l0): point = 249
   Insn 44(l0): point = 251
   Insn 43(l0): point = 253
   Insn 42(l0): point = 255
   Insn 41(l0): point = 257
   Insn 15(l0): point = 260
   Insn 12(l0): point = 262
   Insn 11(l0): point = 264
   Insn 10(l0): point = 266
   Insn 9(l0): point = 268
   Insn 8(l0): point = 270
   Insn 7(l0): point = 272
   Insn 6(l0): point = 274
   Insn 2(l0): point = 276
 a0(r152): [43..259] [25..38]
 a1(r192): [70..71]
 a2(r148): [70..75]
 a3(r149): [70..73]
 a4(r143): [74..89]
 a5(r111): [74..183]
 a6(r147): [76..77]
 a7(r146): [78..79]
 a8(r145): [78..83]
 a9(r191): [80..81]
 a10(r144): [84..85]
 a11(r190): [86..87]
 a12(r142): [90..91]
 a13(r133): [90..119]
 a14(r188): [92..95]
 a15(r189): [92..93]
 a16(r141): [94..97]
 a17(r140): [98..99]
 a18(r139): [100..101]
 a19(r138): [100..105]
 a20(r187): [102..103]
 a21(r137): [106..107]
 a22(r135): [106..113]
 a23(r136): [108..109]
 a24(r186): [110..111]
 a25(r134): [114..115]
 a26(r185): [116..117]
 a27(r184): [120..121]
 a28(r132): [120..123]
 a29(r131): [124..125]
 a30(r130): [126..127]
 a31(r129): [128..129]
 a32(r120): [128..155]
 a33(r183): [130..131]
 a34(r128): [130..133]
 a35(r127): [134..135]
 a36(r126): [136..137]
 a37(r125): [136..141]
 a38(r182): [138..139]
 a39(r124): [142..143]
 a40(r122): [142..149]
 a41(r123): [144..145]
 a42(r181): [146..147]
 a43(r121): [150..151]
 a44(r180): [152..153]
 a45(r178): [156..159]
 a46(r179): [156..157]
 a47(r119): [158..161]
 a48(r118): [162..163]
 a49(r117): [164..165]
 a50(r116): [164..169]
 a51(r177): [166..167]
 a52(r115): [170..171]
 a53(r113): [170..177]
 a54(r114): [172..173]
 a55(r176): [174..175]
 a56(r112): [178..179]
 a57(r175): [180..181]
 a58(r174): [184..185]
 a59(r110): [184..187]
 a60(r109): [188..189]
 a61(r108): [190..191]
 a62(r107): [190..195]
 a63(r173): [192..193]
 a64(r106): [196..197]
 a65(r172): [198..199]
 a66(r171): [202..203]
 a67(r105): [204..205]
 a68(r96): [204..231]
 a69(r170): [206..207]
 a70(r104): [206..209]
 a71(r103): [210..211]
 a72(r102): [212..213]
 a73(r101): [212..217]
 a74(r169): [214..215]
 a75(r100): [218..219]
 a76(r98): [218..225]
 a77(r99): [220..221]
 a78(r168): [222..223]
 a79(r97): [226..227]
 a80(r167): [228..229]
 a81(r166): [232..233]
 a82(r95): [232..235]
 a83(r94): [236..237]
 a84(r93): [238..239]
 a85(r92): [238..243]
 a86(r165): [240..241]
 a87(r91): [244..245]
 a88(r89): [244..251]
 a89(r90): [246..247]
 a90(r164): [248..249]
 a91(r88): [252..253]
 a92(r87): [254..255]
 a93(r163): [256..257]
 a94(r154): [54..55]
 a95(r162): [56..57]
 a96(r153): [28..29]
 a97(r161): [30..31]
 a98(r151): [37..40]
 a99(r150): [9..10]
 a100(r160): [11..12]
 a101(r156): [265..272]
 a102(r157): [269..270]
 a103(r155): [273..274]
Compressing live ranges: from 279 to 154 - 55%
Ranges after the compression:
 a0(r152): [4..149]
 a1(r192): [14..15]
 a2(r148): [14..17]
 a3(r149): [14..15]
 a4(r143): [16..27]
 a5(r111): [16..95]
 a6(r147): [18..19]
 a7(r146): [20..21]
 a8(r145): [20..23]
 a9(r191): [22..23]
 a10(r144): [24..25]
 a11(r190): [26..27]
 a12(r142): [28..29]
 a13(r133): [28..49]
 a14(r188): [30..33]
 a15(r189): [30..31]
 a16(r141): [32..33]
 a17(r140): [34..35]
 a18(r139): [36..37]
 a19(r138): [36..39]
 a20(r187): [38..39]
 a21(r137): [40..41]
 a22(r135): [40..45]
 a23(r136): [42..43]
 a24(r186): [44..45]
 a25(r134): [46..47]
 a26(r185): [48..49]
 a27(r184): [50..51]
 a28(r132): [50..51]
 a29(r131): [52..53]
 a30(r130): [54..55]
 a31(r129): [56..57]
 a32(r120): [56..75]
 a33(r183): [58..59]
 a34(r128): [58..59]
 a35(r127): [60..61]
 a36(r126): [62..63]
 a37(r125): [62..65]
 a38(r182): [64..65]
 a39(r124): [66..67]
 a40(r122): [66..71]
 a41(r123): [68..69]
 a42(r181): [70..71]
 a43(r121): [72..73]
 a44(r180): [74..75]
 a45(r178): [76..79]
 a46(r179): [76..77]
 a47(r119): [78..79]
 a48(r118): [80..81]
 a49(r117): [82..83]
 a50(r116): [82..85]
 a51(r177): [84..85]
 a52(r115): [86..87]
 a53(r113): [86..91]
 a54(r114): [88..89]
 a55(r176): [90..91]
 a56(r112): [92..93]
 a57(r175): [94..95]
 a58(r174): [96..97]
 a59(r110): [96..97]
 a60(r109): [98..99]
 a61(r108): [100..101]
 a62(r107): [100..103]
 a63(r173): [102..103]
 a64(r106): [104..105]
 a65(r172): [106..107]
 a66(r171): [108..109]
 a67(r105): [110..111]
 a68(r96): [110..129]
 a69(r170): [112..113]
 a70(r104): [112..113]
 a71(r103): [114..115]
 a72(r102): [116..117]
 a73(r101): [116..119]
 a74(r169): [118..119]
 a75(r100): [120..121]
 a76(r98): [120..125]
 a77(r99): [122..123]
 a78(r168): [124..125]
 a79(r97): [126..127]
 a80(r167): [128..129]
 a81(r166): [130..131]
 a82(r95): [130..131]
 a83(r94): [132..133]
 a84(r93): [134..135]
 a85(r92): [134..137]
 a86(r165): [136..137]
 a87(r91): [138..139]
 a88(r89): [138..143]
 a89(r90): [140..141]
 a90(r164): [142..143]
 a91(r88): [144..145]
 a92(r87): [146..147]
 a93(r163): [148..149]
 a94(r154): [10..11]
 a95(r162): [12..13]
 a96(r153): [4..5]
 a97(r161): [6..7]
 a98(r151): [8..9]
 a99(r150): [0..1]
 a100(r160): [2..3]
 a101(r156): [150..151]
 a102(r157): [150..151]
 a103(r155): [152..153]
  pref0:a102(r157)<-hr1@500
  pref1:a101(r156)<-hr5@500
  regions=1, blocks=15, points=154
    allocnos=104 (big 0), copies=0, conflicts=0, ranges=104
Disposition:
   92:r87  l0     1   91:r88  l0     1   88:r89  l0     2   89:r90  l0     1
   87:r91  l0     1   85:r92  l0     2   84:r93  l0     1   83:r94  l0     1
   82:r95  l0     2   68:r96  l0    21   79:r97  l0     1   76:r98  l0     2
   77:r99  l0     1   75:r100 l0     1   73:r101 l0     2   72:r102 l0     1
   71:r103 l0     1   70:r104 l0     2   67:r105 l0    22   64:r106 l0     1
   62:r107 l0     2   61:r108 l0     1   60:r109 l0     1   59:r110 l0     2
    5:r111 l0    22   56:r112 l0     1   53:r113 l0     2   54:r114 l0     1
   52:r115 l0     1   50:r116 l0     2   49:r117 l0     1   48:r118 l0     1
   47:r119 l0     2   32:r120 l0    23   43:r121 l0     1   40:r122 l0     2
   41:r123 l0     1   39:r124 l0     1   37:r125 l0     2   36:r126 l0     1
   35:r127 l0     1   34:r128 l0     2   31:r129 l0    21   30:r130 l0    21
   29:r131 l0    21   28:r132 l0    23   13:r133 l0    23   25:r134 l0     1
   22:r135 l0     2   23:r136 l0     1   21:r137 l0     1   19:r138 l0     2
   18:r139 l0     1   17:r140 l0     1   16:r141 l0     2   12:r142 l0    21
    4:r143 l0    21   10:r144 l0     1    8:r145 l0     2    7:r146 l0     1
    6:r147 l0     1    2:r148 l0     2    3:r149 l0    21   99:r150 l0     0
   98:r151 l0     1    0:r152 l0     0   96:r153 l0     1   94:r154 l0     1
  103:r155 l0     0  101:r156 l0     0  102:r157 l0     1  100:r160 l0     0
   97:r161 l0     1   95:r162 l0     1   93:r163 l0     1   90:r164 l0     1
   86:r165 l0     1   81:r166 l0     1   80:r167 l0     1   78:r168 l0     1
   74:r169 l0     1   69:r170 l0     1   66:r171 l0    21   65:r172 l0     1
   63:r173 l0     1   58:r174 l0     1   57:r175 l0     1   55:r176 l0     1
   51:r177 l0     1   45:r178 l0     1   46:r179 l0     2   44:r180 l0     1
   42:r181 l0     1   38:r182 l0     1   33:r183 l0     1   27:r184 l0    21
   26:r185 l0     1   24:r186 l0     1   20:r187 l0     1   14:r188 l0     1
   15:r189 l0     2   11:r190 l0     1    9:r191 l0     1    1:r192 l0     1
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


calpw

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={2d} r1={3d,1u} r2={2d} r4={3d,1u} r5={3d,2u} r6={1d,14u} r7={1d,15u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,13u} r17={44d,6u} r18={1d} r19={1d} r20={1d,51u,1e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} 
;;    total ref usage 449{241d,207u,1e} in 133{132 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 155 156 157
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 pw+0 S8 A64])
        (reg:DI 5 di [ pw ])) "CALPW.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ pw ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 155)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 pw+0 S8 A64])) "CALPW.f":82 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 156)
        (reg/f:DI 155)) "CALPW.f":82 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 155)
        (nil)))
(insn 8 7 9 2 (set (reg:DI 157)
        (const_int 118524 [0x1cefc])) "CALPW.f":82 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 1 dx)
        (reg:DI 157)) "CALPW.f":82 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 157)
        (nil)))
(insn 10 9 11 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "CALPW.f":82 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 156)) "CALPW.f":82 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 156)
        (nil)))
(call_insn 12 11 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7fb88a5f9900 __builtin_memset>) [0 __builtin_memset S1 A8])
            (const_int 0 [0]))) "CALPW.f":82 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 15 12 149 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
        (const_int 1 [0x1])) "CALPW.f":89 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;;              10 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 160
(code_label 149 15 16 3 7 (nil) [1 uses])
(note 16 149 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 38 [0x26]))) "CALPW.f":89 11 {*cmpsi_1}
     (nil))
(insn 18 17 19 3 (set (reg:QI 160)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALPW.f":89 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 19 18 20 3 (set (reg:SI 150 [ _74 ])
        (zero_extend:SI (reg:QI 160))) "CALPW.f":89 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 160)
        (nil)))
(insn 20 19 21 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 150 [ _74 ])
            (const_int 0 [0]))) "CALPW.f":89 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 150 [ _74 ])
        (nil)))
(jump_insn 21 20 22 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 166)
            (pc))) "CALPW.f":89 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 166)
;;  succ:       12
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 151 152
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg:SI 151 [ _75 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb88a7622d0 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "CALPW.f":90 86 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:SI 152 [ _76 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb88a7622d0 parallel>)
                    (const_int 12 [0xc]))) [1 parallel.jend+0 S4 A32])) "CALPW.f":90 86 {*movsi_internal}
     (nil))
(insn 25 24 143 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (reg:SI 151 [ _75 ])) "CALPW.f":90 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 151 [ _75 ])
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              9 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  def 	 17 [flags] 153 161
(code_label 143 25 26 5 6 (nil) [1 uses])
(note 26 143 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 152 [ _76 ]))) "CALPW.f":90 11 {*cmpsi_1}
     (nil))
(insn 28 27 29 5 (set (reg:QI 161)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALPW.f":90 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 29 28 30 5 (set (reg:SI 153 [ _78 ])
        (zero_extend:SI (reg:QI 161))) "CALPW.f":90 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 161)
        (nil)))
(insn 30 29 31 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 153 [ _78 ])
            (const_int 0 [0]))) "CALPW.f":90 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 153 [ _78 ])
        (nil)))
(jump_insn 31 30 32 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 169)
            (pc))) "CALPW.f":90 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 169)
;;  succ:       13
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 137 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALPW.f":91 86 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;;              8 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 162
(code_label 137 33 34 7 5 (nil) [1 uses])
(note 34 137 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALPW.f":91 11 {*cmpsi_1}
     (nil))
(insn 36 35 37 7 (set (reg:QI 162)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALPW.f":91 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 37 36 38 7 (set (reg:SI 154 [ _80 ])
        (zero_extend:SI (reg:QI 162))) "CALPW.f":91 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 162)
        (nil)))
(insn 38 37 39 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 154 [ _80 ])
            (const_int 0 [0]))) "CALPW.f":91 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 154 [ _80 ])
        (nil)))
(jump_insn 39 38 40 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 172)
            (pc))) "CALPW.f":91 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 172)
;;  succ:       14
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 14, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192
(note 40 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 8 (set (reg:SI 163)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALPW.f":92 86 {*movsi_internal}
     (nil))
(insn 42 41 43 8 (parallel [
            (set (reg:SI 87 [ _1 ])
                (plus:SI (reg:SI 163)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 163)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 43 42 44 8 (set (reg:DI 88 [ _2 ])
        (sign_extend:DI (reg:SI 87 [ _1 ]))) "CALPW.f":92 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
        (nil)))
(insn 44 43 45 8 (parallel [
            (set (reg:DI 89 [ _3 ])
                (mult:DI (reg:DI 88 [ _2 ])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 88 [ _2 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 45 44 46 8 (set (reg:SI 164)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":92 86 {*movsi_internal}
     (nil))
(insn 46 45 47 8 (set (reg:DI 90 [ _4 ])
        (sign_extend:DI (reg:SI 164))) "CALPW.f":92 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 164)
        (nil)))
(insn 47 46 48 8 (parallel [
            (set (reg:DI 91 [ _5 ])
                (mult:DI (reg:DI 90 [ _4 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 90 [ _4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 48 47 49 8 (parallel [
            (set (reg:DI 92 [ _6 ])
                (plus:DI (reg:DI 89 [ _3 ])
                    (reg:DI 91 [ _5 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 91 [ _5 ])
        (expr_list:REG_DEAD (reg:DI 89 [ _3 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 49 48 50 8 (set (reg:SI 165)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":92 86 {*movsi_internal}
     (nil))
(insn 50 49 51 8 (set (reg:DI 93 [ _7 ])
        (sign_extend:DI (reg:SI 165))) "CALPW.f":92 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 165)
        (nil)))
(insn 51 50 52 8 (parallel [
            (set (reg:DI 94 [ _8 ])
                (plus:DI (reg:DI 92 [ _6 ])
                    (reg:DI 93 [ _7 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 93 [ _7 ])
        (expr_list:REG_DEAD (reg:DI 92 [ _6 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 52 51 53 8 (parallel [
            (set (reg:DI 95 [ _9 ])
                (plus:DI (reg:DI 94 [ _8 ])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 94 [ _8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 53 52 54 8 (set (reg/f:DI 166)
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7fb88a756bd0 extra>)) "CALPW.f":92 85 {*movdi_internal}
     (nil))
(insn 54 53 55 8 (set (reg:SF 96 [ _10 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 95 [ _9 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 166)) [2 extra.pint S4 A32])) "CALPW.f":92 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 166)
        (expr_list:REG_DEAD (reg:DI 95 [ _9 ])
            (nil))))
(insn 55 54 56 8 (set (reg:SI 167)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALPW.f":92 86 {*movsi_internal}
     (nil))
(insn 56 55 57 8 (set (reg:DI 97 [ _11 ])
        (sign_extend:DI (reg:SI 167))) "CALPW.f":92 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 167)
        (nil)))
(insn 57 56 58 8 (parallel [
            (set (reg:DI 98 [ _12 ])
                (mult:DI (reg:DI 97 [ _11 ])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 97 [ _11 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 58 57 59 8 (set (reg:SI 168)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":92 86 {*movsi_internal}
     (nil))
(insn 59 58 60 8 (set (reg:DI 99 [ _13 ])
        (sign_extend:DI (reg:SI 168))) "CALPW.f":92 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 168)
        (nil)))
(insn 60 59 61 8 (parallel [
            (set (reg:DI 100 [ _14 ])
                (mult:DI (reg:DI 99 [ _13 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 99 [ _13 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 61 60 62 8 (parallel [
            (set (reg:DI 101 [ _15 ])
                (plus:DI (reg:DI 98 [ _12 ])
                    (reg:DI 100 [ _14 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 100 [ _14 ])
        (expr_list:REG_DEAD (reg:DI 98 [ _12 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 62 61 63 8 (set (reg:SI 169)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":92 86 {*movsi_internal}
     (nil))
(insn 63 62 64 8 (set (reg:DI 102 [ _16 ])
        (sign_extend:DI (reg:SI 169))) "CALPW.f":92 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 169)
        (nil)))
(insn 64 63 65 8 (parallel [
            (set (reg:DI 103 [ _17 ])
                (plus:DI (reg:DI 101 [ _15 ])
                    (reg:DI 102 [ _16 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 102 [ _16 ])
        (expr_list:REG_DEAD (reg:DI 101 [ _15 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 65 64 66 8 (parallel [
            (set (reg:DI 104 [ _18 ])
                (plus:DI (reg:DI 103 [ _17 ])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 103 [ _17 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 66 65 67 8 (set (reg/f:DI 170)
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7fb88a756bd0 extra>)) "CALPW.f":92 85 {*movdi_internal}
     (nil))
(insn 67 66 68 8 (set (reg:SF 105 [ _19 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 104 [ _18 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 170)) [2 extra.pint S4 A32])) "CALPW.f":92 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 170)
        (expr_list:REG_DEAD (reg:DI 104 [ _18 ])
            (nil))))
(insn 68 67 69 8 (set (reg:SF 171)
        (minus:SF (reg:SF 96 [ _10 ])
            (reg:SF 105 [ _19 ]))) "CALPW.f":92 841 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 105 [ _19 ])
        (expr_list:REG_DEAD (reg:SF 96 [ _10 ])
            (nil))))
(insn 69 68 70 8 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 dp+0 S4 A32])
        (reg:SF 171)) "CALPW.f":92 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 171)
        (nil)))
(insn 70 69 71 8 (set (reg:SI 172)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 71 70 72 8 (set (reg:DI 106 [ _20 ])
        (sign_extend:DI (reg:SI 172))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 172)
        (nil)))
(insn 72 71 73 8 (parallel [
            (set (reg:DI 107 [ _21 ])
                (mult:DI (reg:DI 106 [ _20 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 106 [ _20 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 73 72 74 8 (set (reg:SI 173)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 74 73 75 8 (set (reg:DI 108 [ _22 ])
        (sign_extend:DI (reg:SI 173))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 173)
        (nil)))
(insn 75 74 76 8 (parallel [
            (set (reg:DI 109 [ _23 ])
                (plus:DI (reg:DI 107 [ _21 ])
                    (reg:DI 108 [ _22 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 108 [ _22 ])
        (expr_list:REG_DEAD (reg:DI 107 [ _21 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 76 75 77 8 (parallel [
            (set (reg:DI 110 [ _24 ])
                (plus:DI (reg:DI 109 [ _23 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 109 [ _23 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 77 76 78 8 (set (reg/f:DI 174)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 pw+0 S8 A64])) "CALPW.f":93 85 {*movdi_internal}
     (nil))
(insn 78 77 79 8 (set (reg:SF 111 [ _25 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 110 [ _24 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 174)) [2 *pw_71(D) S4 A32])) "CALPW.f":93 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 174)
        (expr_list:REG_DEAD (reg:DI 110 [ _24 ])
            (nil))))
(insn 79 78 80 8 (set (reg:SI 175)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 80 79 81 8 (set (reg:DI 112 [ _26 ])
        (sign_extend:DI (reg:SI 175))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 175)
        (nil)))
(insn 81 80 82 8 (parallel [
            (set (reg:DI 113 [ _27 ])
                (mult:DI (reg:DI 112 [ _26 ])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 112 [ _26 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 82 81 83 8 (set (reg:SI 176)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 83 82 84 8 (set (reg:DI 114 [ _28 ])
        (sign_extend:DI (reg:SI 176))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 176)
        (nil)))
(insn 84 83 85 8 (parallel [
            (set (reg:DI 115 [ _29 ])
                (mult:DI (reg:DI 114 [ _28 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 114 [ _28 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 85 84 86 8 (parallel [
            (set (reg:DI 116 [ _30 ])
                (plus:DI (reg:DI 113 [ _27 ])
                    (reg:DI 115 [ _29 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 115 [ _29 ])
        (expr_list:REG_DEAD (reg:DI 113 [ _27 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 86 85 87 8 (set (reg:SI 177)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 87 86 88 8 (set (reg:DI 117 [ _31 ])
        (sign_extend:DI (reg:SI 177))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 177)
        (nil)))
(insn 88 87 89 8 (parallel [
            (set (reg:DI 118 [ _32 ])
                (plus:DI (reg:DI 116 [ _30 ])
                    (reg:DI 117 [ _31 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 117 [ _31 ])
        (expr_list:REG_DEAD (reg:DI 116 [ _30 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 89 88 90 8 (parallel [
            (set (reg:DI 119 [ _33 ])
                (plus:DI (reg:DI 118 [ _32 ])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 118 [ _32 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 90 89 91 8 (set (reg/f:DI 178)
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fb88a762b40 vrbls>)) "CALPW.f":93 85 {*movdi_internal}
     (nil))
(insn 91 90 92 8 (parallel [
            (set (reg:DI 179)
                (plus:DI (reg:DI 119 [ _33 ])
                    (const_int 3466827 [0x34e64b])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 119 [ _33 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 92 91 93 8 (set (reg:SF 120 [ _34 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 179)
                    (const_int 4 [0x4]))
                (reg/f:DI 178)) [2 vrbls.q S4 A32])) "CALPW.f":93 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:DI 179)
        (expr_list:REG_DEAD (reg/f:DI 178)
            (nil))))
(insn 93 92 94 8 (set (reg:SI 180)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 94 93 95 8 (set (reg:DI 121 [ _35 ])
        (sign_extend:DI (reg:SI 180))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 180)
        (nil)))
(insn 95 94 96 8 (parallel [
            (set (reg:DI 122 [ _36 ])
                (mult:DI (reg:DI 121 [ _35 ])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 121 [ _35 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 96 95 97 8 (set (reg:SI 181)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 97 96 98 8 (set (reg:DI 123 [ _37 ])
        (sign_extend:DI (reg:SI 181))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 181)
        (nil)))
(insn 98 97 99 8 (parallel [
            (set (reg:DI 124 [ _38 ])
                (mult:DI (reg:DI 123 [ _37 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 123 [ _37 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 99 98 100 8 (parallel [
            (set (reg:DI 125 [ _39 ])
                (plus:DI (reg:DI 122 [ _36 ])
                    (reg:DI 124 [ _38 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 124 [ _38 ])
        (expr_list:REG_DEAD (reg:DI 122 [ _36 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 100 99 101 8 (set (reg:SI 182)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 101 100 102 8 (set (reg:DI 126 [ _40 ])
        (sign_extend:DI (reg:SI 182))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 182)
        (nil)))
(insn 102 101 103 8 (parallel [
            (set (reg:DI 127 [ _41 ])
                (plus:DI (reg:DI 125 [ _39 ])
                    (reg:DI 126 [ _40 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 126 [ _40 ])
        (expr_list:REG_DEAD (reg:DI 125 [ _39 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 103 102 104 8 (parallel [
            (set (reg:DI 128 [ _42 ])
                (plus:DI (reg:DI 127 [ _41 ])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 127 [ _41 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 104 103 105 8 (set (reg/f:DI 183)
        (symbol_ref:DI ("cldwtr_") [flags 0x202]  <var_decl 0x7fb8917bfab0 cldwtr>)) "CALPW.f":93 85 {*movdi_internal}
     (nil))
(insn 105 104 106 8 (set (reg:SF 129 [ _43 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 128 [ _42 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 183)) [2 cldwtr.cwm S4 A32])) "CALPW.f":93 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 183)
        (expr_list:REG_DEAD (reg:DI 128 [ _42 ])
            (nil))))
(insn 106 105 107 8 (set (reg:SF 130 [ _44 ])
        (plus:SF (reg:SF 120 [ _34 ])
            (reg:SF 129 [ _43 ]))) "CALPW.f":93 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 129 [ _43 ])
        (expr_list:REG_DEAD (reg:SF 120 [ _34 ])
            (nil))))
(insn 107 106 108 8 (set (reg:SF 131 [ _45 ])
        (reg:SF 130 [ _44 ])) "CALPW.f":93 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 130 [ _44 ])
        (nil)))
(insn 108 107 109 8 (set (reg:SF 132 [ _46 ])
        (mult:SF (reg:SF 131 [ _45 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 dp+0 S4 A32]))) "CALPW.f":93 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 131 [ _45 ])
        (nil)))
(insn 109 108 110 8 (set (reg:SF 184)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALPW.f":93 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0204081237316131591796875e-1 [0x0.d0fac6p-3])
        (nil)))
(insn 110 109 111 8 (set (reg:SF 133 [ _47 ])
        (mult:SF (reg:SF 132 [ _46 ])
            (reg:SF 184))) "CALPW.f":93 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 184)
        (expr_list:REG_DEAD (reg:SF 132 [ _46 ])
            (nil))))
(insn 111 110 112 8 (set (reg:SI 185)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 112 111 113 8 (set (reg:DI 134 [ _48 ])
        (sign_extend:DI (reg:SI 185))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 185)
        (nil)))
(insn 113 112 114 8 (parallel [
            (set (reg:DI 135 [ _49 ])
                (mult:DI (reg:DI 134 [ _48 ])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 134 [ _48 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 114 113 115 8 (set (reg:SI 186)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 115 114 116 8 (set (reg:DI 136 [ _50 ])
        (sign_extend:DI (reg:SI 186))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 186)
        (nil)))
(insn 116 115 117 8 (parallel [
            (set (reg:DI 137 [ _51 ])
                (mult:DI (reg:DI 136 [ _50 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 136 [ _50 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 117 116 118 8 (parallel [
            (set (reg:DI 138 [ _52 ])
                (plus:DI (reg:DI 135 [ _49 ])
                    (reg:DI 137 [ _51 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 137 [ _51 ])
        (expr_list:REG_DEAD (reg:DI 135 [ _49 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 118 117 119 8 (set (reg:SI 187)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 119 118 120 8 (set (reg:DI 139 [ _53 ])
        (sign_extend:DI (reg:SI 187))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 187)
        (nil)))
(insn 120 119 121 8 (parallel [
            (set (reg:DI 140 [ _54 ])
                (plus:DI (reg:DI 138 [ _52 ])
                    (reg:DI 139 [ _53 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 139 [ _53 ])
        (expr_list:REG_DEAD (reg:DI 138 [ _52 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 121 120 122 8 (parallel [
            (set (reg:DI 141 [ _55 ])
                (plus:DI (reg:DI 140 [ _54 ])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 140 [ _54 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 122 121 123 8 (set (reg/f:DI 188)
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fb88a75ee10 masks>)) "CALPW.f":93 85 {*movdi_internal}
     (nil))
(insn 123 122 124 8 (parallel [
            (set (reg:DI 189)
                (plus:DI (reg:DI 141 [ _55 ])
                    (const_int 148155 [0x242bb])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 141 [ _55 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 124 123 125 8 (set (reg:SF 142 [ _56 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 189)
                    (const_int 4 [0x4]))
                (reg/f:DI 188)) [2 masks.htm S4 A32])) "CALPW.f":93 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:DI 189)
        (expr_list:REG_DEAD (reg/f:DI 188)
            (nil))))
(insn 125 124 126 8 (set (reg:SF 143 [ _57 ])
        (mult:SF (reg:SF 133 [ _47 ])
            (reg:SF 142 [ _56 ]))) "CALPW.f":93 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 142 [ _56 ])
        (expr_list:REG_DEAD (reg:SF 133 [ _47 ])
            (nil))))
(insn 126 125 127 8 (set (reg:SI 190)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 127 126 128 8 (set (reg:DI 144 [ _58 ])
        (sign_extend:DI (reg:SI 190))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 190)
        (nil)))
(insn 128 127 129 8 (parallel [
            (set (reg:DI 145 [ _59 ])
                (mult:DI (reg:DI 144 [ _58 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 144 [ _58 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 129 128 130 8 (set (reg:SI 191)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 130 129 131 8 (set (reg:DI 146 [ _60 ])
        (sign_extend:DI (reg:SI 191))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 191)
        (nil)))
(insn 131 130 132 8 (parallel [
            (set (reg:DI 147 [ _61 ])
                (plus:DI (reg:DI 145 [ _59 ])
                    (reg:DI 146 [ _60 ])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 146 [ _60 ])
        (expr_list:REG_DEAD (reg:DI 145 [ _59 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 132 131 133 8 (parallel [
            (set (reg:DI 148 [ _62 ])
                (plus:DI (reg:DI 147 [ _61 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 147 [ _61 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 133 132 134 8 (set (reg:SF 149 [ _63 ])
        (plus:SF (reg:SF 111 [ _25 ])
            (reg:SF 143 [ _57 ]))) "CALPW.f":93 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 143 [ _57 ])
        (expr_list:REG_DEAD (reg:SF 111 [ _25 ])
            (nil))))
(insn 134 133 135 8 (set (reg/f:DI 192)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 pw+0 S8 A64])) "CALPW.f":93 85 {*movdi_internal}
     (nil))
(insn 135 134 136 8 (set (mem:SF (plus:DI (mult:DI (reg:DI 148 [ _62 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 192)) [2 *pw_71(D) S4 A32])
        (reg:SF 149 [ _63 ])) "CALPW.f":93 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 192)
        (expr_list:REG_DEAD (reg:SF 149 [ _63 ])
            (expr_list:REG_DEAD (reg:DI 148 [ _62 ])
                (nil)))))
(insn 136 135 159 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":91 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 159 136 160 8 (set (pc)
        (label_ref 137)) "CALPW.f":91 683 {jump}
     (nil)
 -> 137)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

(barrier 160 159 172)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 8, next block 9, flags: (RTL)
;;  pred:       7
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 172 160 171 14 11 (nil) [1 uses])
(note 171 172 173 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 173 171 140 14 (const_int 0 [0]) "CALPW.f":93 718 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

;; basic block 9, loop depth 0, maybe hot
;;  prev block 14, next block 13, flags: (RTL)
;;  pred:       14 [always]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 140 173 141 9 4 (nil) [0 uses])
(note 141 140 142 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 161 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":90 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 161 142 162 9 (set (pc)
        (label_ref 143)) "CALPW.f":90 683 {jump}
     (nil)
 -> 143)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

(barrier 162 161 169)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 9, next block 10, flags: (RTL)
;;  pred:       5
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 169 162 168 13 10 (nil) [1 uses])
(note 168 169 170 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 170 168 146 13 (const_int 0 [0]) "CALPW.f":91 718 {nop}
     (nil))
;;  succ:       10 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 13, next block 12, flags: (RTL)
;;  pred:       13 [always]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 146 170 147 10 3 (nil) [0 uses])
(note 147 146 148 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 163 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":89 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 163 148 164 10 (set (pc)
        (label_ref 149)) "CALPW.f":89 683 {jump}
     (nil)
 -> 149)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 164 163 166)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 10, next block 11, flags: (RTL)
;;  pred:       3
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 166 164 165 12 9 (nil) [1 uses])
(note 165 166 167 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 167 165 152 12 (const_int 0 [0]) "CALPW.f":90 718 {nop}
     (nil))
;;  succ:       11 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 12, next block 1, flags: (RTL)
;;  pred:       12 [always]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 152 167 153 11 2 (nil) [0 uses])
(note 153 152 158 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 158 153 0 11 (const_int 0 [0]) "CALPW.f":104 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

