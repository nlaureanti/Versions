
;; Function e2tll (e2tll_, funcdef_no=0, decl_uid=3772, cgraph_uid=0, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 19 n_edges 22 count 19 (    1)
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 16 7 15 8 9 10 11 12 18 13 17 14
;;
;; Loop 3
;;  header 9, latch 13
;;  depth 1, outer 0
;;  nodes: 9 13 18 11 10 12
;;
;; Loop 4
;;  header 11, latch 12
;;  depth 2, outer 3
;;  nodes: 11 12
;;
;; Loop 1
;;  header 3, latch 7
;;  depth 1, outer 0
;;  nodes: 3 7 16 5 4 6
;;
;; Loop 2
;;  header 5, latch 6
;;  depth 2, outer 1
;;  nodes: 5 6
;; 2 succs { 3 }
;; 3 succs { 15 4 }
;; 4 succs { 5 }
;; 5 succs { 16 6 }
;; 6 succs { 5 }
;; 16 succs { 7 }
;; 7 succs { 3 }
;; 15 succs { 8 }
;; 8 succs { 9 }
;; 9 succs { 17 10 }
;; 10 succs { 11 }
;; 11 succs { 18 12 }
;; 12 succs { 11 }
;; 18 succs { 13 }
;; 13 succs { 9 }
;; 17 succs { 14 }
;; 14 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r193: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a2 (r193,l0) best SSE_REGS, allocno SSE_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a11 (r189,l0) best SSE_REGS, allocno SSE_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a20 (r185,l0) best SSE_REGS, allocno SSE_REGS
    r184: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a18 (r184,l0) best SSE_REGS, allocno SSE_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a26 (r182,l0) best SSE_REGS, allocno SSE_REGS
    r181: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a24 (r181,l0) best SSE_REGS, allocno SSE_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a31 (r179,l0) best SSE_REGS, allocno SSE_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a49 (r171,l0) best SSE_REGS, allocno SSE_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a58 (r167,l0) best SSE_REGS, allocno SSE_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a67 (r163,l0) best SSE_REGS, allocno SSE_REGS
    r162: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a65 (r162,l0) best SSE_REGS, allocno SSE_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a73 (r160,l0) best SSE_REGS, allocno SSE_REGS
    r159: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a71 (r159,l0) best SSE_REGS, allocno SSE_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a78 (r157,l0) best SSE_REGS, allocno SSE_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a97 (r149,l0) best SSE_REGS, allocno SSE_REGS
    r148: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a95 (r148,l0) best SSE_REGS, allocno SSE_REGS
    r147: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a99 (r147,l0) best SSE_REGS, allocno SSE_REGS
    r146: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a103 (r146,l0) best SSE_REGS, allocno SSE_REGS
    r145: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a101 (r145,l0) best SSE_REGS, allocno SSE_REGS
    r144: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a105 (r144,l0) best SSE_REGS, allocno SSE_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a19 (r129,l0) best SSE_REGS, allocno SSE_REGS
    r128: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a21 (r128,l0) best SSE_REGS, allocno SSE_REGS
    r127: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a25 (r127,l0) best SSE_REGS, allocno SSE_REGS
    r126: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a27 (r126,l0) best SSE_REGS, allocno SSE_REGS
    r125: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a28 (r125,l0) best SSE_REGS, allocno SSE_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a32 (r123,l0) best SSE_REGS, allocno SSE_REGS
    r122: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a34 (r122,l0) best SSE_REGS, allocno SSE_REGS
    r121: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a33 (r121,l0) best SSE_REGS, allocno SSE_REGS
    r120: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a35 (r120,l0) best SSE_REGS, allocno SSE_REGS
    r119: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a36 (r119,l0) best SSE_REGS, allocno SSE_REGS
    r118: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a37 (r118,l0) best SSE_REGS, allocno SSE_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a66 (r106,l0) best SSE_REGS, allocno SSE_REGS
    r105: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a68 (r105,l0) best SSE_REGS, allocno SSE_REGS
    r104: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a72 (r104,l0) best SSE_REGS, allocno SSE_REGS
    r103: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a74 (r103,l0) best SSE_REGS, allocno SSE_REGS
    r102: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a75 (r102,l0) best SSE_REGS, allocno SSE_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a79 (r100,l0) best SSE_REGS, allocno SSE_REGS
    r99: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a81 (r99,l0) best SSE_REGS, allocno SSE_REGS
    r98: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a80 (r98,l0) best SSE_REGS, allocno SSE_REGS
    r97: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a82 (r97,l0) best SSE_REGS, allocno SSE_REGS
    r96: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a83 (r96,l0) best SSE_REGS, allocno SSE_REGS
    r95: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a84 (r95,l0) best SSE_REGS, allocno SSE_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a96 (r92,l0) best SSE_REGS, allocno SSE_REGS
    r91: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a98 (r91,l0) best SSE_REGS, allocno SSE_REGS
    r90: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a100 (r90,l0) best SSE_REGS, allocno SSE_REGS
    r89: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a102 (r89,l0) best SSE_REGS, allocno SSE_REGS
    r88: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a104 (r88,l0) best SSE_REGS, allocno SSE_REGS
    r87: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a106 (r87,l0) best SSE_REGS, allocno SSE_REGS

  a0(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a2(r193,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 NON_Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:24000 FP_TOP_SSE_REGS:24000 FP_SECOND_SSE_REGS:24000 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 ALL_REGS:24000 MEM:12000
  a3(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a4(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a6(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a8(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a9(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a11(r189,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 NON_Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:24000 FP_TOP_SSE_REGS:24000 FP_SECOND_SSE_REGS:24000 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 ALL_REGS:24000 MEM:12000
  a12(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a13(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a14(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a15(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a16(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a17(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a18(r184,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a19(r129,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a20(r185,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a21(r128,l0) costs: AREG:28000 DREG:28000 CREG:28000 BREG:28000 SIREG:28000 DIREG:28000 AD_REGS:28000 CLOBBERED_REGS:28000 Q_REGS:28000 NON_Q_REGS:28000 TLS_GOTBASE_REGS:28000 GENERAL_REGS:28000 FP_TOP_REG:38000 FP_SECOND_REG:38000 FLOAT_REGS:38000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:38000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:38000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:16000
  a22(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a23(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a24(r181,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a25(r127,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a26(r182,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a27(r126,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a28(r125,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a29(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:19000 NO_REX_SSE_REGS:19000 SSE_REGS:19000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a30(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a31(r179,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a32(r123,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a33(r121,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:12000
  a34(r122,l0) costs: AREG:28000 DREG:28000 CREG:28000 BREG:28000 SIREG:28000 DIREG:28000 AD_REGS:28000 CLOBBERED_REGS:28000 Q_REGS:28000 NON_Q_REGS:28000 TLS_GOTBASE_REGS:28000 GENERAL_REGS:28000 FP_TOP_REG:38000 FP_SECOND_REG:38000 FLOAT_REGS:38000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:38000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:38000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:16000
  a35(r120,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:12000
  a36(r119,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a37(r118,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a38(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:12000 INT_SSE_REGS:12000 ALL_REGS:200000 MEM:2000
  a39(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a40(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29000 NO_REX_SSE_REGS:29000 SSE_REGS:29000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:15000
  a41(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a42(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a43(r173,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:30000 NO_REX_SSE_REGS:30000 SSE_REGS:30000 MMX_REGS:40000 INT_SSE_REGS:40000 ALL_REGS:532000 MEM:18000
  a44(r174,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:23000 NO_REX_SSE_REGS:23000 SSE_REGS:23000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a45(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a46(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a47(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a48(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a49(r171,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 NON_Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:24000 FP_TOP_SSE_REGS:24000 FP_SECOND_SSE_REGS:24000 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 ALL_REGS:24000 MEM:12000
  a50(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a51(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a52(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a53(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a54(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a55(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a56(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a57(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a58(r167,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 NON_Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:24000 FP_TOP_SSE_REGS:24000 FP_SECOND_SSE_REGS:24000 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 ALL_REGS:24000 MEM:12000
  a59(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a60(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a61(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a62(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a63(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a64(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a65(r162,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a66(r106,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a67(r163,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a68(r105,l0) costs: AREG:28000 DREG:28000 CREG:28000 BREG:28000 SIREG:28000 DIREG:28000 AD_REGS:28000 CLOBBERED_REGS:28000 Q_REGS:28000 NON_Q_REGS:28000 TLS_GOTBASE_REGS:28000 GENERAL_REGS:28000 FP_TOP_REG:38000 FP_SECOND_REG:38000 FLOAT_REGS:38000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:38000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:38000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:16000
  a69(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a70(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a71(r159,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a72(r104,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a73(r160,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a74(r103,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a75(r102,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a76(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:19000 NO_REX_SSE_REGS:19000 SSE_REGS:19000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a77(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a78(r157,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a79(r100,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a80(r98,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:12000
  a81(r99,l0) costs: AREG:28000 DREG:28000 CREG:28000 BREG:28000 SIREG:28000 DIREG:28000 AD_REGS:28000 CLOBBERED_REGS:28000 Q_REGS:28000 NON_Q_REGS:28000 TLS_GOTBASE_REGS:28000 GENERAL_REGS:28000 FP_TOP_REG:38000 FP_SECOND_REG:38000 FLOAT_REGS:38000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:38000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:38000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:16000
  a82(r97,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:12000
  a83(r96,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a84(r95,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a85(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:12000 INT_SSE_REGS:12000 ALL_REGS:200000 MEM:2000
  a86(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a87(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29000 NO_REX_SSE_REGS:29000 SSE_REGS:29000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:15000
  a88(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a89(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a90(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:31000 NO_REX_SSE_REGS:31000 SSE_REGS:31000 MMX_REGS:41000 INT_SSE_REGS:41000 ALL_REGS:638000 MEM:17000
  a91(r152,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:23000 NO_REX_SSE_REGS:23000 SSE_REGS:23000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a92(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a93(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a94(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a95(r148,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a96(r92,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:19000 FP_TOP_SSE_REGS:19000 FP_SECOND_SSE_REGS:19000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 ALL_REGS:19000 MEM:7000
  a97(r149,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:11000
  a98(r91,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:19000 FP_TOP_SSE_REGS:19000 FP_SECOND_SSE_REGS:19000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 ALL_REGS:19000 MEM:7000
  a99(r147,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a100(r90,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a101(r145,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a102(r89,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:19000 FP_TOP_SSE_REGS:19000 FP_SECOND_SSE_REGS:19000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 ALL_REGS:19000 MEM:7000
  a103(r146,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:11000
  a104(r88,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:19000 FP_TOP_SSE_REGS:19000 FP_SECOND_SSE_REGS:19000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 ALL_REGS:19000 MEM:7000
  a105(r144,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a106(r87,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000

   Insn 180(l0): point = 0
   Insn 197(l0): point = 3
   Insn 106(l0): point = 6
   Insn 105(l0): point = 8
   Insn 104(l0): point = 10
   Insn 103(l0): point = 12
   Insn 102(l0): point = 14
   Insn 187(l0): point = 17
   Insn 170(l0): point = 19
   Insn 200(l0): point = 22
   Insn 137(l0): point = 25
   Insn 136(l0): point = 27
   Insn 135(l0): point = 29
   Insn 134(l0): point = 31
   Insn 133(l0): point = 33
   Insn 131(l0): point = 36
   Insn 130(l0): point = 38
   Insn 129(l0): point = 40
   Insn 128(l0): point = 42
   Insn 127(l0): point = 44
   Insn 126(l0): point = 46
   Insn 125(l0): point = 48
   Insn 124(l0): point = 50
   Insn 123(l0): point = 52
   Insn 122(l0): point = 54
   Insn 121(l0): point = 56
   Insn 120(l0): point = 58
   Insn 119(l0): point = 60
   Insn 118(l0): point = 62
   Insn 117(l0): point = 64
   Insn 116(l0): point = 66
   Insn 115(l0): point = 68
   Insn 114(l0): point = 70
   Insn 113(l0): point = 72
   Insn 112(l0): point = 74
   Insn 111(l0): point = 76
   Insn 110(l0): point = 78
   Insn 109(l0): point = 80
   Insn 108(l0): point = 82
   Insn 185(l0): point = 85
   Insn 164(l0): point = 87
   Insn 163(l0): point = 89
   Insn 162(l0): point = 91
   Insn 161(l0): point = 93
   Insn 160(l0): point = 95
   Insn 159(l0): point = 97
   Insn 158(l0): point = 99
   Insn 157(l0): point = 101
   Insn 156(l0): point = 103
   Insn 155(l0): point = 105
   Insn 154(l0): point = 107
   Insn 153(l0): point = 109
   Insn 152(l0): point = 111
   Insn 151(l0): point = 113
   Insn 150(l0): point = 115
   Insn 149(l0): point = 117
   Insn 148(l0): point = 119
   Insn 147(l0): point = 121
   Insn 146(l0): point = 123
   Insn 145(l0): point = 125
   Insn 144(l0): point = 127
   Insn 143(l0): point = 129
   Insn 142(l0): point = 131
   Insn 141(l0): point = 133
   Insn 140(l0): point = 135
   Insn 139(l0): point = 137
   Insn 100(l0): point = 140
   Insn 191(l0): point = 143
   Insn 29(l0): point = 146
   Insn 28(l0): point = 148
   Insn 27(l0): point = 150
   Insn 26(l0): point = 152
   Insn 25(l0): point = 154
   Insn 183(l0): point = 157
   Insn 94(l0): point = 159
   Insn 194(l0): point = 162
   Insn 61(l0): point = 165
   Insn 60(l0): point = 167
   Insn 59(l0): point = 169
   Insn 58(l0): point = 171
   Insn 57(l0): point = 173
   Insn 55(l0): point = 176
   Insn 54(l0): point = 178
   Insn 53(l0): point = 180
   Insn 52(l0): point = 182
   Insn 51(l0): point = 184
   Insn 50(l0): point = 186
   Insn 49(l0): point = 188
   Insn 48(l0): point = 190
   Insn 47(l0): point = 192
   Insn 46(l0): point = 194
   Insn 45(l0): point = 196
   Insn 44(l0): point = 198
   Insn 43(l0): point = 200
   Insn 42(l0): point = 202
   Insn 41(l0): point = 204
   Insn 40(l0): point = 206
   Insn 39(l0): point = 208
   Insn 38(l0): point = 210
   Insn 37(l0): point = 212
   Insn 36(l0): point = 214
   Insn 35(l0): point = 216
   Insn 34(l0): point = 218
   Insn 33(l0): point = 220
   Insn 32(l0): point = 222
   Insn 31(l0): point = 224
   Insn 181(l0): point = 227
   Insn 88(l0): point = 229
   Insn 87(l0): point = 231
   Insn 86(l0): point = 233
   Insn 85(l0): point = 235
   Insn 84(l0): point = 237
   Insn 83(l0): point = 239
   Insn 82(l0): point = 241
   Insn 81(l0): point = 243
   Insn 80(l0): point = 245
   Insn 79(l0): point = 247
   Insn 78(l0): point = 249
   Insn 77(l0): point = 251
   Insn 76(l0): point = 253
   Insn 75(l0): point = 255
   Insn 74(l0): point = 257
   Insn 73(l0): point = 259
   Insn 72(l0): point = 261
   Insn 71(l0): point = 263
   Insn 70(l0): point = 265
   Insn 69(l0): point = 267
   Insn 68(l0): point = 269
   Insn 67(l0): point = 271
   Insn 66(l0): point = 273
   Insn 65(l0): point = 275
   Insn 64(l0): point = 277
   Insn 63(l0): point = 279
   Insn 23(l0): point = 282
   Insn 22(l0): point = 284
   Insn 21(l0): point = 286
   Insn 20(l0): point = 288
   Insn 19(l0): point = 290
   Insn 18(l0): point = 292
   Insn 17(l0): point = 294
   Insn 16(l0): point = 296
   Insn 15(l0): point = 298
   Insn 14(l0): point = 300
   Insn 13(l0): point = 302
   Insn 12(l0): point = 304
   Insn 11(l0): point = 306
   Insn 10(l0): point = 308
   Insn 9(l0): point = 310
   Insn 5(l0): point = 312
   Insn 4(l0): point = 314
   Insn 3(l0): point = 316
   Insn 2(l0): point = 318
 a0(r192): [90..93]
 a1(r139): [90..95]
 a2(r193): [90..91]
 a3(r138): [96..97]
 a4(r137): [98..99]
 a5(r136): [98..103]
 a6(r191): [100..101]
 a7(r135): [104..105]
 a8(r190): [106..107]
 a9(r188): [110..113]
 a10(r134): [110..115]
 a11(r189): [110..111]
 a12(r133): [116..117]
 a13(r132): [118..119]
 a14(r131): [118..123]
 a15(r187): [120..121]
 a16(r130): [124..125]
 a17(r186): [126..127]
 a18(r184): [130..131]
 a19(r129): [132..135]
 a20(r185): [132..133]
 a21(r128): [136..137]
 a22(r143): [28..29]
 a23(r183): [30..31]
 a24(r181): [39..40]
 a25(r127): [41..44]
 a26(r182): [41..42]
 a27(r126): [45..46]
 a28(r125): [45..48]
 a29(r124): [49..50]
 a30(r180): [51..52]
 a31(r179): [55..56]
 a32(r123): [57..58]
 a33(r121): [57..62]
 a34(r122): [59..60]
 a35(r120): [63..64]
 a36(r119): [65..66]
 a37(r118): [65..68]
 a38(r117): [69..70]
 a39(r178): [71..72]
 a40(r175): [73..78]
 a41(r177): [73..74]
 a42(r176): [75..76]
 a43(r173): [77..82]
 a44(r174): [79..80]
 a45(r142): [9..10]
 a46(r172): [11..12]
 a47(r170): [232..235]
 a48(r116): [232..237]
 a49(r171): [232..233]
 a50(r115): [238..239]
 a51(r114): [240..241]
 a52(r113): [240..245]
 a53(r169): [242..243]
 a54(r112): [246..247]
 a55(r168): [248..249]
 a56(r166): [252..255]
 a57(r111): [252..257]
 a58(r167): [252..253]
 a59(r110): [258..259]
 a60(r109): [260..261]
 a61(r108): [260..265]
 a62(r165): [262..263]
 a63(r107): [266..267]
 a64(r164): [268..269]
 a65(r162): [272..273]
 a66(r106): [274..277]
 a67(r163): [274..275]
 a68(r105): [278..279]
 a69(r141): [168..169]
 a70(r161): [170..171]
 a71(r159): [179..180]
 a72(r104): [181..184]
 a73(r160): [181..182]
 a74(r103): [185..186]
 a75(r102): [185..188]
 a76(r101): [189..190]
 a77(r158): [191..192]
 a78(r157): [195..196]
 a79(r100): [197..198]
 a80(r98): [197..202]
 a81(r99): [199..200]
 a82(r97): [203..204]
 a83(r96): [205..206]
 a84(r95): [205..208]
 a85(r94): [209..210]
 a86(r156): [211..212]
 a87(r153): [213..218]
 a88(r155): [213..214]
 a89(r154): [215..216]
 a90(r93): [217..222]
 a91(r152): [219..220]
 a92(r151): [223..224]
 a93(r140): [149..150]
 a94(r150): [151..152]
 a95(r148): [285..286]
 a96(r92): [287..290]
 a97(r149): [287..288]
 a98(r91): [291..292]
 a99(r147): [293..294]
 a100(r90): [293..296]
 a101(r145): [299..300]
 a102(r89): [301..304]
 a103(r146): [301..302]
 a104(r88): [305..306]
 a105(r144): [307..308]
 a106(r87): [307..310]
Compressing live ranges: from 321 to 158 - 49%
Ranges after the compression:
 a0(r192): [40..41]
 a1(r139): [40..41]
 a2(r193): [40..41]
 a3(r138): [42..43]
 a4(r137): [44..45]
 a5(r136): [44..47]
 a6(r191): [46..47]
 a7(r135): [48..49]
 a8(r190): [50..51]
 a9(r188): [52..53]
 a10(r134): [52..53]
 a11(r189): [52..53]
 a12(r133): [54..55]
 a13(r132): [56..57]
 a14(r131): [56..59]
 a15(r187): [58..59]
 a16(r130): [60..61]
 a17(r186): [62..63]
 a18(r184): [64..65]
 a19(r129): [66..67]
 a20(r185): [66..67]
 a21(r128): [68..69]
 a22(r143): [4..5]
 a23(r183): [6..7]
 a24(r181): [8..9]
 a25(r127): [10..11]
 a26(r182): [10..11]
 a27(r126): [12..13]
 a28(r125): [12..13]
 a29(r124): [14..15]
 a30(r180): [16..17]
 a31(r179): [18..19]
 a32(r123): [20..21]
 a33(r121): [20..23]
 a34(r122): [22..23]
 a35(r120): [24..25]
 a36(r119): [26..27]
 a37(r118): [26..27]
 a38(r117): [28..29]
 a39(r178): [30..31]
 a40(r175): [32..37]
 a41(r177): [32..33]
 a42(r176): [34..35]
 a43(r173): [36..39]
 a44(r174): [38..39]
 a45(r142): [0..1]
 a46(r172): [2..3]
 a47(r170): [112..113]
 a48(r116): [112..113]
 a49(r171): [112..113]
 a50(r115): [114..115]
 a51(r114): [116..117]
 a52(r113): [116..119]
 a53(r169): [118..119]
 a54(r112): [120..121]
 a55(r168): [122..123]
 a56(r166): [124..125]
 a57(r111): [124..125]
 a58(r167): [124..125]
 a59(r110): [126..127]
 a60(r109): [128..129]
 a61(r108): [128..131]
 a62(r165): [130..131]
 a63(r107): [132..133]
 a64(r164): [134..135]
 a65(r162): [136..137]
 a66(r106): [138..139]
 a67(r163): [138..139]
 a68(r105): [140..141]
 a69(r141): [74..75]
 a70(r161): [76..77]
 a71(r159): [78..79]
 a72(r104): [80..81]
 a73(r160): [80..81]
 a74(r103): [82..83]
 a75(r102): [82..83]
 a76(r101): [84..85]
 a77(r158): [86..87]
 a78(r157): [88..89]
 a79(r100): [90..91]
 a80(r98): [90..93]
 a81(r99): [92..93]
 a82(r97): [94..95]
 a83(r96): [96..97]
 a84(r95): [96..97]
 a85(r94): [98..99]
 a86(r156): [100..101]
 a87(r153): [102..107]
 a88(r155): [102..103]
 a89(r154): [104..105]
 a90(r93): [106..109]
 a91(r152): [108..109]
 a92(r151): [110..111]
 a93(r140): [70..71]
 a94(r150): [72..73]
 a95(r148): [142..143]
 a96(r92): [144..145]
 a97(r149): [144..145]
 a98(r91): [146..147]
 a99(r147): [148..149]
 a100(r90): [148..149]
 a101(r145): [150..151]
 a102(r89): [152..153]
 a103(r146): [152..153]
 a104(r88): [154..155]
 a105(r144): [156..157]
 a106(r87): [156..157]
  regions=1, blocks=19, points=158
    allocnos=107 (big 0), copies=0, conflicts=0, ranges=107
Disposition:
  106:r87  l0    22  104:r88  l0    21  102:r89  l0    22  100:r90  l0    22
   98:r91  l0    21   96:r92  l0    22   90:r93  l0     1   85:r94  l0     0
   84:r95  l0    22   83:r96  l0    21   82:r97  l0    21   80:r98  l0    22
   81:r99  l0    21   79:r100 l0    21   76:r101 l0     0   75:r102 l0    22
   74:r103 l0    21   72:r104 l0    21   68:r105 l0    21   66:r106 l0    21
   63:r107 l0     0   61:r108 l0     1   60:r109 l0     0   59:r110 l0     0
   57:r111 l0     1   54:r112 l0     0   52:r113 l0     1   51:r114 l0     0
   50:r115 l0     0   48:r116 l0     1   38:r117 l0     0   37:r118 l0    22
   36:r119 l0    21   35:r120 l0    21   33:r121 l0    22   34:r122 l0    21
   32:r123 l0    21   29:r124 l0     0   28:r125 l0    22   27:r126 l0    21
   25:r127 l0    21   21:r128 l0    21   19:r129 l0    21   16:r130 l0     0
   14:r131 l0     1   13:r132 l0     0   12:r133 l0     0   10:r134 l0     1
    7:r135 l0     0    5:r136 l0     1    4:r137 l0     0    3:r138 l0     0
    1:r139 l0     1   93:r140 l0     0   69:r141 l0     0   45:r142 l0     0
   22:r143 l0     0  105:r144 l0    21  101:r145 l0    21  103:r146 l0    21
   99:r147 l0    21   95:r148 l0    21   97:r149 l0    21   94:r150 l0     0
   92:r151 l0     0   91:r152 l0     0   87:r153 l0     0   89:r154 l0     1
   88:r155 l0     1   86:r156 l0     0   78:r157 l0    21   77:r158 l0     0
   71:r159 l0    21   73:r160 l0    22   70:r161 l0     0   65:r162 l0    21
   67:r163 l0    22   64:r164 l0     0   62:r165 l0     0   56:r166 l0     0
   58:r167 l0    21   55:r168 l0     0   53:r169 l0     0   47:r170 l0     0
   49:r171 l0    21   46:r172 l0     0   43:r173 l0     0   44:r174 l0     1
   40:r175 l0     1   42:r176 l0     0   41:r177 l0     0   39:r178 l0     0
   31:r179 l0    21   30:r180 l0     0   24:r181 l0    21   26:r182 l0    22
   23:r183 l0     0   18:r184 l0    21   20:r185 l0    22   17:r186 l0     0
   15:r187 l0     0    9:r188 l0     0   11:r189 l0    21    8:r190 l0     0
    6:r191 l0     0    0:r192 l0     0    2:r193 l0    21
+++Costs: overall 8000, reg 8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


e2tll

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={1d} r1={1d,1u} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,18u} r7={1d,18u} r16={1d,17u} r17={39d,8u} r20={1d,72u,3e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u,1e} r90={1d,1u} r91={1d,1u} r92={1d,1u,1e} r93={1d,2u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,2u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,2u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,2u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,2u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,2u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,2u} r174={1d,1u} r175={1d,2u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} 
;;    total ref usage 422{165d,252u,5e} in 152{152 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 144 145 146 147 148 149
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 htlat+0 S8 A64])
        (reg:DI 5 di [ htlat ])) "E2TLL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ htlat ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [3 htlon+0 S8 A64])
        (reg:DI 4 si [ htlon ])) "E2TLL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ htlon ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [3 vtlat+0 S8 A64])
        (reg:DI 1 dx [ vtlat ])) "E2TLL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ vtlat ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [3 vtlon+0 S8 A64])
        (reg:DI 2 cx [ vtlon ])) "E2TLL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ vtlon ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:SF 87 [ _1 ])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SF 144)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "E2TLL.f":66 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.18e+2 [0x0.ecp+7])
        (nil)))
(insn 11 10 12 2 (set (reg:SF 88 [ _2 ])
        (mult:SF (reg:SF 87 [ _1 ])
            (reg:SF 144))) "E2TLL.f":66 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 144)
        (expr_list:REG_DEAD (reg:SF 87 [ _1 ])
            (nil))))
(insn 12 11 13 2 (set (reg:SF 89 [ _3 ])
        (reg:SF 88 [ _2 ])) "E2TLL.f":66 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 88 [ _2 ])
        (nil)))
(insn 13 12 14 2 (set (reg:V4SF 146)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S16 A128])) "E2TLL.f":66 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 14 13 15 2 (parallel [
            (set (reg:SF 145)
                (neg:SF (reg:SF 89 [ _3 ])))
            (use (reg:V4SF 146))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":66 507 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 146)
        (expr_list:REG_DEAD (reg:SF 89 [ _3 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (neg:SF (reg:SF 89 [ _3 ]))
                    (nil))))))
(insn 15 14 16 2 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 wbd+0 S4 A32])
        (reg:SF 145)) "E2TLL.f":66 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 145)
        (nil)))
(insn 16 15 17 2 (set (reg:SF 90 [ _4 ])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 8 [0x8]))) [4 egrid.dphi+0 S4 A64])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SF 147)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "E2TLL.f":67 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.24e+2 [0x0.f8p+7])
        (nil)))
(insn 18 17 19 2 (set (reg:SF 91 [ _5 ])
        (mult:SF (reg:SF 90 [ _4 ])
            (reg:SF 147))) "E2TLL.f":67 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 147)
        (expr_list:REG_DEAD (reg:SF 90 [ _4 ])
            (nil))))
(insn 19 18 20 2 (set (reg:SF 92 [ _6 ])
        (reg:SF 91 [ _5 ])) "E2TLL.f":67 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 91 [ _5 ])
        (nil)))
(insn 20 19 21 2 (set (reg:V4SF 149)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S16 A128])) "E2TLL.f":67 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 21 20 22 2 (parallel [
            (set (reg:SF 148)
                (neg:SF (reg:SF 92 [ _6 ])))
            (use (reg:V4SF 149))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":67 507 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 149)
        (expr_list:REG_DEAD (reg:SF 92 [ _6 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (neg:SF (reg:SF 92 [ _6 ]))
                    (nil))))))
(insn 22 21 23 2 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [1 sbd+0 S4 A32])
        (reg:SF 148)) "E2TLL.f":67 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 148)
        (nil)))
(insn 23 22 95 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
        (const_int 1 [0x1])) "E2TLL.f":72 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;;              7 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 140 150
(code_label 95 23 24 3 5 (nil) [1 uses])
(note 24 95 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 249 [0xf9]))) "E2TLL.f":72 11 {*cmpsi_1}
     (nil))
(insn 26 25 27 3 (set (reg:QI 150)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2TLL.f":72 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 27 26 28 3 (set (reg:SI 140 [ _68 ])
        (zero_extend:SI (reg:QI 150))) "E2TLL.f":72 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 150)
        (nil)))
(insn 28 27 29 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 140 [ _68 ])
            (const_int 0 [0]))) "E2TLL.f":72 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 140 [ _68 ])
        (nil)))
(jump_insn 29 28 30 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 190)
            (pc))) "E2TLL.f":72 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 190)
;;  succ:       15
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 96 97 98 99 100 101 102 103 104 151 152 153 154 155 156 157 158 159 160
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg:SI 151)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":73 86 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:SI 93 [ _7 ])
                (plus:SI (reg:SI 151)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":73 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 151)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 33 32 34 4 (parallel [
            (set (reg:SI 152)
                (ashiftrt:SI (reg:SI 93 [ _7 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":73 582 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 34 33 35 4 (parallel [
            (set (reg:SI 153)
                (lshiftrt:SI (reg:SI 152)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":73 587 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 152)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 35 34 36 4 (parallel [
            (set (reg:SI 154)
                (plus:SI (reg:SI 93 [ _7 ])
                    (reg:SI 153)))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":73 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 93 [ _7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 36 35 37 4 (parallel [
            (set (reg:SI 155)
                (and:SI (reg:SI 154)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":73 426 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 154)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 37 36 38 4 (parallel [
            (set (reg:SI 156)
                (minus:SI (reg:SI 155)
                    (reg:SI 153)))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":73 277 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 155)
        (expr_list:REG_DEAD (reg:SI 153)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 38 37 39 4 (set (reg:SI 94 [ _8 ])
        (reg:SI 156)) "E2TLL.f":73 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 156)
        (nil)))
(insn 39 38 40 4 (set (reg:SF 95 [ _9 ])
        (float:SF (reg:SI 94 [ _8 ]))) "E2TLL.f":73 203 {*floatsisf2_mixed}
     (expr_list:REG_DEAD (reg:SI 94 [ _8 ])
        (nil)))
(insn 40 39 41 4 (set (reg:SF 96 [ _10 ])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 41 40 42 4 (set (reg:SF 97 [ _11 ])
        (mult:SF (reg:SF 95 [ _9 ])
            (reg:SF 96 [ _10 ]))) "E2TLL.f":73 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 96 [ _10 ])
        (expr_list:REG_DEAD (reg:SF 95 [ _9 ])
            (nil))))
(insn 42 41 43 4 (set (reg:SF 98 [ _12 ])
        (plus:SF (reg:SF 97 [ _11 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [1 wbd+0 S4 A32]))) "E2TLL.f":73 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 97 [ _11 ])
        (nil)))
(insn 43 42 44 4 (set (reg:SF 99 [ _13 ])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 44 43 45 4 (set (reg:SF 100 [ _14 ])
        (plus:SF (reg:SF 99 [ _13 ])
            (reg:SF 99 [ _13 ]))) "E2TLL.f":73 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 99 [ _13 ])
        (nil)))
(insn 45 44 46 4 (set (reg:SF 157)
        (minus:SF (reg:SF 98 [ _12 ])
            (reg:SF 100 [ _14 ]))) "E2TLL.f":73 841 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 100 [ _14 ])
        (expr_list:REG_DEAD (reg:SF 98 [ _12 ])
            (nil))))
(insn 46 45 47 4 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])
        (reg:SF 157)) "E2TLL.f":73 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 157)
        (nil)))
(insn 47 46 48 4 (set (reg:SI 158)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":74 86 {*movsi_internal}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg:SI 101 [ _15 ])
                (plus:SI (reg:SI 158)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":74 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 158)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff]))
                (nil)))))
(insn 49 48 50 4 (set (reg:SF 102 [ _16 ])
        (float:SF (reg:SI 101 [ _15 ]))) "E2TLL.f":74 203 {*floatsisf2_mixed}
     (expr_list:REG_DEAD (reg:SI 101 [ _15 ])
        (nil)))
(insn 50 49 51 4 (set (reg:SF 103 [ _17 ])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 8 [0x8]))) [4 egrid.dphi+0 S4 A64])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 51 50 52 4 (set (reg:SF 104 [ _18 ])
        (mult:SF (reg:SF 102 [ _16 ])
            (reg:SF 103 [ _17 ]))) "E2TLL.f":74 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 103 [ _17 ])
        (expr_list:REG_DEAD (reg:SF 102 [ _16 ])
            (nil))))
(insn 52 51 53 4 (set (reg:SF 160)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [1 sbd+0 S4 A32])) "E2TLL.f":74 131 {*movsf_internal}
     (nil))
(insn 53 52 54 4 (set (reg:SF 159)
        (plus:SF (reg:SF 160)
            (reg:SF 104 [ _18 ]))) "E2TLL.f":74 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 160)
        (expr_list:REG_DEAD (reg:SF 104 [ _18 ])
            (nil))))
(insn 54 53 55 4 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 elat+0 S4 A32])
        (reg:SF 159)) "E2TLL.f":74 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 159)
        (nil)))
(insn 55 54 89 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
        (const_int 1 [0x1])) "E2TLL.f":75 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              6 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 161
(code_label 89 55 56 5 4 (nil) [1 uses])
(note 56 89 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
            (const_int 119 [0x77]))) "E2TLL.f":75 11 {*cmpsi_1}
     (nil))
(insn 58 57 59 5 (set (reg:QI 161)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2TLL.f":75 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 59 58 60 5 (set (reg:SI 141 [ _72 ])
        (zero_extend:SI (reg:QI 161))) "E2TLL.f":75 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 161)
        (nil)))
(insn 60 59 61 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 141 [ _72 ])
            (const_int 0 [0]))) "E2TLL.f":75 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 141 [ _72 ])
        (nil)))
(jump_insn 61 60 62 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 193)
            (pc))) "E2TLL.f":75 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 193)
;;  succ:       16
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 16, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 107 108 109 110 111 112 113 114 115 116 162 163 164 165 166 167 168 169 170 171
(note 62 61 63 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 6 (set (reg:SF 105 [ _19 ])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 64 63 65 6 (set (reg:SF 106 [ _20 ])
        (plus:SF (reg:SF 105 [ _19 ])
            (reg:SF 105 [ _19 ]))) "E2TLL.f":76 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 105 [ _19 ])
        (nil)))
(insn 65 64 66 6 (set (reg:SF 163)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])) "E2TLL.f":76 131 {*movsf_internal}
     (nil))
(insn 66 65 67 6 (set (reg:SF 162)
        (plus:SF (reg:SF 163)
            (reg:SF 106 [ _20 ]))) "E2TLL.f":76 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 163)
        (expr_list:REG_DEAD (reg:SF 106 [ _20 ])
            (nil))))
(insn 67 66 68 6 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])
        (reg:SF 162)) "E2TLL.f":76 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 162)
        (nil)))
(insn 68 67 69 6 (set (reg:SI 164)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":77 86 {*movsi_internal}
     (nil))
(insn 69 68 70 6 (set (reg:DI 107 [ _21 ])
        (sign_extend:DI (reg:SI 164))) "E2TLL.f":77 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 164)
        (nil)))
(insn 70 69 71 6 (parallel [
            (set (reg:DI 108 [ _22 ])
                (mult:DI (reg:DI 107 [ _21 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":77 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 107 [ _21 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 71 70 72 6 (set (reg:SI 165)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "E2TLL.f":77 86 {*movsi_internal}
     (nil))
(insn 72 71 73 6 (set (reg:DI 109 [ _23 ])
        (sign_extend:DI (reg:SI 165))) "E2TLL.f":77 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 165)
        (nil)))
(insn 73 72 74 6 (parallel [
            (set (reg:DI 110 [ _24 ])
                (plus:DI (reg:DI 108 [ _22 ])
                    (reg:DI 109 [ _23 ])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":77 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 109 [ _23 ])
        (expr_list:REG_DEAD (reg:DI 108 [ _22 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 74 73 75 6 (parallel [
            (set (reg:DI 111 [ _25 ])
                (plus:DI (reg:DI 110 [ _24 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":77 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 110 [ _24 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 75 74 76 6 (set (reg/f:DI 166)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [3 htlon+0 S8 A64])) "E2TLL.f":77 85 {*movdi_internal}
     (nil))
(insn 76 75 77 6 (set (reg:SF 167)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])) "E2TLL.f":77 131 {*movsf_internal}
     (nil))
(insn 77 76 78 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 111 [ _25 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 166)) [1 *htlon_74(D) S4 A32])
        (reg:SF 167)) "E2TLL.f":77 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 167)
        (expr_list:REG_DEAD (reg/f:DI 166)
            (expr_list:REG_DEAD (reg:DI 111 [ _25 ])
                (nil)))))
(insn 78 77 79 6 (set (reg:SI 168)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":78 86 {*movsi_internal}
     (nil))
(insn 79 78 80 6 (set (reg:DI 112 [ _26 ])
        (sign_extend:DI (reg:SI 168))) "E2TLL.f":78 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 168)
        (nil)))
(insn 80 79 81 6 (parallel [
            (set (reg:DI 113 [ _27 ])
                (mult:DI (reg:DI 112 [ _26 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":78 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 112 [ _26 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 81 80 82 6 (set (reg:SI 169)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "E2TLL.f":78 86 {*movsi_internal}
     (nil))
(insn 82 81 83 6 (set (reg:DI 114 [ _28 ])
        (sign_extend:DI (reg:SI 169))) "E2TLL.f":78 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 169)
        (nil)))
(insn 83 82 84 6 (parallel [
            (set (reg:DI 115 [ _29 ])
                (plus:DI (reg:DI 113 [ _27 ])
                    (reg:DI 114 [ _28 ])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":78 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 114 [ _28 ])
        (expr_list:REG_DEAD (reg:DI 113 [ _27 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 84 83 85 6 (parallel [
            (set (reg:DI 116 [ _30 ])
                (plus:DI (reg:DI 115 [ _29 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":78 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 115 [ _29 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 85 84 86 6 (set (reg/f:DI 170)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 htlat+0 S8 A64])) "E2TLL.f":78 85 {*movdi_internal}
     (nil))
(insn 86 85 87 6 (set (reg:SF 171)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 elat+0 S4 A32])) "E2TLL.f":78 131 {*movsf_internal}
     (nil))
(insn 87 86 88 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 116 [ _30 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 170)) [1 *htlat_76(D) S4 A32])
        (reg:SF 171)) "E2TLL.f":78 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 171)
        (expr_list:REG_DEAD (reg/f:DI 170)
            (expr_list:REG_DEAD (reg:DI 116 [ _30 ])
                (nil)))))
(insn 88 87 181 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":75 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 181 88 182 6 (set (pc)
        (label_ref 89)) "E2TLL.f":75 683 {jump}
     (nil)
 -> 89)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 182 181 193)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 6, next block 7, flags: (RTL)
;;  pred:       5
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 193 182 192 16 12 (nil) [1 uses])
(note 192 193 194 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 194 192 92 16 (const_int 0 [0]) "E2TLL.f":78 718 {nop}
     (nil))
;;  succ:       7 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 16, next block 15, flags: (RTL)
;;  pred:       16 [always]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 92 194 93 7 3 (nil) [0 uses])
(note 93 92 94 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 183 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":72 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 183 94 184 7 (set (pc)
        (label_ref 95)) "E2TLL.f":72 683 {jump}
     (nil)
 -> 95)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 184 183 190)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL)
;;  pred:       3
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 190 184 189 15 11 (nil) [1 uses])
(note 189 190 191 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 191 189 98 15 (const_int 0 [0]) "E2TLL.f":75 718 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 15, next block 9, flags: (RTL)
;;  pred:       15 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 98 191 99 8 2 (nil) [0 uses])
(note 99 98 100 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 171 8 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
        (const_int 1 [0x1])) "E2TLL.f":85 86 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;;              13 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 172
(code_label 171 100 101 9 9 (nil) [1 uses])
(note 101 171 102 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 249 [0xf9]))) "E2TLL.f":85 11 {*cmpsi_1}
     (nil))
(insn 103 102 104 9 (set (reg:QI 172)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2TLL.f":85 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 104 103 105 9 (set (reg:SI 142 [ _81 ])
        (zero_extend:SI (reg:QI 172))) "E2TLL.f":85 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 172)
        (nil)))
(insn 105 104 106 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 142 [ _81 ])
            (const_int 0 [0]))) "E2TLL.f":85 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 142 [ _81 ])
        (nil)))
(jump_insn 106 105 107 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 196)
            (pc))) "E2TLL.f":85 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 196)
;;  succ:       17
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 117 118 119 120 121 122 123 124 125 126 127 173 174 175 176 177 178 179 180 181 182
(note 107 106 108 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 10 (set (reg:SI 173)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":86 86 {*movsi_internal}
     (nil))
(insn 109 108 110 10 (parallel [
            (set (reg:SI 174)
                (ashiftrt:SI (reg:SI 173)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":86 582 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 110 109 111 10 (parallel [
            (set (reg:SI 175)
                (lshiftrt:SI (reg:SI 174)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":86 587 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 174)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 111 110 112 10 (parallel [
            (set (reg:SI 176)
                (plus:SI (reg:SI 173)
                    (reg:SI 175)))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":86 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 173)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 112 111 113 10 (parallel [
            (set (reg:SI 177)
                (and:SI (reg:SI 176)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":86 426 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 176)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 113 112 114 10 (parallel [
            (set (reg:SI 178)
                (minus:SI (reg:SI 177)
                    (reg:SI 175)))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":86 277 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 177)
        (expr_list:REG_DEAD (reg:SI 175)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 114 113 115 10 (set (reg:SI 117 [ _31 ])
        (reg:SI 178)) "E2TLL.f":86 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 178)
        (nil)))
(insn 115 114 116 10 (set (reg:SF 118 [ _32 ])
        (float:SF (reg:SI 117 [ _31 ]))) "E2TLL.f":86 203 {*floatsisf2_mixed}
     (expr_list:REG_DEAD (reg:SI 117 [ _31 ])
        (nil)))
(insn 116 115 117 10 (set (reg:SF 119 [ _33 ])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 117 116 118 10 (set (reg:SF 120 [ _34 ])
        (mult:SF (reg:SF 118 [ _32 ])
            (reg:SF 119 [ _33 ]))) "E2TLL.f":86 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 119 [ _33 ])
        (expr_list:REG_DEAD (reg:SF 118 [ _32 ])
            (nil))))
(insn 118 117 119 10 (set (reg:SF 121 [ _35 ])
        (plus:SF (reg:SF 120 [ _34 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [1 wbd+0 S4 A32]))) "E2TLL.f":86 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 120 [ _34 ])
        (nil)))
(insn 119 118 120 10 (set (reg:SF 122 [ _36 ])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 120 119 121 10 (set (reg:SF 123 [ _37 ])
        (plus:SF (reg:SF 122 [ _36 ])
            (reg:SF 122 [ _36 ]))) "E2TLL.f":86 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 122 [ _36 ])
        (nil)))
(insn 121 120 122 10 (set (reg:SF 179)
        (minus:SF (reg:SF 121 [ _35 ])
            (reg:SF 123 [ _37 ]))) "E2TLL.f":86 841 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 123 [ _37 ])
        (expr_list:REG_DEAD (reg:SF 121 [ _35 ])
            (nil))))
(insn 122 121 123 10 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])
        (reg:SF 179)) "E2TLL.f":86 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 179)
        (nil)))
(insn 123 122 124 10 (set (reg:SI 180)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":87 86 {*movsi_internal}
     (nil))
(insn 124 123 125 10 (parallel [
            (set (reg:SI 124 [ _38 ])
                (plus:SI (reg:SI 180)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":87 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 180)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff]))
                (nil)))))
(insn 125 124 126 10 (set (reg:SF 125 [ _39 ])
        (float:SF (reg:SI 124 [ _38 ]))) "E2TLL.f":87 203 {*floatsisf2_mixed}
     (expr_list:REG_DEAD (reg:SI 124 [ _38 ])
        (nil)))
(insn 126 125 127 10 (set (reg:SF 126 [ _40 ])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 8 [0x8]))) [4 egrid.dphi+0 S4 A64])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 127 126 128 10 (set (reg:SF 127 [ _41 ])
        (mult:SF (reg:SF 125 [ _39 ])
            (reg:SF 126 [ _40 ]))) "E2TLL.f":87 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 126 [ _40 ])
        (expr_list:REG_DEAD (reg:SF 125 [ _39 ])
            (nil))))
(insn 128 127 129 10 (set (reg:SF 182)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [1 sbd+0 S4 A32])) "E2TLL.f":87 131 {*movsf_internal}
     (nil))
(insn 129 128 130 10 (set (reg:SF 181)
        (plus:SF (reg:SF 182)
            (reg:SF 127 [ _41 ]))) "E2TLL.f":87 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 182)
        (expr_list:REG_DEAD (reg:SF 127 [ _41 ])
            (nil))))
(insn 130 129 131 10 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 elat+0 S4 A32])
        (reg:SF 181)) "E2TLL.f":87 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 181)
        (nil)))
(insn 131 130 165 10 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
        (const_int 1 [0x1])) "E2TLL.f":88 86 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;;              12 [always] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 143 183
(code_label 165 131 132 11 8 (nil) [1 uses])
(note 132 165 133 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
            (const_int 119 [0x77]))) "E2TLL.f":88 11 {*cmpsi_1}
     (nil))
(insn 134 133 135 11 (set (reg:QI 183)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2TLL.f":88 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 135 134 136 11 (set (reg:SI 143 [ _85 ])
        (zero_extend:SI (reg:QI 183))) "E2TLL.f":88 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 183)
        (nil)))
(insn 136 135 137 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 143 [ _85 ])
            (const_int 0 [0]))) "E2TLL.f":88 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 143 [ _85 ])
        (nil)))
(jump_insn 137 136 138 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 199)
            (pc))) "E2TLL.f":88 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 199)
;;  succ:       18
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 18, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 128 129 130 131 132 133 134 135 136 137 138 139 184 185 186 187 188 189 190 191 192 193
(note 138 137 139 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 12 (set (reg:SF 128 [ _42 ])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 140 139 141 12 (set (reg:SF 129 [ _43 ])
        (plus:SF (reg:SF 128 [ _42 ])
            (reg:SF 128 [ _42 ]))) "E2TLL.f":89 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 128 [ _42 ])
        (nil)))
(insn 141 140 142 12 (set (reg:SF 185)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])) "E2TLL.f":89 131 {*movsf_internal}
     (nil))
(insn 142 141 143 12 (set (reg:SF 184)
        (plus:SF (reg:SF 185)
            (reg:SF 129 [ _43 ]))) "E2TLL.f":89 838 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 185)
        (expr_list:REG_DEAD (reg:SF 129 [ _43 ])
            (nil))))
(insn 143 142 144 12 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])
        (reg:SF 184)) "E2TLL.f":89 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 184)
        (nil)))
(insn 144 143 145 12 (set (reg:SI 186)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":90 86 {*movsi_internal}
     (nil))
(insn 145 144 146 12 (set (reg:DI 130 [ _44 ])
        (sign_extend:DI (reg:SI 186))) "E2TLL.f":90 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 186)
        (nil)))
(insn 146 145 147 12 (parallel [
            (set (reg:DI 131 [ _45 ])
                (mult:DI (reg:DI 130 [ _44 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":90 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 130 [ _44 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 147 146 148 12 (set (reg:SI 187)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "E2TLL.f":90 86 {*movsi_internal}
     (nil))
(insn 148 147 149 12 (set (reg:DI 132 [ _46 ])
        (sign_extend:DI (reg:SI 187))) "E2TLL.f":90 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 187)
        (nil)))
(insn 149 148 150 12 (parallel [
            (set (reg:DI 133 [ _47 ])
                (plus:DI (reg:DI 131 [ _45 ])
                    (reg:DI 132 [ _46 ])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":90 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 132 [ _46 ])
        (expr_list:REG_DEAD (reg:DI 131 [ _45 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 150 149 151 12 (parallel [
            (set (reg:DI 134 [ _48 ])
                (plus:DI (reg:DI 133 [ _47 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":90 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 133 [ _47 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 151 150 152 12 (set (reg/f:DI 188)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [3 vtlon+0 S8 A64])) "E2TLL.f":90 85 {*movdi_internal}
     (nil))
(insn 152 151 153 12 (set (reg:SF 189)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])) "E2TLL.f":90 131 {*movsf_internal}
     (nil))
(insn 153 152 154 12 (set (mem:SF (plus:DI (mult:DI (reg:DI 134 [ _48 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 188)) [1 *vtlon_87(D) S4 A32])
        (reg:SF 189)) "E2TLL.f":90 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 189)
        (expr_list:REG_DEAD (reg/f:DI 188)
            (expr_list:REG_DEAD (reg:DI 134 [ _48 ])
                (nil)))))
(insn 154 153 155 12 (set (reg:SI 190)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":91 86 {*movsi_internal}
     (nil))
(insn 155 154 156 12 (set (reg:DI 135 [ _49 ])
        (sign_extend:DI (reg:SI 190))) "E2TLL.f":91 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 190)
        (nil)))
(insn 156 155 157 12 (parallel [
            (set (reg:DI 136 [ _50 ])
                (mult:DI (reg:DI 135 [ _49 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":91 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 135 [ _49 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 157 156 158 12 (set (reg:SI 191)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "E2TLL.f":91 86 {*movsi_internal}
     (nil))
(insn 158 157 159 12 (set (reg:DI 137 [ _51 ])
        (sign_extend:DI (reg:SI 191))) "E2TLL.f":91 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 191)
        (nil)))
(insn 159 158 160 12 (parallel [
            (set (reg:DI 138 [ _52 ])
                (plus:DI (reg:DI 136 [ _50 ])
                    (reg:DI 137 [ _51 ])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":91 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 137 [ _51 ])
        (expr_list:REG_DEAD (reg:DI 136 [ _50 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 160 159 161 12 (parallel [
            (set (reg:DI 139 [ _53 ])
                (plus:DI (reg:DI 138 [ _52 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":91 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 138 [ _52 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 161 160 162 12 (set (reg/f:DI 192)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [3 vtlat+0 S8 A64])) "E2TLL.f":91 85 {*movdi_internal}
     (nil))
(insn 162 161 163 12 (set (reg:SF 193)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 elat+0 S4 A32])) "E2TLL.f":91 131 {*movsf_internal}
     (nil))
(insn 163 162 164 12 (set (mem:SF (plus:DI (mult:DI (reg:DI 139 [ _53 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 192)) [1 *vtlat_89(D) S4 A32])
        (reg:SF 193)) "E2TLL.f":91 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 193)
        (expr_list:REG_DEAD (reg/f:DI 192)
            (expr_list:REG_DEAD (reg:DI 139 [ _53 ])
                (nil)))))
(insn 164 163 185 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":88 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 185 164 186 12 (set (pc)
        (label_ref 165)) "E2TLL.f":88 683 {jump}
     (nil)
 -> 165)
;;  succ:       11 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 186 185 199)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL)
;;  pred:       11
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 199 186 198 18 14 (nil) [1 uses])
(note 198 199 200 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 200 198 168 18 (const_int 0 [0]) "E2TLL.f":91 718 {nop}
     (nil))
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 18, next block 17, flags: (RTL)
;;  pred:       18 [always]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 168 200 169 13 7 (nil) [0 uses])
(note 169 168 170 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 187 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":85 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 187 170 188 13 (set (pc)
        (label_ref 171)) "E2TLL.f":85 683 {jump}
     (nil)
 -> 171)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 188 187 196)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 13, next block 14, flags: (RTL)
;;  pred:       9
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 196 188 195 17 13 (nil) [1 uses])
(note 195 196 197 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 197 195 174 17 (const_int 0 [0]) "E2TLL.f":88 718 {nop}
     (nil))
;;  succ:       14 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 17, next block 1, flags: (RTL)
;;  pred:       17 [always]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 174 197 175 14 6 (nil) [0 uses])
(note 175 174 180 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 180 175 0 14 (const_int 0 [0]) "E2TLL.f":97 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

