
;; Function efilt (efilt_, funcdef_no=0, decl_uid=3769, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 27
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 28:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 34
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 35:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 37:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 39:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 40:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 46:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 70:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 73
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 74:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 76:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 77:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 78:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 82:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 88
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 91:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 92:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 93:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 104
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 106
	 Choosing alt 0 in insn 106:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 107:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 108:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 109:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 110:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 114:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 117:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 120
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 122
	 Choosing alt 0 in insn 122:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 123:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 124:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 125:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 126:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 130:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 137
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 139
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 140:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 141:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 142:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 143
	 Choosing alt 1 in insn 143:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 146:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 149:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 151:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 153
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 155:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 156:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 157:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 160:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 162:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 164
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 165:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 166:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 167:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 168:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 170:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 172:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 175
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 176:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 177:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 178:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 179:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 183:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 186
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 187:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 188:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 189:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 1 in insn 190:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 194:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 197
	 Choosing alt 0 in insn 197:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 198:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 199:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 200:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 201:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 202:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 203:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 209:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 215:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 216:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 217:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 218:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 219:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 220
	 Choosing alt 1 in insn 220:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 225:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 227:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 235:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 243:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 252:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 253:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 255:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 256
	 Choosing alt 0 in insn 256:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 257:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 258:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 259:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 260:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 261:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 263:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 264:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 265:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 267:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 268:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 271
	 Choosing alt 0 in insn 271:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 272:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 273
	 Choosing alt 0 in insn 273:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 274:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 275:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 276:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 278:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 280:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 282:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 283:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 287
	 Choosing alt 0 in insn 287:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 288:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 289
	 Choosing alt 0 in insn 289:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 290:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 291:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 292:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 293:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 295:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 296:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 297:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 299:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 300:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 303
	 Choosing alt 0 in insn 303:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 305
	 Choosing alt 0 in insn 305:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 306:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 307:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 308:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 309:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 311:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 312:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 313:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 315:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 316:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 320
	 Choosing alt 0 in insn 320:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 321:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 322
	 Choosing alt 0 in insn 322:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 323:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 324:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 325:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 326
	 Choosing alt 1 in insn 326:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 328:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 329:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 331:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 332:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 334:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 335:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 336
	 Choosing alt 0 in insn 336:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 337:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 338:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 339:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 340:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 342:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 343:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 345:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 346:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 347
	 Choosing alt 0 in insn 347:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 348:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 349:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 350:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 351:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 353:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 354:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 355:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 357:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 358
	 Choosing alt 0 in insn 358:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 359:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 360:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 361:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 362:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 364:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 365:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 366:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 368:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 369
	 Choosing alt 0 in insn 369:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 370:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 371:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 372:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 374:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 375:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 377:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 378
	 Choosing alt 0 in insn 378:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 379:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 380
	 Choosing alt 1 in insn 380:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 381:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 382:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 383:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 389:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 395:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 403:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 406:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 411:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 412:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 413:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 415:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 416
	 Choosing alt 0 in insn 416:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 417:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 418:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 419:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 421:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 422:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 424:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 425
	 Choosing alt 0 in insn 425:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 426:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 427:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 428:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 429:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 431:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 432:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 434:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 435
	 Choosing alt 0 in insn 435:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 436:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 437:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 438:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 440:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 441:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 443:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 444
	 Choosing alt 0 in insn 444:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 445:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 446
	 Choosing alt 1 in insn 446:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 447:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 448:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 449:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 455:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 461:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 467:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 475:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 485:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 488
	 Choosing alt 0 in insn 488:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 489:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 490:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 491:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 494:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 497
	 Choosing alt 0 in insn 497:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 498:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 499:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 500:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 502:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 503:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 506
	 Choosing alt 0 in insn 506:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 507:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 508
	 Choosing alt 1 in insn 508:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 509:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 510:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 511:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 517:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 37
EBB 7
EBB 36
EBB 8
EBB 9 10
EBB 11 12
EBB 39
EBB 13
EBB 38
EBB 14
EBB 15 16
EBB 17 18
EBB 19 20
EBB 42
EBB 21
EBB 41
EBB 22
EBB 23 24
EBB 25 26
EBB 44
EBB 27
EBB 43
EBB 28
EBB 40
EBB 29
EBB 30 31
EBB 32 33
EBB 46
EBB 34
EBB 45
EBB 35

********** Pseudo live ranges #1: **********

  BB 35
   Insn 527: point = 0, n_alt = -1
  BB 45
   Insn 579: point = 0, n_alt = -1
  BB 30
   Insn 473: point = 0, n_alt = -1
   Insn 472: point = 0, n_alt = 0
   Insn 471: point = 1, n_alt = 0
   Insn 470: point = 3, n_alt = 0
   Insn 469: point = 4, n_alt = 0
  BB 34
   Insn 548: point = 4, n_alt = -1
   Insn 517: point = 4, n_alt = 1
  BB 46
   Insn 582: point = 4, n_alt = -1
  BB 32
   Insn 481: point = 4, n_alt = -1
   Insn 480: point = 4, n_alt = 0
   Insn 479: point = 5, n_alt = 0
   Insn 478: point = 7, n_alt = 0
   Insn 477: point = 8, n_alt = 0
  BB 33
   Insn 546: point = 8, n_alt = -1
   Insn 511: point = 8, n_alt = 1
   Insn 510: point = 8, n_alt = 8
   Insn 509: point = 9, n_alt = 3
   Insn 508: point = 10, n_alt = 1
   Insn 507: point = 12, n_alt = 3
   Insn 506: point = 14, n_alt = 0
   Insn 505: point = 16, n_alt = 0
   Insn 504: point = 18, n_alt = 0
   Insn 503: point = 19, n_alt = 0
   Insn 502: point = 21, n_alt = 0
   Insn 501: point = 23, n_alt = 0
   Insn 500: point = 24, n_alt = 7
   Insn 499: point = 26, n_alt = 4
   Insn 498: point = 27, n_alt = 3
   Insn 497: point = 29, n_alt = 0
   Insn 496: point = 31, n_alt = 0
   Insn 495: point = 33, n_alt = 0
   Insn 494: point = 34, n_alt = 0
   Insn 493: point = 36, n_alt = 0
   Insn 492: point = 38, n_alt = 0
   Insn 491: point = 39, n_alt = 7
   Insn 490: point = 41, n_alt = 4
   Insn 489: point = 42, n_alt = 3
   Insn 488: point = 44, n_alt = 0
   Insn 487: point = 46, n_alt = 0
   Insn 486: point = 48, n_alt = 0
   Insn 485: point = 49, n_alt = 0
   Insn 484: point = 51, n_alt = 0
   Insn 483: point = 53, n_alt = 0
  BB 31
   Insn 475: point = 54, n_alt = 1
  BB 29
   Insn 467: point = 54, n_alt = 1
  BB 40
   Insn 564: point = 54, n_alt = -1
  BB 15
   Insn 233: point = 54, n_alt = -1
   Insn 232: point = 54, n_alt = 0
   Insn 231: point = 55, n_alt = 0
   Insn 230: point = 57, n_alt = 0
   Insn 229: point = 58, n_alt = 0
  BB 28
   Insn 544: point = 59, n_alt = -1
   Insn 461: point = 59, n_alt = 1
  BB 43
   Insn 573: point = 60, n_alt = -1
  BB 23
   Insn 401: point = 61, n_alt = -1
   Insn 400: point = 61, n_alt = 0
   Insn 399: point = 62, n_alt = 0
   Insn 398: point = 64, n_alt = 0
   Insn 397: point = 65, n_alt = 0
  BB 27
   Insn 542: point = 66, n_alt = -1
   Insn 455: point = 66, n_alt = 1
  BB 44
   Insn 576: point = 67, n_alt = -1
  BB 25
   Insn 409: point = 68, n_alt = -1
   Insn 408: point = 68, n_alt = 0
   Insn 407: point = 69, n_alt = 0
   Insn 406: point = 71, n_alt = 0
   Insn 405: point = 72, n_alt = 0
  BB 26
   Insn 540: point = 73, n_alt = -1
   Insn 449: point = 73, n_alt = 1
   Insn 448: point = 73, n_alt = 8
   Insn 447: point = 74, n_alt = 4
   Insn 446: point = 75, n_alt = 1
   Insn 445: point = 77, n_alt = 3
   Insn 444: point = 79, n_alt = 0
   Insn 443: point = 81, n_alt = 1
   Insn 442: point = 83, n_alt = 0
   Insn 441: point = 84, n_alt = 0
   Insn 440: point = 86, n_alt = 1
   Insn 439: point = 88, n_alt = 0
   Insn 438: point = 89, n_alt = 7
   Insn 437: point = 91, n_alt = 4
   Insn 436: point = 92, n_alt = 3
   Insn 435: point = 94, n_alt = 0
   Insn 434: point = 96, n_alt = 1
   Insn 433: point = 98, n_alt = 0
   Insn 432: point = 99, n_alt = 0
   Insn 431: point = 101, n_alt = 1
   Insn 430: point = 103, n_alt = 0
   Insn 429: point = 104, n_alt = 1
   Insn 428: point = 106, n_alt = 7
   Insn 427: point = 108, n_alt = 4
   Insn 426: point = 109, n_alt = 3
   Insn 425: point = 111, n_alt = 0
   Insn 424: point = 113, n_alt = 1
   Insn 423: point = 115, n_alt = 0
   Insn 422: point = 116, n_alt = 0
   Insn 421: point = 118, n_alt = 1
   Insn 420: point = 120, n_alt = 0
   Insn 419: point = 121, n_alt = 7
   Insn 418: point = 123, n_alt = 4
   Insn 417: point = 124, n_alt = 3
   Insn 416: point = 126, n_alt = 0
   Insn 415: point = 128, n_alt = 1
   Insn 414: point = 130, n_alt = 0
   Insn 413: point = 131, n_alt = 0
   Insn 412: point = 133, n_alt = 1
   Insn 411: point = 135, n_alt = 0
  BB 24
   Insn 403: point = 137, n_alt = 1
  BB 22
   Insn 395: point = 138, n_alt = 1
  BB 41
   Insn 567: point = 139, n_alt = -1
  BB 17
   Insn 241: point = 140, n_alt = -1
   Insn 240: point = 140, n_alt = 0
   Insn 239: point = 141, n_alt = 0
   Insn 238: point = 143, n_alt = 0
   Insn 237: point = 144, n_alt = 0
  BB 21
   Insn 538: point = 145, n_alt = -1
   Insn 389: point = 145, n_alt = 1
  BB 42
   Insn 570: point = 146, n_alt = -1
  BB 19
   Insn 249: point = 147, n_alt = -1
   Insn 248: point = 147, n_alt = 0
   Insn 247: point = 148, n_alt = 0
   Insn 246: point = 150, n_alt = 0
   Insn 245: point = 151, n_alt = 0
  BB 20
   Insn 536: point = 152, n_alt = -1
   Insn 383: point = 152, n_alt = 1
   Insn 382: point = 152, n_alt = 8
   Insn 381: point = 153, n_alt = 4
   Insn 380: point = 154, n_alt = 1
   Insn 379: point = 156, n_alt = 3
   Insn 378: point = 158, n_alt = 0
   Insn 377: point = 160, n_alt = 1
   Insn 376: point = 162, n_alt = 0
   Insn 375: point = 163, n_alt = 0
   Insn 374: point = 165, n_alt = 1
   Insn 373: point = 167, n_alt = 0
   Insn 372: point = 168, n_alt = 7
   Insn 371: point = 170, n_alt = 4
   Insn 370: point = 171, n_alt = 3
   Insn 369: point = 173, n_alt = 0
   Insn 368: point = 175, n_alt = 1
   Insn 367: point = 177, n_alt = 0
   Insn 366: point = 178, n_alt = 0
   Insn 365: point = 180, n_alt = 1
   Insn 364: point = 182, n_alt = 0
   Insn 363: point = 184, n_alt = 0
   Insn 362: point = 185, n_alt = 1
   Insn 361: point = 187, n_alt = 7
   Insn 360: point = 189, n_alt = 4
   Insn 359: point = 190, n_alt = 3
   Insn 358: point = 192, n_alt = 0
   Insn 357: point = 194, n_alt = 1
   Insn 356: point = 196, n_alt = 0
   Insn 355: point = 197, n_alt = 0
   Insn 354: point = 199, n_alt = 1
   Insn 353: point = 201, n_alt = 0
   Insn 352: point = 203, n_alt = 0
   Insn 351: point = 204, n_alt = 1
   Insn 350: point = 206, n_alt = 7
   Insn 349: point = 208, n_alt = 4
   Insn 348: point = 209, n_alt = 3
   Insn 347: point = 211, n_alt = 0
   Insn 346: point = 213, n_alt = 1
   Insn 345: point = 215, n_alt = 0
   Insn 344: point = 217, n_alt = 0
   Insn 343: point = 218, n_alt = 0
   Insn 342: point = 220, n_alt = 1
   Insn 341: point = 222, n_alt = 0
   Insn 340: point = 223, n_alt = 1
   Insn 339: point = 225, n_alt = 7
   Insn 338: point = 227, n_alt = 4
   Insn 337: point = 228, n_alt = 3
   Insn 336: point = 230, n_alt = 0
   Insn 335: point = 232, n_alt = 1
   Insn 334: point = 234, n_alt = 0
   Insn 333: point = 236, n_alt = 0
   Insn 332: point = 237, n_alt = 0
   Insn 331: point = 239, n_alt = 1
   Insn 330: point = 241, n_alt = 0
   Insn 329: point = 242, n_alt = 1
   Insn 328: point = 244, n_alt = 1
   Insn 327: point = 246, n_alt = -2
   Insn 326: point = 248, n_alt = 1
   Insn 325: point = 250, n_alt = 7
   Insn 324: point = 252, n_alt = 4
   Insn 323: point = 253, n_alt = 3
   Insn 322: point = 255, n_alt = 0
   Insn 321: point = 257, n_alt = 1
   Insn 320: point = 259, n_alt = 0
   Insn 319: point = 261, n_alt = 0
   Insn 318: point = 262, n_alt = 0
   Insn 317: point = 264, n_alt = 0
   Insn 316: point = 266, n_alt = 0
   Insn 315: point = 268, n_alt = 1
   Insn 314: point = 270, n_alt = 0
   Insn 313: point = 271, n_alt = 0
   Insn 312: point = 273, n_alt = 1
   Insn 311: point = 275, n_alt = 0
   Insn 310: point = 277, n_alt = 0
   Insn 309: point = 278, n_alt = 1
   Insn 308: point = 280, n_alt = 7
   Insn 307: point = 282, n_alt = 4
   Insn 306: point = 283, n_alt = 3
   Insn 305: point = 285, n_alt = 0
   Insn 304: point = 287, n_alt = 1
   Insn 303: point = 289, n_alt = 0
   Insn 302: point = 291, n_alt = 0
   Insn 301: point = 292, n_alt = 0
   Insn 300: point = 294, n_alt = 0
   Insn 299: point = 296, n_alt = 1
   Insn 298: point = 298, n_alt = 0
   Insn 297: point = 299, n_alt = 0
   Insn 296: point = 301, n_alt = 1
   Insn 295: point = 303, n_alt = 0
   Insn 294: point = 305, n_alt = 0
   Insn 293: point = 306, n_alt = 1
   Insn 292: point = 308, n_alt = 7
   Insn 291: point = 310, n_alt = 4
   Insn 290: point = 311, n_alt = 3
   Insn 289: point = 313, n_alt = 0
   Insn 288: point = 315, n_alt = 1
   Insn 287: point = 317, n_alt = 0
   Insn 286: point = 319, n_alt = 0
   Insn 285: point = 320, n_alt = 0
   Insn 284: point = 322, n_alt = 0
   Insn 283: point = 324, n_alt = 0
   Insn 282: point = 326, n_alt = 1
   Insn 281: point = 328, n_alt = 0
   Insn 280: point = 329, n_alt = 0
   Insn 279: point = 331, n_alt = 1
   Insn 278: point = 333, n_alt = 0
   Insn 277: point = 335, n_alt = 0
   Insn 276: point = 336, n_alt = 7
   Insn 275: point = 338, n_alt = 4
   Insn 274: point = 339, n_alt = 3
   Insn 273: point = 341, n_alt = 0
   Insn 272: point = 343, n_alt = 1
   Insn 271: point = 345, n_alt = 0
   Insn 270: point = 347, n_alt = 0
   Insn 269: point = 348, n_alt = 0
   Insn 268: point = 350, n_alt = 0
   Insn 267: point = 352, n_alt = 1
   Insn 266: point = 354, n_alt = 0
   Insn 265: point = 355, n_alt = 0
   Insn 264: point = 357, n_alt = 1
   Insn 263: point = 359, n_alt = 0
   Insn 262: point = 361, n_alt = 0
   Insn 261: point = 362, n_alt = 1
   Insn 260: point = 364, n_alt = 7
   Insn 259: point = 365, n_alt = 7
   Insn 258: point = 367, n_alt = 4
   Insn 257: point = 368, n_alt = 3
   Insn 256: point = 370, n_alt = 0
   Insn 255: point = 372, n_alt = 1
   Insn 254: point = 374, n_alt = 0
   Insn 253: point = 375, n_alt = 0
   Insn 252: point = 377, n_alt = 1
   Insn 251: point = 379, n_alt = 0
  BB 18
   Insn 243: point = 381, n_alt = 1
  BB 16
   Insn 235: point = 382, n_alt = 1
  BB 14
   Insn 227: point = 383, n_alt = 1
   Insn 226: point = 383, n_alt = 0
   Insn 225: point = 384, n_alt = 1
   Insn 224: point = 385, n_alt = -2
   Insn 223: point = 387, n_alt = -2
   Insn 222: point = 388, n_alt = 0
   Insn 221: point = 388, n_alt = -2
   Insn 220: point = 389, n_alt = 1
   Insn 219: point = 391, n_alt = 7
   Insn 218: point = 392, n_alt = 1
   Insn 217: point = 394, n_alt = 7
   Insn 216: point = 395, n_alt = 7
   Insn 215: point = 397, n_alt = 4
  BB 38
   Insn 558: point = 398, n_alt = -1
  BB 9
   Insn 58: point = 398, n_alt = -1
   Insn 57: point = 398, n_alt = 0
   Insn 56: point = 399, n_alt = 0
   Insn 55: point = 401, n_alt = 0
   Insn 54: point = 402, n_alt = 0
  BB 13
   Insn 534: point = 402, n_alt = -1
   Insn 209: point = 402, n_alt = 1
  BB 39
   Insn 561: point = 402, n_alt = -1
  BB 11
   Insn 66: point = 402, n_alt = -1
   Insn 65: point = 402, n_alt = 0
   Insn 64: point = 403, n_alt = 0
   Insn 63: point = 405, n_alt = 0
   Insn 62: point = 406, n_alt = 0
  BB 12
   Insn 532: point = 406, n_alt = -1
   Insn 203: point = 406, n_alt = 1
   Insn 202: point = 406, n_alt = 8
   Insn 201: point = 407, n_alt = 4
   Insn 200: point = 408, n_alt = 2
   Insn 199: point = 410, n_alt = 7
   Insn 198: point = 411, n_alt = 3
   Insn 197: point = 413, n_alt = 0
   Insn 196: point = 415, n_alt = 0
   Insn 195: point = 417, n_alt = 0
   Insn 194: point = 418, n_alt = 0
   Insn 193: point = 420, n_alt = 0
   Insn 192: point = 422, n_alt = 0
   Insn 191: point = 423, n_alt = -2
   Insn 190: point = 425, n_alt = 1
   Insn 189: point = 427, n_alt = 7
   Insn 188: point = 429, n_alt = 4
   Insn 187: point = 430, n_alt = 3
   Insn 186: point = 432, n_alt = 0
   Insn 185: point = 434, n_alt = 0
   Insn 184: point = 436, n_alt = 0
   Insn 183: point = 437, n_alt = 0
   Insn 182: point = 439, n_alt = 0
   Insn 181: point = 441, n_alt = 0
   Insn 180: point = 443, n_alt = 0
   Insn 179: point = 444, n_alt = 1
   Insn 178: point = 446, n_alt = 7
   Insn 177: point = 448, n_alt = 4
   Insn 176: point = 449, n_alt = 3
   Insn 175: point = 451, n_alt = 0
   Insn 174: point = 453, n_alt = 0
   Insn 173: point = 455, n_alt = 0
   Insn 172: point = 456, n_alt = 0
   Insn 171: point = 458, n_alt = 0
   Insn 170: point = 460, n_alt = 0
   Insn 169: point = 462, n_alt = 0
   Insn 168: point = 463, n_alt = 1
   Insn 167: point = 465, n_alt = 7
   Insn 166: point = 467, n_alt = 4
   Insn 165: point = 468, n_alt = 3
   Insn 164: point = 470, n_alt = 0
   Insn 163: point = 472, n_alt = 0
   Insn 162: point = 474, n_alt = 0
   Insn 161: point = 476, n_alt = 0
   Insn 160: point = 477, n_alt = 0
   Insn 159: point = 479, n_alt = 0
   Insn 158: point = 481, n_alt = 0
   Insn 157: point = 482, n_alt = 1
   Insn 156: point = 484, n_alt = 7
   Insn 155: point = 486, n_alt = 4
   Insn 154: point = 487, n_alt = 3
   Insn 153: point = 489, n_alt = 0
   Insn 152: point = 491, n_alt = 0
   Insn 151: point = 493, n_alt = 0
   Insn 150: point = 495, n_alt = 0
   Insn 149: point = 496, n_alt = 0
   Insn 148: point = 498, n_alt = 0
   Insn 147: point = 500, n_alt = 0
   Insn 146: point = 501, n_alt = 1
   Insn 145: point = 503, n_alt = 1
   Insn 144: point = 505, n_alt = -2
   Insn 143: point = 507, n_alt = 1
   Insn 142: point = 509, n_alt = 7
   Insn 141: point = 511, n_alt = 4
   Insn 140: point = 512, n_alt = 3
   Insn 139: point = 514, n_alt = 0
   Insn 138: point = 516, n_alt = 0
   Insn 137: point = 518, n_alt = 0
   Insn 136: point = 520, n_alt = 0
   Insn 135: point = 521, n_alt = 0
   Insn 134: point = 523, n_alt = 0
   Insn 133: point = 525, n_alt = 0
   Insn 132: point = 527, n_alt = 0
   Insn 131: point = 529, n_alt = 0
   Insn 130: point = 530, n_alt = 0
   Insn 129: point = 532, n_alt = 0
   Insn 128: point = 534, n_alt = 0
   Insn 127: point = 536, n_alt = 0
   Insn 126: point = 537, n_alt = 1
   Insn 125: point = 539, n_alt = 7
   Insn 124: point = 541, n_alt = 4
   Insn 123: point = 542, n_alt = 3
   Insn 122: point = 544, n_alt = 0
   Insn 121: point = 546, n_alt = 0
   Insn 120: point = 548, n_alt = 0
   Insn 119: point = 550, n_alt = 0
   Insn 118: point = 551, n_alt = 0
   Insn 117: point = 553, n_alt = 0
   Insn 116: point = 555, n_alt = 0
   Insn 115: point = 557, n_alt = 0
   Insn 114: point = 558, n_alt = 0
   Insn 113: point = 560, n_alt = 0
   Insn 112: point = 562, n_alt = 0
   Insn 111: point = 564, n_alt = 0
   Insn 110: point = 565, n_alt = 1
   Insn 109: point = 567, n_alt = 7
   Insn 108: point = 569, n_alt = 4
   Insn 107: point = 570, n_alt = 3
   Insn 106: point = 572, n_alt = 0
   Insn 105: point = 574, n_alt = 0
   Insn 104: point = 576, n_alt = 0
   Insn 103: point = 578, n_alt = 0
   Insn 102: point = 579, n_alt = 0
   Insn 101: point = 581, n_alt = 0
   Insn 100: point = 583, n_alt = 0
   Insn 99: point = 585, n_alt = 0
   Insn 98: point = 587, n_alt = 0
   Insn 97: point = 588, n_alt = 0
   Insn 96: point = 590, n_alt = 0
   Insn 95: point = 592, n_alt = 0
   Insn 94: point = 594, n_alt = 0
   Insn 93: point = 595, n_alt = 7
   Insn 92: point = 597, n_alt = 4
   Insn 91: point = 598, n_alt = 3
   Insn 90: point = 600, n_alt = 0
   Insn 89: point = 602, n_alt = 0
   Insn 88: point = 604, n_alt = 0
   Insn 87: point = 606, n_alt = 0
   Insn 86: point = 607, n_alt = 0
   Insn 85: point = 609, n_alt = 0
   Insn 84: point = 611, n_alt = 0
   Insn 83: point = 613, n_alt = 0
   Insn 82: point = 614, n_alt = 0
   Insn 81: point = 616, n_alt = 0
   Insn 80: point = 618, n_alt = 0
   Insn 79: point = 620, n_alt = 0
   Insn 78: point = 621, n_alt = 1
   Insn 77: point = 623, n_alt = 7
   Insn 76: point = 624, n_alt = 7
   Insn 75: point = 626, n_alt = 4
   Insn 74: point = 627, n_alt = 3
   Insn 73: point = 629, n_alt = 0
   Insn 72: point = 631, n_alt = 0
   Insn 71: point = 633, n_alt = 0
   Insn 70: point = 634, n_alt = 0
   Insn 69: point = 636, n_alt = 0
   Insn 68: point = 638, n_alt = 0
  BB 10
   Insn 60: point = 639, n_alt = 1
  BB 8
   Insn 52: point = 639, n_alt = 1
  BB 36
   Insn 552: point = 639, n_alt = -1
  BB 3
   Insn 12: point = 639, n_alt = -1
   Insn 11: point = 639, n_alt = 0
   Insn 10: point = 640, n_alt = 0
   Insn 9: point = 642, n_alt = 0
   Insn 8: point = 643, n_alt = 0
  BB 7
   Insn 530: point = 643, n_alt = -1
   Insn 46: point = 643, n_alt = 1
  BB 37
   Insn 555: point = 643, n_alt = -1
  BB 5
   Insn 20: point = 643, n_alt = -1
   Insn 19: point = 643, n_alt = 0
   Insn 18: point = 644, n_alt = 0
   Insn 17: point = 646, n_alt = 0
   Insn 16: point = 647, n_alt = 0
  BB 6
   Insn 528: point = 647, n_alt = -1
   Insn 40: point = 647, n_alt = 1
   Insn 39: point = 647, n_alt = 8
   Insn 38: point = 648, n_alt = 4
   Insn 37: point = 649, n_alt = 7
   Insn 36: point = 651, n_alt = 3
   Insn 35: point = 652, n_alt = 3
   Insn 34: point = 654, n_alt = 0
   Insn 33: point = 656, n_alt = 0
   Insn 32: point = 658, n_alt = 0
   Insn 31: point = 659, n_alt = 0
   Insn 30: point = 661, n_alt = 0
   Insn 29: point = 663, n_alt = 0
   Insn 28: point = 664, n_alt = 3
   Insn 27: point = 666, n_alt = 0
   Insn 26: point = 668, n_alt = 0
   Insn 25: point = 670, n_alt = 0
   Insn 24: point = 671, n_alt = 0
   Insn 23: point = 673, n_alt = 0
   Insn 22: point = 675, n_alt = 0
  BB 4
   Insn 14: point = 676, n_alt = 1
  BB 2
   Insn 6: point = 676, n_alt = 1
   Insn 2: point = 676, n_alt = 5
 r87: [672..673]
 r88: [667..671]
 r89: [667..668]
 r90: [665..666]
 r91: [650..664]
 r92: [660..661]
 r93: [655..659]
 r94: [655..656]
 r95: [653..654]
 r96: [647..652]
 r97: [647..649]
 r98: [635..636]
 r99: [630..634]
 r100: [630..631]
 r101: [628..629]
 r102: [625..627]
 r103: [622..624]
 r104: [502..621]
 r105: [617..618]
 r106: [615..616]
 r107: [601..614]
 r108: [610..611]
 r109: [608..609]
 r110: [605..607]
 r111: [603..604]
 r112: [601..602]
 r113: [599..600]
 r114: [596..598]
 r115: [566..595]
 r116: [591..592]
 r117: [589..590]
 r118: [573..588]
 r119: [584..585]
 r120: [582..583]
 r121: [577..579]
 r122: [575..576]
 r123: [573..574]
 r124: [571..572]
 r125: [568..570]
 r126: [566..567]
 r127: [538..565]
 r128: [561..562]
 r129: [559..560]
 r130: [545..558]
 r131: [554..555]
 r132: [552..553]
 r133: [549..551]
 r134: [547..548]
 r135: [545..546]
 r136: [543..544]
 r137: [540..542]
 r138: [538..539]
 r139: [508..537]
 r140: [533..534]
 r141: [531..532]
 r142: [515..530]
 r143: [526..527]
 r144: [524..525]
 r145: [519..521]
 r146: [517..518]
 r147: [515..516]
 r148: [513..514]
 r149: [510..512]
 r150: [508..509]
 r151: [506..507]
 r152: [504..505]
 r153: [502..503]
 r154: [483..501]
 r155: [497..498]
 r156: [490..496]
 r157: [492..493]
 r158: [490..491]
 r159: [488..489]
 r160: [485..487]
 r161: [483..484]
 r162: [464..482]
 r163: [478..479]
 r164: [471..477]
 r165: [473..474]
 r166: [471..472]
 r167: [469..470]
 r168: [466..468]
 r169: [464..465]
 r170: [445..463]
 r171: [459..460]
 r172: [457..458]
 r173: [452..456]
 r174: [452..453]
 r175: [450..451]
 r176: [447..449]
 r177: [445..446]
 r178: [426..444]
 r179: [440..441]
 r180: [438..439]
 r181: [433..437]
 r182: [433..434]
 r183: [431..432]
 r184: [428..430]
 r185: [426..427]
 r186: [424..425]
 r187: [409..423]
 r188: [419..420]
 r189: [414..418]
 r190: [414..415]
 r191: [412..413]
 r192: [406..411]
 r193: [406..408]
 r194: [393..395]
 r195: [390..392]
 r196: [388..389]
 r197: [376..377]
 r198: [371..375]
 r199: [371..372]
 r200: [369..370]
 r201: [366..368]
 r202: [363..365]
 r203: [243..362]
 r204: [358..359]
 r205: [356..357]
 r206: [342..355]
 r207: [351..352]
 r208: [349..350]
 r209: [346..348]
 r210: [344..345]
 r211: [342..343]
 r212: [340..341]
 r213: [337..339]
 r214: [307..336]
 r215: [332..333]
 r216: [330..331]
 r217: [314..329]
 r218: [325..326]
 r219: [323..324]
 r220: [318..320]
 r221: [316..317]
 r222: [314..315]
 r223: [312..313]
 r224: [309..311]
 r225: [307..308]
 r226: [279..306]
 r227: [302..303]
 r228: [300..301]
 r229: [286..299]
 r230: [295..296]
 r231: [293..294]
 r232: [290..292]
 r233: [288..289]
 r234: [286..287]
 r235: [284..285]
 r236: [281..283]
 r237: [279..280]
 r238: [249..278]
 r239: [274..275]
 r240: [272..273]
 r241: [256..271]
 r242: [267..268]
 r243: [265..266]
 r244: [260..262]
 r245: [258..259]
 r246: [256..257]
 r247: [254..255]
 r248: [251..253]
 r249: [249..250]
 r250: [247..248]
 r251: [245..246]
 r252: [243..244]
 r253: [224..242]
 r254: [238..239]
 r255: [231..237]
 r256: [233..234]
 r257: [231..232]
 r258: [229..230]
 r259: [226..228]
 r260: [224..225]
 r261: [205..223]
 r262: [219..220]
 r263: [212..218]
 r264: [214..215]
 r265: [212..213]
 r266: [210..211]
 r267: [207..209]
 r268: [205..206]
 r269: [186..204]
 r270: [200..201]
 r271: [198..199]
 r272: [193..197]
 r273: [193..194]
 r274: [191..192]
 r275: [188..190]
 r276: [186..187]
 r277: [155..185]
 r278: [181..182]
 r279: [179..180]
 r280: [174..178]
 r281: [174..175]
 r282: [172..173]
 r283: [169..171]
 r284: [155..168]
 r285: [164..165]
 r286: [159..163]
 r287: [159..160]
 r288: [157..158]
 r289: [152..156]
 r290: [152..154]
 r291: [132..133]
 r292: [127..131]
 r293: [127..128]
 r294: [125..126]
 r295: [122..124]
 r296: [105..121]
 r297: [117..118]
 r298: [112..116]
 r299: [112..113]
 r300: [110..111]
 r301: [107..109]
 r302: [105..106]
 r303: [76..104]
 r304: [100..101]
 r305: [95..99]
 r306: [95..96]
 r307: [93..94]
 r308: [90..92]
 r309: [76..89]
 r310: [85..86]
 r311: [80..84]
 r312: [80..81]
 r313: [78..79]
 r314: [73..77]
 r315: [73..75]
 r316: [50..51]
 r317: [45..49]
 r318: [45..46]
 r319: [43..44]
 r320: [40..42]
 r321: [11..39]
 r322: [35..36]
 r323: [30..34]
 r324: [30..31]
 r325: [28..29]
 r326: [25..27]
 r327: [11..24]
 r328: [20..21]
 r329: [15..19]
 r330: [15..16]
 r331: [13..14]
 r332: [8..12]
 r333: [8..10]
 r334: [639..640]
 r335: [643..644]
 r336: [398..399]
 r337: [402..403]
 r338: [54..383]
 r339: [54..55]
 r340: [140..141]
 r341: [147..148]
 r342: [61..62]
 r343: [68..69]
 r344: [0..1]
 r345: [4..5]
 r346: [641..642]
 r347: [645..646]
 r348: [674..675]
 r349: [669..670]
 r350: [662..663]
 r351: [657..658]
 r352: [650..651]
 r353: [647..648]
 r354: [400..401]
 r355: [404..405]
 r356: [637..638]
 r357: [632..633]
 r358: [625..626]
 r359: [622..623]
 r360: [619..620]
 r361: [612..613]
 r362: [605..606]
 r363: [596..597]
 r364: [593..594]
 r365: [586..587]
 r366: [580..581]
 r367: [577..578]
 r368: [568..569]
 r369: [563..564]
 r370: [556..557]
 r371: [549..550]
 r372: [540..541]
 r373: [535..536]
 r374: [528..529]
 r375: [522..523]
 r376: [519..520]
 r377: [510..511]
 r378: [499..500]
 r379: [494..495]
 r380: [485..486]
 r381: [480..481]
 r382: [475..476]
 r383: [466..467]
 r384: [461..462]
 r385: [454..455]
 r386: [447..448]
 r387: [442..443]
 r388: [435..436]
 r389: [428..429]
 r390: [421..422]
 r391: [416..417]
 r392: [409..410]
 r393: [406..407]
 r394: [396..397]
 r395: [393..394]
 r396: [390..391]
 r398: [386..387]
 r399: [384..385]
 r400: [56..57]
 r401: [142..143]
 r402: [149..150]
 r403: [378..379]
 r404: [373..374]
 r405: [366..367]
 r406: [363..364]
 r407: [360..361]
 r408: [353..354]
 r409: [346..347]
 r410: [337..338]
 r411: [334..335]
 r412: [327..328]
 r413: [321..322]
 r414: [318..319]
 r415: [309..310]
 r416: [304..305]
 r417: [297..298]
 r418: [290..291]
 r419: [281..282]
 r420: [276..277]
 r421: [269..270]
 r422: [263..264]
 r423: [260..261]
 r424: [251..252]
 r425: [240..241]
 r426: [235..236]
 r427: [226..227]
 r428: [221..222]
 r429: [216..217]
 r430: [207..208]
 r431: [202..203]
 r432: [195..196]
 r433: [188..189]
 r434: [183..184]
 r435: [176..177]
 r436: [169..170]
 r437: [166..167]
 r438: [161..162]
 r439: [152..153]
 r440: [63..64]
 r441: [70..71]
 r442: [134..135]
 r443: [129..130]
 r444: [122..123]
 r445: [119..120]
 r446: [114..115]
 r447: [107..108]
 r448: [102..103]
 r449: [97..98]
 r450: [90..91]
 r451: [87..88]
 r452: [82..83]
 r453: [73..74]
 r454: [2..3]
 r455: [6..7]
 r456: [52..53]
 r457: [47..48]
 r458: [40..41]
 r459: [37..38]
 r460: [32..33]
 r461: [25..26]
 r462: [22..23]
 r463: [17..18]
 r464: [8..9]
Compressing live ranges: from 676 to 562 - 83%
Ranges after the compression:
 r87: [558..559]
 r88: [554..557]
 r89: [554..555]
 r90: [552..553]
 r91: [540..551]
 r92: [548..549]
 r93: [544..547]
 r94: [544..545]
 r95: [542..543]
 r96: [538..541]
 r97: [538..539]
 r98: [526..527]
 r99: [522..525]
 r100: [522..523]
 r101: [520..521]
 r102: [518..519]
 r103: [516..517]
 r104: [412..515]
 r105: [512..513]
 r106: [510..511]
 r107: [498..509]
 r108: [506..507]
 r109: [504..505]
 r110: [502..503]
 r111: [500..501]
 r112: [498..499]
 r113: [496..497]
 r114: [494..495]
 r115: [468..493]
 r116: [490..491]
 r117: [488..489]
 r118: [474..487]
 r119: [484..485]
 r120: [482..483]
 r121: [478..479]
 r122: [476..477]
 r123: [474..475]
 r124: [472..473]
 r125: [470..471]
 r126: [468..469]
 r127: [444..467]
 r128: [464..465]
 r129: [462..463]
 r130: [450..461]
 r131: [458..459]
 r132: [456..457]
 r133: [454..455]
 r134: [452..453]
 r135: [450..451]
 r136: [448..449]
 r137: [446..447]
 r138: [444..445]
 r139: [418..443]
 r140: [440..441]
 r141: [438..439]
 r142: [424..437]
 r143: [434..435]
 r144: [432..433]
 r145: [428..429]
 r146: [426..427]
 r147: [424..425]
 r148: [422..423]
 r149: [420..421]
 r150: [418..419]
 r151: [416..417]
 r152: [414..415]
 r153: [412..413]
 r154: [396..411]
 r155: [408..409]
 r156: [402..407]
 r157: [404..405]
 r158: [402..403]
 r159: [400..401]
 r160: [398..399]
 r161: [396..397]
 r162: [380..395]
 r163: [392..393]
 r164: [386..391]
 r165: [388..389]
 r166: [386..387]
 r167: [384..385]
 r168: [382..383]
 r169: [380..381]
 r170: [364..379]
 r171: [376..377]
 r172: [374..375]
 r173: [370..373]
 r174: [370..371]
 r175: [368..369]
 r176: [366..367]
 r177: [364..365]
 r178: [348..363]
 r179: [360..361]
 r180: [358..359]
 r181: [354..357]
 r182: [354..355]
 r183: [352..353]
 r184: [350..351]
 r185: [348..349]
 r186: [346..347]
 r187: [334..345]
 r188: [342..343]
 r189: [338..341]
 r190: [338..339]
 r191: [336..337]
 r192: [332..335]
 r193: [332..333]
 r194: [320..321]
 r195: [318..319]
 r196: [316..317]
 r197: [308..309]
 r198: [304..307]
 r199: [304..305]
 r200: [302..303]
 r201: [300..301]
 r202: [298..299]
 r203: [194..297]
 r204: [294..295]
 r205: [292..293]
 r206: [280..291]
 r207: [288..289]
 r208: [286..287]
 r209: [284..285]
 r210: [282..283]
 r211: [280..281]
 r212: [278..279]
 r213: [276..277]
 r214: [250..275]
 r215: [272..273]
 r216: [270..271]
 r217: [256..269]
 r218: [266..267]
 r219: [264..265]
 r220: [260..261]
 r221: [258..259]
 r222: [256..257]
 r223: [254..255]
 r224: [252..253]
 r225: [250..251]
 r226: [226..249]
 r227: [246..247]
 r228: [244..245]
 r229: [232..243]
 r230: [240..241]
 r231: [238..239]
 r232: [236..237]
 r233: [234..235]
 r234: [232..233]
 r235: [230..231]
 r236: [228..229]
 r237: [226..227]
 r238: [200..225]
 r239: [222..223]
 r240: [220..221]
 r241: [206..219]
 r242: [216..217]
 r243: [214..215]
 r244: [210..211]
 r245: [208..209]
 r246: [206..207]
 r247: [204..205]
 r248: [202..203]
 r249: [200..201]
 r250: [198..199]
 r251: [196..197]
 r252: [194..195]
 r253: [178..193]
 r254: [190..191]
 r255: [184..189]
 r256: [186..187]
 r257: [184..185]
 r258: [182..183]
 r259: [180..181]
 r260: [178..179]
 r261: [162..177]
 r262: [174..175]
 r263: [168..173]
 r264: [170..171]
 r265: [168..169]
 r266: [166..167]
 r267: [164..165]
 r268: [162..163]
 r269: [146..161]
 r270: [158..159]
 r271: [156..157]
 r272: [152..155]
 r273: [152..153]
 r274: [150..151]
 r275: [148..149]
 r276: [146..147]
 r277: [120..145]
 r278: [142..143]
 r279: [140..141]
 r280: [136..139]
 r281: [136..137]
 r282: [134..135]
 r283: [132..133]
 r284: [120..131]
 r285: [128..129]
 r286: [124..127]
 r287: [124..125]
 r288: [122..123]
 r289: [118..121]
 r290: [118..119]
 r291: [106..107]
 r292: [102..105]
 r293: [102..103]
 r294: [100..101]
 r295: [98..99]
 r296: [84..97]
 r297: [94..95]
 r298: [90..93]
 r299: [90..91]
 r300: [88..89]
 r301: [86..87]
 r302: [84..85]
 r303: [60..83]
 r304: [80..81]
 r305: [76..79]
 r306: [76..77]
 r307: [74..75]
 r308: [72..73]
 r309: [60..71]
 r310: [68..69]
 r311: [64..67]
 r312: [64..65]
 r313: [62..63]
 r314: [58..61]
 r315: [58..59]
 r316: [42..43]
 r317: [38..41]
 r318: [38..39]
 r319: [36..37]
 r320: [34..35]
 r321: [10..33]
 r322: [30..31]
 r323: [26..29]
 r324: [26..27]
 r325: [24..25]
 r326: [22..23]
 r327: [10..21]
 r328: [18..19]
 r329: [14..17]
 r330: [14..15]
 r331: [12..13]
 r332: [8..11]
 r333: [8..9]
 r334: [530..531]
 r335: [534..535]
 r336: [324..325]
 r337: [328..329]
 r338: [46..311]
 r339: [46..47]
 r340: [110..111]
 r341: [114..115]
 r342: [50..51]
 r343: [54..55]
 r344: [0..1]
 r345: [4..5]
 r346: [532..533]
 r347: [536..537]
 r348: [560..561]
 r349: [556..557]
 r350: [550..551]
 r351: [546..547]
 r352: [540..541]
 r353: [538..539]
 r354: [326..327]
 r355: [330..331]
 r356: [528..529]
 r357: [524..525]
 r358: [518..519]
 r359: [516..517]
 r360: [514..515]
 r361: [508..509]
 r362: [502..503]
 r363: [494..495]
 r364: [492..493]
 r365: [486..487]
 r366: [480..481]
 r367: [478..479]
 r368: [470..471]
 r369: [466..467]
 r370: [460..461]
 r371: [454..455]
 r372: [446..447]
 r373: [442..443]
 r374: [436..437]
 r375: [430..431]
 r376: [428..429]
 r377: [420..421]
 r378: [410..411]
 r379: [406..407]
 r380: [398..399]
 r381: [394..395]
 r382: [390..391]
 r383: [382..383]
 r384: [378..379]
 r385: [372..373]
 r386: [366..367]
 r387: [362..363]
 r388: [356..357]
 r389: [350..351]
 r390: [344..345]
 r391: [340..341]
 r392: [334..335]
 r393: [332..333]
 r394: [322..323]
 r395: [320..321]
 r396: [318..319]
 r398: [314..315]
 r399: [312..313]
 r400: [48..49]
 r401: [112..113]
 r402: [116..117]
 r403: [310..311]
 r404: [306..307]
 r405: [300..301]
 r406: [298..299]
 r407: [296..297]
 r408: [290..291]
 r409: [284..285]
 r410: [276..277]
 r411: [274..275]
 r412: [268..269]
 r413: [262..263]
 r414: [260..261]
 r415: [252..253]
 r416: [248..249]
 r417: [242..243]
 r418: [236..237]
 r419: [228..229]
 r420: [224..225]
 r421: [218..219]
 r422: [212..213]
 r423: [210..211]
 r424: [202..203]
 r425: [192..193]
 r426: [188..189]
 r427: [180..181]
 r428: [176..177]
 r429: [172..173]
 r430: [164..165]
 r431: [160..161]
 r432: [154..155]
 r433: [148..149]
 r434: [144..145]
 r435: [138..139]
 r436: [132..133]
 r437: [130..131]
 r438: [126..127]
 r439: [118..119]
 r440: [52..53]
 r441: [56..57]
 r442: [108..109]
 r443: [104..105]
 r444: [98..99]
 r445: [96..97]
 r446: [92..93]
 r447: [86..87]
 r448: [82..83]
 r449: [78..79]
 r450: [72..73]
 r451: [70..71]
 r452: [66..67]
 r453: [58..59]
 r454: [2..3]
 r455: [6..7]
 r456: [44..45]
 r457: [40..41]
 r458: [34..35]
 r459: [32..33]
 r460: [28..29]
 r461: [22..23]
 r462: [20..21]
 r463: [16..17]
 r464: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 37
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 39
changing reg in insn 37
changing reg in insn 39
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 146
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 93
changing reg in insn 110
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 126
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 135
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 157
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 168
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 179
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 189
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 200
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 196
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 202
changing reg in insn 200
changing reg in insn 202
changing reg in insn 216
changing reg in insn 218
changing reg in insn 218
changing reg in insn 220
changing reg in insn 221
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 257
changing reg in insn 259
changing reg in insn 259
changing reg in insn 261
changing reg in insn 261
changing reg in insn 329
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 265
changing reg in insn 265
changing reg in insn 267
changing reg in insn 268
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 271
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 276
changing reg in insn 276
changing reg in insn 293
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 280
changing reg in insn 280
changing reg in insn 282
changing reg in insn 283
changing reg in insn 283
changing reg in insn 284
changing reg in insn 285
changing reg in insn 287
changing reg in insn 287
changing reg in insn 288
changing reg in insn 288
changing reg in insn 289
changing reg in insn 290
changing reg in insn 290
changing reg in insn 292
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 309
changing reg in insn 295
changing reg in insn 296
changing reg in insn 296
changing reg in insn 297
changing reg in insn 297
changing reg in insn 299
changing reg in insn 300
changing reg in insn 300
changing reg in insn 301
changing reg in insn 301
changing reg in insn 303
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 305
changing reg in insn 306
changing reg in insn 306
changing reg in insn 308
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 311
changing reg in insn 312
changing reg in insn 312
changing reg in insn 313
changing reg in insn 313
changing reg in insn 315
changing reg in insn 316
changing reg in insn 316
changing reg in insn 317
changing reg in insn 318
changing reg in insn 320
changing reg in insn 320
changing reg in insn 321
changing reg in insn 321
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 325
changing reg in insn 325
changing reg in insn 326
changing reg in insn 327
changing reg in insn 327
changing reg in insn 328
changing reg in insn 328
changing reg in insn 328
changing reg in insn 329
changing reg in insn 329
changing reg in insn 340
changing reg in insn 331
changing reg in insn 332
changing reg in insn 332
changing reg in insn 334
changing reg in insn 335
changing reg in insn 335
changing reg in insn 336
changing reg in insn 337
changing reg in insn 337
changing reg in insn 339
changing reg in insn 339
changing reg in insn 340
changing reg in insn 340
changing reg in insn 351
changing reg in insn 342
changing reg in insn 343
changing reg in insn 343
changing reg in insn 345
changing reg in insn 346
changing reg in insn 346
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 350
changing reg in insn 350
changing reg in insn 351
changing reg in insn 351
changing reg in insn 362
changing reg in insn 353
changing reg in insn 354
changing reg in insn 354
changing reg in insn 355
changing reg in insn 355
changing reg in insn 357
changing reg in insn 358
changing reg in insn 359
changing reg in insn 359
changing reg in insn 361
changing reg in insn 361
changing reg in insn 362
changing reg in insn 362
changing reg in insn 364
changing reg in insn 365
changing reg in insn 365
changing reg in insn 366
changing reg in insn 366
changing reg in insn 368
changing reg in insn 369
changing reg in insn 370
changing reg in insn 370
changing reg in insn 372
changing reg in insn 372
changing reg in insn 374
changing reg in insn 375
changing reg in insn 375
changing reg in insn 377
changing reg in insn 378
changing reg in insn 379
changing reg in insn 379
changing reg in insn 382
changing reg in insn 380
changing reg in insn 382
changing reg in insn 412
changing reg in insn 413
changing reg in insn 413
changing reg in insn 415
changing reg in insn 416
changing reg in insn 417
changing reg in insn 417
changing reg in insn 419
changing reg in insn 419
changing reg in insn 429
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 424
changing reg in insn 425
changing reg in insn 426
changing reg in insn 426
changing reg in insn 428
changing reg in insn 428
changing reg in insn 429
changing reg in insn 429
changing reg in insn 431
changing reg in insn 432
changing reg in insn 432
changing reg in insn 434
changing reg in insn 435
changing reg in insn 436
changing reg in insn 436
changing reg in insn 438
changing reg in insn 438
changing reg in insn 440
changing reg in insn 441
changing reg in insn 441
changing reg in insn 443
changing reg in insn 444
changing reg in insn 445
changing reg in insn 445
changing reg in insn 448
changing reg in insn 446
changing reg in insn 448
changing reg in insn 484
changing reg in insn 485
changing reg in insn 485
changing reg in insn 487
changing reg in insn 488
changing reg in insn 489
changing reg in insn 489
changing reg in insn 491
changing reg in insn 491
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 496
changing reg in insn 497
changing reg in insn 498
changing reg in insn 498
changing reg in insn 500
changing reg in insn 500
changing reg in insn 502
changing reg in insn 503
changing reg in insn 503
changing reg in insn 505
changing reg in insn 506
changing reg in insn 507
changing reg in insn 507
changing reg in insn 510
changing reg in insn 508
changing reg in insn 510
changing reg in insn 10
changing reg in insn 11
changing reg in insn 18
changing reg in insn 19
changing reg in insn 56
changing reg in insn 57
changing reg in insn 64
changing reg in insn 65
changing reg in insn 226
changing reg in insn 229
changing reg in insn 231
changing reg in insn 232
changing reg in insn 239
changing reg in insn 240
changing reg in insn 247
changing reg in insn 248
changing reg in insn 399
changing reg in insn 400
changing reg in insn 407
changing reg in insn 408
changing reg in insn 471
changing reg in insn 472
changing reg in insn 479
changing reg in insn 480
changing reg in insn 9
changing reg in insn 10
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 55
changing reg in insn 56
changing reg in insn 63
changing reg in insn 64
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 84
changing reg in insn 87
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 98
changing reg in insn 99
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 108
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 141
changing reg in insn 142
changing reg in insn 147
changing reg in insn 148
changing reg in insn 150
changing reg in insn 151
changing reg in insn 155
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 161
changing reg in insn 162
changing reg in insn 166
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 173
changing reg in insn 174
changing reg in insn 177
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 184
changing reg in insn 185
changing reg in insn 188
changing reg in insn 189
changing reg in insn 192
changing reg in insn 193
changing reg in insn 195
changing reg in insn 196
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 230
changing reg in insn 231
changing reg in insn 238
changing reg in insn 239
changing reg in insn 246
changing reg in insn 247
changing reg in insn 251
changing reg in insn 252
changing reg in insn 254
changing reg in insn 255
changing reg in insn 258
changing reg in insn 259
changing reg in insn 260
changing reg in insn 261
changing reg in insn 262
changing reg in insn 263
changing reg in insn 266
changing reg in insn 267
changing reg in insn 270
changing reg in insn 275
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 281
changing reg in insn 282
changing reg in insn 284
changing reg in insn 285
changing reg in insn 286
changing reg in insn 291
changing reg in insn 292
changing reg in insn 294
changing reg in insn 295
changing reg in insn 298
changing reg in insn 299
changing reg in insn 302
changing reg in insn 307
changing reg in insn 308
changing reg in insn 310
changing reg in insn 311
changing reg in insn 314
changing reg in insn 315
changing reg in insn 317
changing reg in insn 318
changing reg in insn 319
changing reg in insn 324
changing reg in insn 325
changing reg in insn 330
changing reg in insn 331
changing reg in insn 333
changing reg in insn 334
changing reg in insn 338
changing reg in insn 339
changing reg in insn 341
changing reg in insn 342
changing reg in insn 344
changing reg in insn 345
changing reg in insn 349
changing reg in insn 350
changing reg in insn 352
changing reg in insn 353
changing reg in insn 356
changing reg in insn 357
changing reg in insn 360
changing reg in insn 361
changing reg in insn 363
changing reg in insn 364
changing reg in insn 367
changing reg in insn 368
changing reg in insn 371
changing reg in insn 372
changing reg in insn 373
changing reg in insn 374
changing reg in insn 376
changing reg in insn 377
changing reg in insn 381
changing reg in insn 382
changing reg in insn 398
changing reg in insn 399
changing reg in insn 406
changing reg in insn 407
changing reg in insn 411
changing reg in insn 412
changing reg in insn 414
changing reg in insn 415
changing reg in insn 418
changing reg in insn 419
changing reg in insn 420
changing reg in insn 421
changing reg in insn 423
changing reg in insn 424
changing reg in insn 427
changing reg in insn 428
changing reg in insn 430
changing reg in insn 431
changing reg in insn 433
changing reg in insn 434
changing reg in insn 437
changing reg in insn 438
changing reg in insn 439
changing reg in insn 440
changing reg in insn 442
changing reg in insn 443
changing reg in insn 447
changing reg in insn 448
changing reg in insn 470
changing reg in insn 471
changing reg in insn 478
changing reg in insn 479
changing reg in insn 483
changing reg in insn 484
changing reg in insn 486
changing reg in insn 487
changing reg in insn 490
changing reg in insn 491
changing reg in insn 492
changing reg in insn 493
changing reg in insn 495
changing reg in insn 496
changing reg in insn 499
changing reg in insn 500
changing reg in insn 501
changing reg in insn 502
changing reg in insn 504
changing reg in insn 505
changing reg in insn 509
changing reg in insn 510
deleting insn with uid = 144.
deleting insn with uid = 221.
deleting insn with uid = 223.
deleting insn with uid = 224.
deleting insn with uid = 327.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 222.


efilt

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2]
;;  ref usage 	r0={132d,131u} r1={151d,149u} r2={35d,33u,4e} r4={6d,4u,4e} r5={2d,1u} r6={1d,161u} r7={1d,47u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={157d,22u} r18={1d} r19={1d} r20={1d,1u,24e} r21={35d,35u} r22={20d,18u} r23={8d,6u} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 1259{619d,608u,32e} in 459{458 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 egrid+0 S8 A64])
        (reg:DI 5 di [ egrid ])) "EFILT.f":1 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 47 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "EFILT.f":63 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 334 346
(code_label 47 6 7 3 5 (nil) [1 uses])
(note 7 47 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 8 7 9 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "EFILT.f":63 11 {*cmpsi_1}
     (nil))
(insn 9 8 10 3 (set (reg:QI 0 ax [346])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILT.f":63 678 {*setcc_qi}
     (nil))
(insn 10 9 11 3 (set (reg:SI 0 ax [orig:334 _272 ] [334])
        (zero_extend:SI (reg:QI 0 ax [346]))) "EFILT.f":63 140 {*zero_extendqisi2}
     (nil))
(insn 11 10 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:334 _272 ] [334])
            (const_int 0 [0]))) "EFILT.f":63 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 551)
            (pc))) "EFILT.f":63 682 {*jcc}
     (nil)
 -> 551)
;;  succ:       36
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 41 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "EFILT.f":64 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 335 347
(code_label 41 14 15 5 4 (nil) [1 uses])
(note 15 41 16 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "EFILT.f":64 11 {*cmpsi_1}
     (nil))
(insn 17 16 18 5 (set (reg:QI 0 ax [347])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILT.f":64 678 {*setcc_qi}
     (nil))
(insn 18 17 19 5 (set (reg:SI 0 ax [orig:335 _274 ] [335])
        (zero_extend:SI (reg:QI 0 ax [347]))) "EFILT.f":64 140 {*zero_extendqisi2}
     (nil))
(insn 19 18 20 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:335 _274 ] [335])
            (const_int 0 [0]))) "EFILT.f":64 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 20 19 21 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 554)
            (pc))) "EFILT.f":64 682 {*jcc}
     (nil)
 -> 554)
;;  succ:       37
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 37, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 348 349 350 351 352 353
(note 21 20 22 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 6 (set (reg:SI 0 ax [348])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":65 86 {*movsi_internal}
     (nil))
(insn 23 22 24 6 (set (reg:DI 0 ax [orig:87 _1 ] [87])
        (sign_extend:DI (reg:SI 0 ax [348]))) "EFILT.f":65 149 {*extendsidi2_rex64}
     (nil))
(insn 24 23 25 6 (parallel [
            (set (reg:DI 1 dx [orig:88 _2 ] [88])
                (mult:DI (reg:DI 0 ax [orig:87 _1 ] [87])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":65 349 {*muldi3_1}
     (nil))
(insn 25 24 26 6 (set (reg:SI 0 ax [349])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":65 86 {*movsi_internal}
     (nil))
(insn 26 25 27 6 (set (reg:DI 0 ax [orig:89 _3 ] [89])
        (sign_extend:DI (reg:SI 0 ax [349]))) "EFILT.f":65 149 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 6 (parallel [
            (set (reg:DI 0 ax [orig:90 _4 ] [90])
                (plus:DI (reg:DI 0 ax [orig:89 _3 ] [89])
                    (reg:DI 1 dx [orig:88 _2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":65 222 {*adddi_1}
     (nil))
(insn 28 27 29 6 (parallel [
            (set (reg:DI 2 cx [orig:91 _5 ] [91])
                (plus:DI (reg:DI 0 ax [orig:90 _4 ] [90])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":65 222 {*adddi_1}
     (nil))
(insn 29 28 30 6 (set (reg:SI 0 ax [350])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":65 86 {*movsi_internal}
     (nil))
(insn 30 29 31 6 (set (reg:DI 0 ax [orig:92 _6 ] [92])
        (sign_extend:DI (reg:SI 0 ax [350]))) "EFILT.f":65 149 {*extendsidi2_rex64}
     (nil))
(insn 31 30 32 6 (parallel [
            (set (reg:DI 1 dx [orig:93 _7 ] [93])
                (mult:DI (reg:DI 0 ax [orig:92 _6 ] [92])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":65 349 {*muldi3_1}
     (nil))
(insn 32 31 33 6 (set (reg:SI 0 ax [351])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":65 86 {*movsi_internal}
     (nil))
(insn 33 32 34 6 (set (reg:DI 0 ax [orig:94 _8 ] [94])
        (sign_extend:DI (reg:SI 0 ax [351]))) "EFILT.f":65 149 {*extendsidi2_rex64}
     (nil))
(insn 34 33 35 6 (parallel [
            (set (reg:DI 0 ax [orig:95 _9 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 _8 ] [94])
                    (reg:DI 1 dx [orig:93 _7 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":65 222 {*adddi_1}
     (nil))
(insn 35 34 36 6 (parallel [
            (set (reg:DI 1 dx [orig:96 _10 ] [96])
                (plus:DI (reg:DI 0 ax [orig:95 _9 ] [95])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":65 222 {*adddi_1}
     (nil))
(insn 36 35 37 6 (set (reg/f:DI 0 ax [352])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 egrid+0 S8 A64])) "EFILT.f":65 85 {*movdi_internal}
     (nil))
(insn 37 36 38 6 (set (reg:SF 21 xmm0 [orig:97 _11 ] [97])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:91 _5 ] [91])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [352])) [3 *egrid_275(D) S4 A32])) "EFILT.f":65 131 {*movsf_internal}
     (nil))
(insn 38 37 39 6 (set (reg/f:DI 0 ax [353])
        (symbol_ref:DI ("work1.3885") [flags 0x202]  <var_decl 0x7fa05ecd5480 work1>)) "EFILT.f":65 85 {*movdi_internal}
     (nil))
(insn 39 38 40 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:96 _10 ] [96])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [353])) [3 work1 S4 A32])
        (reg:SF 21 xmm0 [orig:97 _11 ] [97])) "EFILT.f":65 131 {*movsf_internal}
     (nil))
(insn 40 39 528 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":64 221 {*addsi_1}
     (nil))
(jump_insn 528 40 529 6 (set (pc)
        (label_ref 41)) "EFILT.f":64 683 {jump}
     (nil)
 -> 41)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 529 528 554)
;; basic block 37, loop depth 0, maybe hot
;;  prev block 6, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 554 529 553 37 26 (nil) [1 uses])
(note 553 554 555 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 555 553 44 37 (const_int 0 [0]) "EFILT.f":65 718 {nop}
     (nil))
;;  succ:       7 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 37, next block 36, flags: (RTL, MODIFIED)
;;  pred:       37 [always]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 44 555 45 7 3 (nil) [0 uses])
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 530 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":63 221 {*addsi_1}
     (nil))
(jump_insn 530 46 531 7 (set (pc)
        (label_ref 47)) "EFILT.f":63 683 {jump}
     (nil)
 -> 47)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 531 530 551)
;; basic block 36, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 551 531 550 36 25 (nil) [1 uses])
(note 550 551 552 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 552 550 50 36 (const_int 0 [0]) "EFILT.f":64 718 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 36, next block 9, flags: (RTL, MODIFIED)
;;  pred:       36 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 50 552 51 8 2 (nil) [0 uses])
(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 210 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 3 [0x3])) "EFILT.f":71 86 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              13 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 336 354
(code_label 210 52 53 9 9 (nil) [1 uses])
(note 53 210 54 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 247 [0xf7]))) "EFILT.f":71 11 {*cmpsi_1}
     (nil))
(insn 55 54 56 9 (set (reg:QI 0 ax [354])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILT.f":71 678 {*setcc_qi}
     (nil))
(insn 56 55 57 9 (set (reg:SI 0 ax [orig:336 _280 ] [336])
        (zero_extend:SI (reg:QI 0 ax [354]))) "EFILT.f":71 140 {*zero_extendqisi2}
     (nil))
(insn 57 56 58 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:336 _280 ] [336])
            (const_int 0 [0]))) "EFILT.f":71 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 58 57 59 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 557)
            (pc))) "EFILT.f":71 682 {*jcc}
     (nil)
 -> 557)
;;  succ:       38
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 59 58 60 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 204 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 2 [0x2])) "EFILT.f":72 86 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              12 [always] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 337 355
(code_label 204 60 61 11 8 (nil) [1 uses])
(note 61 204 62 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 118 [0x76]))) "EFILT.f":72 11 {*cmpsi_1}
     (nil))
(insn 63 62 64 11 (set (reg:QI 0 ax [355])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILT.f":72 678 {*setcc_qi}
     (nil))
(insn 64 63 65 11 (set (reg:SI 0 ax [orig:337 _282 ] [337])
        (zero_extend:SI (reg:QI 0 ax [355]))) "EFILT.f":72 140 {*zero_extendqisi2}
     (nil))
(insn 65 64 66 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:337 _282 ] [337])
            (const_int 0 [0]))) "EFILT.f":72 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 66 65 67 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 560)
            (pc))) "EFILT.f":72 682 {*jcc}
     (nil)
 -> 560)
;;  succ:       39
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 39, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags
(note 67 66 68 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 12 (set (reg:SI 0 ax [356])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 69 68 70 12 (set (reg:DI 0 ax [orig:98 _12 ] [98])
        (sign_extend:DI (reg:SI 0 ax [356]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 70 69 71 12 (parallel [
            (set (reg:DI 1 dx [orig:99 _13 ] [99])
                (mult:DI (reg:DI 0 ax [orig:98 _12 ] [98])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 349 {*muldi3_1}
     (nil))
(insn 71 70 72 12 (set (reg:SI 0 ax [357])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 72 71 73 12 (set (reg:DI 0 ax [orig:100 _14 ] [100])
        (sign_extend:DI (reg:SI 0 ax [357]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 73 72 74 12 (parallel [
            (set (reg:DI 0 ax [orig:101 _15 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 _14 ] [100])
                    (reg:DI 1 dx [orig:99 _13 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 74 73 75 12 (parallel [
            (set (reg:DI 1 dx [orig:102 _16 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 _15 ] [101])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 75 74 76 12 (set (reg/f:DI 0 ax [358])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fa05ecd0d80 masks>)) "EFILT.f":77 85 {*movdi_internal}
     (nil))
(insn 76 75 77 12 (set (reg:SF 22 xmm1 [orig:103 _17 ] [103])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:102 _16 ] [102])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [358])) [3 masks.hbm2 S4 A32])) "EFILT.f":77 131 {*movsf_internal}
     (nil))
(insn 77 76 78 12 (set (reg:SF 21 xmm0 [359])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "EFILT.f":77 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 4.0e+0 [0x0.8p+3])
        (nil)))
(insn 78 77 79 12 (set (reg:SF 22 xmm1 [orig:104 _18 ] [104])
        (mult:SF (reg:SF 22 xmm1 [orig:103 _17 ] [103])
            (reg:SF 21 xmm0 [359]))) "EFILT.f":77 838 {*fop_sf_comm}
     (nil))
(insn 79 78 80 12 (set (reg:SI 0 ax [360])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 80 79 81 12 (parallel [
            (set (reg:SI 0 ax [orig:105 _19 ] [105])
                (plus:SI (reg:SI 0 ax [360])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 81 80 82 12 (set (reg:DI 0 ax [orig:106 _20 ] [106])
        (sign_extend:DI (reg:SI 0 ax [orig:105 _19 ] [105]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 82 81 83 12 (parallel [
            (set (reg:DI 1 dx [orig:107 _21 ] [107])
                (mult:DI (reg:DI 0 ax [orig:106 _20 ] [106])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 349 {*muldi3_1}
     (nil))
(insn 83 82 84 12 (set (reg:SI 0 ax [361])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 84 83 85 12 (set (reg:DI 0 ax [orig:108 _22 ] [108])
        (sign_extend:DI (reg:SI 0 ax [361]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 12 (parallel [
            (set (reg:DI 0 ax [orig:109 _23 ] [109])
                (plus:DI (reg:DI 0 ax [orig:108 _22 ] [108])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 86 85 87 12 (set (reg:SI 2 cx [orig:110 _24 ] [110])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:109 _23 ] [109])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7fa05ecd0ab0 indx>)) [1 indx.ihe S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 87 86 88 12 (set (reg:SI 0 ax [362])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 88 87 89 12 (parallel [
            (set (reg:SI 0 ax [orig:111 _25 ] [111])
                (plus:SI (reg:SI 0 ax [362])
                    (reg:SI 2 cx [orig:110 _24 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:110 _24 ] [110])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 89 88 90 12 (set (reg:DI 0 ax [orig:112 _26 ] [112])
        (sign_extend:DI (reg:SI 0 ax [orig:111 _25 ] [111]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 90 89 91 12 (parallel [
            (set (reg:DI 0 ax [orig:113 _27 ] [113])
                (plus:DI (reg:DI 0 ax [orig:112 _26 ] [112])
                    (reg:DI 1 dx [orig:107 _21 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 91 90 92 12 (parallel [
            (set (reg:DI 1 dx [orig:114 _28 ] [114])
                (plus:DI (reg:DI 0 ax [orig:113 _27 ] [113])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 92 91 93 12 (set (reg/f:DI 0 ax [363])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fa05ecd0d80 masks>)) "EFILT.f":77 85 {*movdi_internal}
     (nil))
(insn 93 92 94 12 (set (reg:SF 23 xmm2 [orig:115 _29 ] [115])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:114 _28 ] [114])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [363])) [3 masks.hbm2 S4 A32])) "EFILT.f":77 131 {*movsf_internal}
     (nil))
(insn 94 93 95 12 (set (reg:SI 0 ax [364])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 95 94 96 12 (parallel [
            (set (reg:SI 0 ax [orig:116 _30 ] [116])
                (plus:SI (reg:SI 0 ax [364])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 96 95 97 12 (set (reg:DI 0 ax [orig:117 _31 ] [117])
        (sign_extend:DI (reg:SI 0 ax [orig:116 _30 ] [116]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 97 96 98 12 (parallel [
            (set (reg:DI 1 dx [orig:118 _32 ] [118])
                (mult:DI (reg:DI 0 ax [orig:117 _31 ] [117])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 349 {*muldi3_1}
     (nil))
(insn 98 97 99 12 (set (reg:SI 0 ax [365])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 99 98 100 12 (set (reg:DI 0 ax [orig:119 _33 ] [119])
        (sign_extend:DI (reg:SI 0 ax [365]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 100 99 101 12 (parallel [
            (set (reg:DI 0 ax [orig:120 _34 ] [120])
                (plus:DI (reg:DI 0 ax [orig:119 _33 ] [119])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 101 100 102 12 (parallel [
            (set (reg:DI 0 ax [366])
                (plus:DI (reg:DI 0 ax [orig:120 _34 ] [120])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 102 101 103 12 (set (reg:SI 2 cx [orig:121 _35 ] [121])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [366])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7fa05ecd0ab0 indx>)) [1 indx.ihw S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 103 102 104 12 (set (reg:SI 0 ax [367])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 104 103 105 12 (parallel [
            (set (reg:SI 0 ax [orig:122 _36 ] [122])
                (plus:SI (reg:SI 0 ax [367])
                    (reg:SI 2 cx [orig:121 _35 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:121 _35 ] [121])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 105 104 106 12 (set (reg:DI 0 ax [orig:123 _37 ] [123])
        (sign_extend:DI (reg:SI 0 ax [orig:122 _36 ] [122]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 106 105 107 12 (parallel [
            (set (reg:DI 0 ax [orig:124 _38 ] [124])
                (plus:DI (reg:DI 0 ax [orig:123 _37 ] [123])
                    (reg:DI 1 dx [orig:118 _32 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 107 106 108 12 (parallel [
            (set (reg:DI 1 dx [orig:125 _39 ] [125])
                (plus:DI (reg:DI 0 ax [orig:124 _38 ] [124])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 108 107 109 12 (set (reg/f:DI 0 ax [368])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fa05ecd0d80 masks>)) "EFILT.f":77 85 {*movdi_internal}
     (nil))
(insn 109 108 110 12 (set (reg:SF 21 xmm0 [orig:126 _40 ] [126])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:125 _39 ] [125])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [368])) [3 masks.hbm2 S4 A32])) "EFILT.f":77 131 {*movsf_internal}
     (nil))
(insn 110 109 111 12 (set (reg:SF 23 xmm2 [orig:127 _41 ] [127])
        (plus:SF (reg:SF 23 xmm2 [orig:115 _29 ] [115])
            (reg:SF 21 xmm0 [orig:126 _40 ] [126]))) "EFILT.f":77 838 {*fop_sf_comm}
     (nil))
(insn 111 110 112 12 (set (reg:SI 0 ax [369])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 112 111 113 12 (parallel [
            (set (reg:SI 0 ax [orig:128 _42 ] [128])
                (plus:SI (reg:SI 0 ax [369])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 113 112 114 12 (set (reg:DI 0 ax [orig:129 _43 ] [129])
        (sign_extend:DI (reg:SI 0 ax [orig:128 _42 ] [128]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 114 113 115 12 (parallel [
            (set (reg:DI 1 dx [orig:130 _44 ] [130])
                (mult:DI (reg:DI 0 ax [orig:129 _43 ] [129])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 349 {*muldi3_1}
     (nil))
(insn 115 114 116 12 (set (reg:SI 0 ax [370])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 116 115 117 12 (set (reg:DI 0 ax [orig:131 _45 ] [131])
        (sign_extend:DI (reg:SI 0 ax [370]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 117 116 118 12 (parallel [
            (set (reg:DI 0 ax [orig:132 _46 ] [132])
                (plus:DI (reg:DI 0 ax [orig:131 _45 ] [131])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 118 117 119 12 (set (reg:SI 2 cx [orig:133 _47 ] [133])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:132 _46 ] [132])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7fa05ecd0ab0 indx>)) [1 indx.ihe S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 119 118 120 12 (set (reg:SI 0 ax [371])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 120 119 121 12 (parallel [
            (set (reg:SI 0 ax [orig:134 _48 ] [134])
                (plus:SI (reg:SI 0 ax [371])
                    (reg:SI 2 cx [orig:133 _47 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:133 _47 ] [133])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 121 120 122 12 (set (reg:DI 0 ax [orig:135 _49 ] [135])
        (sign_extend:DI (reg:SI 0 ax [orig:134 _48 ] [134]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 122 121 123 12 (parallel [
            (set (reg:DI 0 ax [orig:136 _50 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 _49 ] [135])
                    (reg:DI 1 dx [orig:130 _44 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 123 122 124 12 (parallel [
            (set (reg:DI 1 dx [orig:137 _51 ] [137])
                (plus:DI (reg:DI 0 ax [orig:136 _50 ] [136])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 124 123 125 12 (set (reg/f:DI 0 ax [372])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fa05ecd0d80 masks>)) "EFILT.f":77 85 {*movdi_internal}
     (nil))
(insn 125 124 126 12 (set (reg:SF 21 xmm0 [orig:138 _52 ] [138])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:137 _51 ] [137])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [372])) [3 masks.hbm2 S4 A32])) "EFILT.f":77 131 {*movsf_internal}
     (nil))
(insn 126 125 127 12 (set (reg:SF 23 xmm2 [orig:139 _53 ] [139])
        (plus:SF (reg:SF 23 xmm2 [orig:127 _41 ] [127])
            (reg:SF 21 xmm0 [orig:138 _52 ] [138]))) "EFILT.f":77 838 {*fop_sf_comm}
     (nil))
(insn 127 126 128 12 (set (reg:SI 0 ax [373])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 128 127 129 12 (parallel [
            (set (reg:SI 0 ax [orig:140 _54 ] [140])
                (plus:SI (reg:SI 0 ax [373])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 129 128 130 12 (set (reg:DI 0 ax [orig:141 _55 ] [141])
        (sign_extend:DI (reg:SI 0 ax [orig:140 _54 ] [140]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 130 129 131 12 (parallel [
            (set (reg:DI 1 dx [orig:142 _56 ] [142])
                (mult:DI (reg:DI 0 ax [orig:141 _55 ] [141])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 349 {*muldi3_1}
     (nil))
(insn 131 130 132 12 (set (reg:SI 0 ax [374])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 132 131 133 12 (set (reg:DI 0 ax [orig:143 _57 ] [143])
        (sign_extend:DI (reg:SI 0 ax [374]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 133 132 134 12 (parallel [
            (set (reg:DI 0 ax [orig:144 _58 ] [144])
                (plus:DI (reg:DI 0 ax [orig:143 _57 ] [143])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 134 133 135 12 (parallel [
            (set (reg:DI 0 ax [375])
                (plus:DI (reg:DI 0 ax [orig:144 _58 ] [144])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 135 134 136 12 (set (reg:SI 2 cx [orig:145 _59 ] [145])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [375])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7fa05ecd0ab0 indx>)) [1 indx.ihw S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 136 135 137 12 (set (reg:SI 0 ax [376])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 137 136 138 12 (parallel [
            (set (reg:SI 0 ax [orig:146 _60 ] [146])
                (plus:SI (reg:SI 0 ax [376])
                    (reg:SI 2 cx [orig:145 _59 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:145 _59 ] [145])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 138 137 139 12 (set (reg:DI 0 ax [orig:147 _61 ] [147])
        (sign_extend:DI (reg:SI 0 ax [orig:146 _60 ] [146]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 139 138 140 12 (parallel [
            (set (reg:DI 0 ax [orig:148 _62 ] [148])
                (plus:DI (reg:DI 0 ax [orig:147 _61 ] [147])
                    (reg:DI 1 dx [orig:142 _56 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 140 139 141 12 (parallel [
            (set (reg:DI 1 dx [orig:149 _63 ] [149])
                (plus:DI (reg:DI 0 ax [orig:148 _62 ] [148])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 141 140 142 12 (set (reg/f:DI 0 ax [377])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fa05ecd0d80 masks>)) "EFILT.f":77 85 {*movdi_internal}
     (nil))
(insn 142 141 143 12 (set (reg:SF 21 xmm0 [orig:150 _64 ] [150])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:149 _63 ] [149])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [377])) [3 masks.hbm2 S4 A32])) "EFILT.f":77 131 {*movsf_internal}
     (nil))
(insn 143 142 145 12 (set (reg:SF 21 xmm0 [orig:151 _65 ] [151])
        (plus:SF (reg:SF 21 xmm0 [orig:150 _64 ] [150])
            (reg:SF 23 xmm2 [orig:139 _53 ] [139]))) "EFILT.f":77 838 {*fop_sf_comm}
     (nil))
(insn 145 143 146 12 (set (reg:SF 21 xmm0 [orig:153 _67 ] [153])
        (plus:SF (reg:SF 21 xmm0 [orig:152 _66 ] [152])
            (reg:SF 21 xmm0 [orig:152 _66 ] [152]))) "EFILT.f":77 838 {*fop_sf_comm}
     (nil))
(insn 146 145 147 12 (set (reg:SF 22 xmm1 [orig:154 _68 ] [154])
        (plus:SF (reg:SF 22 xmm1 [orig:104 _18 ] [104])
            (reg:SF 21 xmm0 [orig:153 _67 ] [153]))) "EFILT.f":77 838 {*fop_sf_comm}
     (nil))
(insn 147 146 148 12 (set (reg:SI 0 ax [378])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 148 147 149 12 (set (reg:DI 0 ax [orig:155 _69 ] [155])
        (sign_extend:DI (reg:SI 0 ax [378]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 149 148 150 12 (parallel [
            (set (reg:DI 1 dx [orig:156 _70 ] [156])
                (mult:DI (reg:DI 0 ax [orig:155 _69 ] [155])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 349 {*muldi3_1}
     (nil))
(insn 150 149 151 12 (set (reg:SI 0 ax [379])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 151 150 152 12 (parallel [
            (set (reg:SI 0 ax [orig:157 _71 ] [157])
                (plus:SI (reg:SI 0 ax [379])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 152 151 153 12 (set (reg:DI 0 ax [orig:158 _72 ] [158])
        (sign_extend:DI (reg:SI 0 ax [orig:157 _71 ] [157]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 153 152 154 12 (parallel [
            (set (reg:DI 0 ax [orig:159 _73 ] [159])
                (plus:DI (reg:DI 0 ax [orig:158 _72 ] [158])
                    (reg:DI 1 dx [orig:156 _70 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 154 153 155 12 (parallel [
            (set (reg:DI 1 dx [orig:160 _74 ] [160])
                (plus:DI (reg:DI 0 ax [orig:159 _73 ] [159])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 155 154 156 12 (set (reg/f:DI 0 ax [380])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fa05ecd0d80 masks>)) "EFILT.f":77 85 {*movdi_internal}
     (nil))
(insn 156 155 157 12 (set (reg:SF 21 xmm0 [orig:161 _75 ] [161])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:160 _74 ] [160])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [380])) [3 masks.hbm2 S4 A32])) "EFILT.f":77 131 {*movsf_internal}
     (nil))
(insn 157 156 158 12 (set (reg:SF 22 xmm1 [orig:162 _76 ] [162])
        (plus:SF (reg:SF 22 xmm1 [orig:154 _68 ] [154])
            (reg:SF 21 xmm0 [orig:161 _75 ] [161]))) "EFILT.f":77 838 {*fop_sf_comm}
     (nil))
(insn 158 157 159 12 (set (reg:SI 0 ax [381])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 159 158 160 12 (set (reg:DI 0 ax [orig:163 _77 ] [163])
        (sign_extend:DI (reg:SI 0 ax [381]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 160 159 161 12 (parallel [
            (set (reg:DI 1 dx [orig:164 _78 ] [164])
                (mult:DI (reg:DI 0 ax [orig:163 _77 ] [163])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 349 {*muldi3_1}
     (nil))
(insn 161 160 162 12 (set (reg:SI 0 ax [382])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 162 161 163 12 (parallel [
            (set (reg:SI 0 ax [orig:165 _79 ] [165])
                (plus:SI (reg:SI 0 ax [382])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 163 162 164 12 (set (reg:DI 0 ax [orig:166 _80 ] [166])
        (sign_extend:DI (reg:SI 0 ax [orig:165 _79 ] [165]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 164 163 165 12 (parallel [
            (set (reg:DI 0 ax [orig:167 _81 ] [167])
                (plus:DI (reg:DI 0 ax [orig:166 _80 ] [166])
                    (reg:DI 1 dx [orig:164 _78 ] [164])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 165 164 166 12 (parallel [
            (set (reg:DI 1 dx [orig:168 _82 ] [168])
                (plus:DI (reg:DI 0 ax [orig:167 _81 ] [167])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 166 165 167 12 (set (reg/f:DI 0 ax [383])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fa05ecd0d80 masks>)) "EFILT.f":77 85 {*movdi_internal}
     (nil))
(insn 167 166 168 12 (set (reg:SF 21 xmm0 [orig:169 _83 ] [169])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:168 _82 ] [168])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [383])) [3 masks.hbm2 S4 A32])) "EFILT.f":77 131 {*movsf_internal}
     (nil))
(insn 168 167 169 12 (set (reg:SF 22 xmm1 [orig:170 _84 ] [170])
        (plus:SF (reg:SF 22 xmm1 [orig:162 _76 ] [162])
            (reg:SF 21 xmm0 [orig:169 _83 ] [169]))) "EFILT.f":77 838 {*fop_sf_comm}
     (nil))
(insn 169 168 170 12 (set (reg:SI 0 ax [384])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 170 169 171 12 (parallel [
            (set (reg:SI 0 ax [orig:171 _85 ] [171])
                (plus:SI (reg:SI 0 ax [384])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 171 170 172 12 (set (reg:DI 0 ax [orig:172 _86 ] [172])
        (sign_extend:DI (reg:SI 0 ax [orig:171 _85 ] [171]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 172 171 173 12 (parallel [
            (set (reg:DI 1 dx [orig:173 _87 ] [173])
                (mult:DI (reg:DI 0 ax [orig:172 _86 ] [172])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 349 {*muldi3_1}
     (nil))
(insn 173 172 174 12 (set (reg:SI 0 ax [385])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 174 173 175 12 (set (reg:DI 0 ax [orig:174 _88 ] [174])
        (sign_extend:DI (reg:SI 0 ax [385]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 175 174 176 12 (parallel [
            (set (reg:DI 0 ax [orig:175 _89 ] [175])
                (plus:DI (reg:DI 0 ax [orig:174 _88 ] [174])
                    (reg:DI 1 dx [orig:173 _87 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 176 175 177 12 (parallel [
            (set (reg:DI 1 dx [orig:176 _90 ] [176])
                (plus:DI (reg:DI 0 ax [orig:175 _89 ] [175])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 177 176 178 12 (set (reg/f:DI 0 ax [386])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fa05ecd0d80 masks>)) "EFILT.f":77 85 {*movdi_internal}
     (nil))
(insn 178 177 179 12 (set (reg:SF 21 xmm0 [orig:177 _91 ] [177])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:176 _90 ] [176])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [386])) [3 masks.hbm2 S4 A32])) "EFILT.f":77 131 {*movsf_internal}
     (nil))
(insn 179 178 180 12 (set (reg:SF 22 xmm1 [orig:178 _92 ] [178])
        (plus:SF (reg:SF 22 xmm1 [orig:170 _84 ] [170])
            (reg:SF 21 xmm0 [orig:177 _91 ] [177]))) "EFILT.f":77 838 {*fop_sf_comm}
     (nil))
(insn 180 179 181 12 (set (reg:SI 0 ax [387])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 181 180 182 12 (parallel [
            (set (reg:SI 0 ax [orig:179 _93 ] [179])
                (plus:SI (reg:SI 0 ax [387])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -2 [0xfffffffffffffffe]))
        (nil)))
(insn 182 181 183 12 (set (reg:DI 0 ax [orig:180 _94 ] [180])
        (sign_extend:DI (reg:SI 0 ax [orig:179 _93 ] [179]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 183 182 184 12 (parallel [
            (set (reg:DI 1 dx [orig:181 _95 ] [181])
                (mult:DI (reg:DI 0 ax [orig:180 _94 ] [180])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 349 {*muldi3_1}
     (nil))
(insn 184 183 185 12 (set (reg:SI 0 ax [388])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 185 184 186 12 (set (reg:DI 0 ax [orig:182 _96 ] [182])
        (sign_extend:DI (reg:SI 0 ax [388]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 186 185 187 12 (parallel [
            (set (reg:DI 0 ax [orig:183 _97 ] [183])
                (plus:DI (reg:DI 0 ax [orig:182 _96 ] [182])
                    (reg:DI 1 dx [orig:181 _95 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 187 186 188 12 (parallel [
            (set (reg:DI 1 dx [orig:184 _98 ] [184])
                (plus:DI (reg:DI 0 ax [orig:183 _97 ] [183])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 188 187 189 12 (set (reg/f:DI 0 ax [389])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fa05ecd0d80 masks>)) "EFILT.f":77 85 {*movdi_internal}
     (nil))
(insn 189 188 190 12 (set (reg:SF 21 xmm0 [orig:185 _99 ] [185])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:184 _98 ] [184])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [389])) [3 masks.hbm2 S4 A32])) "EFILT.f":77 131 {*movsf_internal}
     (nil))
(insn 190 189 191 12 (set (reg:SF 21 xmm0 [orig:186 _100 ] [186])
        (plus:SF (reg:SF 21 xmm0 [orig:185 _99 ] [185])
            (reg:SF 22 xmm1 [orig:178 _92 ] [178]))) "EFILT.f":77 838 {*fop_sf_comm}
     (nil))
(insn 191 190 192 12 (set (reg:SF 22 xmm1 [orig:187 _101 ] [187])
        (reg:SF 21 xmm0 [orig:186 _100 ] [186])) "EFILT.f":77 131 {*movsf_internal}
     (nil))
(insn 192 191 193 12 (set (reg:SI 0 ax [390])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 193 192 194 12 (set (reg:DI 0 ax [orig:188 _102 ] [188])
        (sign_extend:DI (reg:SI 0 ax [390]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 194 193 195 12 (parallel [
            (set (reg:DI 1 dx [orig:189 _103 ] [189])
                (mult:DI (reg:DI 0 ax [orig:188 _102 ] [188])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 349 {*muldi3_1}
     (nil))
(insn 195 194 196 12 (set (reg:SI 0 ax [391])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":77 86 {*movsi_internal}
     (nil))
(insn 196 195 197 12 (set (reg:DI 0 ax [orig:190 _104 ] [190])
        (sign_extend:DI (reg:SI 0 ax [391]))) "EFILT.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 197 196 198 12 (parallel [
            (set (reg:DI 0 ax [orig:191 _105 ] [191])
                (plus:DI (reg:DI 0 ax [orig:190 _104 ] [190])
                    (reg:DI 1 dx [orig:189 _103 ] [189])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 198 197 199 12 (parallel [
            (set (reg:DI 1 dx [orig:192 _106 ] [192])
                (plus:DI (reg:DI 0 ax [orig:191 _105 ] [191])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":77 222 {*adddi_1}
     (nil))
(insn 199 198 200 12 (set (reg:SF 21 xmm0 [392])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "EFILT.f":77 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 200 199 201 12 (set (reg:SF 21 xmm0 [orig:193 _107 ] [193])
        (div:SF (reg:SF 21 xmm0 [392])
            (reg:SF 22 xmm1 [orig:187 _101 ] [187]))) "EFILT.f":77 841 {*fop_sf_1}
     (nil))
(insn 201 200 202 12 (set (reg/f:DI 0 ax [393])
        (symbol_ref:DI ("work3.3889") [flags 0x202]  <var_decl 0x7fa05ecd55a0 work3>)) "EFILT.f":77 85 {*movdi_internal}
     (nil))
(insn 202 201 203 12 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:192 _106 ] [192])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [393])) [3 work3 S4 A32])
        (reg:SF 21 xmm0 [orig:193 _107 ] [193])) "EFILT.f":77 131 {*movsf_internal}
     (nil))
(insn 203 202 532 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":72 221 {*addsi_1}
     (nil))
(jump_insn 532 203 533 12 (set (pc)
        (label_ref 204)) "EFILT.f":72 683 {jump}
     (nil)
 -> 204)
;;  succ:       11 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 533 532 560)
;; basic block 39, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 560 533 559 39 28 (nil) [1 uses])
(note 559 560 561 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 561 559 207 39 (const_int 0 [0]) "EFILT.f":77 718 {nop}
     (nil))
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 39, next block 38, flags: (RTL, MODIFIED)
;;  pred:       39 [always]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 207 561 208 13 7 (nil) [0 uses])
(note 208 207 209 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 534 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":71 221 {*addsi_1}
     (nil))
(jump_insn 534 209 535 13 (set (pc)
        (label_ref 210)) "EFILT.f":71 683 {jump}
     (nil)
 -> 210)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 535 534 557)
;; basic block 38, loop depth 0, maybe hot
;;  prev block 13, next block 14, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 557 535 556 38 27 (nil) [1 uses])
(note 556 557 558 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 558 556 213 38 (const_int 0 [0]) "EFILT.f":72 718 {nop}
     (nil))
;;  succ:       14 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 38, next block 15, flags: (RTL, MODIFIED)
;;  pred:       38 [always]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 194 195 196 338 394 395 396 398 399
(code_label 213 558 214 14 6 (nil) [0 uses])
(note 214 213 215 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 215 214 216 14 (set (reg/f:DI 0 ax [394])
        (symbol_ref:DI ("dynam_") [flags 0x202]  <var_decl 0x7fa065d37ab0 dynam>)) "EFILT.f":1 85 {*movdi_internal}
     (nil))
(insn 216 215 217 14 (set (reg:SF 22 xmm1 [orig:194 _108 ] [194])
        (mem/c:SF (reg/f:DI 0 ax [394]) [3 dynam.dy+0 S4 A128])) "EFILT.f":1 131 {*movsf_internal}
     (nil))
(insn 217 216 218 14 (set (reg:SF 21 xmm0 [395])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "EFILT.f":83 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF -1.8000000272877514362335205078125e-4 [-0x0.bcbe62p-12])
        (nil)))
(insn 218 217 219 14 (set (reg:SF 22 xmm1 [orig:195 _109 ] [195])
        (mult:SF (reg:SF 22 xmm1 [orig:194 _108 ] [194])
            (reg:SF 21 xmm0 [395]))) "EFILT.f":83 838 {*fop_sf_comm}
     (nil))
(insn 219 218 220 14 (set (reg:SF 21 xmm0 [396])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) "EFILT.f":83 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.6e+1 [0x0.8p+5])
        (nil)))
(insn 220 219 222 14 (set (reg:SF 21 xmm0 [orig:196 _110 ] [196])
        (plus:SF (reg:SF 21 xmm0 [396])
            (reg:SF 22 xmm1 [orig:195 _109 ] [195]))) "EFILT.f":83 838 {*fop_sf_comm}
     (nil))
(call_insn/u 222 220 225 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("lroundf") [flags 0x41]  <function_decl 0x7fa05eb47700 __builtin_lroundf>) [0 __builtin_lroundf S1 A8])
            (const_int 0 [0]))) "EFILT.f":83 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 225 222 226 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 mxfilt+0 S4 A32])
        (reg:SI 0 ax [399])) "EFILT.f":83 86 {*movsi_internal}
     (nil))
(insn 226 225 227 14 (set (reg:SI 0 ax [orig:338 _287 ] [338])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 mxfilt+0 S4 A32])) "EFILT.f":85 86 {*movsi_internal}
     (nil))
(insn 227 226 462 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 nfilt+0 S4 A32])
        (const_int 1 [0x1])) "EFILT.f":85 86 {*movsi_internal}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;;              28 [always] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  def 	 17 [flags] 339 400
(code_label 462 227 228 15 19 (nil) [1 uses])
(note 228 462 229 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 229 228 230 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [1 nfilt+0 S4 A32])
            (reg:SI 0 ax [orig:338 _287 ] [338]))) "EFILT.f":85 11 {*cmpsi_1}
     (nil))
(insn 230 229 231 15 (set (reg:QI 1 dx [400])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILT.f":85 678 {*setcc_qi}
     (nil))
(insn 231 230 232 15 (set (reg:SI 1 dx [orig:339 _289 ] [339])
        (zero_extend:SI (reg:QI 1 dx [400]))) "EFILT.f":85 140 {*zero_extendqisi2}
     (nil))
(insn 232 231 233 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:339 _289 ] [339])
            (const_int 0 [0]))) "EFILT.f":85 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 233 232 234 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 563)
            (pc))) "EFILT.f":85 682 {*jcc}
     (nil)
 -> 563)
;;  succ:       40
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 234 233 235 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 235 234 390 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 3 [0x3])) "EFILT.f":87 86 {*movsi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              21 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 340 401
(code_label 390 235 236 17 14 (nil) [1 uses])
(note 236 390 237 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 237 236 238 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 247 [0xf7]))) "EFILT.f":87 11 {*cmpsi_1}
     (nil))
(insn 238 237 239 17 (set (reg:QI 1 dx [401])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILT.f":87 678 {*setcc_qi}
     (nil))
(insn 239 238 240 17 (set (reg:SI 1 dx [orig:340 _291 ] [340])
        (zero_extend:SI (reg:QI 1 dx [401]))) "EFILT.f":87 140 {*zero_extendqisi2}
     (nil))
(insn 240 239 241 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:340 _291 ] [340])
            (const_int 0 [0]))) "EFILT.f":87 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 241 240 242 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 566)
            (pc))) "EFILT.f":87 682 {*jcc}
     (nil)
 -> 566)
;;  succ:       41
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 242 241 243 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 243 242 384 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 2 [0x2])) "EFILT.f":88 86 {*movsi_internal}
     (nil))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;;              20 [always] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 341 402
(code_label 384 243 244 19 13 (nil) [1 uses])
(note 244 384 245 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 245 244 246 19 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 118 [0x76]))) "EFILT.f":88 11 {*cmpsi_1}
     (nil))
(insn 246 245 247 19 (set (reg:QI 1 dx [402])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILT.f":88 678 {*setcc_qi}
     (nil))
(insn 247 246 248 19 (set (reg:SI 1 dx [orig:341 _293 ] [341])
        (zero_extend:SI (reg:QI 1 dx [402]))) "EFILT.f":88 140 {*zero_extendqisi2}
     (nil))
(insn 248 247 249 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:341 _293 ] [341])
            (const_int 0 [0]))) "EFILT.f":88 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 249 248 250 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 569)
            (pc))) "EFILT.f":88 682 {*jcc}
     (nil)
 -> 569)
;;  succ:       42
;;              20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 42, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags
(note 250 249 251 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 252 20 (set (reg:SI 1 dx [403])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 252 251 253 20 (set (reg:DI 1 dx [orig:197 _111 ] [197])
        (sign_extend:DI (reg:SI 1 dx [403]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 253 252 254 20 (parallel [
            (set (reg:DI 2 cx [orig:198 _112 ] [198])
                (mult:DI (reg:DI 1 dx [orig:197 _111 ] [197])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 349 {*muldi3_1}
     (nil))
(insn 254 253 255 20 (set (reg:SI 1 dx [404])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 255 254 256 20 (set (reg:DI 1 dx [orig:199 _113 ] [199])
        (sign_extend:DI (reg:SI 1 dx [404]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 256 255 257 20 (parallel [
            (set (reg:DI 1 dx [orig:200 _114 ] [200])
                (plus:DI (reg:DI 1 dx [orig:199 _113 ] [199])
                    (reg:DI 2 cx [orig:198 _112 ] [198])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 257 256 258 20 (parallel [
            (set (reg:DI 2 cx [orig:201 _115 ] [201])
                (plus:DI (reg:DI 1 dx [orig:200 _114 ] [200])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 258 257 259 20 (set (reg/f:DI 1 dx [405])
        (symbol_ref:DI ("work1.3885") [flags 0x202]  <var_decl 0x7fa05ecd5480 work1>)) "EFILT.f":93 85 {*movdi_internal}
     (nil))
(insn 259 258 260 20 (set (reg:SF 22 xmm1 [orig:202 _116 ] [202])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:201 _115 ] [201])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [405])) [3 work1 S4 A32])) "EFILT.f":93 131 {*movsf_internal}
     (nil))
(insn 260 259 261 20 (set (reg:SF 21 xmm0 [406])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "EFILT.f":93 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 4.0e+0 [0x0.8p+3])
        (nil)))
(insn 261 260 262 20 (set (reg:SF 22 xmm1 [orig:203 _117 ] [203])
        (mult:SF (reg:SF 22 xmm1 [orig:202 _116 ] [202])
            (reg:SF 21 xmm0 [406]))) "EFILT.f":93 838 {*fop_sf_comm}
     (nil))
(insn 262 261 263 20 (set (reg:SI 1 dx [407])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 263 262 264 20 (parallel [
            (set (reg:SI 1 dx [orig:204 _118 ] [204])
                (plus:SI (reg:SI 1 dx [407])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 264 263 265 20 (set (reg:DI 1 dx [orig:205 _119 ] [205])
        (sign_extend:DI (reg:SI 1 dx [orig:204 _118 ] [204]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 265 264 266 20 (parallel [
            (set (reg:DI 2 cx [orig:206 _120 ] [206])
                (mult:DI (reg:DI 1 dx [orig:205 _119 ] [205])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 349 {*muldi3_1}
     (nil))
(insn 266 265 267 20 (set (reg:SI 1 dx [408])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 267 266 268 20 (set (reg:DI 1 dx [orig:207 _121 ] [207])
        (sign_extend:DI (reg:SI 1 dx [408]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 268 267 269 20 (parallel [
            (set (reg:DI 1 dx [orig:208 _122 ] [208])
                (plus:DI (reg:DI 1 dx [orig:207 _121 ] [207])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 269 268 270 20 (set (reg:SI 4 si [orig:209 _123 ] [209])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:208 _122 ] [208])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7fa05ecd0ab0 indx>)) [1 indx.ihe S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 270 269 271 20 (set (reg:SI 1 dx [409])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 271 270 272 20 (parallel [
            (set (reg:SI 1 dx [orig:210 _124 ] [210])
                (plus:SI (reg:SI 1 dx [409])
                    (reg:SI 4 si [orig:209 _123 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:209 _123 ] [209])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 272 271 273 20 (set (reg:DI 1 dx [orig:211 _125 ] [211])
        (sign_extend:DI (reg:SI 1 dx [orig:210 _124 ] [210]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 273 272 274 20 (parallel [
            (set (reg:DI 1 dx [orig:212 _126 ] [212])
                (plus:DI (reg:DI 1 dx [orig:211 _125 ] [211])
                    (reg:DI 2 cx [orig:206 _120 ] [206])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 274 273 275 20 (parallel [
            (set (reg:DI 2 cx [orig:213 _127 ] [213])
                (plus:DI (reg:DI 1 dx [orig:212 _126 ] [212])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 275 274 276 20 (set (reg/f:DI 1 dx [410])
        (symbol_ref:DI ("work1.3885") [flags 0x202]  <var_decl 0x7fa05ecd5480 work1>)) "EFILT.f":93 85 {*movdi_internal}
     (nil))
(insn 276 275 277 20 (set (reg:SF 23 xmm2 [orig:214 _128 ] [214])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:213 _127 ] [213])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [410])) [3 work1 S4 A32])) "EFILT.f":93 131 {*movsf_internal}
     (nil))
(insn 277 276 278 20 (set (reg:SI 1 dx [411])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 278 277 279 20 (parallel [
            (set (reg:SI 1 dx [orig:215 _129 ] [215])
                (plus:SI (reg:SI 1 dx [411])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 279 278 280 20 (set (reg:DI 1 dx [orig:216 _130 ] [216])
        (sign_extend:DI (reg:SI 1 dx [orig:215 _129 ] [215]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 280 279 281 20 (parallel [
            (set (reg:DI 2 cx [orig:217 _131 ] [217])
                (mult:DI (reg:DI 1 dx [orig:216 _130 ] [216])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 349 {*muldi3_1}
     (nil))
(insn 281 280 282 20 (set (reg:SI 1 dx [412])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 282 281 283 20 (set (reg:DI 1 dx [orig:218 _132 ] [218])
        (sign_extend:DI (reg:SI 1 dx [412]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 283 282 284 20 (parallel [
            (set (reg:DI 1 dx [orig:219 _133 ] [219])
                (plus:DI (reg:DI 1 dx [orig:218 _132 ] [218])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 284 283 285 20 (parallel [
            (set (reg:DI 1 dx [413])
                (plus:DI (reg:DI 1 dx [orig:219 _133 ] [219])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 285 284 286 20 (set (reg:SI 4 si [orig:220 _134 ] [220])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [413])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7fa05ecd0ab0 indx>)) [1 indx.ihw S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 286 285 287 20 (set (reg:SI 1 dx [414])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 287 286 288 20 (parallel [
            (set (reg:SI 1 dx [orig:221 _135 ] [221])
                (plus:SI (reg:SI 1 dx [414])
                    (reg:SI 4 si [orig:220 _134 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:220 _134 ] [220])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 288 287 289 20 (set (reg:DI 1 dx [orig:222 _136 ] [222])
        (sign_extend:DI (reg:SI 1 dx [orig:221 _135 ] [221]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 289 288 290 20 (parallel [
            (set (reg:DI 1 dx [orig:223 _137 ] [223])
                (plus:DI (reg:DI 1 dx [orig:222 _136 ] [222])
                    (reg:DI 2 cx [orig:217 _131 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 290 289 291 20 (parallel [
            (set (reg:DI 2 cx [orig:224 _138 ] [224])
                (plus:DI (reg:DI 1 dx [orig:223 _137 ] [223])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 291 290 292 20 (set (reg/f:DI 1 dx [415])
        (symbol_ref:DI ("work1.3885") [flags 0x202]  <var_decl 0x7fa05ecd5480 work1>)) "EFILT.f":93 85 {*movdi_internal}
     (nil))
(insn 292 291 293 20 (set (reg:SF 21 xmm0 [orig:225 _139 ] [225])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:224 _138 ] [224])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [415])) [3 work1 S4 A32])) "EFILT.f":93 131 {*movsf_internal}
     (nil))
(insn 293 292 294 20 (set (reg:SF 23 xmm2 [orig:226 _140 ] [226])
        (plus:SF (reg:SF 23 xmm2 [orig:214 _128 ] [214])
            (reg:SF 21 xmm0 [orig:225 _139 ] [225]))) "EFILT.f":93 838 {*fop_sf_comm}
     (nil))
(insn 294 293 295 20 (set (reg:SI 1 dx [416])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 295 294 296 20 (parallel [
            (set (reg:SI 1 dx [orig:227 _141 ] [227])
                (plus:SI (reg:SI 1 dx [416])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 296 295 297 20 (set (reg:DI 1 dx [orig:228 _142 ] [228])
        (sign_extend:DI (reg:SI 1 dx [orig:227 _141 ] [227]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 297 296 298 20 (parallel [
            (set (reg:DI 2 cx [orig:229 _143 ] [229])
                (mult:DI (reg:DI 1 dx [orig:228 _142 ] [228])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 349 {*muldi3_1}
     (nil))
(insn 298 297 299 20 (set (reg:SI 1 dx [417])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 299 298 300 20 (set (reg:DI 1 dx [orig:230 _144 ] [230])
        (sign_extend:DI (reg:SI 1 dx [417]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 300 299 301 20 (parallel [
            (set (reg:DI 1 dx [orig:231 _145 ] [231])
                (plus:DI (reg:DI 1 dx [orig:230 _144 ] [230])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 301 300 302 20 (set (reg:SI 4 si [orig:232 _146 ] [232])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:231 _145 ] [231])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7fa05ecd0ab0 indx>)) [1 indx.ihe S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 302 301 303 20 (set (reg:SI 1 dx [418])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 303 302 304 20 (parallel [
            (set (reg:SI 1 dx [orig:233 _147 ] [233])
                (plus:SI (reg:SI 1 dx [418])
                    (reg:SI 4 si [orig:232 _146 ] [232])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:232 _146 ] [232])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 304 303 305 20 (set (reg:DI 1 dx [orig:234 _148 ] [234])
        (sign_extend:DI (reg:SI 1 dx [orig:233 _147 ] [233]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 305 304 306 20 (parallel [
            (set (reg:DI 1 dx [orig:235 _149 ] [235])
                (plus:DI (reg:DI 1 dx [orig:234 _148 ] [234])
                    (reg:DI 2 cx [orig:229 _143 ] [229])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 306 305 307 20 (parallel [
            (set (reg:DI 2 cx [orig:236 _150 ] [236])
                (plus:DI (reg:DI 1 dx [orig:235 _149 ] [235])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 307 306 308 20 (set (reg/f:DI 1 dx [419])
        (symbol_ref:DI ("work1.3885") [flags 0x202]  <var_decl 0x7fa05ecd5480 work1>)) "EFILT.f":93 85 {*movdi_internal}
     (nil))
(insn 308 307 309 20 (set (reg:SF 21 xmm0 [orig:237 _151 ] [237])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:236 _150 ] [236])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [419])) [3 work1 S4 A32])) "EFILT.f":93 131 {*movsf_internal}
     (nil))
(insn 309 308 310 20 (set (reg:SF 23 xmm2 [orig:238 _152 ] [238])
        (plus:SF (reg:SF 23 xmm2 [orig:226 _140 ] [226])
            (reg:SF 21 xmm0 [orig:237 _151 ] [237]))) "EFILT.f":93 838 {*fop_sf_comm}
     (nil))
(insn 310 309 311 20 (set (reg:SI 1 dx [420])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 311 310 312 20 (parallel [
            (set (reg:SI 1 dx [orig:239 _153 ] [239])
                (plus:SI (reg:SI 1 dx [420])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 312 311 313 20 (set (reg:DI 1 dx [orig:240 _154 ] [240])
        (sign_extend:DI (reg:SI 1 dx [orig:239 _153 ] [239]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 313 312 314 20 (parallel [
            (set (reg:DI 2 cx [orig:241 _155 ] [241])
                (mult:DI (reg:DI 1 dx [orig:240 _154 ] [240])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 349 {*muldi3_1}
     (nil))
(insn 314 313 315 20 (set (reg:SI 1 dx [421])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 315 314 316 20 (set (reg:DI 1 dx [orig:242 _156 ] [242])
        (sign_extend:DI (reg:SI 1 dx [421]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 316 315 317 20 (parallel [
            (set (reg:DI 1 dx [orig:243 _157 ] [243])
                (plus:DI (reg:DI 1 dx [orig:242 _156 ] [242])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 317 316 318 20 (parallel [
            (set (reg:DI 1 dx [422])
                (plus:DI (reg:DI 1 dx [orig:243 _157 ] [243])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 318 317 319 20 (set (reg:SI 4 si [orig:244 _158 ] [244])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [422])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7fa05ecd0ab0 indx>)) [1 indx.ihw S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 319 318 320 20 (set (reg:SI 1 dx [423])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 320 319 321 20 (parallel [
            (set (reg:SI 1 dx [orig:245 _159 ] [245])
                (plus:SI (reg:SI 1 dx [423])
                    (reg:SI 4 si [orig:244 _158 ] [244])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:244 _158 ] [244])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 321 320 322 20 (set (reg:DI 1 dx [orig:246 _160 ] [246])
        (sign_extend:DI (reg:SI 1 dx [orig:245 _159 ] [245]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 322 321 323 20 (parallel [
            (set (reg:DI 1 dx [orig:247 _161 ] [247])
                (plus:DI (reg:DI 1 dx [orig:246 _160 ] [246])
                    (reg:DI 2 cx [orig:241 _155 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 323 322 324 20 (parallel [
            (set (reg:DI 2 cx [orig:248 _162 ] [248])
                (plus:DI (reg:DI 1 dx [orig:247 _161 ] [247])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 324 323 325 20 (set (reg/f:DI 1 dx [424])
        (symbol_ref:DI ("work1.3885") [flags 0x202]  <var_decl 0x7fa05ecd5480 work1>)) "EFILT.f":93 85 {*movdi_internal}
     (nil))
(insn 325 324 326 20 (set (reg:SF 21 xmm0 [orig:249 _163 ] [249])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:248 _162 ] [248])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [424])) [3 work1 S4 A32])) "EFILT.f":93 131 {*movsf_internal}
     (nil))
(insn 326 325 328 20 (set (reg:SF 21 xmm0 [orig:250 _164 ] [250])
        (plus:SF (reg:SF 21 xmm0 [orig:249 _163 ] [249])
            (reg:SF 23 xmm2 [orig:238 _152 ] [238]))) "EFILT.f":93 838 {*fop_sf_comm}
     (nil))
(insn 328 326 329 20 (set (reg:SF 21 xmm0 [orig:252 _166 ] [252])
        (plus:SF (reg:SF 21 xmm0 [orig:251 _165 ] [251])
            (reg:SF 21 xmm0 [orig:251 _165 ] [251]))) "EFILT.f":93 838 {*fop_sf_comm}
     (nil))
(insn 329 328 330 20 (set (reg:SF 22 xmm1 [orig:253 _167 ] [253])
        (plus:SF (reg:SF 22 xmm1 [orig:203 _117 ] [203])
            (reg:SF 21 xmm0 [orig:252 _166 ] [252]))) "EFILT.f":93 838 {*fop_sf_comm}
     (nil))
(insn 330 329 331 20 (set (reg:SI 1 dx [425])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 331 330 332 20 (set (reg:DI 1 dx [orig:254 _168 ] [254])
        (sign_extend:DI (reg:SI 1 dx [425]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 332 331 333 20 (parallel [
            (set (reg:DI 2 cx [orig:255 _169 ] [255])
                (mult:DI (reg:DI 1 dx [orig:254 _168 ] [254])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 349 {*muldi3_1}
     (nil))
(insn 333 332 334 20 (set (reg:SI 1 dx [426])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 334 333 335 20 (parallel [
            (set (reg:SI 1 dx [orig:256 _170 ] [256])
                (plus:SI (reg:SI 1 dx [426])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 335 334 336 20 (set (reg:DI 1 dx [orig:257 _171 ] [257])
        (sign_extend:DI (reg:SI 1 dx [orig:256 _170 ] [256]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 336 335 337 20 (parallel [
            (set (reg:DI 1 dx [orig:258 _172 ] [258])
                (plus:DI (reg:DI 1 dx [orig:257 _171 ] [257])
                    (reg:DI 2 cx [orig:255 _169 ] [255])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 337 336 338 20 (parallel [
            (set (reg:DI 2 cx [orig:259 _173 ] [259])
                (plus:DI (reg:DI 1 dx [orig:258 _172 ] [258])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 338 337 339 20 (set (reg/f:DI 1 dx [427])
        (symbol_ref:DI ("work1.3885") [flags 0x202]  <var_decl 0x7fa05ecd5480 work1>)) "EFILT.f":93 85 {*movdi_internal}
     (nil))
(insn 339 338 340 20 (set (reg:SF 21 xmm0 [orig:260 _174 ] [260])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:259 _173 ] [259])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [427])) [3 work1 S4 A32])) "EFILT.f":93 131 {*movsf_internal}
     (nil))
(insn 340 339 341 20 (set (reg:SF 22 xmm1 [orig:261 _175 ] [261])
        (plus:SF (reg:SF 22 xmm1 [orig:253 _167 ] [253])
            (reg:SF 21 xmm0 [orig:260 _174 ] [260]))) "EFILT.f":93 838 {*fop_sf_comm}
     (nil))
(insn 341 340 342 20 (set (reg:SI 1 dx [428])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 342 341 343 20 (set (reg:DI 1 dx [orig:262 _176 ] [262])
        (sign_extend:DI (reg:SI 1 dx [428]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 343 342 344 20 (parallel [
            (set (reg:DI 2 cx [orig:263 _177 ] [263])
                (mult:DI (reg:DI 1 dx [orig:262 _176 ] [262])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 349 {*muldi3_1}
     (nil))
(insn 344 343 345 20 (set (reg:SI 1 dx [429])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 345 344 346 20 (parallel [
            (set (reg:SI 1 dx [orig:264 _178 ] [264])
                (plus:SI (reg:SI 1 dx [429])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 346 345 347 20 (set (reg:DI 1 dx [orig:265 _179 ] [265])
        (sign_extend:DI (reg:SI 1 dx [orig:264 _178 ] [264]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 347 346 348 20 (parallel [
            (set (reg:DI 1 dx [orig:266 _180 ] [266])
                (plus:DI (reg:DI 1 dx [orig:265 _179 ] [265])
                    (reg:DI 2 cx [orig:263 _177 ] [263])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 348 347 349 20 (parallel [
            (set (reg:DI 2 cx [orig:267 _181 ] [267])
                (plus:DI (reg:DI 1 dx [orig:266 _180 ] [266])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 349 348 350 20 (set (reg/f:DI 1 dx [430])
        (symbol_ref:DI ("work1.3885") [flags 0x202]  <var_decl 0x7fa05ecd5480 work1>)) "EFILT.f":93 85 {*movdi_internal}
     (nil))
(insn 350 349 351 20 (set (reg:SF 21 xmm0 [orig:268 _182 ] [268])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:267 _181 ] [267])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [430])) [3 work1 S4 A32])) "EFILT.f":93 131 {*movsf_internal}
     (nil))
(insn 351 350 352 20 (set (reg:SF 22 xmm1 [orig:269 _183 ] [269])
        (plus:SF (reg:SF 22 xmm1 [orig:261 _175 ] [261])
            (reg:SF 21 xmm0 [orig:268 _182 ] [268]))) "EFILT.f":93 838 {*fop_sf_comm}
     (nil))
(insn 352 351 353 20 (set (reg:SI 1 dx [431])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 353 352 354 20 (parallel [
            (set (reg:SI 1 dx [orig:270 _184 ] [270])
                (plus:SI (reg:SI 1 dx [431])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 354 353 355 20 (set (reg:DI 1 dx [orig:271 _185 ] [271])
        (sign_extend:DI (reg:SI 1 dx [orig:270 _184 ] [270]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 355 354 356 20 (parallel [
            (set (reg:DI 2 cx [orig:272 _186 ] [272])
                (mult:DI (reg:DI 1 dx [orig:271 _185 ] [271])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 349 {*muldi3_1}
     (nil))
(insn 356 355 357 20 (set (reg:SI 1 dx [432])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 357 356 358 20 (set (reg:DI 1 dx [orig:273 _187 ] [273])
        (sign_extend:DI (reg:SI 1 dx [432]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 358 357 359 20 (parallel [
            (set (reg:DI 1 dx [orig:274 _188 ] [274])
                (plus:DI (reg:DI 1 dx [orig:273 _187 ] [273])
                    (reg:DI 2 cx [orig:272 _186 ] [272])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 359 358 360 20 (parallel [
            (set (reg:DI 2 cx [orig:275 _189 ] [275])
                (plus:DI (reg:DI 1 dx [orig:274 _188 ] [274])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 360 359 361 20 (set (reg/f:DI 1 dx [433])
        (symbol_ref:DI ("work1.3885") [flags 0x202]  <var_decl 0x7fa05ecd5480 work1>)) "EFILT.f":93 85 {*movdi_internal}
     (nil))
(insn 361 360 362 20 (set (reg:SF 21 xmm0 [orig:276 _190 ] [276])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:275 _189 ] [275])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [433])) [3 work1 S4 A32])) "EFILT.f":93 131 {*movsf_internal}
     (nil))
(insn 362 361 363 20 (set (reg:SF 22 xmm1 [orig:277 _191 ] [277])
        (plus:SF (reg:SF 22 xmm1 [orig:269 _183 ] [269])
            (reg:SF 21 xmm0 [orig:276 _190 ] [276]))) "EFILT.f":93 838 {*fop_sf_comm}
     (nil))
(insn 363 362 364 20 (set (reg:SI 1 dx [434])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 364 363 365 20 (parallel [
            (set (reg:SI 1 dx [orig:278 _192 ] [278])
                (plus:SI (reg:SI 1 dx [434])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -2 [0xfffffffffffffffe]))
        (nil)))
(insn 365 364 366 20 (set (reg:DI 1 dx [orig:279 _193 ] [279])
        (sign_extend:DI (reg:SI 1 dx [orig:278 _192 ] [278]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 366 365 367 20 (parallel [
            (set (reg:DI 2 cx [orig:280 _194 ] [280])
                (mult:DI (reg:DI 1 dx [orig:279 _193 ] [279])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 349 {*muldi3_1}
     (nil))
(insn 367 366 368 20 (set (reg:SI 1 dx [435])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 368 367 369 20 (set (reg:DI 1 dx [orig:281 _195 ] [281])
        (sign_extend:DI (reg:SI 1 dx [435]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 369 368 370 20 (parallel [
            (set (reg:DI 1 dx [orig:282 _196 ] [282])
                (plus:DI (reg:DI 1 dx [orig:281 _195 ] [281])
                    (reg:DI 2 cx [orig:280 _194 ] [280])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 370 369 371 20 (parallel [
            (set (reg:DI 2 cx [orig:283 _197 ] [283])
                (plus:DI (reg:DI 1 dx [orig:282 _196 ] [282])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 371 370 372 20 (set (reg/f:DI 1 dx [436])
        (symbol_ref:DI ("work1.3885") [flags 0x202]  <var_decl 0x7fa05ecd5480 work1>)) "EFILT.f":93 85 {*movdi_internal}
     (nil))
(insn 372 371 373 20 (set (reg:SF 21 xmm0 [orig:284 _198 ] [284])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:283 _197 ] [283])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [436])) [3 work1 S4 A32])) "EFILT.f":93 131 {*movsf_internal}
     (nil))
(insn 373 372 374 20 (set (reg:SI 1 dx [437])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 374 373 375 20 (set (reg:DI 1 dx [orig:285 _199 ] [285])
        (sign_extend:DI (reg:SI 1 dx [437]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 375 374 376 20 (parallel [
            (set (reg:DI 2 cx [orig:286 _200 ] [286])
                (mult:DI (reg:DI 1 dx [orig:285 _199 ] [285])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 349 {*muldi3_1}
     (nil))
(insn 376 375 377 20 (set (reg:SI 1 dx [438])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":93 86 {*movsi_internal}
     (nil))
(insn 377 376 378 20 (set (reg:DI 1 dx [orig:287 _201 ] [287])
        (sign_extend:DI (reg:SI 1 dx [438]))) "EFILT.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 378 377 379 20 (parallel [
            (set (reg:DI 1 dx [orig:288 _202 ] [288])
                (plus:DI (reg:DI 1 dx [orig:287 _201 ] [287])
                    (reg:DI 2 cx [orig:286 _200 ] [286])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 379 378 380 20 (parallel [
            (set (reg:DI 2 cx [orig:289 _203 ] [289])
                (plus:DI (reg:DI 1 dx [orig:288 _202 ] [288])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":93 222 {*adddi_1}
     (nil))
(insn 380 379 381 20 (set (reg:SF 21 xmm0 [orig:290 _204 ] [290])
        (plus:SF (reg:SF 21 xmm0 [orig:284 _198 ] [284])
            (reg:SF 22 xmm1 [orig:277 _191 ] [277]))) "EFILT.f":93 838 {*fop_sf_comm}
     (nil))
(insn 381 380 382 20 (set (reg/f:DI 1 dx [439])
        (symbol_ref:DI ("work2.3887") [flags 0x202]  <var_decl 0x7fa05ecd5510 work2>)) "EFILT.f":93 85 {*movdi_internal}
     (nil))
(insn 382 381 383 20 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:289 _203 ] [289])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [439])) [3 work2 S4 A32])
        (reg:SF 21 xmm0 [orig:290 _204 ] [290])) "EFILT.f":93 131 {*movsf_internal}
     (nil))
(insn 383 382 536 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":88 221 {*addsi_1}
     (nil))
(jump_insn 536 383 537 20 (set (pc)
        (label_ref 384)) "EFILT.f":88 683 {jump}
     (nil)
 -> 384)
;;  succ:       19 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

(barrier 537 536 569)
;; basic block 42, loop depth 0, maybe hot
;;  prev block 20, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 569 537 568 42 31 (nil) [1 uses])
(note 568 569 570 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 570 568 387 42 (const_int 0 [0]) "EFILT.f":93 718 {nop}
     (nil))
;;  succ:       21 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 21, loop depth 0, maybe hot
;;  prev block 42, next block 41, flags: (RTL, MODIFIED)
;;  pred:       42 [always]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 387 570 388 21 12 (nil) [0 uses])
(note 388 387 389 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 389 388 538 21 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":87 221 {*addsi_1}
     (nil))
(jump_insn 538 389 539 21 (set (pc)
        (label_ref 390)) "EFILT.f":87 683 {jump}
     (nil)
 -> 390)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

(barrier 539 538 566)
;; basic block 41, loop depth 0, maybe hot
;;  prev block 21, next block 22, flags: (RTL, MODIFIED)
;;  pred:       17
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 566 539 565 41 30 (nil) [1 uses])
(note 565 566 567 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 567 565 393 41 (const_int 0 [0]) "EFILT.f":88 718 {nop}
     (nil))
;;  succ:       22 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 22, loop depth 0, maybe hot
;;  prev block 41, next block 23, flags: (RTL, MODIFIED)
;;  pred:       41 [always]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 393 567 394 22 11 (nil) [0 uses])
(note 394 393 395 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 395 394 456 22 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 3 [0x3])) "EFILT.f":98 86 {*movsi_internal}
     (nil))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;;              27 [always] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 342 440
(code_label 456 395 396 23 18 (nil) [1 uses])
(note 396 456 397 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 397 396 398 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 247 [0xf7]))) "EFILT.f":98 11 {*cmpsi_1}
     (nil))
(insn 398 397 399 23 (set (reg:QI 1 dx [440])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILT.f":98 678 {*setcc_qi}
     (nil))
(insn 399 398 400 23 (set (reg:SI 1 dx [orig:342 _298 ] [342])
        (zero_extend:SI (reg:QI 1 dx [440]))) "EFILT.f":98 140 {*zero_extendqisi2}
     (nil))
(insn 400 399 401 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:342 _298 ] [342])
            (const_int 0 [0]))) "EFILT.f":98 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 401 400 402 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 572)
            (pc))) "EFILT.f":98 682 {*jcc}
     (nil)
 -> 572)
;;  succ:       43
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 402 401 403 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 403 402 450 24 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 2 [0x2])) "EFILT.f":99 86 {*movsi_internal}
     (nil))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;;              26 [always] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 343 441
(code_label 450 403 404 25 17 (nil) [1 uses])
(note 404 450 405 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 405 404 406 25 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 118 [0x76]))) "EFILT.f":99 11 {*cmpsi_1}
     (nil))
(insn 406 405 407 25 (set (reg:QI 1 dx [441])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILT.f":99 678 {*setcc_qi}
     (nil))
(insn 407 406 408 25 (set (reg:SI 1 dx [orig:343 _300 ] [343])
        (zero_extend:SI (reg:QI 1 dx [441]))) "EFILT.f":99 140 {*zero_extendqisi2}
     (nil))
(insn 408 407 409 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:343 _300 ] [343])
            (const_int 0 [0]))) "EFILT.f":99 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 409 408 410 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 575)
            (pc))) "EFILT.f":99 682 {*jcc}
     (nil)
 -> 575)
;;  succ:       44
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 44, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 442 443 444 445 446 447 448 449 450 451 452 453
(note 410 409 411 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 411 410 412 26 (set (reg:SI 1 dx [442])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":100 86 {*movsi_internal}
     (nil))
(insn 412 411 413 26 (set (reg:DI 1 dx [orig:291 _205 ] [291])
        (sign_extend:DI (reg:SI 1 dx [442]))) "EFILT.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 413 412 414 26 (parallel [
            (set (reg:DI 2 cx [orig:292 _206 ] [292])
                (mult:DI (reg:DI 1 dx [orig:291 _205 ] [291])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":100 349 {*muldi3_1}
     (nil))
(insn 414 413 415 26 (set (reg:SI 1 dx [443])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":100 86 {*movsi_internal}
     (nil))
(insn 415 414 416 26 (set (reg:DI 1 dx [orig:293 _207 ] [293])
        (sign_extend:DI (reg:SI 1 dx [443]))) "EFILT.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 416 415 417 26 (parallel [
            (set (reg:DI 1 dx [orig:294 _208 ] [294])
                (plus:DI (reg:DI 1 dx [orig:293 _207 ] [293])
                    (reg:DI 2 cx [orig:292 _206 ] [292])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":100 222 {*adddi_1}
     (nil))
(insn 417 416 418 26 (parallel [
            (set (reg:DI 2 cx [orig:295 _209 ] [295])
                (plus:DI (reg:DI 1 dx [orig:294 _208 ] [294])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":100 222 {*adddi_1}
     (nil))
(insn 418 417 419 26 (set (reg/f:DI 1 dx [444])
        (symbol_ref:DI ("work3.3889") [flags 0x202]  <var_decl 0x7fa05ecd55a0 work3>)) "EFILT.f":100 85 {*movdi_internal}
     (nil))
(insn 419 418 420 26 (set (reg:SF 22 xmm1 [orig:296 _210 ] [296])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:295 _209 ] [295])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [444])) [3 work3 S4 A32])) "EFILT.f":100 131 {*movsf_internal}
     (nil))
(insn 420 419 421 26 (set (reg:SI 1 dx [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":100 86 {*movsi_internal}
     (nil))
(insn 421 420 422 26 (set (reg:DI 1 dx [orig:297 _211 ] [297])
        (sign_extend:DI (reg:SI 1 dx [445]))) "EFILT.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 422 421 423 26 (parallel [
            (set (reg:DI 2 cx [orig:298 _212 ] [298])
                (mult:DI (reg:DI 1 dx [orig:297 _211 ] [297])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":100 349 {*muldi3_1}
     (nil))
(insn 423 422 424 26 (set (reg:SI 1 dx [446])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":100 86 {*movsi_internal}
     (nil))
(insn 424 423 425 26 (set (reg:DI 1 dx [orig:299 _213 ] [299])
        (sign_extend:DI (reg:SI 1 dx [446]))) "EFILT.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 425 424 426 26 (parallel [
            (set (reg:DI 1 dx [orig:300 _214 ] [300])
                (plus:DI (reg:DI 1 dx [orig:299 _213 ] [299])
                    (reg:DI 2 cx [orig:298 _212 ] [298])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":100 222 {*adddi_1}
     (nil))
(insn 426 425 427 26 (parallel [
            (set (reg:DI 2 cx [orig:301 _215 ] [301])
                (plus:DI (reg:DI 1 dx [orig:300 _214 ] [300])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":100 222 {*adddi_1}
     (nil))
(insn 427 426 428 26 (set (reg/f:DI 1 dx [447])
        (symbol_ref:DI ("work2.3887") [flags 0x202]  <var_decl 0x7fa05ecd5510 work2>)) "EFILT.f":100 85 {*movdi_internal}
     (nil))
(insn 428 427 429 26 (set (reg:SF 21 xmm0 [orig:302 _216 ] [302])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:301 _215 ] [301])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [447])) [3 work2 S4 A32])) "EFILT.f":100 131 {*movsf_internal}
     (nil))
(insn 429 428 430 26 (set (reg:SF 22 xmm1 [orig:303 _217 ] [303])
        (mult:SF (reg:SF 22 xmm1 [orig:296 _210 ] [296])
            (reg:SF 21 xmm0 [orig:302 _216 ] [302]))) "EFILT.f":100 838 {*fop_sf_comm}
     (nil))
(insn 430 429 431 26 (set (reg:SI 1 dx [448])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":100 86 {*movsi_internal}
     (nil))
(insn 431 430 432 26 (set (reg:DI 1 dx [orig:304 _218 ] [304])
        (sign_extend:DI (reg:SI 1 dx [448]))) "EFILT.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 432 431 433 26 (parallel [
            (set (reg:DI 2 cx [orig:305 _219 ] [305])
                (mult:DI (reg:DI 1 dx [orig:304 _218 ] [304])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":100 349 {*muldi3_1}
     (nil))
(insn 433 432 434 26 (set (reg:SI 1 dx [449])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":100 86 {*movsi_internal}
     (nil))
(insn 434 433 435 26 (set (reg:DI 1 dx [orig:306 _220 ] [306])
        (sign_extend:DI (reg:SI 1 dx [449]))) "EFILT.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 435 434 436 26 (parallel [
            (set (reg:DI 1 dx [orig:307 _221 ] [307])
                (plus:DI (reg:DI 1 dx [orig:306 _220 ] [306])
                    (reg:DI 2 cx [orig:305 _219 ] [305])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":100 222 {*adddi_1}
     (nil))
(insn 436 435 437 26 (parallel [
            (set (reg:DI 2 cx [orig:308 _222 ] [308])
                (plus:DI (reg:DI 1 dx [orig:307 _221 ] [307])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":100 222 {*adddi_1}
     (nil))
(insn 437 436 438 26 (set (reg/f:DI 1 dx [450])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fa05ecd0d80 masks>)) "EFILT.f":100 85 {*movdi_internal}
     (nil))
(insn 438 437 439 26 (set (reg:SF 21 xmm0 [orig:309 _223 ] [309])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:308 _222 ] [308])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [450])) [3 masks.hbm2 S4 A32])) "EFILT.f":100 131 {*movsf_internal}
     (nil))
(insn 439 438 440 26 (set (reg:SI 1 dx [451])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":100 86 {*movsi_internal}
     (nil))
(insn 440 439 441 26 (set (reg:DI 1 dx [orig:310 _224 ] [310])
        (sign_extend:DI (reg:SI 1 dx [451]))) "EFILT.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 441 440 442 26 (parallel [
            (set (reg:DI 2 cx [orig:311 _225 ] [311])
                (mult:DI (reg:DI 1 dx [orig:310 _224 ] [310])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":100 349 {*muldi3_1}
     (nil))
(insn 442 441 443 26 (set (reg:SI 1 dx [452])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":100 86 {*movsi_internal}
     (nil))
(insn 443 442 444 26 (set (reg:DI 1 dx [orig:312 _226 ] [312])
        (sign_extend:DI (reg:SI 1 dx [452]))) "EFILT.f":100 149 {*extendsidi2_rex64}
     (nil))
(insn 444 443 445 26 (parallel [
            (set (reg:DI 1 dx [orig:313 _227 ] [313])
                (plus:DI (reg:DI 1 dx [orig:312 _226 ] [312])
                    (reg:DI 2 cx [orig:311 _225 ] [311])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":100 222 {*adddi_1}
     (nil))
(insn 445 444 446 26 (parallel [
            (set (reg:DI 2 cx [orig:314 _228 ] [314])
                (plus:DI (reg:DI 1 dx [orig:313 _227 ] [313])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":100 222 {*adddi_1}
     (nil))
(insn 446 445 447 26 (set (reg:SF 21 xmm0 [orig:315 _229 ] [315])
        (mult:SF (reg:SF 21 xmm0 [orig:309 _223 ] [309])
            (reg:SF 22 xmm1 [orig:303 _217 ] [303]))) "EFILT.f":100 838 {*fop_sf_comm}
     (nil))
(insn 447 446 448 26 (set (reg/f:DI 1 dx [453])
        (symbol_ref:DI ("work1.3885") [flags 0x202]  <var_decl 0x7fa05ecd5480 work1>)) "EFILT.f":100 85 {*movdi_internal}
     (nil))
(insn 448 447 449 26 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:314 _228 ] [314])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [453])) [3 work1 S4 A32])
        (reg:SF 21 xmm0 [orig:315 _229 ] [315])) "EFILT.f":100 131 {*movsf_internal}
     (nil))
(insn 449 448 540 26 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":99 221 {*addsi_1}
     (nil))
(jump_insn 540 449 541 26 (set (pc)
        (label_ref 450)) "EFILT.f":99 683 {jump}
     (nil)
 -> 450)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

(barrier 541 540 575)
;; basic block 44, loop depth 0, maybe hot
;;  prev block 26, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 575 541 574 44 33 (nil) [1 uses])
(note 574 575 576 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 576 574 453 44 (const_int 0 [0]) "EFILT.f":100 718 {nop}
     (nil))
;;  succ:       27 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 27, loop depth 0, maybe hot
;;  prev block 44, next block 43, flags: (RTL, MODIFIED)
;;  pred:       44 [always]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 453 576 454 27 16 (nil) [0 uses])
(note 454 453 455 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 455 454 542 27 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":98 221 {*addsi_1}
     (nil))
(jump_insn 542 455 543 27 (set (pc)
        (label_ref 456)) "EFILT.f":98 683 {jump}
     (nil)
 -> 456)
;;  succ:       23 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

(barrier 543 542 572)
;; basic block 43, loop depth 0, maybe hot
;;  prev block 27, next block 28, flags: (RTL, MODIFIED)
;;  pred:       23
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 572 543 571 43 32 (nil) [1 uses])
(note 571 572 573 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 573 571 459 43 (const_int 0 [0]) "EFILT.f":99 718 {nop}
     (nil))
;;  succ:       28 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

;; basic block 28, loop depth 0, maybe hot
;;  prev block 43, next block 40, flags: (RTL, MODIFIED)
;;  pred:       43 [always]  (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 459 573 460 28 15 (nil) [0 uses])
(note 460 459 461 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 461 460 544 28 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 nfilt+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 nfilt+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":85 221 {*addsi_1}
     (nil))
(jump_insn 544 461 545 28 (set (pc)
        (label_ref 462)) "EFILT.f":85 683 {jump}
     (nil)
 -> 462)
;;  succ:       15 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 338

(barrier 545 544 563)
;; basic block 40, loop depth 0, maybe hot
;;  prev block 28, next block 29, flags: (RTL, MODIFIED)
;;  pred:       15
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 563 545 562 40 29 (nil) [1 uses])
(note 562 563 564 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 564 562 465 40 (const_int 0 [0]) "EFILT.f":103 718 {nop}
     (nil))
;;  succ:       29 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 40, next block 30, flags: (RTL, MODIFIED)
;;  pred:       40 [always]  (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 465 564 466 29 10 (nil) [0 uses])
(note 466 465 467 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 467 466 518 29 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "EFILT.f":107 86 {*movsi_internal}
     (nil))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;;              34 [always] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 344 454
(code_label 518 467 468 30 23 (nil) [1 uses])
(note 468 518 469 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 469 468 470 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "EFILT.f":107 11 {*cmpsi_1}
     (nil))
(insn 470 469 471 30 (set (reg:QI 0 ax [454])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILT.f":107 678 {*setcc_qi}
     (nil))
(insn 471 470 472 30 (set (reg:SI 0 ax [orig:344 _306 ] [344])
        (zero_extend:SI (reg:QI 0 ax [454]))) "EFILT.f":107 140 {*zero_extendqisi2}
     (nil))
(insn 472 471 473 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:344 _306 ] [344])
            (const_int 0 [0]))) "EFILT.f":107 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 473 472 474 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 578)
            (pc))) "EFILT.f":107 682 {*jcc}
     (nil)
 -> 578)
;;  succ:       45
;;              31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 474 473 475 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 475 474 512 31 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "EFILT.f":108 86 {*movsi_internal}
     (nil))
;;  succ:       32 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;;              33 [always] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 345 455
(code_label 512 475 476 32 22 (nil) [1 uses])
(note 476 512 477 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 477 476 478 32 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "EFILT.f":108 11 {*cmpsi_1}
     (nil))
(insn 478 477 479 32 (set (reg:QI 0 ax [455])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILT.f":108 678 {*setcc_qi}
     (nil))
(insn 479 478 480 32 (set (reg:SI 0 ax [orig:345 _308 ] [345])
        (zero_extend:SI (reg:QI 0 ax [455]))) "EFILT.f":108 140 {*zero_extendqisi2}
     (nil))
(insn 480 479 481 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:345 _308 ] [345])
            (const_int 0 [0]))) "EFILT.f":108 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 481 480 482 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 581)
            (pc))) "EFILT.f":108 682 {*jcc}
     (nil)
 -> 581)
;;  succ:       46
;;              33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 46, flags: (RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 456 457 458 459 460 461 462 463 464
(note 482 481 483 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 483 482 484 33 (set (reg:SI 0 ax [456])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":109 86 {*movsi_internal}
     (nil))
(insn 484 483 485 33 (set (reg:DI 0 ax [orig:316 _230 ] [316])
        (sign_extend:DI (reg:SI 0 ax [456]))) "EFILT.f":109 149 {*extendsidi2_rex64}
     (nil))
(insn 485 484 486 33 (parallel [
            (set (reg:DI 1 dx [orig:317 _231 ] [317])
                (mult:DI (reg:DI 0 ax [orig:316 _230 ] [316])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":109 349 {*muldi3_1}
     (nil))
(insn 486 485 487 33 (set (reg:SI 0 ax [457])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":109 86 {*movsi_internal}
     (nil))
(insn 487 486 488 33 (set (reg:DI 0 ax [orig:318 _232 ] [318])
        (sign_extend:DI (reg:SI 0 ax [457]))) "EFILT.f":109 149 {*extendsidi2_rex64}
     (nil))
(insn 488 487 489 33 (parallel [
            (set (reg:DI 0 ax [orig:319 _233 ] [319])
                (plus:DI (reg:DI 0 ax [orig:318 _232 ] [318])
                    (reg:DI 1 dx [orig:317 _231 ] [317])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":109 222 {*adddi_1}
     (nil))
(insn 489 488 490 33 (parallel [
            (set (reg:DI 1 dx [orig:320 _234 ] [320])
                (plus:DI (reg:DI 0 ax [orig:319 _233 ] [319])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":109 222 {*adddi_1}
     (nil))
(insn 490 489 491 33 (set (reg/f:DI 0 ax [458])
        (symbol_ref:DI ("work1.3885") [flags 0x202]  <var_decl 0x7fa05ecd5480 work1>)) "EFILT.f":109 85 {*movdi_internal}
     (nil))
(insn 491 490 492 33 (set (reg:SF 22 xmm1 [orig:321 _235 ] [321])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:320 _234 ] [320])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [458])) [3 work1 S4 A32])) "EFILT.f":109 131 {*movsf_internal}
     (nil))
(insn 492 491 493 33 (set (reg:SI 0 ax [459])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":109 86 {*movsi_internal}
     (nil))
(insn 493 492 494 33 (set (reg:DI 0 ax [orig:322 _236 ] [322])
        (sign_extend:DI (reg:SI 0 ax [459]))) "EFILT.f":109 149 {*extendsidi2_rex64}
     (nil))
(insn 494 493 495 33 (parallel [
            (set (reg:DI 1 dx [orig:323 _237 ] [323])
                (mult:DI (reg:DI 0 ax [orig:322 _236 ] [322])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":109 349 {*muldi3_1}
     (nil))
(insn 495 494 496 33 (set (reg:SI 0 ax [460])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":109 86 {*movsi_internal}
     (nil))
(insn 496 495 497 33 (set (reg:DI 0 ax [orig:324 _238 ] [324])
        (sign_extend:DI (reg:SI 0 ax [460]))) "EFILT.f":109 149 {*extendsidi2_rex64}
     (nil))
(insn 497 496 498 33 (parallel [
            (set (reg:DI 0 ax [orig:325 _239 ] [325])
                (plus:DI (reg:DI 0 ax [orig:324 _238 ] [324])
                    (reg:DI 1 dx [orig:323 _237 ] [323])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":109 222 {*adddi_1}
     (nil))
(insn 498 497 499 33 (parallel [
            (set (reg:DI 1 dx [orig:326 _240 ] [326])
                (plus:DI (reg:DI 0 ax [orig:325 _239 ] [325])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":109 222 {*adddi_1}
     (nil))
(insn 499 498 500 33 (set (reg/f:DI 0 ax [461])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fa05ecd0d80 masks>)) "EFILT.f":109 85 {*movdi_internal}
     (nil))
(insn 500 499 501 33 (set (reg:SF 21 xmm0 [orig:327 _241 ] [327])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:326 _240 ] [326])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [461])) [3 masks.hbm2 S4 A32])) "EFILT.f":109 131 {*movsf_internal}
     (nil))
(insn 501 500 502 33 (set (reg:SI 0 ax [462])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILT.f":109 86 {*movsi_internal}
     (nil))
(insn 502 501 503 33 (set (reg:DI 0 ax [orig:328 _242 ] [328])
        (sign_extend:DI (reg:SI 0 ax [462]))) "EFILT.f":109 149 {*extendsidi2_rex64}
     (nil))
(insn 503 502 504 33 (parallel [
            (set (reg:DI 1 dx [orig:329 _243 ] [329])
                (mult:DI (reg:DI 0 ax [orig:328 _242 ] [328])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":109 349 {*muldi3_1}
     (nil))
(insn 504 503 505 33 (set (reg:SI 0 ax [463])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILT.f":109 86 {*movsi_internal}
     (nil))
(insn 505 504 506 33 (set (reg:DI 0 ax [orig:330 _244 ] [330])
        (sign_extend:DI (reg:SI 0 ax [463]))) "EFILT.f":109 149 {*extendsidi2_rex64}
     (nil))
(insn 506 505 507 33 (parallel [
            (set (reg:DI 0 ax [orig:331 _245 ] [331])
                (plus:DI (reg:DI 0 ax [orig:330 _244 ] [330])
                    (reg:DI 1 dx [orig:329 _243 ] [329])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":109 222 {*adddi_1}
     (nil))
(insn 507 506 508 33 (parallel [
            (set (reg:DI 1 dx [orig:332 _246 ] [332])
                (plus:DI (reg:DI 0 ax [orig:331 _245 ] [331])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":109 222 {*adddi_1}
     (nil))
(insn 508 507 509 33 (set (reg:SF 21 xmm0 [orig:333 _247 ] [333])
        (mult:SF (reg:SF 21 xmm0 [orig:327 _241 ] [327])
            (reg:SF 22 xmm1 [orig:321 _235 ] [321]))) "EFILT.f":109 838 {*fop_sf_comm}
     (nil))
(insn 509 508 510 33 (set (reg/f:DI 0 ax [464])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 egrid+0 S8 A64])) "EFILT.f":109 85 {*movdi_internal}
     (nil))
(insn 510 509 511 33 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:332 _246 ] [332])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [464])) [3 *egrid_275(D) S4 A32])
        (reg:SF 21 xmm0 [orig:333 _247 ] [333])) "EFILT.f":109 131 {*movsf_internal}
     (nil))
(insn 511 510 546 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":108 221 {*addsi_1}
     (nil))
(jump_insn 546 511 547 33 (set (pc)
        (label_ref 512)) "EFILT.f":108 683 {jump}
     (nil)
 -> 512)
;;  succ:       32 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 547 546 581)
;; basic block 46, loop depth 0, maybe hot
;;  prev block 33, next block 34, flags: (RTL, MODIFIED)
;;  pred:       32
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 581 547 580 46 35 (nil) [1 uses])
(note 580 581 582 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 582 580 515 46 (const_int 0 [0]) "EFILT.f":109 718 {nop}
     (nil))
;;  succ:       34 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 46, next block 45, flags: (RTL, MODIFIED)
;;  pred:       46 [always]  (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 515 582 516 34 21 (nil) [0 uses])
(note 516 515 517 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 517 516 548 34 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILT.f":107 221 {*addsi_1}
     (nil))
(jump_insn 548 517 549 34 (set (pc)
        (label_ref 518)) "EFILT.f":107 683 {jump}
     (nil)
 -> 518)
;;  succ:       30 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 549 548 578)
;; basic block 45, loop depth 0, maybe hot
;;  prev block 34, next block 35, flags: (RTL, MODIFIED)
;;  pred:       30
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 578 549 577 45 34 (nil) [1 uses])
(note 577 578 579 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 579 577 521 45 (const_int 0 [0]) "EFILT.f":108 718 {nop}
     (nil))
;;  succ:       35 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 45, next block 1, flags: (RTL, MODIFIED)
;;  pred:       45 [always]  (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 521 579 522 35 20 (nil) [0 uses])
(note 522 521 527 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 527 522 583 35 (const_int 0 [0]) "EFILT.f":114 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 583 527 0 NOTE_INSN_DELETED)
