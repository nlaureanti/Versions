
;; Function calekm (calekm_, funcdef_no=0, decl_uid=3770, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 7:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 8:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 9:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 10:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 11:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 12:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 36
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 37:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 39:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 40:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 47:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 49:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 50:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 53:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 56
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 57:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 63
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 64:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 65:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 67:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 69:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 72:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 75
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 77:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 78:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 79:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 80:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 86:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 92:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 93:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 94:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 117:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 124
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 126
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 127:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 128:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 129:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 132:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 139
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 141
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 142:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 143:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 144:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 145:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 149:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 152
	 Choosing alt 0 in insn 152:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 153:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 154:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 155:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 156:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 158:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 160:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 163
	 Choosing alt 0 in insn 163:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 164:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 165:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 166:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 167
	 Choosing alt 1 in insn 167:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 171:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 173:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 174
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 175:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 176:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 177
	 Choosing alt 1 in insn 177:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 178:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 179:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 180:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 186:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 192:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 193:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 195:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 199:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 207:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 217:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 220
	 Choosing alt 0 in insn 220:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 221:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 222:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 223:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 225:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 228:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 231:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 235
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 236:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 237:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 238:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 239:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 240:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 243:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 246:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 250
	 Choosing alt 0 in insn 250:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 251:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 252:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 253:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 254:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 255:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 258:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 261
	 Choosing alt 0 in insn 261:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 262:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 263:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 264:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 265:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 266:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 268:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 269:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=499 from oldreg=187, assigning class SSE_REGS to r499
  269: r499:SF=r499:SF/r188:SF
      REG_DEAD r188:SF
      REG_DEAD r187:SF
    Inserting insn reload before:
  672: r499:SF=r187:SF
    Inserting insn reload after:
  673: r391:SF=r499:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 270:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 271:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 272:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 273:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 276:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 279:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 282
	 Choosing alt 0 in insn 282:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 284
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 285:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 286:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 287:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 290:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 293:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 294:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 297
	 Choosing alt 0 in insn 297:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 299
	 Choosing alt 0 in insn 299:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 300:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 301:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 302:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 303:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 307:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 310
	 Choosing alt 0 in insn 310:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 311:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 312:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 313:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 314:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 315:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 317:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=500 from oldreg=210, assigning class SSE_REGS to r500
  317: r500:SF=r500:SF/r218:SF
      REG_DEAD r218:SF
      REG_DEAD r210:SF
    Inserting insn reload before:
  674: r500:SF=r210:SF
    Inserting insn reload after:
  675: r407:SF=r500:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 318:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 320:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 322:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 325
	 Choosing alt 0 in insn 325:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 326:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 327:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 328:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 330:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 332:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 335
	 Choosing alt 0 in insn 335:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 336:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 337:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 338:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 339:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 341:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 342:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 343:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 345:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=501 from oldreg=234, assigning class SSE_REGS to r501
  345: r501:SF=r501:SF/r237:SF
      REG_DEAD r237:SF
      REG_DEAD r234:SF
    Inserting insn reload before:
  676: r501:SF=r234:SF
    Inserting insn reload after:
  677: r415:SF=r501:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 346:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 347:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 348:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=502 from oldreg=416, assigning class SSE_REGS to r502
  348: r502:SF=r502:SF*[frame:DI-0x44]
      REG_DEAD r416:SF
    Inserting insn reload before:
  678: r502:SF=r416:SF
    Inserting insn reload after:
  679: r238:SF=r502:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 351:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 354
	 Choosing alt 0 in insn 354:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 355:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 356:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 357:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 358
	 Choosing alt 1 in insn 358:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 359:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 361:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 362:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 363:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=503 from oldreg=421, assigning class SSE_REGS to r503
  363: r503:SF=r503:SF*[frame:DI-0x40]
      REG_DEAD r421:SF
    Inserting insn reload before:
  680: r503:SF=r421:SF
    Inserting insn reload after:
  681: r247:SF=r503:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 366:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 369
	 Choosing alt 0 in insn 369:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 370:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 371:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 372:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 373
	 Choosing alt 1 in insn 373:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 374:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 375:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 376:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 377:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 378:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 379:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 380
	 Choosing alt 1 in insn 380:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 381
	 Choosing alt 1 in insn 381:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =v  (1) vm {*sqrtsf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 383:  (0) m  (1) v {*movsf_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 384:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 385:  (0) r  (1) r  (2) le {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 388:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 390:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 391:  (0) ?m  (1) rF {*movsf_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 392:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 393:  (0) r  (1) r  (2) le {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 396:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 398:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 399:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 400:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 401:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 402:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =v  (1) vm {*sqrtsf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 404:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 405:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 406:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 407
	 Choosing alt 1 in insn 407:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 408:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 409:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 410:  (0) v  (1) vm {*cmpisf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 416:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 417:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 420:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 421:  (0) v  (1) vm {*cmpisf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 427:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 428:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 431:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 432:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 436:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 437:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 438:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 439:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 440:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 441:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 442:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 443:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 446:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 447:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 448:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 449:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 450:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 451:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 452:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 455:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 456:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 457:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 458:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 459:  (0) v  (1) vm {*cmpisf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 465:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 466:  (0) v  (1) vm {*cmpisf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 470:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 471:  (0) v  (1) vm {*cmpisf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 477:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 478:  (0) v  (1) vm {*cmpisf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 485:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 486:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 488:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 491:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 492:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 493:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 494:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 495:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=504 from oldreg=267, assigning class SSE_REGS to r504
  495: r504:SF=r504:SF*[frame:DI-0x18]
      REG_DEAD r267:SF
    Inserting insn reload before:
  682: r504:SF=r267:SF
    Inserting insn reload after:
  683: r268:SF=r504:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 496:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 499:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 502
	 Choosing alt 0 in insn 502:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 503:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 504
	 Choosing alt 1 in insn 504:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 505:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 506:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 507:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 508:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 509:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 510:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 511:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 512:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 514:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 515:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 516:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 517:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 518:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 519:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 520:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 521:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 523:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 524:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 525:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 526:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 527:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 528:  (0) v  (1) vm {*cmpisf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 534:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 535:  (0) v  (1) vm {*cmpisf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 541:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 542:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 544:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 547:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 548:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 549:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 550:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 551:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=505 from oldreg=279, assigning class SSE_REGS to r505
  551: r505:SF=r505:SF*[frame:DI-0x24]
      REG_DEAD r279:SF
    Inserting insn reload before:
  684: r505:SF=r279:SF
    Inserting insn reload after:
  685: r280:SF=r505:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 552:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 555:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 557:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 558
	 Choosing alt 0 in insn 558:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 559:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 560
	 Choosing alt 1 in insn 560:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 561:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 562:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 563:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 565:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 566:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 568
	 Choosing alt 0 in insn 568:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 569:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 570:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 571:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 572:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 573:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 574:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 575:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 577
	 Choosing alt 0 in insn 577:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 578:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 579:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 580
	 Choosing alt 1 in insn 580:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 581:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 582:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 583:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 584:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 585:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 587:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 588
	 Choosing alt 0 in insn 588:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 589:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 590:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 591:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 592:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 593:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 594:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 595:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 596:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 597
	 Choosing alt 0 in insn 597:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 598:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 599:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 600
	 Choosing alt 1 in insn 600:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 601:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 602:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 603:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 609:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 34
EBB 7
EBB 33
EBB 8
EBB 9 10
EBB 11 12
EBB 36
EBB 13
EBB 35
EBB 14
EBB 15 16
EBB 17 18 19
EBB 20 21
EBB 22 23
EBB 24 25
EBB 26
EBB 27 28 29
EBB 30
EBB 38
EBB 31
EBB 37
EBB 32

********** Pseudo live ranges #1: **********

  BB 32
   Insn 640: point = 0, n_alt = -1
  BB 37
   Insn 667: point = 0, n_alt = -1
  BB 15
   Insn 205: point = 0, n_alt = -1
   Insn 204: point = 0, n_alt = 0
   Insn 203: point = 1, n_alt = 0
   Insn 202: point = 3, n_alt = 0
   Insn 201: point = 4, n_alt = 0
  BB 31
   Insn 651: point = 5, n_alt = -1
   Insn 609: point = 5, n_alt = 1
  BB 38
   Insn 670: point = 6, n_alt = -1
  BB 17
   Insn 213: point = 7, n_alt = -1
   Insn 212: point = 7, n_alt = 0
   Insn 211: point = 8, n_alt = 0
   Insn 210: point = 10, n_alt = 0
   Insn 209: point = 11, n_alt = 0
  BB 30
   Insn 649: point = 12, n_alt = -1
   Insn 603: point = 12, n_alt = 1
   Insn 602: point = 12, n_alt = 8
   Insn 601: point = 13, n_alt = 3
   Insn 600: point = 14, n_alt = 1
   Insn 599: point = 16, n_alt = 7
   Insn 598: point = 17, n_alt = 3
   Insn 597: point = 19, n_alt = 0
   Insn 596: point = 21, n_alt = 0
   Insn 595: point = 23, n_alt = 0
   Insn 594: point = 24, n_alt = 0
   Insn 593: point = 26, n_alt = 0
   Insn 592: point = 28, n_alt = 0
   Insn 591: point = 29, n_alt = 7
   Insn 590: point = 31, n_alt = 3
   Insn 589: point = 32, n_alt = 3
   Insn 588: point = 34, n_alt = 0
   Insn 587: point = 36, n_alt = 0
   Insn 586: point = 38, n_alt = 0
   Insn 585: point = 39, n_alt = 0
   Insn 584: point = 41, n_alt = 0
   Insn 583: point = 43, n_alt = 0
   Insn 582: point = 44, n_alt = 8
   Insn 581: point = 45, n_alt = 3
   Insn 580: point = 46, n_alt = 1
   Insn 579: point = 48, n_alt = 7
   Insn 578: point = 49, n_alt = 3
   Insn 577: point = 51, n_alt = 0
   Insn 576: point = 53, n_alt = 0
   Insn 575: point = 55, n_alt = 0
   Insn 574: point = 56, n_alt = 0
   Insn 573: point = 58, n_alt = 0
   Insn 572: point = 60, n_alt = 0
   Insn 571: point = 61, n_alt = 7
   Insn 570: point = 63, n_alt = 3
   Insn 569: point = 64, n_alt = 3
   Insn 568: point = 66, n_alt = 0
   Insn 567: point = 68, n_alt = 0
   Insn 566: point = 70, n_alt = 0
   Insn 565: point = 71, n_alt = 0
   Insn 564: point = 73, n_alt = 0
   Insn 563: point = 75, n_alt = 0
   Insn 562: point = 76, n_alt = 8
   Insn 561: point = 77, n_alt = 3
   Insn 560: point = 78, n_alt = 1
   Insn 559: point = 80, n_alt = 3
   Insn 558: point = 82, n_alt = 0
   Insn 557: point = 84, n_alt = 0
   Insn 556: point = 86, n_alt = 0
   Insn 555: point = 87, n_alt = 0
   Insn 554: point = 89, n_alt = 0
   Insn 553: point = 91, n_alt = 0
   Insn 552: point = 92, n_alt = 7
   Insn 685: point = 93, n_alt = -2
	Hard reg 22 is preferable by r505 with profit 1000
   Insn 551: point = 95, n_alt = 1
   Insn 684: point = 95, n_alt = -2
	Hard reg 22 is preferable by r505 with profit 1000
	Hard reg 21 is preferable by r505 with profit 1000
   Insn 550: point = 97, n_alt = 1
   Insn 549: point = 99, n_alt = 1
   Insn 548: point = 101, n_alt = 1
   Insn 547: point = 103, n_alt = 7
  BB 29
   Insn 544: point = 105, n_alt = 8
   Insn 543: point = 106, n_alt = 0
   Insn 542: point = 108, n_alt = 2
   Insn 541: point = 109, n_alt = 7
  BB 28
   Insn 536: point = 111, n_alt = -1
   Insn 535: point = 111, n_alt = 1
   Insn 534: point = 112, n_alt = 7
  BB 27
   Insn 529: point = 114, n_alt = -1
   Insn 528: point = 114, n_alt = 1
   Insn 527: point = 115, n_alt = 7
   Insn 526: point = 116, n_alt = 7
   Insn 525: point = 117, n_alt = 4
   Insn 524: point = 118, n_alt = 9
   Insn 523: point = 119, n_alt = 0
   Insn 522: point = 119, n_alt = -2
   Insn 521: point = 120, n_alt = 7
   Insn 520: point = 121, n_alt = 8
   Insn 519: point = 122, n_alt = 2
   Insn 518: point = 124, n_alt = 1
   Insn 517: point = 126, n_alt = 7
   Insn 516: point = 127, n_alt = 4
   Insn 515: point = 128, n_alt = 9
   Insn 514: point = 129, n_alt = 0
   Insn 513: point = 129, n_alt = -2
   Insn 512: point = 130, n_alt = 7
   Insn 511: point = 131, n_alt = 8
   Insn 510: point = 132, n_alt = 1
   Insn 509: point = 134, n_alt = 7
   Insn 508: point = 135, n_alt = 8
   Insn 507: point = 136, n_alt = 7
   Insn 506: point = 137, n_alt = 8
   Insn 505: point = 138, n_alt = 3
   Insn 504: point = 139, n_alt = 1
   Insn 503: point = 141, n_alt = 3
   Insn 502: point = 143, n_alt = 0
   Insn 501: point = 145, n_alt = 0
   Insn 500: point = 147, n_alt = 0
   Insn 499: point = 148, n_alt = 0
   Insn 498: point = 150, n_alt = 0
   Insn 497: point = 152, n_alt = 0
   Insn 496: point = 153, n_alt = 7
   Insn 683: point = 154, n_alt = -2
	Hard reg 22 is preferable by r504 with profit 1000
   Insn 495: point = 156, n_alt = 1
   Insn 682: point = 156, n_alt = -2
	Hard reg 22 is preferable by r504 with profit 1000
	Hard reg 21 is preferable by r504 with profit 1000
   Insn 494: point = 158, n_alt = 1
   Insn 493: point = 160, n_alt = 1
   Insn 492: point = 162, n_alt = 1
   Insn 491: point = 164, n_alt = 7
  BB 26
   Insn 488: point = 166, n_alt = 8
   Insn 487: point = 167, n_alt = 0
   Insn 486: point = 169, n_alt = 2
   Insn 485: point = 170, n_alt = 7
  BB 25
   Insn 479: point = 172, n_alt = -1
   Insn 478: point = 172, n_alt = 1
   Insn 477: point = 173, n_alt = 7
  BB 24
   Insn 472: point = 175, n_alt = -1
   Insn 471: point = 175, n_alt = 1
   Insn 470: point = 176, n_alt = 7
  BB 23
   Insn 467: point = 178, n_alt = -1
   Insn 466: point = 178, n_alt = 1
   Insn 465: point = 179, n_alt = 7
  BB 22
   Insn 460: point = 181, n_alt = -1
   Insn 459: point = 181, n_alt = 1
   Insn 458: point = 182, n_alt = 7
   Insn 457: point = 183, n_alt = 7
   Insn 456: point = 184, n_alt = 4
   Insn 455: point = 185, n_alt = 9
   Insn 454: point = 186, n_alt = 0
   Insn 453: point = 186, n_alt = -2
   Insn 452: point = 187, n_alt = 7
   Insn 451: point = 188, n_alt = 8
   Insn 450: point = 189, n_alt = 2
   Insn 449: point = 191, n_alt = 1
   Insn 448: point = 193, n_alt = 7
   Insn 447: point = 194, n_alt = 4
   Insn 446: point = 195, n_alt = 9
   Insn 445: point = 196, n_alt = 0
   Insn 444: point = 196, n_alt = -2
   Insn 443: point = 197, n_alt = 7
   Insn 442: point = 198, n_alt = 8
   Insn 441: point = 199, n_alt = 1
   Insn 440: point = 201, n_alt = 7
   Insn 439: point = 202, n_alt = 8
   Insn 438: point = 203, n_alt = 7
   Insn 437: point = 204, n_alt = 4
   Insn 436: point = 205, n_alt = 9
   Insn 435: point = 206, n_alt = 0
   Insn 434: point = 206, n_alt = -2
   Insn 433: point = 207, n_alt = 0
   Insn 432: point = 209, n_alt = 2
   Insn 431: point = 210, n_alt = 7
  BB 21
   Insn 428: point = 212, n_alt = 8
   Insn 427: point = 213, n_alt = 7
  BB 20
   Insn 422: point = 215, n_alt = -1
   Insn 421: point = 215, n_alt = 1
   Insn 420: point = 216, n_alt = 7
  BB 19
   Insn 417: point = 218, n_alt = 8
   Insn 416: point = 219, n_alt = 7
  BB 18
   Insn 411: point = 221, n_alt = -1
   Insn 410: point = 221, n_alt = 1
   Insn 409: point = 222, n_alt = 7
   Insn 408: point = 223, n_alt = 8
   Insn 407: point = 224, n_alt = 1
   Insn 406: point = 226, n_alt = 7
   Insn 405: point = 227, n_alt = 7
   Insn 404: point = 228, n_alt = 8
   Insn 403: point = 229, n_alt = 0
   Insn 402: point = 231, n_alt = 2
   Insn 401: point = 233, n_alt = 7
   Insn 400: point = 234, n_alt = 7
   Insn 399: point = 235, n_alt = 4
   Insn 398: point = 236, n_alt = 9
   Insn 397: point = 237, n_alt = 0
   Insn 396: point = 237, n_alt = 3
   Insn 395: point = 237, n_alt = -2
   Insn 394: point = 238, n_alt = -2
   Insn 393: point = 239, n_alt = 3
   Insn 392: point = 240, n_alt = 3
   Insn 391: point = 241, n_alt = 4
   Insn 390: point = 242, n_alt = 9
   Insn 389: point = 243, n_alt = 0
   Insn 388: point = 243, n_alt = 3
   Insn 387: point = 243, n_alt = -2
   Insn 386: point = 244, n_alt = -2
   Insn 385: point = 245, n_alt = 3
   Insn 384: point = 246, n_alt = 3
   Insn 383: point = 247, n_alt = 8
   Insn 382: point = 248, n_alt = 0
   Insn 381: point = 250, n_alt = 1
   Insn 380: point = 252, n_alt = 1
   Insn 379: point = 254, n_alt = 7
   Insn 378: point = 255, n_alt = 7
   Insn 377: point = 256, n_alt = 1
   Insn 376: point = 258, n_alt = 7
   Insn 375: point = 259, n_alt = 7
   Insn 374: point = 260, n_alt = 8
   Insn 373: point = 261, n_alt = 1
   Insn 372: point = 263, n_alt = 7
   Insn 371: point = 265, n_alt = 4
   Insn 370: point = 266, n_alt = 3
   Insn 369: point = 268, n_alt = 0
   Insn 368: point = 270, n_alt = 0
   Insn 367: point = 272, n_alt = 0
   Insn 366: point = 273, n_alt = 0
   Insn 365: point = 275, n_alt = 0
   Insn 364: point = 277, n_alt = 0
   Insn 681: point = 278, n_alt = -2
	Hard reg 22 is preferable by r503 with profit 1000
   Insn 363: point = 280, n_alt = 1
   Insn 680: point = 280, n_alt = -2
	Hard reg 22 is preferable by r503 with profit 1000
	Hard reg 21 is preferable by r503 with profit 1000
   Insn 362: point = 282, n_alt = 7
   Insn 361: point = 283, n_alt = 8
   Insn 360: point = 284, n_alt = 0
   Insn 359: point = 286, n_alt = 2
   Insn 358: point = 287, n_alt = 1
   Insn 357: point = 289, n_alt = 7
   Insn 356: point = 291, n_alt = 4
   Insn 355: point = 292, n_alt = 3
   Insn 354: point = 294, n_alt = 0
   Insn 353: point = 296, n_alt = 0
   Insn 352: point = 298, n_alt = 0
   Insn 351: point = 299, n_alt = 0
   Insn 350: point = 301, n_alt = 0
   Insn 349: point = 303, n_alt = 0
   Insn 679: point = 304, n_alt = -2
	Hard reg 22 is preferable by r502 with profit 1000
   Insn 348: point = 306, n_alt = 1
   Insn 678: point = 306, n_alt = -2
	Hard reg 22 is preferable by r502 with profit 1000
	Hard reg 21 is preferable by r502 with profit 1000
   Insn 347: point = 308, n_alt = 7
   Insn 346: point = 309, n_alt = 8
   Insn 677: point = 310, n_alt = -2
	Hard reg 21 is preferable by r501 with profit 1000
   Insn 345: point = 312, n_alt = 2
   Insn 676: point = 313, n_alt = -2
	Hard reg 21 is preferable by r501 with profit 1000
	Hard reg 22 is preferable by r501 with profit 1000
   Insn 344: point = 315, n_alt = -2
   Insn 343: point = 317, n_alt = 1
   Insn 342: point = 319, n_alt = 7
   Insn 341: point = 321, n_alt = 4
   Insn 340: point = 322, n_alt = -2
   Insn 339: point = 324, n_alt = 2
   Insn 338: point = 326, n_alt = 7
   Insn 337: point = 328, n_alt = 4
   Insn 336: point = 329, n_alt = 3
   Insn 335: point = 331, n_alt = 0
   Insn 334: point = 333, n_alt = 0
   Insn 333: point = 335, n_alt = 0
   Insn 332: point = 336, n_alt = 0
   Insn 331: point = 338, n_alt = 0
   Insn 330: point = 340, n_alt = 0
   Insn 329: point = 342, n_alt = 0
   Insn 328: point = 343, n_alt = 7
   Insn 327: point = 345, n_alt = 4
   Insn 326: point = 346, n_alt = 3
   Insn 325: point = 348, n_alt = 0
   Insn 324: point = 350, n_alt = 0
   Insn 323: point = 352, n_alt = 0
   Insn 322: point = 353, n_alt = 0
   Insn 321: point = 355, n_alt = 0
   Insn 320: point = 357, n_alt = 0
   Insn 319: point = 359, n_alt = 0
   Insn 318: point = 360, n_alt = 8
   Insn 675: point = 361, n_alt = -2
	Hard reg 21 is preferable by r500 with profit 1000
   Insn 317: point = 363, n_alt = 2
   Insn 674: point = 364, n_alt = -2
	Hard reg 21 is preferable by r500 with profit 1000
	Hard reg 22 is preferable by r500 with profit 1000
   Insn 316: point = 366, n_alt = -2
   Insn 315: point = 368, n_alt = 1
   Insn 314: point = 370, n_alt = 7
   Insn 313: point = 372, n_alt = 0
   Insn 312: point = 374, n_alt = 4
   Insn 311: point = 375, n_alt = 3
   Insn 310: point = 377, n_alt = 0
   Insn 309: point = 379, n_alt = 0
   Insn 308: point = 381, n_alt = 0
   Insn 307: point = 382, n_alt = 0
   Insn 306: point = 384, n_alt = 0
   Insn 305: point = 386, n_alt = 0
   Insn 304: point = 387, n_alt = -2
   Insn 303: point = 389, n_alt = 2
   Insn 302: point = 391, n_alt = 7
   Insn 301: point = 393, n_alt = 4
   Insn 300: point = 394, n_alt = 3
   Insn 299: point = 396, n_alt = 0
   Insn 298: point = 398, n_alt = 0
   Insn 297: point = 400, n_alt = 0
   Insn 296: point = 402, n_alt = 0
   Insn 295: point = 403, n_alt = 0
   Insn 294: point = 405, n_alt = 0
   Insn 293: point = 407, n_alt = 0
   Insn 292: point = 409, n_alt = 0
   Insn 291: point = 411, n_alt = 0
   Insn 290: point = 412, n_alt = 0
   Insn 289: point = 414, n_alt = 0
   Insn 288: point = 416, n_alt = 0
   Insn 287: point = 417, n_alt = 7
   Insn 286: point = 419, n_alt = 4
   Insn 285: point = 420, n_alt = 3
   Insn 284: point = 422, n_alt = 0
   Insn 283: point = 424, n_alt = 0
   Insn 282: point = 426, n_alt = 0
   Insn 281: point = 428, n_alt = 0
   Insn 280: point = 429, n_alt = 0
   Insn 279: point = 431, n_alt = 0
   Insn 278: point = 433, n_alt = 0
   Insn 277: point = 435, n_alt = 0
   Insn 276: point = 436, n_alt = 0
   Insn 275: point = 438, n_alt = 0
   Insn 274: point = 440, n_alt = 0
   Insn 273: point = 441, n_alt = 8
   Insn 272: point = 442, n_alt = 2
   Insn 271: point = 444, n_alt = 7
   Insn 270: point = 445, n_alt = 8
   Insn 673: point = 446, n_alt = -2
	Hard reg 21 is preferable by r499 with profit 1000
   Insn 269: point = 448, n_alt = 2
   Insn 672: point = 449, n_alt = -2
	Hard reg 21 is preferable by r499 with profit 1000
	Hard reg 22 is preferable by r499 with profit 1000
   Insn 268: point = 451, n_alt = 7
   Insn 267: point = 452, n_alt = -2
   Insn 266: point = 454, n_alt = 1
   Insn 265: point = 456, n_alt = 7
   Insn 264: point = 458, n_alt = 0
   Insn 263: point = 460, n_alt = 4
   Insn 262: point = 461, n_alt = 3
   Insn 261: point = 463, n_alt = 0
   Insn 260: point = 465, n_alt = 0
   Insn 259: point = 467, n_alt = 0
   Insn 258: point = 468, n_alt = 0
   Insn 257: point = 470, n_alt = 0
   Insn 256: point = 472, n_alt = 0
   Insn 255: point = 473, n_alt = 8
   Insn 254: point = 474, n_alt = 7
   Insn 253: point = 476, n_alt = 0
   Insn 252: point = 478, n_alt = 4
   Insn 251: point = 479, n_alt = 3
   Insn 250: point = 481, n_alt = 0
   Insn 249: point = 483, n_alt = 0
   Insn 248: point = 485, n_alt = 0
   Insn 247: point = 486, n_alt = 0
   Insn 246: point = 488, n_alt = 0
   Insn 245: point = 490, n_alt = 0
   Insn 244: point = 492, n_alt = 0
   Insn 243: point = 493, n_alt = 1
   Insn 242: point = 495, n_alt = 0
   Insn 241: point = 497, n_alt = 0
   Insn 240: point = 498, n_alt = 8
   Insn 239: point = 499, n_alt = 7
   Insn 238: point = 501, n_alt = 0
   Insn 237: point = 503, n_alt = 4
   Insn 236: point = 504, n_alt = 3
   Insn 235: point = 506, n_alt = 0
   Insn 234: point = 508, n_alt = 0
   Insn 233: point = 510, n_alt = 0
   Insn 232: point = 511, n_alt = 0
   Insn 231: point = 513, n_alt = 0
   Insn 230: point = 515, n_alt = 0
   Insn 229: point = 517, n_alt = 0
   Insn 228: point = 518, n_alt = 1
   Insn 227: point = 520, n_alt = 0
   Insn 226: point = 522, n_alt = 0
   Insn 225: point = 523, n_alt = 1
   Insn 224: point = 524, n_alt = 0
   Insn 223: point = 526, n_alt = 0
   Insn 222: point = 528, n_alt = 4
   Insn 221: point = 529, n_alt = 3
   Insn 220: point = 531, n_alt = 0
   Insn 219: point = 533, n_alt = 0
   Insn 218: point = 535, n_alt = 0
   Insn 217: point = 536, n_alt = 0
   Insn 216: point = 538, n_alt = 0
   Insn 215: point = 540, n_alt = 0
  BB 16
   Insn 207: point = 542, n_alt = 1
  BB 14
   Insn 199: point = 543, n_alt = 1
   Insn 198: point = 544, n_alt = 0
   Insn 197: point = 545, n_alt = 0
   Insn 196: point = 546, n_alt = 0
   Insn 195: point = 546, n_alt = 3
   Insn 194: point = 546, n_alt = 2
   Insn 193: point = 546, n_alt = 4
   Insn 192: point = 546, n_alt = 4
  BB 35
   Insn 661: point = 546, n_alt = -1
  BB 9
   Insn 105: point = 546, n_alt = -1
   Insn 104: point = 546, n_alt = 0
   Insn 103: point = 547, n_alt = 0
   Insn 102: point = 549, n_alt = 0
   Insn 101: point = 550, n_alt = 0
  BB 13
   Insn 647: point = 551, n_alt = -1
   Insn 186: point = 551, n_alt = 1
  BB 36
   Insn 664: point = 552, n_alt = -1
  BB 11
   Insn 113: point = 553, n_alt = -1
   Insn 112: point = 553, n_alt = 0
   Insn 111: point = 554, n_alt = 0
   Insn 110: point = 556, n_alt = 0
   Insn 109: point = 557, n_alt = 0
  BB 12
   Insn 645: point = 558, n_alt = -1
   Insn 180: point = 558, n_alt = 1
   Insn 179: point = 558, n_alt = 8
   Insn 178: point = 559, n_alt = 4
   Insn 177: point = 560, n_alt = 1
   Insn 176: point = 562, n_alt = 7
   Insn 175: point = 563, n_alt = 3
   Insn 174: point = 565, n_alt = 0
   Insn 173: point = 567, n_alt = 1
   Insn 172: point = 569, n_alt = 0
   Insn 171: point = 570, n_alt = 0
   Insn 170: point = 572, n_alt = 1
   Insn 169: point = 574, n_alt = 0
   Insn 168: point = 575, n_alt = -2
   Insn 167: point = 577, n_alt = 1
   Insn 166: point = 579, n_alt = 7
   Insn 165: point = 581, n_alt = 4
   Insn 164: point = 582, n_alt = 3
   Insn 163: point = 584, n_alt = 0
   Insn 162: point = 586, n_alt = 1
   Insn 161: point = 588, n_alt = 0
   Insn 160: point = 589, n_alt = 0
   Insn 159: point = 591, n_alt = 1
   Insn 158: point = 593, n_alt = 0
   Insn 157: point = 595, n_alt = 0
   Insn 156: point = 596, n_alt = 1
   Insn 155: point = 598, n_alt = 7
   Insn 154: point = 600, n_alt = 4
   Insn 153: point = 601, n_alt = 3
   Insn 152: point = 603, n_alt = 0
   Insn 151: point = 605, n_alt = 1
   Insn 150: point = 607, n_alt = 0
   Insn 149: point = 608, n_alt = 0
   Insn 148: point = 610, n_alt = 1
   Insn 147: point = 612, n_alt = 0
   Insn 146: point = 614, n_alt = 0
   Insn 145: point = 615, n_alt = 1
   Insn 144: point = 617, n_alt = 7
   Insn 143: point = 619, n_alt = 4
   Insn 142: point = 620, n_alt = 3
   Insn 141: point = 622, n_alt = 0
   Insn 140: point = 624, n_alt = 1
   Insn 139: point = 626, n_alt = 0
   Insn 138: point = 628, n_alt = 0
   Insn 137: point = 629, n_alt = 0
   Insn 136: point = 631, n_alt = 0
   Insn 135: point = 633, n_alt = 0
   Insn 134: point = 635, n_alt = 1
   Insn 133: point = 637, n_alt = 0
   Insn 132: point = 638, n_alt = 0
   Insn 131: point = 640, n_alt = 1
   Insn 130: point = 642, n_alt = 0
   Insn 129: point = 643, n_alt = 7
   Insn 128: point = 645, n_alt = 4
   Insn 127: point = 646, n_alt = 3
   Insn 126: point = 648, n_alt = 0
   Insn 125: point = 650, n_alt = 1
   Insn 124: point = 652, n_alt = 0
   Insn 123: point = 654, n_alt = 0
   Insn 122: point = 655, n_alt = 0
   Insn 121: point = 657, n_alt = 0
   Insn 120: point = 659, n_alt = 0
   Insn 119: point = 661, n_alt = 1
   Insn 118: point = 663, n_alt = 0
   Insn 117: point = 664, n_alt = 0
   Insn 116: point = 666, n_alt = 1
   Insn 115: point = 668, n_alt = 0
  BB 10
   Insn 107: point = 670, n_alt = 1
  BB 8
   Insn 99: point = 671, n_alt = 1
   Insn 98: point = 672, n_alt = 0
   Insn 97: point = 673, n_alt = 0
   Insn 96: point = 674, n_alt = 0
   Insn 95: point = 674, n_alt = 3
   Insn 94: point = 674, n_alt = 2
   Insn 93: point = 674, n_alt = 4
   Insn 92: point = 674, n_alt = 4
  BB 33
   Insn 655: point = 674, n_alt = -1
  BB 3
   Insn 21: point = 674, n_alt = -1
   Insn 20: point = 674, n_alt = 0
   Insn 19: point = 675, n_alt = 0
   Insn 18: point = 677, n_alt = 0
   Insn 17: point = 678, n_alt = 0
  BB 7
   Insn 643: point = 679, n_alt = -1
   Insn 86: point = 679, n_alt = 1
  BB 34
   Insn 658: point = 680, n_alt = -1
  BB 5
   Insn 29: point = 681, n_alt = -1
   Insn 28: point = 681, n_alt = 0
   Insn 27: point = 682, n_alt = 0
   Insn 26: point = 684, n_alt = 0
   Insn 25: point = 685, n_alt = 0
  BB 6
   Insn 641: point = 686, n_alt = -1
   Insn 80: point = 686, n_alt = 1
   Insn 79: point = 686, n_alt = 8
   Insn 78: point = 687, n_alt = 7
   Insn 77: point = 688, n_alt = 4
   Insn 76: point = 689, n_alt = 3
   Insn 75: point = 691, n_alt = 0
   Insn 74: point = 693, n_alt = 1
   Insn 73: point = 695, n_alt = 0
   Insn 72: point = 696, n_alt = 0
   Insn 71: point = 698, n_alt = 1
   Insn 70: point = 700, n_alt = 0
   Insn 69: point = 701, n_alt = 8
   Insn 68: point = 702, n_alt = 4
   Insn 67: point = 703, n_alt = 7
   Insn 66: point = 705, n_alt = 0
   Insn 65: point = 707, n_alt = 4
   Insn 64: point = 708, n_alt = 3
   Insn 63: point = 710, n_alt = 0
   Insn 62: point = 712, n_alt = 1
   Insn 61: point = 714, n_alt = 0
   Insn 60: point = 715, n_alt = 0
   Insn 59: point = 717, n_alt = 1
   Insn 58: point = 719, n_alt = 0
   Insn 57: point = 720, n_alt = 3
   Insn 56: point = 722, n_alt = 0
   Insn 55: point = 724, n_alt = 1
   Insn 54: point = 726, n_alt = 0
   Insn 53: point = 727, n_alt = 0
   Insn 52: point = 729, n_alt = 1
   Insn 51: point = 731, n_alt = 0
   Insn 50: point = 732, n_alt = 8
   Insn 49: point = 733, n_alt = 7
   Insn 48: point = 734, n_alt = 3
   Insn 47: point = 735, n_alt = 3
   Insn 46: point = 737, n_alt = 0
   Insn 45: point = 739, n_alt = 1
   Insn 44: point = 741, n_alt = 0
   Insn 43: point = 742, n_alt = 0
   Insn 42: point = 744, n_alt = 1
   Insn 41: point = 746, n_alt = 0
   Insn 40: point = 747, n_alt = 8
   Insn 39: point = 748, n_alt = 7
   Insn 38: point = 749, n_alt = 3
   Insn 37: point = 750, n_alt = 3
   Insn 36: point = 752, n_alt = 0
   Insn 35: point = 754, n_alt = 1
   Insn 34: point = 756, n_alt = 0
   Insn 33: point = 757, n_alt = 0
   Insn 32: point = 759, n_alt = 1
   Insn 31: point = 761, n_alt = 0
  BB 4
   Insn 23: point = 763, n_alt = 1
  BB 2
   Insn 15: point = 764, n_alt = 1
   Insn 14: point = 765, n_alt = 0
   Insn 13: point = 766, n_alt = 0
   Insn 12: point = 767, n_alt = 8
   Insn 11: point = 768, n_alt = 7
   Insn 10: point = 769, n_alt = 8
   Insn 9: point = 770, n_alt = 7
   Insn 8: point = 771, n_alt = 8
   Insn 7: point = 772, n_alt = 7
   Insn 3: point = 773, n_alt = 5
   Insn 2: point = 773, n_alt = 5
 r87: [758..759]
 r88: [753..757]
 r89: [753..754]
 r90: [751..752]
 r91: [747..750]
 r92: [743..744]
 r93: [738..742]
 r94: [738..739]
 r95: [736..737]
 r96: [732..735]
 r97: [728..729]
 r98: [723..727]
 r99: [723..724]
 r100: [721..722]
 r101: [706..720]
 r102: [716..717]
 r103: [711..715]
 r104: [711..712]
 r105: [709..710]
 r106: [701..708]
 r107: [701..703]
 r108: [697..698]
 r109: [692..696]
 r110: [692..693]
 r111: [690..691]
 r112: [686..689]
 r113: [665..666]
 r114: [649..664]
 r115: [660..661]
 r116: [658..659]
 r117: [653..655]
 r118: [651..652]
 r119: [649..650]
 r120: [647..648]
 r121: [644..646]
 r122: [616..643]
 r123: [639..640]
 r124: [623..638]
 r125: [634..635]
 r126: [632..633]
 r127: [627..629]
 r128: [625..626]
 r129: [623..624]
 r130: [621..622]
 r131: [618..620]
 r132: [616..617]
 r133: [597..615]
 r134: [611..612]
 r135: [609..610]
 r136: [604..608]
 r137: [604..605]
 r138: [602..603]
 r139: [599..601]
 r140: [597..598]
 r141: [578..596]
 r142: [592..593]
 r143: [590..591]
 r144: [585..589]
 r145: [585..586]
 r146: [583..584]
 r147: [580..582]
 r148: [578..579]
 r149: [576..577]
 r150: [561..575]
 r151: [571..572]
 r152: [566..570]
 r153: [566..567]
 r154: [564..565]
 r155: [558..563]
 r156: [558..560]
 r157: [537..538]
 r158: [532..536]
 r159: [532..533]
 r160: [530..531]
 r161: [527..529]
 r162: [519..520]
 r163: [512..518]
 r164: [514..515]
 r165: [512..513]
 r166: [507..511]
 r167: [507..508]
 r168: [505..506]
 r169: [502..504]
 r170: [498..499]
 r171: [494..495]
 r172: [487..493]
 r173: [489..490]
 r174: [487..488]
 r175: [482..486]
 r176: [482..483]
 r177: [480..481]
 r178: [477..479]
 r179: [473..474]
 r180: [469..470]
 r181: [464..468]
 r182: [464..465]
 r183: [462..463]
 r184: [459..461]
 r185: [455..456]
 r186: [453..454]
 r187: [450..452]
 r188: [448..451]
 r189: [437..438]
 r190: [423..436]
 r191: [432..433]
 r192: [430..431]
 r193: [427..429]
 r194: [425..426]
 r195: [423..424]
 r196: [421..422]
 r197: [418..420]
 r198: [390..417]
 r199: [413..414]
 r200: [397..412]
 r201: [408..409]
 r202: [406..407]
 r203: [401..403]
 r204: [399..400]
 r205: [397..398]
 r206: [395..396]
 r207: [392..394]
 r208: [390..391]
 r209: [388..389]
 r210: [365..387]
 r211: [383..384]
 r212: [378..382]
 r213: [378..379]
 r214: [376..377]
 r215: [373..375]
 r216: [369..370]
 r217: [367..368]
 r218: [363..366]
 r219: [356..357]
 r220: [354..355]
 r221: [349..353]
 r222: [349..350]
 r223: [347..348]
 r224: [344..346]
 r225: [325..343]
 r226: [339..340]
 r227: [337..338]
 r228: [332..336]
 r229: [332..333]
 r230: [330..331]
 r231: [327..329]
 r232: [325..326]
 r233: [323..324]
 r234: [314..322]
 r235: [318..319]
 r236: [316..317]
 r237: [312..315]
 r238: [288..304]
 r239: [300..301]
 r240: [295..299]
 r241: [295..296]
 r242: [293..294]
 r243: [290..292]
 r244: [288..289]
 r245: [285..287]
 r246: [283..284]
 r247: [262..278]
 r248: [274..275]
 r249: [269..273]
 r250: [269..270]
 r251: [267..268]
 r252: [264..266]
 r253: [262..263]
 r254: [260..261]
 r255: [257..259]
 r256: [257..258]
 r257: [251..256]
 r258: [253..255]
 r259: [253..254]
 r260: [251..252]
 r261: [249..250]
 r262: [230..231]
 r263: [206..207]
 r264: [190..191]
 r265: [161..162]
 r266: [159..160]
 r267: [157..158]
 r268: [140..154]
 r269: [140..153]
 r270: [149..150]
 r271: [144..148]
 r272: [144..145]
 r273: [142..143]
 r274: [137..141]
 r275: [137..139]
 r276: [123..124]
 r277: [100..101]
 r278: [98..99]
 r279: [96..97]
 r280: [79..93]
 r281: [79..92]
 r282: [88..89]
 r283: [83..87]
 r284: [83..84]
 r285: [81..82]
 r286: [76..80]
 r287: [76..78]
 r288: [72..73]
 r289: [67..71]
 r290: [67..68]
 r291: [65..66]
 r292: [62..64]
 r293: [47..61]
 r294: [57..58]
 r295: [52..56]
 r296: [52..53]
 r297: [50..51]
 r298: [44..49]
 r299: [44..46]
 r300: [40..41]
 r301: [35..39]
 r302: [35..36]
 r303: [33..34]
 r304: [30..32]
 r305: [15..29]
 r306: [25..26]
 r307: [20..24]
 r308: [20..21]
 r309: [18..19]
 r310: [12..17]
 r311: [12..14]
 r312: [764..766]
 r313: [674..765]
 r314: [674..675]
 r315: [681..682]
 r316: [671..673]
 r317: [546..672]
 r318: [546..547]
 r319: [553..554]
 r320: [543..545]
 r321: [0..544]
 r322: [0..1]
 r323: [7..8]
 r324: [771..772]
 r325: [769..770]
 r326: [767..768]
 r327: [676..677]
 r328: [683..684]
 r329: [760..761]
 r330: [755..756]
 r331: [747..749]
 r332: [747..748]
 r333: [745..746]
 r334: [740..741]
 r335: [732..734]
 r336: [732..733]
 r337: [730..731]
 r338: [725..726]
 r339: [718..719]
 r340: [713..714]
 r341: [704..707]
 r342: [704..705]
 r343: [701..702]
 r344: [699..700]
 r345: [694..695]
 r346: [686..688]
 r347: [686..687]
 r348: [548..549]
 r349: [555..556]
 r350: [667..668]
 r351: [662..663]
 r352: [656..657]
 r353: [653..654]
 r354: [644..645]
 r355: [641..642]
 r356: [636..637]
 r357: [630..631]
 r358: [627..628]
 r359: [618..619]
 r360: [613..614]
 r361: [606..607]
 r362: [599..600]
 r363: [594..595]
 r364: [587..588]
 r365: [580..581]
 r366: [573..574]
 r367: [568..569]
 r368: [561..562]
 r369: [558..559]
 r370: [2..3]
 r371: [9..10]
 r372: [539..540]
 r373: [534..535]
 r374: [525..528]
 r375: [525..526]
 r376: [523..524]
 r377: [521..522]
 r378: [516..517]
 r379: [509..510]
 r380: [500..503]
 r381: [500..501]
 r382: [496..497]
 r383: [491..492]
 r384: [484..485]
 r385: [475..478]
 r386: [475..476]
 r387: [471..472]
 r388: [466..467]
 r389: [457..460]
 r390: [457..458]
 r391: [445..446]
 r392: [441..442]
 r393: [443..444]
 r394: [439..440]
 r395: [434..435]
 r396: [427..428]
 r397: [418..419]
 r398: [415..416]
 r399: [410..411]
 r400: [404..405]
 r401: [401..402]
 r402: [392..393]
 r403: [385..386]
 r404: [380..381]
 r405: [371..374]
 r406: [371..372]
 r407: [360..361]
 r408: [358..359]
 r409: [351..352]
 r410: [344..345]
 r411: [341..342]
 r412: [334..335]
 r413: [327..328]
 r414: [320..321]
 r415: [309..310]
 r416: [307..308]
 r417: [302..303]
 r418: [297..298]
 r419: [290..291]
 r420: [285..286]
 r421: [281..282]
 r422: [276..277]
 r423: [271..272]
 r424: [264..265]
 r425: [247..248]
 r426: [244..246]
 r427: [243..245]
 r428: [241..242]
 r429: [238..240]
 r430: [237..239]
 r431: [235..236]
 r432: [232..234]
 r433: [232..233]
 r434: [228..229]
 r435: [223..224]
 r436: [225..227]
 r437: [225..226]
 r438: [221..222]
 r439: [218..219]
 r440: [215..216]
 r441: [212..213]
 r442: [208..210]
 r443: [208..209]
 r444: [204..205]
 r445: [202..203]
 r446: [198..199]
 r447: [200..201]
 r448: [196..197]
 r449: [194..195]
 r450: [192..193]
 r451: [188..189]
 r452: [186..187]
 r453: [184..185]
 r454: [181..183]
 r455: [181..182]
 r456: [178..179]
 r457: [175..176]
 r458: [172..173]
 r459: [166..167]
 r460: [168..170]
 r461: [168..169]
 r462: [163..164]
 r463: [151..152]
 r464: [146..147]
 r465: [137..138]
 r466: [135..136]
 r467: [131..132]
 r468: [133..134]
 r469: [129..130]
 r470: [127..128]
 r471: [125..126]
 r472: [121..122]
 r473: [119..120]
 r474: [117..118]
 r475: [114..116]
 r476: [114..115]
 r477: [111..112]
 r478: [105..106]
 r479: [107..109]
 r480: [107..108]
 r481: [102..103]
 r482: [90..91]
 r483: [85..86]
 r484: [76..77]
 r485: [74..75]
 r486: [69..70]
 r487: [62..63]
 r488: [59..60]
 r489: [54..55]
 r490: [47..48]
 r491: [44..45]
 r492: [42..43]
 r493: [37..38]
 r494: [30..31]
 r495: [27..28]
 r496: [22..23]
 r497: [15..16]
 r498: [12..13]
 r499: [447..449]
 r500: [362..364]
 r501: [311..313]
 r502: [305..306]
 r503: [279..280]
 r504: [155..156]
 r505: [94..95]
Compressing live ranges: from 773 to 638 - 82%
Ranges after the compression:
 r87: [626..627]
 r88: [622..625]
 r89: [622..623]
 r90: [620..621]
 r91: [618..619]
 r92: [614..615]
 r93: [610..613]
 r94: [610..611]
 r95: [608..609]
 r96: [606..607]
 r97: [602..603]
 r98: [598..601]
 r99: [598..599]
 r100: [596..597]
 r101: [584..595]
 r102: [592..593]
 r103: [588..591]
 r104: [588..589]
 r105: [586..587]
 r106: [580..585]
 r107: [580..581]
 r108: [576..577]
 r109: [572..575]
 r110: [572..573]
 r111: [570..571]
 r112: [568..569]
 r113: [554..555]
 r114: [540..553]
 r115: [550..551]
 r116: [548..549]
 r117: [544..545]
 r118: [542..543]
 r119: [540..541]
 r120: [538..539]
 r121: [536..537]
 r122: [512..535]
 r123: [532..533]
 r124: [518..531]
 r125: [528..529]
 r126: [526..527]
 r127: [522..523]
 r128: [520..521]
 r129: [518..519]
 r130: [516..517]
 r131: [514..515]
 r132: [512..513]
 r133: [496..511]
 r134: [508..509]
 r135: [506..507]
 r136: [502..505]
 r137: [502..503]
 r138: [500..501]
 r139: [498..499]
 r140: [496..497]
 r141: [480..495]
 r142: [492..493]
 r143: [490..491]
 r144: [486..489]
 r145: [486..487]
 r146: [484..485]
 r147: [482..483]
 r148: [480..481]
 r149: [478..479]
 r150: [466..477]
 r151: [474..475]
 r152: [470..473]
 r153: [470..471]
 r154: [468..469]
 r155: [464..467]
 r156: [464..465]
 r157: [450..451]
 r158: [446..449]
 r159: [446..447]
 r160: [444..445]
 r161: [442..443]
 r162: [434..435]
 r163: [428..433]
 r164: [430..431]
 r165: [428..429]
 r166: [424..427]
 r167: [424..425]
 r168: [422..423]
 r169: [420..421]
 r170: [416..417]
 r171: [412..413]
 r172: [406..411]
 r173: [408..409]
 r174: [406..407]
 r175: [402..405]
 r176: [402..403]
 r177: [400..401]
 r178: [398..399]
 r179: [394..395]
 r180: [390..391]
 r181: [386..389]
 r182: [386..387]
 r183: [384..385]
 r184: [382..383]
 r185: [378..379]
 r186: [376..377]
 r187: [374..375]
 r188: [372..375]
 r189: [362..363]
 r190: [350..361]
 r191: [358..359]
 r192: [356..357]
 r193: [354..355]
 r194: [352..353]
 r195: [350..351]
 r196: [348..349]
 r197: [346..347]
 r198: [322..345]
 r199: [342..343]
 r200: [328..341]
 r201: [338..339]
 r202: [336..337]
 r203: [332..333]
 r204: [330..331]
 r205: [328..329]
 r206: [326..327]
 r207: [324..325]
 r208: [322..323]
 r209: [320..321]
 r210: [300..319]
 r211: [316..317]
 r212: [312..315]
 r213: [312..313]
 r214: [310..311]
 r215: [308..309]
 r216: [304..305]
 r217: [302..303]
 r218: [298..301]
 r219: [292..293]
 r220: [290..291]
 r221: [286..289]
 r222: [286..287]
 r223: [284..285]
 r224: [282..283]
 r225: [266..281]
 r226: [278..279]
 r227: [276..277]
 r228: [272..275]
 r229: [272..273]
 r230: [270..271]
 r231: [268..269]
 r232: [266..267]
 r233: [264..265]
 r234: [256..263]
 r235: [260..261]
 r236: [258..259]
 r237: [254..257]
 r238: [234..247]
 r239: [244..245]
 r240: [240..243]
 r241: [240..241]
 r242: [238..239]
 r243: [236..237]
 r244: [234..235]
 r245: [232..233]
 r246: [230..231]
 r247: [212..225]
 r248: [222..223]
 r249: [218..221]
 r250: [218..219]
 r251: [216..217]
 r252: [214..215]
 r253: [212..213]
 r254: [210..211]
 r255: [208..209]
 r256: [208..209]
 r257: [204..207]
 r258: [206..207]
 r259: [206..207]
 r260: [204..205]
 r261: [202..203]
 r262: [188..189]
 r263: [170..171]
 r264: [154..155]
 r265: [132..133]
 r266: [130..131]
 r267: [128..129]
 r268: [114..125]
 r269: [114..125]
 r270: [122..123]
 r271: [118..121]
 r272: [118..119]
 r273: [116..117]
 r274: [112..115]
 r275: [112..113]
 r276: [98..99]
 r277: [80..81]
 r278: [78..79]
 r279: [76..77]
 r280: [62..73]
 r281: [62..73]
 r282: [70..71]
 r283: [66..69]
 r284: [66..67]
 r285: [64..65]
 r286: [60..63]
 r287: [60..61]
 r288: [56..57]
 r289: [52..55]
 r290: [52..53]
 r291: [50..51]
 r292: [48..49]
 r293: [36..47]
 r294: [44..45]
 r295: [40..43]
 r296: [40..41]
 r297: [38..39]
 r298: [34..37]
 r299: [34..35]
 r300: [30..31]
 r301: [26..29]
 r302: [26..27]
 r303: [24..25]
 r304: [22..23]
 r305: [10..21]
 r306: [18..19]
 r307: [14..17]
 r308: [14..15]
 r309: [12..13]
 r310: [8..11]
 r311: [8..9]
 r312: [630..631]
 r313: [560..631]
 r314: [560..561]
 r315: [564..565]
 r316: [558..559]
 r317: [456..559]
 r318: [456..457]
 r319: [460..461]
 r320: [454..455]
 r321: [0..455]
 r322: [0..1]
 r323: [4..5]
 r324: [636..637]
 r325: [634..635]
 r326: [632..633]
 r327: [562..563]
 r328: [566..567]
 r329: [628..629]
 r330: [624..625]
 r331: [618..619]
 r332: [618..619]
 r333: [616..617]
 r334: [612..613]
 r335: [606..607]
 r336: [606..607]
 r337: [604..605]
 r338: [600..601]
 r339: [594..595]
 r340: [590..591]
 r341: [582..585]
 r342: [582..583]
 r343: [580..581]
 r344: [578..579]
 r345: [574..575]
 r346: [568..569]
 r347: [568..569]
 r348: [458..459]
 r349: [462..463]
 r350: [556..557]
 r351: [552..553]
 r352: [546..547]
 r353: [544..545]
 r354: [536..537]
 r355: [534..535]
 r356: [530..531]
 r357: [524..525]
 r358: [522..523]
 r359: [514..515]
 r360: [510..511]
 r361: [504..505]
 r362: [498..499]
 r363: [494..495]
 r364: [488..489]
 r365: [482..483]
 r366: [476..477]
 r367: [472..473]
 r368: [466..467]
 r369: [464..465]
 r370: [2..3]
 r371: [6..7]
 r372: [452..453]
 r373: [448..449]
 r374: [440..443]
 r375: [440..441]
 r376: [438..439]
 r377: [436..437]
 r378: [432..433]
 r379: [426..427]
 r380: [418..421]
 r381: [418..419]
 r382: [414..415]
 r383: [410..411]
 r384: [404..405]
 r385: [396..399]
 r386: [396..397]
 r387: [392..393]
 r388: [388..389]
 r389: [380..383]
 r390: [380..381]
 r391: [370..371]
 r392: [366..367]
 r393: [368..369]
 r394: [364..365]
 r395: [360..361]
 r396: [354..355]
 r397: [346..347]
 r398: [344..345]
 r399: [340..341]
 r400: [334..335]
 r401: [332..333]
 r402: [324..325]
 r403: [318..319]
 r404: [314..315]
 r405: [306..309]
 r406: [306..307]
 r407: [296..297]
 r408: [294..295]
 r409: [288..289]
 r410: [282..283]
 r411: [280..281]
 r412: [274..275]
 r413: [268..269]
 r414: [262..263]
 r415: [252..253]
 r416: [250..251]
 r417: [246..247]
 r418: [242..243]
 r419: [236..237]
 r420: [232..233]
 r421: [228..229]
 r422: [224..225]
 r423: [220..221]
 r424: [214..215]
 r425: [200..201]
 r426: [198..199]
 r427: [198..199]
 r428: [196..197]
 r429: [194..195]
 r430: [194..195]
 r431: [192..193]
 r432: [190..191]
 r433: [190..191]
 r434: [186..187]
 r435: [182..183]
 r436: [184..185]
 r437: [184..185]
 r438: [180..181]
 r439: [178..179]
 r440: [176..177]
 r441: [174..175]
 r442: [172..173]
 r443: [172..173]
 r444: [168..169]
 r445: [166..167]
 r446: [162..163]
 r447: [164..165]
 r448: [160..161]
 r449: [158..159]
 r450: [156..157]
 r451: [152..153]
 r452: [150..151]
 r453: [148..149]
 r454: [146..147]
 r455: [146..147]
 r456: [144..145]
 r457: [142..143]
 r458: [140..141]
 r459: [136..137]
 r460: [138..139]
 r461: [138..139]
 r462: [134..135]
 r463: [124..125]
 r464: [120..121]
 r465: [112..113]
 r466: [110..111]
 r467: [106..107]
 r468: [108..109]
 r469: [104..105]
 r470: [102..103]
 r471: [100..101]
 r472: [96..97]
 r473: [94..95]
 r474: [92..93]
 r475: [90..91]
 r476: [90..91]
 r477: [88..89]
 r478: [84..85]
 r479: [86..87]
 r480: [86..87]
 r481: [82..83]
 r482: [72..73]
 r483: [68..69]
 r484: [60..61]
 r485: [58..59]
 r486: [54..55]
 r487: [48..49]
 r488: [46..47]
 r489: [42..43]
 r490: [36..37]
 r491: [34..35]
 r492: [32..33]
 r493: [28..29]
 r494: [22..23]
 r495: [20..21]
 r496: [16..17]
 r497: [10..11]
 r498: [8..9]
 r499: [372..373]
 r500: [298..299]
 r501: [254..255]
 r502: [248..249]
 r503: [226..227]
 r504: [126..127]
 r505: [74..75]

********** Assignment #1: **********

	 Assigning to 499 (cl=SSE_REGS, orig=187, freq=3000, tfirst=499, tfreq=3000)...
	   Assign 22 to reload r499 (freq=3000)
	 Assigning to 500 (cl=SSE_REGS, orig=210, freq=3000, tfirst=500, tfreq=3000)...
	   Assign 22 to reload r500 (freq=3000)
	 Assigning to 501 (cl=SSE_REGS, orig=234, freq=3000, tfirst=501, tfreq=3000)...
	   Assign 22 to reload r501 (freq=3000)
	 Assigning to 502 (cl=SSE_REGS, orig=416, freq=3000, tfirst=502, tfreq=3000)...
	   Assign 22 to reload r502 (freq=3000)
	 Assigning to 503 (cl=SSE_REGS, orig=421, freq=3000, tfirst=503, tfreq=3000)...
	   Assign 22 to reload r503 (freq=3000)
	 Assigning to 504 (cl=SSE_REGS, orig=267, freq=3000, tfirst=504, tfreq=3000)...
	   Assign 22 to reload r504 (freq=3000)
	 Assigning to 505 (cl=SSE_REGS, orig=279, freq=3000, tfirst=505, tfreq=3000)...
	   Assign 22 to reload r505 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 66
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 69
changing reg in insn 67
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 79
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 129
changing reg in insn 129
changing reg in insn 145
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 156
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 155
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 179
changing reg in insn 177
changing reg in insn 179
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 219
changing reg in insn 220
changing reg in insn 221
changing reg in insn 221
changing reg in insn 223
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 232
changing reg in insn 230
changing reg in insn 231
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 234
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 238
changing reg in insn 239
changing reg in insn 240
changing reg in insn 242
changing reg in insn 243
changing reg in insn 243
changing reg in insn 247
changing reg in insn 245
changing reg in insn 246
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 249
changing reg in insn 250
changing reg in insn 251
changing reg in insn 251
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 260
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 264
changing reg in insn 265
changing reg in insn 266
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 267
changing reg in insn 268
changing reg in insn 269
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 280
changing reg in insn 280
changing reg in insn 282
changing reg in insn 282
changing reg in insn 283
changing reg in insn 283
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 287
changing reg in insn 287
changing reg in insn 303
changing reg in insn 289
changing reg in insn 290
changing reg in insn 290
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 294
changing reg in insn 295
changing reg in insn 297
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 299
changing reg in insn 300
changing reg in insn 300
changing reg in insn 302
changing reg in insn 302
changing reg in insn 303
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 306
changing reg in insn 307
changing reg in insn 307
changing reg in insn 309
changing reg in insn 310
changing reg in insn 311
changing reg in insn 311
changing reg in insn 313
changing reg in insn 314
changing reg in insn 315
changing reg in insn 315
changing reg in insn 315
changing reg in insn 316
changing reg in insn 316
changing reg in insn 317
changing reg in insn 320
changing reg in insn 321
changing reg in insn 321
changing reg in insn 322
changing reg in insn 322
changing reg in insn 324
changing reg in insn 325
changing reg in insn 326
changing reg in insn 326
changing reg in insn 328
changing reg in insn 328
changing reg in insn 339
changing reg in insn 330
changing reg in insn 331
changing reg in insn 331
changing reg in insn 332
changing reg in insn 332
changing reg in insn 334
changing reg in insn 335
changing reg in insn 336
changing reg in insn 336
changing reg in insn 338
changing reg in insn 338
changing reg in insn 339
changing reg in insn 339
changing reg in insn 340
changing reg in insn 340
changing reg in insn 342
changing reg in insn 343
changing reg in insn 343
changing reg in insn 343
changing reg in insn 344
changing reg in insn 344
changing reg in insn 345
changing reg in insn 350
changing reg in insn 351
changing reg in insn 351
changing reg in insn 353
changing reg in insn 354
changing reg in insn 355
changing reg in insn 355
changing reg in insn 357
changing reg in insn 357
changing reg in insn 358
changing reg in insn 360
changing reg in insn 360
changing reg in insn 360
changing reg in insn 361
changing reg in insn 365
changing reg in insn 366
changing reg in insn 366
changing reg in insn 368
changing reg in insn 369
changing reg in insn 370
changing reg in insn 370
changing reg in insn 372
changing reg in insn 372
changing reg in insn 373
changing reg in insn 374
changing reg in insn 375
changing reg in insn 377
changing reg in insn 376
changing reg in insn 377
changing reg in insn 377
changing reg in insn 378
changing reg in insn 379
changing reg in insn 380
changing reg in insn 381
changing reg in insn 382
changing reg in insn 402
changing reg in insn 403
changing reg in insn 433
changing reg in insn 434
changing reg in insn 449
changing reg in insn 450
changing reg in insn 492
changing reg in insn 493
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 496
changing reg in insn 498
changing reg in insn 499
changing reg in insn 499
changing reg in insn 501
changing reg in insn 502
changing reg in insn 503
changing reg in insn 503
changing reg in insn 506
changing reg in insn 504
changing reg in insn 506
changing reg in insn 518
changing reg in insn 519
changing reg in insn 548
changing reg in insn 549
changing reg in insn 549
changing reg in insn 550
changing reg in insn 550
changing reg in insn 552
changing reg in insn 554
changing reg in insn 555
changing reg in insn 555
changing reg in insn 557
changing reg in insn 558
changing reg in insn 559
changing reg in insn 559
changing reg in insn 562
changing reg in insn 560
changing reg in insn 562
changing reg in insn 564
changing reg in insn 565
changing reg in insn 565
changing reg in insn 567
changing reg in insn 568
changing reg in insn 569
changing reg in insn 569
changing reg in insn 571
changing reg in insn 571
changing reg in insn 573
changing reg in insn 574
changing reg in insn 574
changing reg in insn 576
changing reg in insn 577
changing reg in insn 578
changing reg in insn 578
changing reg in insn 582
changing reg in insn 580
changing reg in insn 582
changing reg in insn 584
changing reg in insn 585
changing reg in insn 585
changing reg in insn 587
changing reg in insn 588
changing reg in insn 589
changing reg in insn 589
changing reg in insn 591
changing reg in insn 591
changing reg in insn 593
changing reg in insn 594
changing reg in insn 594
changing reg in insn 596
changing reg in insn 597
changing reg in insn 598
changing reg in insn 598
changing reg in insn 602
changing reg in insn 600
changing reg in insn 602
changing reg in insn 13
changing reg in insn 15
changing reg in insn 14
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 27
changing reg in insn 28
changing reg in insn 97
changing reg in insn 99
changing reg in insn 98
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 111
changing reg in insn 112
changing reg in insn 197
changing reg in insn 199
changing reg in insn 198
changing reg in insn 201
changing reg in insn 203
changing reg in insn 204
changing reg in insn 211
changing reg in insn 212
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 18
changing reg in insn 19
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 40
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 48
changing reg in insn 50
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 65
changing reg in insn 67
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 73
changing reg in insn 74
changing reg in insn 77
changing reg in insn 79
changing reg in insn 78
changing reg in insn 79
changing reg in insn 102
changing reg in insn 103
changing reg in insn 110
changing reg in insn 111
changing reg in insn 115
changing reg in insn 116
changing reg in insn 118
changing reg in insn 119
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 143
changing reg in insn 144
changing reg in insn 146
changing reg in insn 147
changing reg in insn 150
changing reg in insn 151
changing reg in insn 154
changing reg in insn 155
changing reg in insn 157
changing reg in insn 158
changing reg in insn 161
changing reg in insn 162
changing reg in insn 165
changing reg in insn 166
changing reg in insn 169
changing reg in insn 170
changing reg in insn 172
changing reg in insn 173
changing reg in insn 176
changing reg in insn 178
changing reg in insn 179
changing reg in insn 202
changing reg in insn 203
changing reg in insn 210
changing reg in insn 211
changing reg in insn 215
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 222
changing reg in insn 224
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 229
changing reg in insn 230
changing reg in insn 233
changing reg in insn 234
changing reg in insn 237
changing reg in insn 239
changing reg in insn 238
changing reg in insn 239
changing reg in insn 241
changing reg in insn 242
changing reg in insn 244
changing reg in insn 245
changing reg in insn 248
changing reg in insn 249
changing reg in insn 252
changing reg in insn 254
changing reg in insn 253
changing reg in insn 254
changing reg in insn 256
changing reg in insn 257
changing reg in insn 259
changing reg in insn 260
changing reg in insn 263
changing reg in insn 265
changing reg in insn 264
changing reg in insn 265
changing reg in insn 270
changing reg in insn 272
changing reg in insn 273
changing reg in insn 271
changing reg in insn 272
changing reg in insn 274
changing reg in insn 275
changing reg in insn 277
changing reg in insn 278
changing reg in insn 281
changing reg in insn 286
changing reg in insn 287
changing reg in insn 288
changing reg in insn 289
changing reg in insn 291
changing reg in insn 292
changing reg in insn 294
changing reg in insn 295
changing reg in insn 296
changing reg in insn 301
changing reg in insn 302
changing reg in insn 305
changing reg in insn 306
changing reg in insn 308
changing reg in insn 309
changing reg in insn 312
changing reg in insn 314
changing reg in insn 313
changing reg in insn 314
changing reg in insn 318
changing reg in insn 319
changing reg in insn 320
changing reg in insn 323
changing reg in insn 324
changing reg in insn 327
changing reg in insn 328
changing reg in insn 329
changing reg in insn 330
changing reg in insn 333
changing reg in insn 334
changing reg in insn 337
changing reg in insn 338
changing reg in insn 341
changing reg in insn 342
changing reg in insn 346
changing reg in insn 347
changing reg in insn 349
changing reg in insn 350
changing reg in insn 352
changing reg in insn 353
changing reg in insn 356
changing reg in insn 357
changing reg in insn 359
changing reg in insn 360
changing reg in insn 362
changing reg in insn 364
changing reg in insn 365
changing reg in insn 367
changing reg in insn 368
changing reg in insn 371
changing reg in insn 372
changing reg in insn 382
changing reg in insn 383
changing reg in insn 384
changing reg in insn 386
changing reg in insn 385
changing reg in insn 387
changing reg in insn 390
changing reg in insn 391
changing reg in insn 392
changing reg in insn 394
changing reg in insn 393
changing reg in insn 395
changing reg in insn 398
changing reg in insn 399
changing reg in insn 400
changing reg in insn 402
changing reg in insn 401
changing reg in insn 402
changing reg in insn 403
changing reg in insn 404
changing reg in insn 407
changing reg in insn 408
changing reg in insn 405
changing reg in insn 406
changing reg in insn 409
changing reg in insn 410
changing reg in insn 416
changing reg in insn 417
changing reg in insn 420
changing reg in insn 421
changing reg in insn 427
changing reg in insn 428
changing reg in insn 431
changing reg in insn 433
changing reg in insn 433
changing reg in insn 432
changing reg in insn 433
changing reg in insn 436
changing reg in insn 437
changing reg in insn 438
changing reg in insn 439
changing reg in insn 441
changing reg in insn 442
changing reg in insn 440
changing reg in insn 441
changing reg in insn 443
changing reg in insn 444
changing reg in insn 446
changing reg in insn 447
changing reg in insn 448
changing reg in insn 449
changing reg in insn 450
changing reg in insn 451
changing reg in insn 452
changing reg in insn 453
changing reg in insn 455
changing reg in insn 456
changing reg in insn 457
changing reg in insn 459
changing reg in insn 458
changing reg in insn 459
changing reg in insn 465
changing reg in insn 466
changing reg in insn 470
changing reg in insn 471
changing reg in insn 477
changing reg in insn 478
changing reg in insn 487
changing reg in insn 488
changing reg in insn 485
changing reg in insn 487
changing reg in insn 487
changing reg in insn 486
changing reg in insn 487
changing reg in insn 491
changing reg in insn 492
changing reg in insn 497
changing reg in insn 498
changing reg in insn 500
changing reg in insn 501
changing reg in insn 505
changing reg in insn 506
changing reg in insn 507
changing reg in insn 508
changing reg in insn 510
changing reg in insn 511
changing reg in insn 509
changing reg in insn 510
changing reg in insn 512
changing reg in insn 513
changing reg in insn 515
changing reg in insn 516
changing reg in insn 517
changing reg in insn 518
changing reg in insn 519
changing reg in insn 520
changing reg in insn 521
changing reg in insn 522
changing reg in insn 524
changing reg in insn 525
changing reg in insn 526
changing reg in insn 528
changing reg in insn 527
changing reg in insn 528
changing reg in insn 534
changing reg in insn 535
changing reg in insn 543
changing reg in insn 544
changing reg in insn 541
changing reg in insn 543
changing reg in insn 543
changing reg in insn 542
changing reg in insn 543
changing reg in insn 547
changing reg in insn 548
changing reg in insn 553
changing reg in insn 554
changing reg in insn 556
changing reg in insn 557
changing reg in insn 561
changing reg in insn 562
changing reg in insn 563
changing reg in insn 564
changing reg in insn 566
changing reg in insn 567
changing reg in insn 570
changing reg in insn 571
changing reg in insn 572
changing reg in insn 573
changing reg in insn 575
changing reg in insn 576
changing reg in insn 579
changing reg in insn 581
changing reg in insn 582
changing reg in insn 583
changing reg in insn 584
changing reg in insn 586
changing reg in insn 587
changing reg in insn 590
changing reg in insn 591
changing reg in insn 592
changing reg in insn 593
changing reg in insn 595
changing reg in insn 596
changing reg in insn 599
changing reg in insn 601
changing reg in insn 602
deleting insn with uid = 672.
deleting insn with uid = 316.
deleting insn with uid = 674.
deleting insn with uid = 344.
deleting insn with uid = 676.
deleting insn with uid = 679.
deleting insn with uid = 681.
deleting insn with uid = 434.
deleting insn with uid = 444.
deleting insn with uid = 453.
deleting insn with uid = 683.
deleting insn with uid = 513.
deleting insn with uid = 522.
deleting insn with uid = 685.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 196.
verify found no changes in insn with uid = 389.
verify found no changes in insn with uid = 397.
verify found no changes in insn with uid = 435.
verify found no changes in insn with uid = 445.
verify found no changes in insn with uid = 454.
verify found no changes in insn with uid = 514.
verify found no changes in insn with uid = 523.


calekm

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2]
;;  ref usage 	r0={151d,141u} r1={137d,127u} r2={31d,21u,2e} r3={1d,1u} r4={18d,9u,2e} r5={14d,5u} r6={1d,216u} r7={1d,47u} r8={9d} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r17={149d,20u} r18={9d} r19={9d} r20={1d,1u,8e} r21={106d,106u,4e} r22={42d,32u} r23={11d,1u} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={10d} r38={10d} r39={9d} r40={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} 
;;    total ref usage 1980{1237d,727u,16e} in 542{533 regular + 9 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 312 313 324 325 326
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [3 u1d+0 S8 A64])
        (reg:DI 5 di [ u1d ])) "CALEKM.f":1 85 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [3 v1d+0 S8 A64])
        (reg:DI 4 si [ v1d ])) "CALEKM.f":1 85 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SF 21 xmm0 [324])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALEKM.f":77 131 {*movsf_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 d75pi+0 S4 A32])
        (reg:SF 21 xmm0 [324])) "CALEKM.f":77 131 {*movsf_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SF 21 xmm0 [325])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALEKM.f":78 131 {*movsf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 deg2rd+0 S4 A32])
        (reg:SF 21 xmm0 [325])) "CALEKM.f":78 131 {*movsf_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SF 21 xmm0 [326])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "CALEKM.f":79 131 {*movsf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 sqrt2+0 S4 A32])
        (reg:SF 21 xmm0 [326])) "CALEKM.f":79 131 {*movsf_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 1 dx [orig:312 _246 ] [312])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f9243e3a5a0 parallel>)
                    (const_int 8 [0x8]))) [2 parallel.jsta+0 S4 A64])) "CALEKM.f":84 86 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 0 ax [orig:313 _247 ] [313])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f9243e3a5a0 parallel>)
                    (const_int 12 [0xc]))) [2 parallel.jend+0 S4 A32])) "CALEKM.f":84 86 {*movsi_internal}
     (nil))
(insn 15 14 87 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])
        (reg:SI 1 dx [orig:312 _246 ] [312])) "CALEKM.f":84 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313
;; lr  def 	 17 [flags] 314 327
(code_label 87 15 16 3 5 (nil) [1 uses])
(note 16 87 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])
            (reg:SI 0 ax [orig:313 _247 ] [313]))) "CALEKM.f":84 11 {*cmpsi_1}
     (nil))
(insn 18 17 19 3 (set (reg:QI 1 dx [327])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALEKM.f":84 678 {*setcc_qi}
     (nil))
(insn 19 18 20 3 (set (reg:SI 1 dx [orig:314 _249 ] [314])
        (zero_extend:SI (reg:QI 1 dx [327]))) "CALEKM.f":84 140 {*zero_extendqisi2}
     (nil))
(insn 20 19 21 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:314 _249 ] [314])
            (const_int 0 [0]))) "CALEKM.f":84 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 21 20 22 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 654)
            (pc))) "CALEKM.f":84 682 {*jcc}
     (nil)
 -> 654)
;;  succ:       33
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 81 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
        (const_int 1 [0x1])) "CALEKM.f":85 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 315 328
(code_label 81 23 24 5 4 (nil) [1 uses])
(note 24 81 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALEKM.f":85 11 {*cmpsi_1}
     (nil))
(insn 26 25 27 5 (set (reg:QI 1 dx [328])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALEKM.f":85 678 {*setcc_qi}
     (nil))
(insn 27 26 28 5 (set (reg:SI 1 dx [orig:315 _251 ] [315])
        (zero_extend:SI (reg:QI 1 dx [328]))) "CALEKM.f":85 140 {*zero_extendqisi2}
     (nil))
(insn 28 27 29 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:315 _251 ] [315])
            (const_int 0 [0]))) "CALEKM.f":85 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 29 28 30 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 657)
            (pc))) "CALEKM.f":85 682 {*jcc}
     (nil)
 -> 657)
;;  succ:       34
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 34, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347
(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 6 (set (reg:SI 1 dx [329])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":86 86 {*movsi_internal}
     (nil))
(insn 32 31 33 6 (set (reg:DI 1 dx [orig:87 _1 ] [87])
        (sign_extend:DI (reg:SI 1 dx [329]))) "CALEKM.f":86 149 {*extendsidi2_rex64}
     (nil))
(insn 33 32 34 6 (parallel [
            (set (reg:DI 2 cx [orig:88 _2 ] [88])
                (mult:DI (reg:DI 1 dx [orig:87 _1 ] [87])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":86 349 {*muldi3_1}
     (nil))
(insn 34 33 35 6 (set (reg:SI 1 dx [330])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":86 86 {*movsi_internal}
     (nil))
(insn 35 34 36 6 (set (reg:DI 1 dx [orig:89 _3 ] [89])
        (sign_extend:DI (reg:SI 1 dx [330]))) "CALEKM.f":86 149 {*extendsidi2_rex64}
     (nil))
(insn 36 35 37 6 (parallel [
            (set (reg:DI 1 dx [orig:90 _4 ] [90])
                (plus:DI (reg:DI 1 dx [orig:89 _3 ] [89])
                    (reg:DI 2 cx [orig:88 _2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":86 222 {*adddi_1}
     (nil))
(insn 37 36 38 6 (parallel [
            (set (reg:DI 2 cx [orig:91 _5 ] [91])
                (plus:DI (reg:DI 1 dx [orig:90 _4 ] [90])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":86 222 {*adddi_1}
     (nil))
(insn 38 37 39 6 (set (reg/f:DI 1 dx [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [3 u1d+0 S8 A64])) "CALEKM.f":86 85 {*movdi_internal}
     (nil))
(insn 39 38 40 6 (set (reg:SF 21 xmm0 [332])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) "CALEKM.f":86 131 {*movsf_internal}
     (nil))
(insn 40 39 41 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:91 _5 ] [91])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [331])) [1 *u1d_252(D) S4 A32])
        (reg:SF 21 xmm0 [332])) "CALEKM.f":86 131 {*movsf_internal}
     (nil))
(insn 41 40 42 6 (set (reg:SI 1 dx [333])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":87 86 {*movsi_internal}
     (nil))
(insn 42 41 43 6 (set (reg:DI 1 dx [orig:92 _6 ] [92])
        (sign_extend:DI (reg:SI 1 dx [333]))) "CALEKM.f":87 149 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 6 (parallel [
            (set (reg:DI 2 cx [orig:93 _7 ] [93])
                (mult:DI (reg:DI 1 dx [orig:92 _6 ] [92])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":87 349 {*muldi3_1}
     (nil))
(insn 44 43 45 6 (set (reg:SI 1 dx [334])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":87 86 {*movsi_internal}
     (nil))
(insn 45 44 46 6 (set (reg:DI 1 dx [orig:94 _8 ] [94])
        (sign_extend:DI (reg:SI 1 dx [334]))) "CALEKM.f":87 149 {*extendsidi2_rex64}
     (nil))
(insn 46 45 47 6 (parallel [
            (set (reg:DI 1 dx [orig:95 _9 ] [95])
                (plus:DI (reg:DI 1 dx [orig:94 _8 ] [94])
                    (reg:DI 2 cx [orig:93 _7 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":87 222 {*adddi_1}
     (nil))
(insn 47 46 48 6 (parallel [
            (set (reg:DI 2 cx [orig:96 _10 ] [96])
                (plus:DI (reg:DI 1 dx [orig:95 _9 ] [95])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":87 222 {*adddi_1}
     (nil))
(insn 48 47 49 6 (set (reg/f:DI 1 dx [335])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [3 v1d+0 S8 A64])) "CALEKM.f":87 85 {*movdi_internal}
     (nil))
(insn 49 48 50 6 (set (reg:SF 21 xmm0 [336])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) "CALEKM.f":87 131 {*movsf_internal}
     (nil))
(insn 50 49 51 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:96 _10 ] [96])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [335])) [1 *v1d_254(D) S4 A32])
        (reg:SF 21 xmm0 [336])) "CALEKM.f":87 131 {*movsf_internal}
     (nil))
(insn 51 50 52 6 (set (reg:SI 1 dx [337])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":88 86 {*movsi_internal}
     (nil))
(insn 52 51 53 6 (set (reg:DI 1 dx [orig:97 _11 ] [97])
        (sign_extend:DI (reg:SI 1 dx [337]))) "CALEKM.f":88 149 {*extendsidi2_rex64}
     (nil))
(insn 53 52 54 6 (parallel [
            (set (reg:DI 2 cx [orig:98 _12 ] [98])
                (mult:DI (reg:DI 1 dx [orig:97 _11 ] [97])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":88 349 {*muldi3_1}
     (nil))
(insn 54 53 55 6 (set (reg:SI 1 dx [338])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":88 86 {*movsi_internal}
     (nil))
(insn 55 54 56 6 (set (reg:DI 1 dx [orig:99 _13 ] [99])
        (sign_extend:DI (reg:SI 1 dx [338]))) "CALEKM.f":88 149 {*extendsidi2_rex64}
     (nil))
(insn 56 55 57 6 (parallel [
            (set (reg:DI 1 dx [orig:100 _14 ] [100])
                (plus:DI (reg:DI 1 dx [orig:99 _13 ] [99])
                    (reg:DI 2 cx [orig:98 _12 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":88 222 {*adddi_1}
     (nil))
(insn 57 56 58 6 (parallel [
            (set (reg:DI 4 si [orig:101 _15 ] [101])
                (plus:DI (reg:DI 1 dx [orig:100 _14 ] [100])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":88 222 {*adddi_1}
     (nil))
(insn 58 57 59 6 (set (reg:SI 1 dx [339])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":88 86 {*movsi_internal}
     (nil))
(insn 59 58 60 6 (set (reg:DI 1 dx [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 1 dx [339]))) "CALEKM.f":88 149 {*extendsidi2_rex64}
     (nil))
(insn 60 59 61 6 (parallel [
            (set (reg:DI 2 cx [orig:103 _17 ] [103])
                (mult:DI (reg:DI 1 dx [orig:102 _16 ] [102])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":88 349 {*muldi3_1}
     (nil))
(insn 61 60 62 6 (set (reg:SI 1 dx [340])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":88 86 {*movsi_internal}
     (nil))
(insn 62 61 63 6 (set (reg:DI 1 dx [orig:104 _18 ] [104])
        (sign_extend:DI (reg:SI 1 dx [340]))) "CALEKM.f":88 149 {*extendsidi2_rex64}
     (nil))
(insn 63 62 64 6 (parallel [
            (set (reg:DI 1 dx [orig:105 _19 ] [105])
                (plus:DI (reg:DI 1 dx [orig:104 _18 ] [104])
                    (reg:DI 2 cx [orig:103 _17 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":88 222 {*adddi_1}
     (nil))
(insn 64 63 65 6 (parallel [
            (set (reg:DI 2 cx [orig:106 _20 ] [106])
                (plus:DI (reg:DI 1 dx [orig:105 _19 ] [105])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":88 222 {*adddi_1}
     (nil))
(insn 65 64 66 6 (set (reg/f:DI 1 dx [341])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7f9243e2a870 extra>)) "CALEKM.f":88 85 {*movdi_internal}
     (nil))
(insn 66 65 67 6 (parallel [
            (set (reg:DI 4 si [342])
                (plus:DI (reg:DI 4 si [orig:101 _15 ] [101])
                    (const_int 4914072 [0x4afb98])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":88 222 {*adddi_1}
     (nil))
(insn 67 66 68 6 (set (reg:SF 21 xmm0 [orig:107 _21 ] [107])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [342])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [341])) [1 extra.z1000 S4 A32])) "CALEKM.f":88 131 {*movsf_internal}
     (nil))
(insn 68 67 69 6 (set (reg/f:DI 1 dx [343])
        (symbol_ref:DI ("zh.4173") [flags 0x202]  <var_decl 0x7f9243e42120 zh>)) "CALEKM.f":88 85 {*movdi_internal}
     (nil))
(insn 69 68 70 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:106 _20 ] [106])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [343])) [1 zh S4 A32])
        (reg:SF 21 xmm0 [orig:107 _21 ] [107])) "CALEKM.f":88 131 {*movsf_internal}
     (nil))
(insn 70 69 71 6 (set (reg:SI 1 dx [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":89 86 {*movsi_internal}
     (nil))
(insn 71 70 72 6 (set (reg:DI 1 dx [orig:108 _22 ] [108])
        (sign_extend:DI (reg:SI 1 dx [344]))) "CALEKM.f":89 149 {*extendsidi2_rex64}
     (nil))
(insn 72 71 73 6 (parallel [
            (set (reg:DI 2 cx [orig:109 _23 ] [109])
                (mult:DI (reg:DI 1 dx [orig:108 _22 ] [108])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":89 349 {*muldi3_1}
     (nil))
(insn 73 72 74 6 (set (reg:SI 1 dx [345])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":89 86 {*movsi_internal}
     (nil))
(insn 74 73 75 6 (set (reg:DI 1 dx [orig:110 _24 ] [110])
        (sign_extend:DI (reg:SI 1 dx [345]))) "CALEKM.f":89 149 {*extendsidi2_rex64}
     (nil))
(insn 75 74 76 6 (parallel [
            (set (reg:DI 1 dx [orig:111 _25 ] [111])
                (plus:DI (reg:DI 1 dx [orig:110 _24 ] [110])
                    (reg:DI 2 cx [orig:109 _23 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":89 222 {*adddi_1}
     (nil))
(insn 76 75 77 6 (parallel [
            (set (reg:DI 2 cx [orig:112 _26 ] [112])
                (plus:DI (reg:DI 1 dx [orig:111 _25 ] [111])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":89 222 {*adddi_1}
     (nil))
(insn 77 76 78 6 (set (reg/f:DI 1 dx [346])
        (symbol_ref:DI ("zv.4175") [flags 0x202]  <var_decl 0x7f9243e421b0 zv>)) "CALEKM.f":89 85 {*movdi_internal}
     (nil))
(insn 78 77 79 6 (set (reg:SF 21 xmm0 [347])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) "CALEKM.f":89 131 {*movsf_internal}
     (nil))
(insn 79 78 80 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:112 _26 ] [112])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [346])) [1 zv S4 A32])
        (reg:SF 21 xmm0 [347])) "CALEKM.f":89 131 {*movsf_internal}
     (nil))
(insn 80 79 641 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":85 221 {*addsi_1}
     (nil))
(jump_insn 641 80 642 6 (set (pc)
        (label_ref 81)) "CALEKM.f":85 683 {jump}
     (nil)
 -> 81)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313

(barrier 642 641 657)
;; basic block 34, loop depth 0, maybe hot
;;  prev block 6, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 657 642 656 34 35 (nil) [1 uses])
(note 656 657 658 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 658 656 84 34 (const_int 0 [0]) "CALEKM.f":89 718 {nop}
     (nil))
;;  succ:       7 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313

;; basic block 7, loop depth 0, maybe hot
;;  prev block 34, next block 33, flags: (RTL, MODIFIED)
;;  pred:       34 [always]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 84 658 85 7 3 (nil) [0 uses])
(note 85 84 86 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 643 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":84 221 {*addsi_1}
     (nil))
(jump_insn 643 86 644 7 (set (pc)
        (label_ref 87)) "CALEKM.f":84 683 {jump}
     (nil)
 -> 87)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 313

(barrier 644 643 654)
;; basic block 33, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 654 644 653 33 34 (nil) [1 uses])
(note 653 654 655 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 655 653 90 33 (const_int 0 [0]) "CALEKM.f":85 718 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 33, next block 9, flags: (RTL, MODIFIED)
;;  pred:       33 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 316 317
(code_label 90 655 91 8 2 (nil) [0 uses])
(note 91 90 92 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 8 (set (reg:DI 1 dx)
        (symbol_ref:DI ("zh.4173") [flags 0x202]  <var_decl 0x7f9243e42120 zh>)) "CALEKM.f":97 85 {*movdi_internal}
     (nil))
(insn 93 92 94 8 (set (reg:DI 4 si)
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f9243e3a120 masks>)) "CALEKM.f":97 85 {*movdi_internal}
     (nil))
(insn 94 93 95 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f9243e42f30 *.LC4>)) "CALEKM.f":97 85 {*movdi_internal}
     (nil))
(insn 95 94 96 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALEKM.f":97 88 {*movqi_internal}
     (nil))
(call_insn 96 95 97 8 (call (mem:QI (symbol_ref:DI ("p2filt_") [flags 0x41]  <function_decl 0x7f9243e1a600 p2filt>) [0 p2filt S1 A8])
        (const_int 0 [0])) "CALEKM.f":97 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 97 96 98 8 (set (reg:SI 1 dx [orig:316 _261 ] [316])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f9243e3a5a0 parallel>)
                    (const_int 16 [0x10]))) [2 parallel.jsta_m+0 S4 A128])) "CALEKM.f":99 86 {*movsi_internal}
     (nil))
(insn 98 97 99 8 (set (reg:SI 0 ax [orig:317 _262 ] [317])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f9243e3a5a0 parallel>)
                    (const_int 20 [0x14]))) [2 parallel.jend_m+0 S4 A32])) "CALEKM.f":99 86 {*movsi_internal}
     (nil))
(insn 99 98 187 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])
        (reg:SI 1 dx [orig:316 _261 ] [316])) "CALEKM.f":99 86 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              13 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317
;; lr  def 	 17 [flags] 318 348
(code_label 187 99 100 9 9 (nil) [1 uses])
(note 100 187 101 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])
            (reg:SI 0 ax [orig:317 _262 ] [317]))) "CALEKM.f":99 11 {*cmpsi_1}
     (nil))
(insn 102 101 103 9 (set (reg:QI 1 dx [348])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALEKM.f":99 678 {*setcc_qi}
     (nil))
(insn 103 102 104 9 (set (reg:SI 1 dx [orig:318 _264 ] [318])
        (zero_extend:SI (reg:QI 1 dx [348]))) "CALEKM.f":99 140 {*zero_extendqisi2}
     (nil))
(insn 104 103 105 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:318 _264 ] [318])
            (const_int 0 [0]))) "CALEKM.f":99 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 105 104 106 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 660)
            (pc))) "CALEKM.f":99 682 {*jcc}
     (nil)
 -> 660)
;;  succ:       35
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 106 105 107 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 181 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
        (const_int 2 [0x2])) "CALEKM.f":100 86 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              12 [always] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 319 349
(code_label 181 107 108 11 8 (nil) [1 uses])
(note 108 181 109 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 110 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
            (const_int 118 [0x76]))) "CALEKM.f":100 11 {*cmpsi_1}
     (nil))
(insn 110 109 111 11 (set (reg:QI 1 dx [349])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALEKM.f":100 678 {*setcc_qi}
     (nil))
(insn 111 110 112 11 (set (reg:SI 1 dx [orig:319 _266 ] [319])
        (zero_extend:SI (reg:QI 1 dx [349]))) "CALEKM.f":100 140 {*zero_extendqisi2}
     (nil))
(insn 112 111 113 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:319 _266 ] [319])
            (const_int 0 [0]))) "CALEKM.f":100 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 113 112 114 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 663)
            (pc))) "CALEKM.f":100 682 {*jcc}
     (nil)
 -> 663)
;;  succ:       36
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 36, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369
(note 114 113 115 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 12 (set (reg:SI 1 dx [350])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 116 115 117 12 (set (reg:DI 1 dx [orig:113 _27 ] [113])
        (sign_extend:DI (reg:SI 1 dx [350]))) "CALEKM.f":102 149 {*extendsidi2_rex64}
     (nil))
(insn 117 116 118 12 (parallel [
            (set (reg:DI 2 cx [orig:114 _28 ] [114])
                (mult:DI (reg:DI 1 dx [orig:113 _27 ] [113])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 349 {*muldi3_1}
     (nil))
(insn 118 117 119 12 (set (reg:SI 1 dx [351])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 119 118 120 12 (set (reg:DI 1 dx [orig:115 _29 ] [115])
        (sign_extend:DI (reg:SI 1 dx [351]))) "CALEKM.f":102 149 {*extendsidi2_rex64}
     (nil))
(insn 120 119 121 12 (parallel [
            (set (reg:DI 1 dx [orig:116 _30 ] [116])
                (plus:DI (reg:DI 1 dx [orig:115 _29 ] [115])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 121 120 122 12 (parallel [
            (set (reg:DI 1 dx [352])
                (plus:DI (reg:DI 1 dx [orig:116 _30 ] [116])
                    (const_int 498 [0x1f2])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 122 121 123 12 (set (reg:SI 4 si [orig:117 _31 ] [117])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [352])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f9243e30630 indx>)) [2 indx.ive S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 123 122 124 12 (set (reg:SI 1 dx [353])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 124 123 125 12 (parallel [
            (set (reg:SI 1 dx [orig:118 _32 ] [118])
                (plus:SI (reg:SI 1 dx [353])
                    (reg:SI 4 si [orig:117 _31 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:117 _31 ] [117])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32]))
        (nil)))
(insn 125 124 126 12 (set (reg:DI 1 dx [orig:119 _33 ] [119])
        (sign_extend:DI (reg:SI 1 dx [orig:118 _32 ] [118]))) "CALEKM.f":102 149 {*extendsidi2_rex64}
     (nil))
(insn 126 125 127 12 (parallel [
            (set (reg:DI 1 dx [orig:120 _34 ] [120])
                (plus:DI (reg:DI 1 dx [orig:119 _33 ] [119])
                    (reg:DI 2 cx [orig:114 _28 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 127 126 128 12 (parallel [
            (set (reg:DI 2 cx [orig:121 _35 ] [121])
                (plus:DI (reg:DI 1 dx [orig:120 _34 ] [120])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 128 127 129 12 (set (reg/f:DI 1 dx [354])
        (symbol_ref:DI ("zh.4173") [flags 0x202]  <var_decl 0x7f9243e42120 zh>)) "CALEKM.f":102 85 {*movdi_internal}
     (nil))
(insn 129 128 130 12 (set (reg:SF 22 xmm1 [orig:122 _36 ] [122])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:121 _35 ] [121])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [354])) [1 zh S4 A32])) "CALEKM.f":102 131 {*movsf_internal}
     (nil))
(insn 130 129 131 12 (set (reg:SI 1 dx [355])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 131 130 132 12 (set (reg:DI 1 dx [orig:123 _37 ] [123])
        (sign_extend:DI (reg:SI 1 dx [355]))) "CALEKM.f":102 149 {*extendsidi2_rex64}
     (nil))
(insn 132 131 133 12 (parallel [
            (set (reg:DI 2 cx [orig:124 _38 ] [124])
                (mult:DI (reg:DI 1 dx [orig:123 _37 ] [123])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 349 {*muldi3_1}
     (nil))
(insn 133 132 134 12 (set (reg:SI 1 dx [356])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 134 133 135 12 (set (reg:DI 1 dx [orig:125 _39 ] [125])
        (sign_extend:DI (reg:SI 1 dx [356]))) "CALEKM.f":102 149 {*extendsidi2_rex64}
     (nil))
(insn 135 134 136 12 (parallel [
            (set (reg:DI 1 dx [orig:126 _40 ] [126])
                (plus:DI (reg:DI 1 dx [orig:125 _39 ] [125])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 136 135 137 12 (parallel [
            (set (reg:DI 1 dx [357])
                (plus:DI (reg:DI 1 dx [orig:126 _40 ] [126])
                    (const_int 747 [0x2eb])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 137 136 138 12 (set (reg:SI 4 si [orig:127 _41 ] [127])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [357])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f9243e30630 indx>)) [2 indx.ivw S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 138 137 139 12 (set (reg:SI 1 dx [358])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 139 138 140 12 (parallel [
            (set (reg:SI 1 dx [orig:128 _42 ] [128])
                (plus:SI (reg:SI 1 dx [358])
                    (reg:SI 4 si [orig:127 _41 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:127 _41 ] [127])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32]))
        (nil)))
(insn 140 139 141 12 (set (reg:DI 1 dx [orig:129 _43 ] [129])
        (sign_extend:DI (reg:SI 1 dx [orig:128 _42 ] [128]))) "CALEKM.f":102 149 {*extendsidi2_rex64}
     (nil))
(insn 141 140 142 12 (parallel [
            (set (reg:DI 1 dx [orig:130 _44 ] [130])
                (plus:DI (reg:DI 1 dx [orig:129 _43 ] [129])
                    (reg:DI 2 cx [orig:124 _38 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 142 141 143 12 (parallel [
            (set (reg:DI 2 cx [orig:131 _45 ] [131])
                (plus:DI (reg:DI 1 dx [orig:130 _44 ] [130])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 143 142 144 12 (set (reg/f:DI 1 dx [359])
        (symbol_ref:DI ("zh.4173") [flags 0x202]  <var_decl 0x7f9243e42120 zh>)) "CALEKM.f":102 85 {*movdi_internal}
     (nil))
(insn 144 143 145 12 (set (reg:SF 21 xmm0 [orig:132 _46 ] [132])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:131 _45 ] [131])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [359])) [1 zh S4 A32])) "CALEKM.f":102 131 {*movsf_internal}
     (nil))
(insn 145 144 146 12 (set (reg:SF 22 xmm1 [orig:133 _47 ] [133])
        (plus:SF (reg:SF 22 xmm1 [orig:122 _36 ] [122])
            (reg:SF 21 xmm0 [orig:132 _46 ] [132]))) "CALEKM.f":102 838 {*fop_sf_comm}
     (nil))
(insn 146 145 147 12 (set (reg:SI 1 dx [360])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 147 146 148 12 (parallel [
            (set (reg:SI 1 dx [orig:134 _48 ] [134])
                (plus:SI (reg:SI 1 dx [360])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 148 147 149 12 (set (reg:DI 1 dx [orig:135 _49 ] [135])
        (sign_extend:DI (reg:SI 1 dx [orig:134 _48 ] [134]))) "CALEKM.f":102 149 {*extendsidi2_rex64}
     (nil))
(insn 149 148 150 12 (parallel [
            (set (reg:DI 2 cx [orig:136 _50 ] [136])
                (mult:DI (reg:DI 1 dx [orig:135 _49 ] [135])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 349 {*muldi3_1}
     (nil))
(insn 150 149 151 12 (set (reg:SI 1 dx [361])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 151 150 152 12 (set (reg:DI 1 dx [orig:137 _51 ] [137])
        (sign_extend:DI (reg:SI 1 dx [361]))) "CALEKM.f":102 149 {*extendsidi2_rex64}
     (nil))
(insn 152 151 153 12 (parallel [
            (set (reg:DI 1 dx [orig:138 _52 ] [138])
                (plus:DI (reg:DI 1 dx [orig:137 _51 ] [137])
                    (reg:DI 2 cx [orig:136 _50 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 153 152 154 12 (parallel [
            (set (reg:DI 2 cx [orig:139 _53 ] [139])
                (plus:DI (reg:DI 1 dx [orig:138 _52 ] [138])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 154 153 155 12 (set (reg/f:DI 1 dx [362])
        (symbol_ref:DI ("zh.4173") [flags 0x202]  <var_decl 0x7f9243e42120 zh>)) "CALEKM.f":102 85 {*movdi_internal}
     (nil))
(insn 155 154 156 12 (set (reg:SF 21 xmm0 [orig:140 _54 ] [140])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:139 _53 ] [139])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [362])) [1 zh S4 A32])) "CALEKM.f":102 131 {*movsf_internal}
     (nil))
(insn 156 155 157 12 (set (reg:SF 22 xmm1 [orig:141 _55 ] [141])
        (plus:SF (reg:SF 22 xmm1 [orig:133 _47 ] [133])
            (reg:SF 21 xmm0 [orig:140 _54 ] [140]))) "CALEKM.f":102 838 {*fop_sf_comm}
     (nil))
(insn 157 156 158 12 (set (reg:SI 1 dx [363])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 158 157 159 12 (parallel [
            (set (reg:SI 1 dx [orig:142 _56 ] [142])
                (plus:SI (reg:SI 1 dx [363])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 159 158 160 12 (set (reg:DI 1 dx [orig:143 _57 ] [143])
        (sign_extend:DI (reg:SI 1 dx [orig:142 _56 ] [142]))) "CALEKM.f":102 149 {*extendsidi2_rex64}
     (nil))
(insn 160 159 161 12 (parallel [
            (set (reg:DI 2 cx [orig:144 _58 ] [144])
                (mult:DI (reg:DI 1 dx [orig:143 _57 ] [143])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 349 {*muldi3_1}
     (nil))
(insn 161 160 162 12 (set (reg:SI 1 dx [364])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 162 161 163 12 (set (reg:DI 1 dx [orig:145 _59 ] [145])
        (sign_extend:DI (reg:SI 1 dx [364]))) "CALEKM.f":102 149 {*extendsidi2_rex64}
     (nil))
(insn 163 162 164 12 (parallel [
            (set (reg:DI 1 dx [orig:146 _60 ] [146])
                (plus:DI (reg:DI 1 dx [orig:145 _59 ] [145])
                    (reg:DI 2 cx [orig:144 _58 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 164 163 165 12 (parallel [
            (set (reg:DI 2 cx [orig:147 _61 ] [147])
                (plus:DI (reg:DI 1 dx [orig:146 _60 ] [146])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 165 164 166 12 (set (reg/f:DI 1 dx [365])
        (symbol_ref:DI ("zh.4173") [flags 0x202]  <var_decl 0x7f9243e42120 zh>)) "CALEKM.f":102 85 {*movdi_internal}
     (nil))
(insn 166 165 167 12 (set (reg:SF 21 xmm0 [orig:148 _62 ] [148])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:147 _61 ] [147])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [365])) [1 zh S4 A32])) "CALEKM.f":102 131 {*movsf_internal}
     (nil))
(insn 167 166 168 12 (set (reg:SF 21 xmm0 [orig:149 _63 ] [149])
        (plus:SF (reg:SF 21 xmm0 [orig:148 _62 ] [148])
            (reg:SF 22 xmm1 [orig:141 _55 ] [141]))) "CALEKM.f":102 838 {*fop_sf_comm}
     (nil))
(insn 168 167 169 12 (set (reg:SF 22 xmm1 [orig:150 _64 ] [150])
        (reg:SF 21 xmm0 [orig:149 _63 ] [149])) "CALEKM.f":102 131 {*movsf_internal}
     (nil))
(insn 169 168 170 12 (set (reg:SI 1 dx [366])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 170 169 171 12 (set (reg:DI 1 dx [orig:151 _65 ] [151])
        (sign_extend:DI (reg:SI 1 dx [366]))) "CALEKM.f":102 149 {*extendsidi2_rex64}
     (nil))
(insn 171 170 172 12 (parallel [
            (set (reg:DI 2 cx [orig:152 _66 ] [152])
                (mult:DI (reg:DI 1 dx [orig:151 _65 ] [151])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 349 {*muldi3_1}
     (nil))
(insn 172 171 173 12 (set (reg:SI 1 dx [367])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":102 86 {*movsi_internal}
     (nil))
(insn 173 172 174 12 (set (reg:DI 1 dx [orig:153 _67 ] [153])
        (sign_extend:DI (reg:SI 1 dx [367]))) "CALEKM.f":102 149 {*extendsidi2_rex64}
     (nil))
(insn 174 173 175 12 (parallel [
            (set (reg:DI 1 dx [orig:154 _68 ] [154])
                (plus:DI (reg:DI 1 dx [orig:153 _67 ] [153])
                    (reg:DI 2 cx [orig:152 _66 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 175 174 176 12 (parallel [
            (set (reg:DI 2 cx [orig:155 _69 ] [155])
                (plus:DI (reg:DI 1 dx [orig:154 _68 ] [154])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":102 222 {*adddi_1}
     (nil))
(insn 176 175 177 12 (set (reg:SF 21 xmm0 [368])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) "CALEKM.f":102 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.5e-1 [0x0.8p-1])
        (nil)))
(insn 177 176 178 12 (set (reg:SF 21 xmm0 [orig:156 _70 ] [156])
        (mult:SF (reg:SF 21 xmm0 [368])
            (reg:SF 22 xmm1 [orig:150 _64 ] [150]))) "CALEKM.f":102 838 {*fop_sf_comm}
     (nil))
(insn 178 177 179 12 (set (reg/f:DI 1 dx [369])
        (symbol_ref:DI ("zv.4175") [flags 0x202]  <var_decl 0x7f9243e421b0 zv>)) "CALEKM.f":102 85 {*movdi_internal}
     (nil))
(insn 179 178 180 12 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:155 _69 ] [155])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [369])) [1 zv S4 A32])
        (reg:SF 21 xmm0 [orig:156 _70 ] [156])) "CALEKM.f":102 131 {*movsf_internal}
     (nil))
(insn 180 179 645 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":100 221 {*addsi_1}
     (nil))
(jump_insn 645 180 646 12 (set (pc)
        (label_ref 181)) "CALEKM.f":100 683 {jump}
     (nil)
 -> 181)
;;  succ:       11 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317

(barrier 646 645 663)
;; basic block 36, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 663 646 662 36 37 (nil) [1 uses])
(note 662 663 664 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 664 662 184 36 (const_int 0 [0]) "CALEKM.f":102 718 {nop}
     (nil))
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317

;; basic block 13, loop depth 0, maybe hot
;;  prev block 36, next block 35, flags: (RTL, MODIFIED)
;;  pred:       36 [always]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 184 664 185 13 7 (nil) [0 uses])
(note 185 184 186 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 647 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":99 221 {*addsi_1}
     (nil))
(jump_insn 647 186 648 13 (set (pc)
        (label_ref 187)) "CALEKM.f":99 683 {jump}
     (nil)
 -> 187)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317

(barrier 648 647 660)
;; basic block 35, loop depth 0, maybe hot
;;  prev block 13, next block 14, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 660 648 659 35 36 (nil) [1 uses])
(note 659 660 661 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 661 659 190 35 (const_int 0 [0]) "CALEKM.f":100 718 {nop}
     (nil))
;;  succ:       14 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 35, next block 15, flags: (RTL, MODIFIED)
;;  pred:       35 [always]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 320 321
(code_label 190 661 191 14 6 (nil) [0 uses])
(note 191 190 192 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 14 (set (reg:DI 1 dx)
        (symbol_ref:DI ("zv.4175") [flags 0x202]  <var_decl 0x7f9243e421b0 zv>)) "CALEKM.f":106 85 {*movdi_internal}
     (nil))
(insn 193 192 194 14 (set (reg:DI 4 si)
        (const:DI (plus:DI (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f9243e3a120 masks>)
                (const_int 118524 [0x1cefc])))) "CALEKM.f":106 85 {*movdi_internal}
     (nil))
(insn 194 193 195 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f9243e42f30 *.LC4>)) "CALEKM.f":106 85 {*movdi_internal}
     (nil))
(insn 195 194 196 14 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALEKM.f":106 88 {*movqi_internal}
     (nil))
(call_insn 196 195 197 14 (call (mem:QI (symbol_ref:DI ("p2fltv_") [flags 0x41]  <function_decl 0x7f9243e1a700 p2fltv>) [0 p2fltv S1 A8])
        (const_int 0 [0])) "CALEKM.f":106 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 197 196 198 14 (set (reg:SI 0 ax [orig:320 _271 ] [320])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f9243e3a5a0 parallel>)
                    (const_int 24 [0x18]))) [2 parallel.jsta_m2+0 S4 A64])) "CALEKM.f":110 86 {*movsi_internal}
     (nil))
(insn 198 197 199 14 (set (reg:SI 3 bx [orig:321 _272 ] [321])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f9243e3a5a0 parallel>)
                    (const_int 28 [0x1c]))) [2 parallel.jend_m2+0 S4 A32])) "CALEKM.f":110 86 {*movsi_internal}
     (nil))
(insn 199 198 610 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])
        (reg:SI 0 ax [orig:320 _271 ] [320])) "CALEKM.f":110 86 {*movsi_internal}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;;              31 [always] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  def 	 17 [flags] 322 370
(code_label 610 199 200 15 26 (nil) [1 uses])
(note 200 610 201 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 201 200 202 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])
            (reg:SI 3 bx [orig:321 _272 ] [321]))) "CALEKM.f":110 11 {*cmpsi_1}
     (nil))
(insn 202 201 203 15 (set (reg:QI 0 ax [370])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALEKM.f":110 678 {*setcc_qi}
     (nil))
(insn 203 202 204 15 (set (reg:SI 0 ax [orig:322 _274 ] [322])
        (zero_extend:SI (reg:QI 0 ax [370]))) "CALEKM.f":110 140 {*zero_extendqisi2}
     (nil))
(insn 204 203 205 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:322 _274 ] [322])
            (const_int 0 [0]))) "CALEKM.f":110 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 205 204 206 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 666)
            (pc))) "CALEKM.f":110 682 {*jcc}
     (nil)
 -> 666)
;;  succ:       37
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 206 205 207 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 207 206 604 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
        (const_int 2 [0x2])) "CALEKM.f":111 86 {*movsi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              30 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 323 371
(code_label 604 207 208 17 25 (nil) [1 uses])
(note 208 604 209 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 210 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
            (const_int 118 [0x76]))) "CALEKM.f":111 11 {*cmpsi_1}
     (nil))
(insn 210 209 211 17 (set (reg:QI 0 ax [371])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALEKM.f":111 678 {*setcc_qi}
     (nil))
(insn 211 210 212 17 (set (reg:SI 0 ax [orig:323 _276 ] [323])
        (zero_extend:SI (reg:QI 0 ax [371]))) "CALEKM.f":111 140 {*zero_extendqisi2}
     (nil))
(insn 212 211 213 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:323 _276 ] [323])
            (const_int 0 [0]))) "CALEKM.f":111 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 213 212 214 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 669)
            (pc))) "CALEKM.f":111 682 {*jcc}
     (nil)
 -> 669)
;;  succ:       38
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438
(note 214 213 215 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 215 214 216 18 (set (reg:SI 0 ax [372])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":115 86 {*movsi_internal}
     (nil))
(insn 216 215 217 18 (set (reg:DI 0 ax [orig:157 _71 ] [157])
        (sign_extend:DI (reg:SI 0 ax [372]))) "CALEKM.f":115 149 {*extendsidi2_rex64}
     (nil))
(insn 217 216 218 18 (parallel [
            (set (reg:DI 1 dx [orig:158 _72 ] [158])
                (mult:DI (reg:DI 0 ax [orig:157 _71 ] [157])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":115 349 {*muldi3_1}
     (nil))
(insn 218 217 219 18 (set (reg:SI 0 ax [373])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":115 86 {*movsi_internal}
     (nil))
(insn 219 218 220 18 (set (reg:DI 0 ax [orig:159 _73 ] [159])
        (sign_extend:DI (reg:SI 0 ax [373]))) "CALEKM.f":115 149 {*extendsidi2_rex64}
     (nil))
(insn 220 219 221 18 (parallel [
            (set (reg:DI 0 ax [orig:160 _74 ] [160])
                (plus:DI (reg:DI 0 ax [orig:159 _73 ] [159])
                    (reg:DI 1 dx [orig:158 _72 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":115 222 {*adddi_1}
     (nil))
(insn 221 220 222 18 (parallel [
            (set (reg:DI 1 dx [orig:161 _75 ] [161])
                (plus:DI (reg:DI 0 ax [orig:160 _74 ] [160])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":115 222 {*adddi_1}
     (nil))
(insn 222 221 223 18 (set (reg/f:DI 0 ax [374])
        (symbol_ref:DI ("loops_") [flags 0x202]  <var_decl 0x7f9243e30900 loops>)) "CALEKM.f":115 85 {*movdi_internal}
     (nil))
(insn 223 222 224 18 (parallel [
            (set (reg:DI 1 dx [375])
                (plus:DI (reg:DI 1 dx [orig:161 _75 ] [161])
                    (const_int 2420 [0x974])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":115 222 {*adddi_1}
     (nil))
(insn 224 223 225 18 (set (reg:SI 0 ax [376])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [375])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [374])) [2 loops.lmh S4 A32])) "CALEKM.f":115 86 {*movsi_internal}
     (nil))
(insn 225 224 226 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 llmh+0 S4 A32])
        (reg:SI 0 ax [376])) "CALEKM.f":115 86 {*movsi_internal}
     (nil))
(insn 226 225 227 18 (set (reg:SI 0 ax [377])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 llmh+0 S4 A32])) "CALEKM.f":116 86 {*movsi_internal}
     (nil))
(insn 227 226 228 18 (set (reg:DI 0 ax [orig:162 _76 ] [162])
        (sign_extend:DI (reg:SI 0 ax [377]))) "CALEKM.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 228 227 229 18 (parallel [
            (set (reg:DI 1 dx [orig:163 _77 ] [163])
                (mult:DI (reg:DI 0 ax [orig:162 _76 ] [162])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":116 349 {*muldi3_1}
     (nil))
(insn 229 228 230 18 (set (reg:SI 0 ax [378])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":116 86 {*movsi_internal}
     (nil))
(insn 230 229 231 18 (set (reg:DI 0 ax [orig:164 _78 ] [164])
        (sign_extend:DI (reg:SI 0 ax [378]))) "CALEKM.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 231 230 232 18 (parallel [
            (set (reg:DI 0 ax [orig:165 _79 ] [165])
                (mult:DI (reg:DI 0 ax [orig:164 _78 ] [164])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":116 349 {*muldi3_1}
     (nil))
(insn 232 231 233 18 (parallel [
            (set (reg:DI 1 dx [orig:166 _80 ] [166])
                (plus:DI (reg:DI 1 dx [orig:163 _77 ] [163])
                    (reg:DI 0 ax [orig:165 _79 ] [165])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":116 222 {*adddi_1}
     (nil))
(insn 233 232 234 18 (set (reg:SI 0 ax [379])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":116 86 {*movsi_internal}
     (nil))
(insn 234 233 235 18 (set (reg:DI 0 ax [orig:167 _81 ] [167])
        (sign_extend:DI (reg:SI 0 ax [379]))) "CALEKM.f":116 149 {*extendsidi2_rex64}
     (nil))
(insn 235 234 236 18 (parallel [
            (set (reg:DI 0 ax [orig:168 _82 ] [168])
                (plus:DI (reg:DI 0 ax [orig:167 _81 ] [167])
                    (reg:DI 1 dx [orig:166 _80 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":116 222 {*adddi_1}
     (nil))
(insn 236 235 237 18 (parallel [
            (set (reg:DI 1 dx [orig:169 _83 ] [169])
                (plus:DI (reg:DI 0 ax [orig:168 _82 ] [168])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":116 222 {*adddi_1}
     (nil))
(insn 237 236 238 18 (set (reg/f:DI 0 ax [380])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f9243e3ae10 vrbls>)) "CALEKM.f":116 85 {*movdi_internal}
     (nil))
(insn 238 237 239 18 (parallel [
            (set (reg:DI 1 dx [381])
                (plus:DI (reg:DI 1 dx [orig:169 _83 ] [169])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":116 222 {*adddi_1}
     (nil))
(insn 239 238 240 18 (set (reg:SF 21 xmm0 [orig:170 _84 ] [170])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [381])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [380])) [1 vrbls.u S4 A32])) "CALEKM.f":116 131 {*movsf_internal}
     (nil))
(insn 240 239 241 18 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [1 ufal+0 S4 A64])
        (reg:SF 21 xmm0 [orig:170 _84 ] [170])) "CALEKM.f":116 131 {*movsf_internal}
     (nil))
(insn 241 240 242 18 (set (reg:SI 0 ax [382])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 llmh+0 S4 A32])) "CALEKM.f":117 86 {*movsi_internal}
     (nil))
(insn 242 241 243 18 (set (reg:DI 0 ax [orig:171 _85 ] [171])
        (sign_extend:DI (reg:SI 0 ax [382]))) "CALEKM.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 243 242 244 18 (parallel [
            (set (reg:DI 1 dx [orig:172 _86 ] [172])
                (mult:DI (reg:DI 0 ax [orig:171 _85 ] [171])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":117 349 {*muldi3_1}
     (nil))
(insn 244 243 245 18 (set (reg:SI 0 ax [383])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":117 86 {*movsi_internal}
     (nil))
(insn 245 244 246 18 (set (reg:DI 0 ax [orig:173 _87 ] [173])
        (sign_extend:DI (reg:SI 0 ax [383]))) "CALEKM.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 246 245 247 18 (parallel [
            (set (reg:DI 0 ax [orig:174 _88 ] [174])
                (mult:DI (reg:DI 0 ax [orig:173 _87 ] [173])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":117 349 {*muldi3_1}
     (nil))
(insn 247 246 248 18 (parallel [
            (set (reg:DI 1 dx [orig:175 _89 ] [175])
                (plus:DI (reg:DI 1 dx [orig:172 _86 ] [172])
                    (reg:DI 0 ax [orig:174 _88 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":117 222 {*adddi_1}
     (nil))
(insn 248 247 249 18 (set (reg:SI 0 ax [384])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":117 86 {*movsi_internal}
     (nil))
(insn 249 248 250 18 (set (reg:DI 0 ax [orig:176 _90 ] [176])
        (sign_extend:DI (reg:SI 0 ax [384]))) "CALEKM.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 250 249 251 18 (parallel [
            (set (reg:DI 0 ax [orig:177 _91 ] [177])
                (plus:DI (reg:DI 0 ax [orig:176 _90 ] [176])
                    (reg:DI 1 dx [orig:175 _89 ] [175])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":117 222 {*adddi_1}
     (nil))
(insn 251 250 252 18 (parallel [
            (set (reg:DI 1 dx [orig:178 _92 ] [178])
                (plus:DI (reg:DI 0 ax [orig:177 _91 ] [177])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":117 222 {*adddi_1}
     (nil))
(insn 252 251 253 18 (set (reg/f:DI 0 ax [385])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7f9243e3ae10 vrbls>)) "CALEKM.f":117 85 {*movdi_internal}
     (nil))
(insn 253 252 254 18 (parallel [
            (set (reg:DI 1 dx [386])
                (plus:DI (reg:DI 1 dx [orig:178 _92 ] [178])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":117 222 {*adddi_1}
     (nil))
(insn 254 253 255 18 (set (reg:SF 21 xmm0 [orig:179 _93 ] [179])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [386])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [385])) [1 vrbls.v S4 A32])) "CALEKM.f":117 131 {*movsf_internal}
     (nil))
(insn 255 254 256 18 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [1 vfal+0 S4 A64])
        (reg:SF 21 xmm0 [orig:179 _93 ] [179])) "CALEKM.f":117 131 {*movsf_internal}
     (nil))
(insn 256 255 257 18 (set (reg:SI 0 ax [387])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":125 86 {*movsi_internal}
     (nil))
(insn 257 256 258 18 (set (reg:DI 0 ax [orig:180 _94 ] [180])
        (sign_extend:DI (reg:SI 0 ax [387]))) "CALEKM.f":125 149 {*extendsidi2_rex64}
     (nil))
(insn 258 257 259 18 (parallel [
            (set (reg:DI 1 dx [orig:181 _95 ] [181])
                (mult:DI (reg:DI 0 ax [orig:180 _94 ] [180])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":125 349 {*muldi3_1}
     (nil))
(insn 259 258 260 18 (set (reg:SI 0 ax [388])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":125 86 {*movsi_internal}
     (nil))
(insn 260 259 261 18 (set (reg:DI 0 ax [orig:182 _96 ] [182])
        (sign_extend:DI (reg:SI 0 ax [388]))) "CALEKM.f":125 149 {*extendsidi2_rex64}
     (nil))
(insn 261 260 262 18 (parallel [
            (set (reg:DI 0 ax [orig:183 _97 ] [183])
                (plus:DI (reg:DI 0 ax [orig:182 _96 ] [182])
                    (reg:DI 1 dx [orig:181 _95 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":125 222 {*adddi_1}
     (nil))
(insn 262 261 263 18 (parallel [
            (set (reg:DI 1 dx [orig:184 _98 ] [184])
                (plus:DI (reg:DI 0 ax [orig:183 _97 ] [183])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":125 222 {*adddi_1}
     (nil))
(insn 263 262 264 18 (set (reg/f:DI 0 ax [389])
        (symbol_ref:DI ("dynam_") [flags 0x202]  <var_decl 0x7f9243e23870 dynam>)) "CALEKM.f":125 85 {*movdi_internal}
     (nil))
(insn 264 263 265 18 (parallel [
            (set (reg:DI 1 dx [390])
                (plus:DI (reg:DI 1 dx [orig:184 _98 ] [184])
                    (const_int 208624 [0x32ef0])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":125 222 {*adddi_1}
     (nil))
(insn 265 264 266 18 (set (reg:SF 21 xmm0 [orig:185 _99 ] [185])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [390])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [389])) [1 dynam.f S4 A32])) "CALEKM.f":125 131 {*movsf_internal}
     (nil))
(insn 266 265 267 18 (set (reg:SF 21 xmm0 [orig:186 _100 ] [186])
        (plus:SF (reg:SF 21 xmm0 [orig:185 _99 ] [185])
            (reg:SF 21 xmm0 [orig:185 _99 ] [185]))) "CALEKM.f":125 838 {*fop_sf_comm}
     (nil))
(insn 267 266 268 18 (set (reg:SF 22 xmm1 [orig:187 _101 ] [187])
        (reg:SF 21 xmm0 [orig:186 _100 ] [186])) "CALEKM.f":125 131 {*movsf_internal}
     (nil))
(insn 268 267 269 18 (set (reg:SF 21 xmm0 [orig:188 _102 ] [188])
        (mem/c:SF (const:DI (plus:DI (symbol_ref:DI ("ctlblk_") [flags 0x2]  <var_decl 0x7f924ae8dab0 ctlblk>)
                    (const_int 48 [0x30]))) [1 ctlblk.dt+0 S4 A128])) "CALEKM.f":1 131 {*movsf_internal}
     (nil))
(insn 269 268 673 18 (set (reg:SF 22 xmm1 [orig:187 _101 ] [187])
        (div:SF (reg:SF 22 xmm1 [orig:187 _101 ] [187])
            (reg:SF 21 xmm0 [orig:188 _102 ] [188]))) "CALEKM.f":125 841 {*fop_sf_1}
     (nil))
(insn 673 269 270 18 (set (reg:SF 21 xmm0 [391])
        (reg:SF 22 xmm1 [orig:187 _101 ] [187])) "CALEKM.f":125 131 {*movsf_internal}
     (nil))
(insn 270 673 271 18 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 ftrue+0 S4 A32])
        (reg:SF 21 xmm0 [391])) "CALEKM.f":125 131 {*movsf_internal}
     (nil))
(insn 271 270 272 18 (set (reg:SF 21 xmm0 [393])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S4 A32])) "CALEKM.f":126 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.80000019073486328125e+0 [0x0.9ccccdp+4])
        (nil)))
(insn 272 271 273 18 (set (reg:SF 21 xmm0 [392])
        (div:SF (reg:SF 21 xmm0 [393])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [1 ftrue+0 S4 A32]))) "CALEKM.f":126 841 {*fop_sf_1}
     (nil))
(insn 273 272 274 18 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [1 grf+0 S4 A32])
        (reg:SF 21 xmm0 [392])) "CALEKM.f":126 131 {*movsf_internal}
     (nil))
(insn 274 273 275 18 (set (reg:SI 0 ax [394])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":127 86 {*movsi_internal}
     (nil))
(insn 275 274 276 18 (set (reg:DI 0 ax [orig:189 _103 ] [189])
        (sign_extend:DI (reg:SI 0 ax [394]))) "CALEKM.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 276 275 277 18 (parallel [
            (set (reg:DI 1 dx [orig:190 _104 ] [190])
                (mult:DI (reg:DI 0 ax [orig:189 _103 ] [189])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 349 {*muldi3_1}
     (nil))
(insn 277 276 278 18 (set (reg:SI 0 ax [395])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":127 86 {*movsi_internal}
     (nil))
(insn 278 277 279 18 (set (reg:DI 0 ax [orig:191 _105 ] [191])
        (sign_extend:DI (reg:SI 0 ax [395]))) "CALEKM.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 279 278 280 18 (parallel [
            (set (reg:DI 0 ax [orig:192 _106 ] [192])
                (plus:DI (reg:DI 0 ax [orig:191 _105 ] [191])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 222 {*adddi_1}
     (nil))
(insn 280 279 281 18 (set (reg:SI 2 cx [orig:193 _107 ] [193])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:192 _106 ] [192])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f9243e30630 indx>)) [2 indx.ihe S4 A32])) "CALEKM.f":127 86 {*movsi_internal}
     (nil))
(insn 281 280 282 18 (set (reg:SI 0 ax [396])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":127 86 {*movsi_internal}
     (nil))
(insn 282 281 283 18 (parallel [
            (set (reg:SI 0 ax [orig:194 _108 ] [194])
                (plus:SI (reg:SI 0 ax [396])
                    (reg:SI 2 cx [orig:193 _107 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:193 _107 ] [193])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32]))
        (nil)))
(insn 283 282 284 18 (set (reg:DI 0 ax [orig:195 _109 ] [195])
        (sign_extend:DI (reg:SI 0 ax [orig:194 _108 ] [194]))) "CALEKM.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 284 283 285 18 (parallel [
            (set (reg:DI 0 ax [orig:196 _110 ] [196])
                (plus:DI (reg:DI 0 ax [orig:195 _109 ] [195])
                    (reg:DI 1 dx [orig:190 _104 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 222 {*adddi_1}
     (nil))
(insn 285 284 286 18 (parallel [
            (set (reg:DI 1 dx [orig:197 _111 ] [197])
                (plus:DI (reg:DI 0 ax [orig:196 _110 ] [196])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 222 {*adddi_1}
     (nil))
(insn 286 285 287 18 (set (reg/f:DI 0 ax [397])
        (symbol_ref:DI ("zv.4175") [flags 0x202]  <var_decl 0x7f9243e421b0 zv>)) "CALEKM.f":127 85 {*movdi_internal}
     (nil))
(insn 287 286 288 18 (set (reg:SF 21 xmm0 [orig:198 _112 ] [198])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:197 _111 ] [197])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [397])) [1 zv S4 A32])) "CALEKM.f":127 131 {*movsf_internal}
     (nil))
(insn 288 287 289 18 (set (reg:SI 0 ax [398])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":127 86 {*movsi_internal}
     (nil))
(insn 289 288 290 18 (set (reg:DI 0 ax [orig:199 _113 ] [199])
        (sign_extend:DI (reg:SI 0 ax [398]))) "CALEKM.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 290 289 291 18 (parallel [
            (set (reg:DI 1 dx [orig:200 _114 ] [200])
                (mult:DI (reg:DI 0 ax [orig:199 _113 ] [199])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 349 {*muldi3_1}
     (nil))
(insn 291 290 292 18 (set (reg:SI 0 ax [399])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":127 86 {*movsi_internal}
     (nil))
(insn 292 291 293 18 (set (reg:DI 0 ax [orig:201 _115 ] [201])
        (sign_extend:DI (reg:SI 0 ax [399]))) "CALEKM.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 293 292 294 18 (parallel [
            (set (reg:DI 0 ax [orig:202 _116 ] [202])
                (plus:DI (reg:DI 0 ax [orig:201 _115 ] [201])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 222 {*adddi_1}
     (nil))
(insn 294 293 295 18 (parallel [
            (set (reg:DI 0 ax [400])
                (plus:DI (reg:DI 0 ax [orig:202 _116 ] [202])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 222 {*adddi_1}
     (nil))
(insn 295 294 296 18 (set (reg:SI 2 cx [orig:203 _117 ] [203])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [400])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f9243e30630 indx>)) [2 indx.ihw S4 A32])) "CALEKM.f":127 86 {*movsi_internal}
     (nil))
(insn 296 295 297 18 (set (reg:SI 0 ax [401])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":127 86 {*movsi_internal}
     (nil))
(insn 297 296 298 18 (parallel [
            (set (reg:SI 0 ax [orig:204 _118 ] [204])
                (plus:SI (reg:SI 0 ax [401])
                    (reg:SI 2 cx [orig:203 _117 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:203 _117 ] [203])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32]))
        (nil)))
(insn 298 297 299 18 (set (reg:DI 0 ax [orig:205 _119 ] [205])
        (sign_extend:DI (reg:SI 0 ax [orig:204 _118 ] [204]))) "CALEKM.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 299 298 300 18 (parallel [
            (set (reg:DI 0 ax [orig:206 _120 ] [206])
                (plus:DI (reg:DI 0 ax [orig:205 _119 ] [205])
                    (reg:DI 1 dx [orig:200 _114 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 222 {*adddi_1}
     (nil))
(insn 300 299 301 18 (parallel [
            (set (reg:DI 1 dx [orig:207 _121 ] [207])
                (plus:DI (reg:DI 0 ax [orig:206 _120 ] [206])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 222 {*adddi_1}
     (nil))
(insn 301 300 302 18 (set (reg/f:DI 0 ax [402])
        (symbol_ref:DI ("zv.4175") [flags 0x202]  <var_decl 0x7f9243e421b0 zv>)) "CALEKM.f":127 85 {*movdi_internal}
     (nil))
(insn 302 301 303 18 (set (reg:SF 22 xmm1 [orig:208 _122 ] [208])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:207 _121 ] [207])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [402])) [1 zv S4 A32])) "CALEKM.f":127 131 {*movsf_internal}
     (nil))
(insn 303 302 304 18 (set (reg:SF 21 xmm0 [orig:209 _123 ] [209])
        (minus:SF (reg:SF 21 xmm0 [orig:198 _112 ] [198])
            (reg:SF 22 xmm1 [orig:208 _122 ] [208]))) "CALEKM.f":127 841 {*fop_sf_1}
     (nil))
(insn 304 303 305 18 (set (reg:SF 22 xmm1 [orig:210 _124 ] [210])
        (reg:SF 21 xmm0 [orig:209 _123 ] [209])) "CALEKM.f":127 131 {*movsf_internal}
     (nil))
(insn 305 304 306 18 (set (reg:SI 0 ax [403])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":127 86 {*movsi_internal}
     (nil))
(insn 306 305 307 18 (set (reg:DI 0 ax [orig:211 _125 ] [211])
        (sign_extend:DI (reg:SI 0 ax [403]))) "CALEKM.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 307 306 308 18 (parallel [
            (set (reg:DI 1 dx [orig:212 _126 ] [212])
                (mult:DI (reg:DI 0 ax [orig:211 _125 ] [211])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 349 {*muldi3_1}
     (nil))
(insn 308 307 309 18 (set (reg:SI 0 ax [404])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":127 86 {*movsi_internal}
     (nil))
(insn 309 308 310 18 (set (reg:DI 0 ax [orig:213 _127 ] [213])
        (sign_extend:DI (reg:SI 0 ax [404]))) "CALEKM.f":127 149 {*extendsidi2_rex64}
     (nil))
(insn 310 309 311 18 (parallel [
            (set (reg:DI 0 ax [orig:214 _128 ] [214])
                (plus:DI (reg:DI 0 ax [orig:213 _127 ] [213])
                    (reg:DI 1 dx [orig:212 _126 ] [212])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 222 {*adddi_1}
     (nil))
(insn 311 310 312 18 (parallel [
            (set (reg:DI 1 dx [orig:215 _129 ] [215])
                (plus:DI (reg:DI 0 ax [orig:214 _128 ] [214])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 222 {*adddi_1}
     (nil))
(insn 312 311 313 18 (set (reg/f:DI 0 ax [405])
        (symbol_ref:DI ("dynam_") [flags 0x202]  <var_decl 0x7f9243e23870 dynam>)) "CALEKM.f":127 85 {*movdi_internal}
     (nil))
(insn 313 312 314 18 (parallel [
            (set (reg:DI 1 dx [406])
                (plus:DI (reg:DI 1 dx [orig:215 _129 ] [215])
                    (const_int 1207 [0x4b7])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":127 222 {*adddi_1}
     (nil))
(insn 314 313 315 18 (set (reg:SF 21 xmm0 [orig:216 _130 ] [216])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [406])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [405])) [1 dynam.dx S4 A32])) "CALEKM.f":127 131 {*movsf_internal}
     (nil))
(insn 315 314 317 18 (set (reg:SF 21 xmm0 [orig:217 _131 ] [217])
        (plus:SF (reg:SF 21 xmm0 [orig:216 _130 ] [216])
            (reg:SF 21 xmm0 [orig:216 _130 ] [216]))) "CALEKM.f":127 838 {*fop_sf_comm}
     (nil))
(insn 317 315 675 18 (set (reg:SF 22 xmm1 [orig:210 _124 ] [210])
        (div:SF (reg:SF 22 xmm1 [orig:210 _124 ] [210])
            (reg:SF 21 xmm0 [orig:218 _132 ] [218]))) "CALEKM.f":127 841 {*fop_sf_1}
     (nil))
(insn 675 317 318 18 (set (reg:SF 21 xmm0 [407])
        (reg:SF 22 xmm1 [orig:210 _124 ] [210])) "CALEKM.f":127 131 {*movsf_internal}
     (nil))
(insn 318 675 319 18 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [1 dzdx+0 S4 A32])
        (reg:SF 21 xmm0 [407])) "CALEKM.f":127 131 {*movsf_internal}
     (nil))
(insn 319 318 320 18 (set (reg:SI 0 ax [408])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":128 86 {*movsi_internal}
     (nil))
(insn 320 319 321 18 (parallel [
            (set (reg:SI 0 ax [orig:219 _133 ] [219])
                (plus:SI (reg:SI 0 ax [408])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":128 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 321 320 322 18 (set (reg:DI 0 ax [orig:220 _134 ] [220])
        (sign_extend:DI (reg:SI 0 ax [orig:219 _133 ] [219]))) "CALEKM.f":128 149 {*extendsidi2_rex64}
     (nil))
(insn 322 321 323 18 (parallel [
            (set (reg:DI 1 dx [orig:221 _135 ] [221])
                (mult:DI (reg:DI 0 ax [orig:220 _134 ] [220])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":128 349 {*muldi3_1}
     (nil))
(insn 323 322 324 18 (set (reg:SI 0 ax [409])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":128 86 {*movsi_internal}
     (nil))
(insn 324 323 325 18 (set (reg:DI 0 ax [orig:222 _136 ] [222])
        (sign_extend:DI (reg:SI 0 ax [409]))) "CALEKM.f":128 149 {*extendsidi2_rex64}
     (nil))
(insn 325 324 326 18 (parallel [
            (set (reg:DI 0 ax [orig:223 _137 ] [223])
                (plus:DI (reg:DI 0 ax [orig:222 _136 ] [222])
                    (reg:DI 1 dx [orig:221 _135 ] [221])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":128 222 {*adddi_1}
     (nil))
(insn 326 325 327 18 (parallel [
            (set (reg:DI 1 dx [orig:224 _138 ] [224])
                (plus:DI (reg:DI 0 ax [orig:223 _137 ] [223])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":128 222 {*adddi_1}
     (nil))
(insn 327 326 328 18 (set (reg/f:DI 0 ax [410])
        (symbol_ref:DI ("zv.4175") [flags 0x202]  <var_decl 0x7f9243e421b0 zv>)) "CALEKM.f":128 85 {*movdi_internal}
     (nil))
(insn 328 327 329 18 (set (reg:SF 21 xmm0 [orig:225 _139 ] [225])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:224 _138 ] [224])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [410])) [1 zv S4 A32])) "CALEKM.f":128 131 {*movsf_internal}
     (nil))
(insn 329 328 330 18 (set (reg:SI 0 ax [411])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":128 86 {*movsi_internal}
     (nil))
(insn 330 329 331 18 (parallel [
            (set (reg:SI 0 ax [orig:226 _140 ] [226])
                (plus:SI (reg:SI 0 ax [411])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":128 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 331 330 332 18 (set (reg:DI 0 ax [orig:227 _141 ] [227])
        (sign_extend:DI (reg:SI 0 ax [orig:226 _140 ] [226]))) "CALEKM.f":128 149 {*extendsidi2_rex64}
     (nil))
(insn 332 331 333 18 (parallel [
            (set (reg:DI 1 dx [orig:228 _142 ] [228])
                (mult:DI (reg:DI 0 ax [orig:227 _141 ] [227])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":128 349 {*muldi3_1}
     (nil))
(insn 333 332 334 18 (set (reg:SI 0 ax [412])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":128 86 {*movsi_internal}
     (nil))
(insn 334 333 335 18 (set (reg:DI 0 ax [orig:229 _143 ] [229])
        (sign_extend:DI (reg:SI 0 ax [412]))) "CALEKM.f":128 149 {*extendsidi2_rex64}
     (nil))
(insn 335 334 336 18 (parallel [
            (set (reg:DI 0 ax [orig:230 _144 ] [230])
                (plus:DI (reg:DI 0 ax [orig:229 _143 ] [229])
                    (reg:DI 1 dx [orig:228 _142 ] [228])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":128 222 {*adddi_1}
     (nil))
(insn 336 335 337 18 (parallel [
            (set (reg:DI 1 dx [orig:231 _145 ] [231])
                (plus:DI (reg:DI 0 ax [orig:230 _144 ] [230])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":128 222 {*adddi_1}
     (nil))
(insn 337 336 338 18 (set (reg/f:DI 0 ax [413])
        (symbol_ref:DI ("zv.4175") [flags 0x202]  <var_decl 0x7f9243e421b0 zv>)) "CALEKM.f":128 85 {*movdi_internal}
     (nil))
(insn 338 337 339 18 (set (reg:SF 22 xmm1 [orig:232 _146 ] [232])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:231 _145 ] [231])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [413])) [1 zv S4 A32])) "CALEKM.f":128 131 {*movsf_internal}
     (nil))
(insn 339 338 340 18 (set (reg:SF 21 xmm0 [orig:233 _147 ] [233])
        (minus:SF (reg:SF 21 xmm0 [orig:225 _139 ] [225])
            (reg:SF 22 xmm1 [orig:232 _146 ] [232]))) "CALEKM.f":128 841 {*fop_sf_1}
     (nil))
(insn 340 339 341 18 (set (reg:SF 22 xmm1 [orig:234 _148 ] [234])
        (reg:SF 21 xmm0 [orig:233 _147 ] [233])) "CALEKM.f":128 131 {*movsf_internal}
     (nil))
(insn 341 340 342 18 (set (reg/f:DI 0 ax [414])
        (symbol_ref:DI ("dynam_") [flags 0x202]  <var_decl 0x7f9243e23870 dynam>)) "CALEKM.f":1 85 {*movdi_internal}
     (nil))
(insn 342 341 343 18 (set (reg:SF 21 xmm0 [orig:235 _149 ] [235])
        (mem/c:SF (reg/f:DI 0 ax [414]) [1 dynam.dy+0 S4 A128])) "CALEKM.f":1 131 {*movsf_internal}
     (nil))
(insn 343 342 345 18 (set (reg:SF 21 xmm0 [orig:236 _150 ] [236])
        (plus:SF (reg:SF 21 xmm0 [orig:235 _149 ] [235])
            (reg:SF 21 xmm0 [orig:235 _149 ] [235]))) "CALEKM.f":128 838 {*fop_sf_comm}
     (nil))
(insn 345 343 677 18 (set (reg:SF 22 xmm1 [orig:234 _148 ] [234])
        (div:SF (reg:SF 22 xmm1 [orig:234 _148 ] [234])
            (reg:SF 21 xmm0 [orig:237 _151 ] [237]))) "CALEKM.f":128 841 {*fop_sf_1}
     (nil))
(insn 677 345 346 18 (set (reg:SF 21 xmm0 [415])
        (reg:SF 22 xmm1 [orig:234 _148 ] [234])) "CALEKM.f":128 131 {*movsf_internal}
     (nil))
(insn 346 677 347 18 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 dzdy+0 S4 A32])
        (reg:SF 21 xmm0 [415])) "CALEKM.f":128 131 {*movsf_internal}
     (nil))
(insn 347 346 678 18 (set (reg:SF 21 xmm0 [416])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [1 grf+0 S4 A32])) "CALEKM.f":129 131 {*movsf_internal}
     (nil))
(insn 678 347 348 18 (set (reg:SF 22 xmm1 [416])
        (reg:SF 21 xmm0 [416])) "CALEKM.f":129 131 {*movsf_internal}
     (nil))
(insn 348 678 349 18 (set (reg:SF 22 xmm1 [416])
        (mult:SF (reg:SF 22 xmm1 [416])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [1 dzdy+0 S4 A32]))) "CALEKM.f":129 838 {*fop_sf_comm}
     (nil))
(insn 349 348 350 18 (set (reg:SI 0 ax [417])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":129 86 {*movsi_internal}
     (nil))
(insn 350 349 351 18 (set (reg:DI 0 ax [orig:239 _153 ] [239])
        (sign_extend:DI (reg:SI 0 ax [417]))) "CALEKM.f":129 149 {*extendsidi2_rex64}
     (nil))
(insn 351 350 352 18 (parallel [
            (set (reg:DI 1 dx [orig:240 _154 ] [240])
                (mult:DI (reg:DI 0 ax [orig:239 _153 ] [239])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":129 349 {*muldi3_1}
     (nil))
(insn 352 351 353 18 (set (reg:SI 0 ax [418])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":129 86 {*movsi_internal}
     (nil))
(insn 353 352 354 18 (set (reg:DI 0 ax [orig:241 _155 ] [241])
        (sign_extend:DI (reg:SI 0 ax [418]))) "CALEKM.f":129 149 {*extendsidi2_rex64}
     (nil))
(insn 354 353 355 18 (parallel [
            (set (reg:DI 0 ax [orig:242 _156 ] [242])
                (plus:DI (reg:DI 0 ax [orig:241 _155 ] [241])
                    (reg:DI 1 dx [orig:240 _154 ] [240])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":129 222 {*adddi_1}
     (nil))
(insn 355 354 356 18 (parallel [
            (set (reg:DI 1 dx [orig:243 _157 ] [243])
                (plus:DI (reg:DI 0 ax [orig:242 _156 ] [242])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":129 222 {*adddi_1}
     (nil))
(insn 356 355 357 18 (set (reg/f:DI 0 ax [419])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f9243e3a120 masks>)) "CALEKM.f":129 85 {*movdi_internal}
     (nil))
(insn 357 356 358 18 (set (reg:SF 21 xmm0 [orig:244 _158 ] [244])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:243 _157 ] [243])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [419])) [1 masks.hbm2 S4 A32])) "CALEKM.f":129 131 {*movsf_internal}
     (nil))
(insn 358 357 359 18 (set (reg:SF 21 xmm0 [orig:245 _159 ] [245])
        (mult:SF (reg:SF 21 xmm0 [orig:244 _158 ] [244])
            (reg:SF 22 xmm1 [orig:238 _152 ] [238]))) "CALEKM.f":129 838 {*fop_sf_comm}
     (nil))
(insn 359 358 360 18 (set (reg:V4SF 22 xmm1 [420])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) "CALEKM.f":129 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 360 359 361 18 (parallel [
            (set (reg:SF 21 xmm0 [orig:246 _160 ] [246])
                (neg:SF (reg:SF 21 xmm0 [orig:245 _159 ] [245])))
            (use (reg:V4SF 22 xmm1 [420]))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":129 507 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:245 _159 ] [245]))
        (nil)))
(insn 361 360 362 18 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [1 ug+0 S4 A32])
        (reg:SF 21 xmm0 [orig:246 _160 ] [246])) "CALEKM.f":129 131 {*movsf_internal}
     (nil))
(insn 362 361 680 18 (set (reg:SF 21 xmm0 [421])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [1 grf+0 S4 A32])) "CALEKM.f":130 131 {*movsf_internal}
     (nil))
(insn 680 362 363 18 (set (reg:SF 22 xmm1 [421])
        (reg:SF 21 xmm0 [421])) "CALEKM.f":130 131 {*movsf_internal}
     (nil))
(insn 363 680 364 18 (set (reg:SF 22 xmm1 [421])
        (mult:SF (reg:SF 22 xmm1 [421])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [1 dzdx+0 S4 A32]))) "CALEKM.f":130 838 {*fop_sf_comm}
     (nil))
(insn 364 363 365 18 (set (reg:SI 0 ax [422])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":130 86 {*movsi_internal}
     (nil))
(insn 365 364 366 18 (set (reg:DI 0 ax [orig:248 _162 ] [248])
        (sign_extend:DI (reg:SI 0 ax [422]))) "CALEKM.f":130 149 {*extendsidi2_rex64}
     (nil))
(insn 366 365 367 18 (parallel [
            (set (reg:DI 1 dx [orig:249 _163 ] [249])
                (mult:DI (reg:DI 0 ax [orig:248 _162 ] [248])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":130 349 {*muldi3_1}
     (nil))
(insn 367 366 368 18 (set (reg:SI 0 ax [423])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":130 86 {*movsi_internal}
     (nil))
(insn 368 367 369 18 (set (reg:DI 0 ax [orig:250 _164 ] [250])
        (sign_extend:DI (reg:SI 0 ax [423]))) "CALEKM.f":130 149 {*extendsidi2_rex64}
     (nil))
(insn 369 368 370 18 (parallel [
            (set (reg:DI 0 ax [orig:251 _165 ] [251])
                (plus:DI (reg:DI 0 ax [orig:250 _164 ] [250])
                    (reg:DI 1 dx [orig:249 _163 ] [249])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":130 222 {*adddi_1}
     (nil))
(insn 370 369 371 18 (parallel [
            (set (reg:DI 1 dx [orig:252 _166 ] [252])
                (plus:DI (reg:DI 0 ax [orig:251 _165 ] [251])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":130 222 {*adddi_1}
     (nil))
(insn 371 370 372 18 (set (reg/f:DI 0 ax [424])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f9243e3a120 masks>)) "CALEKM.f":130 85 {*movdi_internal}
     (nil))
(insn 372 371 373 18 (set (reg:SF 21 xmm0 [orig:253 _167 ] [253])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:252 _166 ] [252])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [424])) [1 masks.hbm2 S4 A32])) "CALEKM.f":130 131 {*movsf_internal}
     (nil))
(insn 373 372 374 18 (set (reg:SF 21 xmm0 [orig:254 _168 ] [254])
        (mult:SF (reg:SF 21 xmm0 [orig:253 _167 ] [253])
            (reg:SF 22 xmm1 [orig:247 _161 ] [247]))) "CALEKM.f":130 838 {*fop_sf_comm}
     (nil))
(insn 374 373 375 18 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [1 vg+0 S4 A32])
        (reg:SF 21 xmm0 [orig:254 _168 ] [254])) "CALEKM.f":130 131 {*movsf_internal}
     (nil))
(insn 375 374 376 18 (set (reg:SF 22 xmm1 [orig:255 ug.0_169 ] [255])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [1 ug+0 S4 A32])) "CALEKM.f":131 131 {*movsf_internal}
     (nil))
(insn 376 375 377 18 (set (reg:SF 21 xmm0 [orig:256 ug.1_170 ] [256])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [1 ug+0 S4 A32])) "CALEKM.f":131 131 {*movsf_internal}
     (nil))
(insn 377 376 378 18 (set (reg:SF 22 xmm1 [orig:257 _171 ] [257])
        (mult:SF (reg:SF 22 xmm1 [orig:255 ug.0_169 ] [255])
            (reg:SF 21 xmm0 [orig:256 ug.1_170 ] [256]))) "CALEKM.f":131 838 {*fop_sf_comm}
     (nil))
(insn 378 377 379 18 (set (reg:SF 23 xmm2 [orig:258 vg.2_172 ] [258])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [1 vg+0 S4 A32])) "CALEKM.f":131 131 {*movsf_internal}
     (nil))
(insn 379 378 380 18 (set (reg:SF 21 xmm0 [orig:259 vg.3_173 ] [259])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [1 vg+0 S4 A32])) "CALEKM.f":131 131 {*movsf_internal}
     (nil))
(insn 380 379 381 18 (set (reg:SF 21 xmm0 [orig:260 _174 ] [260])
        (mult:SF (reg:SF 21 xmm0 [orig:259 vg.3_173 ] [259])
            (reg:SF 23 xmm2 [orig:258 vg.2_172 ] [258]))) "CALEKM.f":131 838 {*fop_sf_comm}
     (nil))
(insn 381 380 382 18 (set (reg:SF 21 xmm0 [orig:261 _175 ] [261])
        (plus:SF (reg:SF 21 xmm0 [orig:260 _174 ] [260])
            (reg:SF 22 xmm1 [orig:257 _171 ] [257]))) "CALEKM.f":131 838 {*fop_sf_comm}
     (nil))
(insn 382 381 383 18 (set (reg:SF 21 xmm0 [425])
        (sqrt:SF (reg:SF 21 xmm0 [orig:261 _175 ] [261]))) "CALEKM.f":131 872 {*sqrtsf2_sse}
     (nil))
(insn 383 382 384 18 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [1 spdg+0 S4 A32])
        (reg:SF 21 xmm0 [425])) "CALEKM.f":131 131 {*movsf_internal}
     (nil))
(insn 384 383 385 18 (parallel [
            (set (reg:DI 1 dx [426])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":135 222 {*adddi_1}
     (nil))
(insn 385 384 386 18 (parallel [
            (set (reg:DI 0 ax [427])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":135 222 {*adddi_1}
     (nil))
(insn 386 385 387 18 (set (reg:DI 4 si)
        (reg:DI 1 dx [426])) "CALEKM.f":135 85 {*movdi_internal}
     (nil))
(insn 387 386 388 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [427])) "CALEKM.f":135 85 {*movdi_internal}
     (nil))
(insn 388 387 389 18 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALEKM.f":135 88 {*movqi_internal}
     (nil))
(call_insn 389 388 390 18 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("wdir_") [flags 0x41]  <function_decl 0x7f9243e1a800 wdir>) [0 wdir S1 A8])
            (const_int 0 [0]))) "CALEKM.f":135 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 390 389 391 18 (set (reg:SF 0 ax [428])
        (reg:SF 21 xmm0)) "CALEKM.f":135 131 {*movsf_internal}
     (nil))
(insn 391 390 392 18 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 wdirt+0 S4 A32])
        (reg:SF 0 ax [428])) "CALEKM.f":135 131 {*movsf_internal}
     (nil))
(insn 392 391 393 18 (parallel [
            (set (reg:DI 1 dx [429])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":136 222 {*adddi_1}
     (nil))
(insn 393 392 394 18 (parallel [
            (set (reg:DI 0 ax [430])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -108 [0xffffffffffffff94])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":136 222 {*adddi_1}
     (nil))
(insn 394 393 395 18 (set (reg:DI 4 si)
        (reg:DI 1 dx [429])) "CALEKM.f":136 85 {*movdi_internal}
     (nil))
(insn 395 394 396 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [430])) "CALEKM.f":136 85 {*movdi_internal}
     (nil))
(insn 396 395 397 18 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALEKM.f":136 88 {*movqi_internal}
     (nil))
(call_insn 397 396 398 18 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("wdir_") [flags 0x41]  <function_decl 0x7f9243e1a800 wdir>) [0 wdir S1 A8])
            (const_int 0 [0]))) "CALEKM.f":136 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 398 397 399 18 (set (reg:SF 0 ax [431])
        (reg:SF 21 xmm0)) "CALEKM.f":136 131 {*movsf_internal}
     (nil))
(insn 399 398 400 18 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [1 wdirg+0 S4 A32])
        (reg:SF 0 ax [431])) "CALEKM.f":136 131 {*movsf_internal}
     (nil))
(insn 400 399 401 18 (set (reg:SF 21 xmm0 [432])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 ftrue+0 S4 A32])) "CALEKM.f":137 131 {*movsf_internal}
     (nil))
(insn 401 400 402 18 (set (reg:SF 22 xmm1 [433])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S4 A32])) "CALEKM.f":137 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 402 401 403 18 (set (reg:SF 21 xmm0 [orig:262 _176 ] [262])
        (div:SF (reg:SF 21 xmm0 [432])
            (reg:SF 22 xmm1 [433]))) "CALEKM.f":137 841 {*fop_sf_1}
     (nil))
(insn 403 402 404 18 (set (reg:SF 21 xmm0 [434])
        (sqrt:SF (reg:SF 21 xmm0 [orig:262 _176 ] [262]))) "CALEKM.f":137 872 {*sqrtsf2_sse}
     (nil))
(insn 404 403 405 18 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [1 b+0 S4 A32])
        (reg:SF 21 xmm0 [434])) "CALEKM.f":137 131 {*movsf_internal}
     (nil))
(insn 405 404 406 18 (set (reg:SF 22 xmm1 [436])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [1 b+0 S4 A32])) "CALEKM.f":138 131 {*movsf_internal}
     (nil))
(insn 406 405 407 18 (set (reg:SF 21 xmm0 [437])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S4 A32])) "CALEKM.f":138 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.0e+2 [0x0.c8p+8])
        (nil)))
(insn 407 406 408 18 (set (reg:SF 21 xmm0 [435])
        (mult:SF (reg:SF 21 xmm0 [437])
            (reg:SF 22 xmm1 [436]))) "CALEKM.f":138 838 {*fop_sf_comm}
     (nil))
(insn 408 407 409 18 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 bzmh+0 S4 A32])
        (reg:SF 21 xmm0 [435])) "CALEKM.f":138 131 {*movsf_internal}
     (nil))
(insn 409 408 410 18 (set (reg:SF 21 xmm0 [438])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 bzmh+0 S4 A32])) "CALEKM.f":139 131 {*movsf_internal}
     (nil))
(insn 410 409 411 18 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [438])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC10") [flags 0x2]) [0  S4 A32]))) "CALEKM.f":139 53 {*cmpisf}
     (nil))
(jump_insn 411 410 415 18 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 418)
            (pc))) "CALEKM.f":139 682 {*jcc}
     (nil)
 -> 418)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 439
(note 415 411 416 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 416 415 417 19 (set (reg:SF 21 xmm0 [439])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC10") [flags 0x2]) [0  S4 A32])) "CALEKM.f":139 131 {*movsf_internal}
     (nil))
(insn 417 416 418 19 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 bzmh+0 S4 A32])
        (reg:SF 21 xmm0 [439])) "CALEKM.f":139 131 {*movsf_internal}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 440
(code_label 418 417 419 20 12 (nil) [1 uses])
(note 419 418 420 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 420 419 421 20 (set (reg:SF 21 xmm0 [440])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S4 A32])) "CALEKM.f":140 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF -5.0e+2 [-0x0.fap+9])
        (nil)))
(insn 421 420 422 20 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [440])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 bzmh+0 S4 A32]))) "CALEKM.f":140 53 {*cmpisf}
     (nil))
(jump_insn 422 421 426 20 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 429)
            (pc))) "CALEKM.f":140 682 {*jcc}
     (nil)
 -> 429)
;;  succ:       21 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 441
(note 426 422 427 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 427 426 428 21 (set (reg:SF 21 xmm0 [441])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S4 A32])) "CALEKM.f":140 131 {*movsf_internal}
     (nil))
(insn 428 427 429 21 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 bzmh+0 S4 A32])
        (reg:SF 21 xmm0 [441])) "CALEKM.f":140 131 {*movsf_internal}
     (nil))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;;              20
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 263 264 442 443 444 445 446 447 448 449 450 451 452 453 454 455
(code_label 429 428 430 22 14 (nil) [1 uses])
(note 430 429 431 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 431 430 432 22 (set (reg:SF 21 xmm0 [442])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 bzmh+0 S4 A32])) "CALEKM.f":141 131 {*movsf_internal}
     (nil))
(insn 432 431 433 22 (set (reg:V4SF 22 xmm1 [443])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) "CALEKM.f":141 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 433 432 435 22 (parallel [
            (set (reg:SF 21 xmm0 [orig:263 _177 ] [263])
                (neg:SF (reg:SF 21 xmm0 [442])))
            (use (reg:V4SF 22 xmm1 [443]))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":141 507 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [442]))
        (nil)))
(call_insn/u 435 433 436 22 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("expf") [flags 0x41]  <function_decl 0x7f9243c92300 __builtin_expf>) [0 __builtin_expf S1 A8])
            (const_int 0 [0]))) "CALEKM.f":141 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 436 435 437 22 (set (reg:SF 0 ax [444])
        (reg:SF 21 xmm0)) "CALEKM.f":141 131 {*movsf_internal}
     (nil))
(insn 437 436 438 22 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [1 exbzmh+0 S4 A32])
        (reg:SF 0 ax [444])) "CALEKM.f":141 131 {*movsf_internal}
     (nil))
(insn 438 437 439 22 (set (reg:SF 21 xmm0 [445])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S4 A32])) "CALEKM.f":145 131 {*movsf_internal}
     (nil))
(insn 439 438 440 22 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [1 alphas+0 S4 A32])
        (reg:SF 21 xmm0 [445])) "CALEKM.f":145 131 {*movsf_internal}
     (nil))
(insn 440 439 441 22 (set (reg:SF 21 xmm0 [447])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [1 alphas+0 S4 A32])) "CALEKM.f":146 131 {*movsf_internal}
     (nil))
(insn 441 440 442 22 (set (reg:SF 21 xmm0 [446])
        (mult:SF (reg:SF 21 xmm0 [447])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [1 deg2rd+0 S4 A32]))) "CALEKM.f":146 838 {*fop_sf_comm}
     (nil))
(insn 442 441 443 22 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [1 alphas+0 S4 A32])
        (reg:SF 21 xmm0 [446])) "CALEKM.f":146 131 {*movsf_internal}
     (nil))
(insn 443 442 445 22 (set (reg:SF 21 xmm0 [448])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [1 alphas+0 S4 A32])) "CALEKM.f":147 131 {*movsf_internal}
     (nil))
(call_insn/u 445 443 446 22 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sinf") [flags 0x41]  <function_decl 0x7f9243c93500 __builtin_sinf>) [0 __builtin_sinf S1 A8])
            (const_int 0 [0]))) "CALEKM.f":147 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 446 445 447 22 (set (reg:SF 0 ax [449])
        (reg:SF 21 xmm0)) "CALEKM.f":147 131 {*movsf_internal}
     (nil))
(insn 447 446 448 22 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [1 sinalf+0 S4 A32])
        (reg:SF 0 ax [449])) "CALEKM.f":147 131 {*movsf_internal}
     (nil))
(insn 448 447 449 22 (set (reg:SF 21 xmm0 [450])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 d75pi+0 S4 A32])) "CALEKM.f":148 131 {*movsf_internal}
     (nil))
(insn 449 448 450 22 (set (reg:SF 21 xmm0 [orig:264 _178 ] [264])
        (plus:SF (reg:SF 21 xmm0 [450])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [1 alphas+0 S4 A32]))) "CALEKM.f":148 838 {*fop_sf_comm}
     (nil))
(insn 450 449 451 22 (set (reg:SF 21 xmm0 [451])
        (minus:SF (reg:SF 21 xmm0 [orig:264 _178 ] [264])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 bzmh+0 S4 A32]))) "CALEKM.f":148 841 {*fop_sf_1}
     (nil))
(insn 451 450 452 22 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [1 arg+0 S4 A32])
        (reg:SF 21 xmm0 [451])) "CALEKM.f":148 131 {*movsf_internal}
     (nil))
(insn 452 451 454 22 (set (reg:SF 21 xmm0 [452])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [1 arg+0 S4 A32])) "CALEKM.f":149 131 {*movsf_internal}
     (nil))
(call_insn/u 454 452 455 22 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cosf") [flags 0x41]  <function_decl 0x7f9243c91700 __builtin_cosf>) [0 __builtin_cosf S1 A8])
            (const_int 0 [0]))) "CALEKM.f":149 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 455 454 456 22 (set (reg:SF 0 ax [453])
        (reg:SF 21 xmm0)) "CALEKM.f":149 131 {*movsf_internal}
     (nil))
(insn 456 455 457 22 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 cosarg+0 S4 A32])
        (reg:SF 0 ax [453])) "CALEKM.f":149 131 {*movsf_internal}
     (nil))
(insn 457 456 458 22 (set (reg:SF 21 xmm0 [454])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [1 wdirg+0 S4 A32])) "CALEKM.f":150 131 {*movsf_internal}
     (nil))
(insn 458 457 459 22 (set (reg:SF 22 xmm1 [455])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) "CALEKM.f":150 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 459 458 460 22 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [454])
            (reg:SF 22 xmm1 [455]))) "CALEKM.f":150 53 {*cmpisf}
     (nil))
(jump_insn 460 459 464 22 (set (pc)
        (if_then_else (unlt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 468)
            (pc))) "CALEKM.f":150 682 {*jcc}
     (nil)
 -> 468)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 456
(note 464 460 465 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 465 464 466 23 (set (reg:SF 21 xmm0 [456])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) "CALEKM.f":150 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.0e+1 [0x0.b4p+7])
        (nil)))
(insn 466 465 467 23 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [456])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [1 wdirg+0 S4 A32]))) "CALEKM.f":150 53 {*cmpisf}
     (nil))
(jump_insn 467 466 468 23 (set (pc)
        (if_then_else (ge (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref 483)
            (pc))) "CALEKM.f":150 682 {*jcc}
     (nil)
 -> 483)
;;  succ:       26
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;;              22
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 457
(code_label 468 467 469 24 16 (nil) [1 uses])
(note 469 468 470 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 470 469 471 24 (set (reg:SF 21 xmm0 [457])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [1 wdirg+0 S4 A32])) "CALEKM.f":150 131 {*movsf_internal}
     (nil))
(insn 471 470 472 24 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [457])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32]))) "CALEKM.f":150 53 {*cmpisf}
     (nil))
(jump_insn 472 471 476 24 (set (pc)
        (if_then_else (unlt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 489)
            (pc))) "CALEKM.f":150 682 {*jcc}
     (nil)
 -> 489)
;;  succ:       25 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 458
(note 476 472 477 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 477 476 478 25 (set (reg:SF 21 xmm0 [458])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S4 A32])) "CALEKM.f":150 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.6e+2 [0x0.b4p+9])
        (nil)))
(insn 478 477 479 25 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [458])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [1 wdirg+0 S4 A32]))) "CALEKM.f":150 53 {*cmpisf}
     (nil))
(jump_insn 479 478 483 25 (set (pc)
        (if_then_else (unlt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 489)
            (pc))) "CALEKM.f":150 682 {*jcc}
     (nil)
 -> 489)
;;  succ:       26 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       23
;;              25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 459 460 461
(code_label 483 479 484 26 18 (nil) [1 uses])
(note 484 483 485 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 485 484 486 26 (set (reg:SF 21 xmm0 [460])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 cosarg+0 S4 A32])) "CALEKM.f":152 131 {*movsf_internal}
     (nil))
(insn 486 485 487 26 (set (reg:V4SF 22 xmm1 [461])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) "CALEKM.f":152 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 487 486 488 26 (parallel [
            (set (reg:SF 21 xmm0 [459])
                (neg:SF (reg:SF 21 xmm0 [460])))
            (use (reg:V4SF 22 xmm1 [461]))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":152 507 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [460]))
        (nil)))
(insn 488 487 489 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 cosarg+0 S4 A32])
        (reg:SF 21 xmm0 [459])) "CALEKM.f":152 131 {*movsf_internal}
     (nil))
;;  succ:       27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;;              24
;;              25
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 265 266 267 268 269 270 271 272 273 274 275 276 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476
(code_label 489 488 490 27 19 (nil) [2 uses])
(note 490 489 491 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 491 490 492 27 (set (reg:SF 21 xmm0 [462])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 sqrt2+0 S4 A32])) "CALEKM.f":153 131 {*movsf_internal}
     (nil))
(insn 492 491 493 27 (set (reg:SF 21 xmm0 [orig:265 _179 ] [265])
        (mult:SF (reg:SF 21 xmm0 [462])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [1 spdg+0 S4 A32]))) "CALEKM.f":153 838 {*fop_sf_comm}
     (nil))
(insn 493 492 494 27 (set (reg:SF 21 xmm0 [orig:266 _180 ] [266])
        (mult:SF (reg:SF 21 xmm0 [orig:265 _179 ] [265])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [1 sinalf+0 S4 A32]))) "CALEKM.f":153 838 {*fop_sf_comm}
     (nil))
(insn 494 493 682 27 (set (reg:SF 21 xmm0 [orig:267 _181 ] [267])
        (mult:SF (reg:SF 21 xmm0 [orig:266 _180 ] [266])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [1 exbzmh+0 S4 A32]))) "CALEKM.f":153 838 {*fop_sf_comm}
     (nil))
(insn 682 494 495 27 (set (reg:SF 22 xmm1 [orig:267 _181 ] [267])
        (reg:SF 21 xmm0 [orig:267 _181 ] [267])) "CALEKM.f":153 131 {*movsf_internal}
     (nil))
(insn 495 682 496 27 (set (reg:SF 22 xmm1 [orig:267 _181 ] [267])
        (mult:SF (reg:SF 22 xmm1 [orig:267 _181 ] [267])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 cosarg+0 S4 A32]))) "CALEKM.f":153 838 {*fop_sf_comm}
     (nil))
(insn 496 495 497 27 (set (reg:SF 21 xmm0 [orig:269 ug.4_183 ] [269])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [1 ug+0 S4 A32])) "CALEKM.f":153 131 {*movsf_internal}
     (nil))
(insn 497 496 498 27 (set (reg:SI 0 ax [463])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":153 86 {*movsi_internal}
     (nil))
(insn 498 497 499 27 (set (reg:DI 0 ax [orig:270 _184 ] [270])
        (sign_extend:DI (reg:SI 0 ax [463]))) "CALEKM.f":153 149 {*extendsidi2_rex64}
     (nil))
(insn 499 498 500 27 (parallel [
            (set (reg:DI 1 dx [orig:271 _185 ] [271])
                (mult:DI (reg:DI 0 ax [orig:270 _184 ] [270])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":153 349 {*muldi3_1}
     (nil))
(insn 500 499 501 27 (set (reg:SI 0 ax [464])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":153 86 {*movsi_internal}
     (nil))
(insn 501 500 502 27 (set (reg:DI 0 ax [orig:272 _186 ] [272])
        (sign_extend:DI (reg:SI 0 ax [464]))) "CALEKM.f":153 149 {*extendsidi2_rex64}
     (nil))
(insn 502 501 503 27 (parallel [
            (set (reg:DI 0 ax [orig:273 _187 ] [273])
                (plus:DI (reg:DI 0 ax [orig:272 _186 ] [272])
                    (reg:DI 1 dx [orig:271 _185 ] [271])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":153 222 {*adddi_1}
     (nil))
(insn 503 502 504 27 (parallel [
            (set (reg:DI 1 dx [orig:274 _188 ] [274])
                (plus:DI (reg:DI 0 ax [orig:273 _187 ] [273])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":153 222 {*adddi_1}
     (nil))
(insn 504 503 505 27 (set (reg:SF 21 xmm0 [orig:275 _189 ] [275])
        (plus:SF (reg:SF 21 xmm0 [orig:269 ug.4_183 ] [269])
            (reg:SF 22 xmm1 [orig:268 _182 ] [268]))) "CALEKM.f":153 838 {*fop_sf_comm}
     (nil))
(insn 505 504 506 27 (set (reg/f:DI 0 ax [465])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [3 u1d+0 S8 A64])) "CALEKM.f":153 85 {*movdi_internal}
     (nil))
(insn 506 505 507 27 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:274 _188 ] [274])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [465])) [1 *u1d_252(D) S4 A32])
        (reg:SF 21 xmm0 [orig:275 _189 ] [275])) "CALEKM.f":153 131 {*movsf_internal}
     (nil))
(insn 507 506 508 27 (set (reg:SF 21 xmm0 [466])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S4 A32])) "CALEKM.f":161 131 {*movsf_internal}
     (nil))
(insn 508 507 509 27 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [1 alphas+0 S4 A32])
        (reg:SF 21 xmm0 [466])) "CALEKM.f":161 131 {*movsf_internal}
     (nil))
(insn 509 508 510 27 (set (reg:SF 21 xmm0 [468])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [1 alphas+0 S4 A32])) "CALEKM.f":162 131 {*movsf_internal}
     (nil))
(insn 510 509 511 27 (set (reg:SF 21 xmm0 [467])
        (mult:SF (reg:SF 21 xmm0 [468])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [1 deg2rd+0 S4 A32]))) "CALEKM.f":162 838 {*fop_sf_comm}
     (nil))
(insn 511 510 512 27 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [1 alphas+0 S4 A32])
        (reg:SF 21 xmm0 [467])) "CALEKM.f":162 131 {*movsf_internal}
     (nil))
(insn 512 511 514 27 (set (reg:SF 21 xmm0 [469])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [1 alphas+0 S4 A32])) "CALEKM.f":163 131 {*movsf_internal}
     (nil))
(call_insn/u 514 512 515 27 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sinf") [flags 0x41]  <function_decl 0x7f9243c93500 __builtin_sinf>) [0 __builtin_sinf S1 A8])
            (const_int 0 [0]))) "CALEKM.f":163 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 515 514 516 27 (set (reg:SF 0 ax [470])
        (reg:SF 21 xmm0)) "CALEKM.f":163 131 {*movsf_internal}
     (nil))
(insn 516 515 517 27 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [1 sinalf+0 S4 A32])
        (reg:SF 0 ax [470])) "CALEKM.f":163 131 {*movsf_internal}
     (nil))
(insn 517 516 518 27 (set (reg:SF 21 xmm0 [471])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 d75pi+0 S4 A32])) "CALEKM.f":164 131 {*movsf_internal}
     (nil))
(insn 518 517 519 27 (set (reg:SF 21 xmm0 [orig:276 _190 ] [276])
        (plus:SF (reg:SF 21 xmm0 [471])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [1 alphas+0 S4 A32]))) "CALEKM.f":164 838 {*fop_sf_comm}
     (nil))
(insn 519 518 520 27 (set (reg:SF 21 xmm0 [472])
        (minus:SF (reg:SF 21 xmm0 [orig:276 _190 ] [276])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 bzmh+0 S4 A32]))) "CALEKM.f":164 841 {*fop_sf_1}
     (nil))
(insn 520 519 521 27 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [1 arg+0 S4 A32])
        (reg:SF 21 xmm0 [472])) "CALEKM.f":164 131 {*movsf_internal}
     (nil))
(insn 521 520 523 27 (set (reg:SF 21 xmm0 [473])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [1 arg+0 S4 A32])) "CALEKM.f":165 131 {*movsf_internal}
     (nil))
(call_insn/u 523 521 524 27 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sinf") [flags 0x41]  <function_decl 0x7f9243c93500 __builtin_sinf>) [0 __builtin_sinf S1 A8])
            (const_int 0 [0]))) "CALEKM.f":165 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 524 523 525 27 (set (reg:SF 0 ax [474])
        (reg:SF 21 xmm0)) "CALEKM.f":165 131 {*movsf_internal}
     (nil))
(insn 525 524 526 27 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 sinarg+0 S4 A32])
        (reg:SF 0 ax [474])) "CALEKM.f":165 131 {*movsf_internal}
     (nil))
(insn 526 525 527 27 (set (reg:SF 21 xmm0 [475])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [1 wdirg+0 S4 A32])) "CALEKM.f":166 131 {*movsf_internal}
     (nil))
(insn 527 526 528 27 (set (reg:SF 22 xmm1 [476])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) "CALEKM.f":166 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 528 527 529 27 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [475])
            (reg:SF 22 xmm1 [476]))) "CALEKM.f":166 53 {*cmpisf}
     (nil))
(jump_insn 529 528 533 27 (set (pc)
        (if_then_else (unlt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 545)
            (pc))) "CALEKM.f":166 682 {*jcc}
     (nil)
 -> 545)
;;  succ:       28 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 477
(note 533 529 534 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 534 533 535 28 (set (reg:SF 21 xmm0 [477])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) "CALEKM.f":166 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.8e+2 [0x0.b4p+8])
        (nil)))
(insn 535 534 536 28 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [477])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [1 wdirg+0 S4 A32]))) "CALEKM.f":166 53 {*cmpisf}
     (nil))
(jump_insn 536 535 540 28 (set (pc)
        (if_then_else (unlt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 545)
            (pc))) "CALEKM.f":166 682 {*jcc}
     (nil)
 -> 545)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 478 479 480
(note 540 536 541 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 541 540 542 29 (set (reg:SF 21 xmm0 [479])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 sinarg+0 S4 A32])) "CALEKM.f":167 131 {*movsf_internal}
     (nil))
(insn 542 541 543 29 (set (reg:V4SF 22 xmm1 [480])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) "CALEKM.f":167 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 543 542 544 29 (parallel [
            (set (reg:SF 21 xmm0 [478])
                (neg:SF (reg:SF 21 xmm0 [479])))
            (use (reg:V4SF 22 xmm1 [480]))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":167 507 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [479]))
        (nil)))
(insn 544 543 545 29 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 sinarg+0 S4 A32])
        (reg:SF 21 xmm0 [478])) "CALEKM.f":167 131 {*movsf_internal}
     (nil))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 38, flags: (RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;;              27
;;              28
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498
(code_label 545 544 546 30 22 (nil) [2 uses])
(note 546 545 547 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 547 546 548 30 (set (reg:SF 21 xmm0 [481])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 sqrt2+0 S4 A32])) "CALEKM.f":168 131 {*movsf_internal}
     (nil))
(insn 548 547 549 30 (set (reg:SF 21 xmm0 [orig:277 _191 ] [277])
        (mult:SF (reg:SF 21 xmm0 [481])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [1 spdg+0 S4 A32]))) "CALEKM.f":168 838 {*fop_sf_comm}
     (nil))
(insn 549 548 550 30 (set (reg:SF 21 xmm0 [orig:278 _192 ] [278])
        (mult:SF (reg:SF 21 xmm0 [orig:277 _191 ] [277])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [1 sinalf+0 S4 A32]))) "CALEKM.f":168 838 {*fop_sf_comm}
     (nil))
(insn 550 549 684 30 (set (reg:SF 21 xmm0 [orig:279 _193 ] [279])
        (mult:SF (reg:SF 21 xmm0 [orig:278 _192 ] [278])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [1 exbzmh+0 S4 A32]))) "CALEKM.f":168 838 {*fop_sf_comm}
     (nil))
(insn 684 550 551 30 (set (reg:SF 22 xmm1 [orig:279 _193 ] [279])
        (reg:SF 21 xmm0 [orig:279 _193 ] [279])) "CALEKM.f":168 131 {*movsf_internal}
     (nil))
(insn 551 684 552 30 (set (reg:SF 22 xmm1 [orig:279 _193 ] [279])
        (mult:SF (reg:SF 22 xmm1 [orig:279 _193 ] [279])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 sinarg+0 S4 A32]))) "CALEKM.f":168 838 {*fop_sf_comm}
     (nil))
(insn 552 551 553 30 (set (reg:SF 21 xmm0 [orig:281 vg.5_195 ] [281])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [1 vg+0 S4 A32])) "CALEKM.f":168 131 {*movsf_internal}
     (nil))
(insn 553 552 554 30 (set (reg:SI 0 ax [482])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":168 86 {*movsi_internal}
     (nil))
(insn 554 553 555 30 (set (reg:DI 0 ax [orig:282 _196 ] [282])
        (sign_extend:DI (reg:SI 0 ax [482]))) "CALEKM.f":168 149 {*extendsidi2_rex64}
     (nil))
(insn 555 554 556 30 (parallel [
            (set (reg:DI 1 dx [orig:283 _197 ] [283])
                (mult:DI (reg:DI 0 ax [orig:282 _196 ] [282])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":168 349 {*muldi3_1}
     (nil))
(insn 556 555 557 30 (set (reg:SI 0 ax [483])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":168 86 {*movsi_internal}
     (nil))
(insn 557 556 558 30 (set (reg:DI 0 ax [orig:284 _198 ] [284])
        (sign_extend:DI (reg:SI 0 ax [483]))) "CALEKM.f":168 149 {*extendsidi2_rex64}
     (nil))
(insn 558 557 559 30 (parallel [
            (set (reg:DI 0 ax [orig:285 _199 ] [285])
                (plus:DI (reg:DI 0 ax [orig:284 _198 ] [284])
                    (reg:DI 1 dx [orig:283 _197 ] [283])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":168 222 {*adddi_1}
     (nil))
(insn 559 558 560 30 (parallel [
            (set (reg:DI 1 dx [orig:286 _200 ] [286])
                (plus:DI (reg:DI 0 ax [orig:285 _199 ] [285])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":168 222 {*adddi_1}
     (nil))
(insn 560 559 561 30 (set (reg:SF 21 xmm0 [orig:287 _201 ] [287])
        (plus:SF (reg:SF 21 xmm0 [orig:281 vg.5_195 ] [281])
            (reg:SF 22 xmm1 [orig:280 _194 ] [280]))) "CALEKM.f":168 838 {*fop_sf_comm}
     (nil))
(insn 561 560 562 30 (set (reg/f:DI 0 ax [484])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [3 v1d+0 S8 A64])) "CALEKM.f":168 85 {*movdi_internal}
     (nil))
(insn 562 561 563 30 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:286 _200 ] [286])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [484])) [1 *v1d_254(D) S4 A32])
        (reg:SF 21 xmm0 [orig:287 _201 ] [287])) "CALEKM.f":168 131 {*movsf_internal}
     (nil))
(insn 563 562 564 30 (set (reg:SI 0 ax [485])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":179 86 {*movsi_internal}
     (nil))
(insn 564 563 565 30 (set (reg:DI 0 ax [orig:288 _202 ] [288])
        (sign_extend:DI (reg:SI 0 ax [485]))) "CALEKM.f":179 149 {*extendsidi2_rex64}
     (nil))
(insn 565 564 566 30 (parallel [
            (set (reg:DI 1 dx [orig:289 _203 ] [289])
                (mult:DI (reg:DI 0 ax [orig:288 _202 ] [288])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":179 349 {*muldi3_1}
     (nil))
(insn 566 565 567 30 (set (reg:SI 0 ax [486])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":179 86 {*movsi_internal}
     (nil))
(insn 567 566 568 30 (set (reg:DI 0 ax [orig:290 _204 ] [290])
        (sign_extend:DI (reg:SI 0 ax [486]))) "CALEKM.f":179 149 {*extendsidi2_rex64}
     (nil))
(insn 568 567 569 30 (parallel [
            (set (reg:DI 0 ax [orig:291 _205 ] [291])
                (plus:DI (reg:DI 0 ax [orig:290 _204 ] [290])
                    (reg:DI 1 dx [orig:289 _203 ] [289])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":179 222 {*adddi_1}
     (nil))
(insn 569 568 570 30 (parallel [
            (set (reg:DI 1 dx [orig:292 _206 ] [292])
                (plus:DI (reg:DI 0 ax [orig:291 _205 ] [291])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":179 222 {*adddi_1}
     (nil))
(insn 570 569 571 30 (set (reg/f:DI 0 ax [487])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [3 u1d+0 S8 A64])) "CALEKM.f":179 85 {*movdi_internal}
     (nil))
(insn 571 570 572 30 (set (reg:SF 22 xmm1 [orig:293 _207 ] [293])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:292 _206 ] [292])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [487])) [1 *u1d_252(D) S4 A32])) "CALEKM.f":179 131 {*movsf_internal}
     (nil))
(insn 572 571 573 30 (set (reg:SI 0 ax [488])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":179 86 {*movsi_internal}
     (nil))
(insn 573 572 574 30 (set (reg:DI 0 ax [orig:294 _208 ] [294])
        (sign_extend:DI (reg:SI 0 ax [488]))) "CALEKM.f":179 149 {*extendsidi2_rex64}
     (nil))
(insn 574 573 575 30 (parallel [
            (set (reg:DI 1 dx [orig:295 _209 ] [295])
                (mult:DI (reg:DI 0 ax [orig:294 _208 ] [294])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":179 349 {*muldi3_1}
     (nil))
(insn 575 574 576 30 (set (reg:SI 0 ax [489])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":179 86 {*movsi_internal}
     (nil))
(insn 576 575 577 30 (set (reg:DI 0 ax [orig:296 _210 ] [296])
        (sign_extend:DI (reg:SI 0 ax [489]))) "CALEKM.f":179 149 {*extendsidi2_rex64}
     (nil))
(insn 577 576 578 30 (parallel [
            (set (reg:DI 0 ax [orig:297 _211 ] [297])
                (plus:DI (reg:DI 0 ax [orig:296 _210 ] [296])
                    (reg:DI 1 dx [orig:295 _209 ] [295])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":179 222 {*adddi_1}
     (nil))
(insn 578 577 579 30 (parallel [
            (set (reg:DI 1 dx [orig:298 _212 ] [298])
                (plus:DI (reg:DI 0 ax [orig:297 _211 ] [297])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":179 222 {*adddi_1}
     (nil))
(insn 579 578 580 30 (set (reg:SF 21 xmm0 [490])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S4 A32])) "CALEKM.f":179 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 580 579 581 30 (set (reg:SF 21 xmm0 [orig:299 _213 ] [299])
        (mult:SF (reg:SF 21 xmm0 [490])
            (reg:SF 22 xmm1 [orig:293 _207 ] [293]))) "CALEKM.f":179 838 {*fop_sf_comm}
     (nil))
(insn 581 580 582 30 (set (reg/f:DI 0 ax [491])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [3 u1d+0 S8 A64])) "CALEKM.f":179 85 {*movdi_internal}
     (nil))
(insn 582 581 583 30 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:298 _212 ] [298])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [491])) [1 *u1d_252(D) S4 A32])
        (reg:SF 21 xmm0 [orig:299 _213 ] [299])) "CALEKM.f":179 131 {*movsf_internal}
     (nil))
(insn 583 582 584 30 (set (reg:SI 0 ax [492])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":180 86 {*movsi_internal}
     (nil))
(insn 584 583 585 30 (set (reg:DI 0 ax [orig:300 _214 ] [300])
        (sign_extend:DI (reg:SI 0 ax [492]))) "CALEKM.f":180 149 {*extendsidi2_rex64}
     (nil))
(insn 585 584 586 30 (parallel [
            (set (reg:DI 1 dx [orig:301 _215 ] [301])
                (mult:DI (reg:DI 0 ax [orig:300 _214 ] [300])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":180 349 {*muldi3_1}
     (nil))
(insn 586 585 587 30 (set (reg:SI 0 ax [493])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":180 86 {*movsi_internal}
     (nil))
(insn 587 586 588 30 (set (reg:DI 0 ax [orig:302 _216 ] [302])
        (sign_extend:DI (reg:SI 0 ax [493]))) "CALEKM.f":180 149 {*extendsidi2_rex64}
     (nil))
(insn 588 587 589 30 (parallel [
            (set (reg:DI 0 ax [orig:303 _217 ] [303])
                (plus:DI (reg:DI 0 ax [orig:302 _216 ] [302])
                    (reg:DI 1 dx [orig:301 _215 ] [301])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":180 222 {*adddi_1}
     (nil))
(insn 589 588 590 30 (parallel [
            (set (reg:DI 1 dx [orig:304 _218 ] [304])
                (plus:DI (reg:DI 0 ax [orig:303 _217 ] [303])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":180 222 {*adddi_1}
     (nil))
(insn 590 589 591 30 (set (reg/f:DI 0 ax [494])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [3 v1d+0 S8 A64])) "CALEKM.f":180 85 {*movdi_internal}
     (nil))
(insn 591 590 592 30 (set (reg:SF 22 xmm1 [orig:305 _219 ] [305])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:304 _218 ] [304])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [494])) [1 *v1d_254(D) S4 A32])) "CALEKM.f":180 131 {*movsf_internal}
     (nil))
(insn 592 591 593 30 (set (reg:SI 0 ax [495])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])) "CALEKM.f":180 86 {*movsi_internal}
     (nil))
(insn 593 592 594 30 (set (reg:DI 0 ax [orig:306 _220 ] [306])
        (sign_extend:DI (reg:SI 0 ax [495]))) "CALEKM.f":180 149 {*extendsidi2_rex64}
     (nil))
(insn 594 593 595 30 (parallel [
            (set (reg:DI 1 dx [orig:307 _221 ] [307])
                (mult:DI (reg:DI 0 ax [orig:306 _220 ] [306])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":180 349 {*muldi3_1}
     (nil))
(insn 595 594 596 30 (set (reg:SI 0 ax [496])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "CALEKM.f":180 86 {*movsi_internal}
     (nil))
(insn 596 595 597 30 (set (reg:DI 0 ax [orig:308 _222 ] [308])
        (sign_extend:DI (reg:SI 0 ax [496]))) "CALEKM.f":180 149 {*extendsidi2_rex64}
     (nil))
(insn 597 596 598 30 (parallel [
            (set (reg:DI 0 ax [orig:309 _223 ] [309])
                (plus:DI (reg:DI 0 ax [orig:308 _222 ] [308])
                    (reg:DI 1 dx [orig:307 _221 ] [307])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":180 222 {*adddi_1}
     (nil))
(insn 598 597 599 30 (parallel [
            (set (reg:DI 1 dx [orig:310 _224 ] [310])
                (plus:DI (reg:DI 0 ax [orig:309 _223 ] [309])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":180 222 {*adddi_1}
     (nil))
(insn 599 598 600 30 (set (reg:SF 21 xmm0 [497])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S4 A32])) "CALEKM.f":180 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 600 599 601 30 (set (reg:SF 21 xmm0 [orig:311 _225 ] [311])
        (mult:SF (reg:SF 21 xmm0 [497])
            (reg:SF 22 xmm1 [orig:305 _219 ] [305]))) "CALEKM.f":180 838 {*fop_sf_comm}
     (nil))
(insn 601 600 602 30 (set (reg/f:DI 0 ax [498])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [3 v1d+0 S8 A64])) "CALEKM.f":180 85 {*movdi_internal}
     (nil))
(insn 602 601 603 30 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:310 _224 ] [310])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [498])) [1 *v1d_254(D) S4 A32])
        (reg:SF 21 xmm0 [orig:311 _225 ] [311])) "CALEKM.f":180 131 {*movsf_internal}
     (nil))
(insn 603 602 649 30 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":111 221 {*addsi_1}
     (nil))
(jump_insn 649 603 650 30 (set (pc)
        (label_ref 604)) "CALEKM.f":111 683 {jump}
     (nil)
 -> 604)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

(barrier 650 649 669)
;; basic block 38, loop depth 0, maybe hot
;;  prev block 30, next block 31, flags: (RTL, MODIFIED)
;;  pred:       17
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 669 650 668 38 39 (nil) [1 uses])
(note 668 669 670 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 670 668 607 38 (const_int 0 [0]) "CALEKM.f":180 718 {nop}
     (nil))
;;  succ:       31 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

;; basic block 31, loop depth 0, maybe hot
;;  prev block 38, next block 37, flags: (RTL, MODIFIED)
;;  pred:       38 [always]  (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 607 670 608 31 11 (nil) [0 uses])
(note 608 607 609 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 609 608 651 31 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALEKM.f":110 221 {*addsi_1}
     (nil))
(jump_insn 651 609 652 31 (set (pc)
        (label_ref 610)) "CALEKM.f":110 683 {jump}
     (nil)
 -> 610)
;;  succ:       15 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321

(barrier 652 651 666)
;; basic block 37, loop depth 0, maybe hot
;;  prev block 31, next block 32, flags: (RTL, MODIFIED)
;;  pred:       15
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 666 652 665 37 38 (nil) [1 uses])
(note 665 666 667 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 667 665 613 37 (const_int 0 [0]) "CALEKM.f":111 718 {nop}
     (nil))
;;  succ:       32 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 37, next block 1, flags: (RTL, MODIFIED)
;;  pred:       37 [always]  (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 613 667 614 32 10 (nil) [0 uses])
(note 614 613 640 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 640 614 671 32 (const_int 0 [0]) "CALEKM.f":191 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 671 640 0 NOTE_INSN_DELETED)
