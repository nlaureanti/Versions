
;; Function calmcvg (calmcvg_, funcdef_no=0, decl_uid=3772, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 33
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 34:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 35:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 36:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 37:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 44:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 46:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 47:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 50:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 54:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 61:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 63:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 64:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 65:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 68:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 72:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 75:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 78
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 79:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 81:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 83:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 86:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 89
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 90:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 92:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 93:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 104:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 108:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 109:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 110:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 111:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 116:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 119
	 Choosing alt 0 in insn 119:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 120:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 121:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 122:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 123:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 137
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 138:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 139:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 140:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 141:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 144:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 150:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 158:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 178:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 189:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 192
	 Choosing alt 0 in insn 192:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 193:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 195:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 200:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 205
	 Choosing alt 0 in insn 205:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 206:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 207
	 Choosing alt 0 in insn 207:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 208:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 209:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 210:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 211:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 214:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 216:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 217:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 218:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 221
	 Choosing alt 0 in insn 221:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 222:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 223
	 Choosing alt 0 in insn 223:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 224:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 225:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 226:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 227:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 229:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 230:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 231:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 234
	 Choosing alt 0 in insn 234:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 235:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 237:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 238
	 Choosing alt 1 in insn 238:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 241:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 242:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 244:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 245
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 246:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 247:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 248
	 Choosing alt 1 in insn 248:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 249:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 250:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 251:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 257:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 258:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 259:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 261:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 262
	 Choosing alt 0 in insn 262:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 263:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 264:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 265:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 267:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 268:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 270:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 271:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 275
	 Choosing alt 0 in insn 275:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 276:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 277
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 278:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 279:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 280:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 281:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 283:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 284:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 286:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 287:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 288:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 291
	 Choosing alt 0 in insn 291:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 292:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 293
	 Choosing alt 0 in insn 293:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 294:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 295:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 296:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 297:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 299:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 300:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 301:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 303:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 304
	 Choosing alt 0 in insn 304:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 305:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 306:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 307:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 308
	 Choosing alt 1 in insn 308:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 310:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 311:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 313:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 314:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 316:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 317
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 318:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 319:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 320:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 321:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 323:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 324:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 326:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 327
	 Choosing alt 0 in insn 327:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 328:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 329
	 Choosing alt 1 in insn 329:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 330:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 331:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 333:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 334:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 335:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 337:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 338
	 Choosing alt 0 in insn 338:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 339:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 340:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 341:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 343:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 344:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 346:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 347:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 348:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 351
	 Choosing alt 0 in insn 351:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 352:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 353
	 Choosing alt 0 in insn 353:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 354:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 355:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 356:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 357:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 359:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 360:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 362:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 363:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 364:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 367
	 Choosing alt 0 in insn 367:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 368:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 369
	 Choosing alt 0 in insn 369:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 370:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 371:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 372:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 373:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 375:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 376:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 377:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 379:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 380
	 Choosing alt 0 in insn 380:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 381:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 382:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 383:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 384
	 Choosing alt 1 in insn 384:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 386:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 387:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 389:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 390:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 392:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 393
	 Choosing alt 0 in insn 393:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 394:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 395:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 396:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 397:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 399:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 400:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 402:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 403
	 Choosing alt 0 in insn 403:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 404:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 405
	 Choosing alt 1 in insn 405:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 406:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 407:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 410:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 416:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 422:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 423:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 425:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 426:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 430:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
            1 Costly set: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =*d  (1) *a {ashrsi3_cvt}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 442:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 443:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 446:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=576 from oldreg=521, assigning class GENERAL_REGS to r576
  446: {r576:SI=r576:SI-r290:SI;clobber flags:CC;}
      REG_DEAD r521:SI
      REG_DEAD r290:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  671: r576:SI=r521:SI
    Inserting insn reload after:
  672: r522:SI=r576:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 447:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 449:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 459:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 462
	 Choosing alt 0 in insn 462:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 463:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 464:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 465:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 466:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 467:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 469:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 470:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 471:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 472:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 473:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 474:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 476:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 477:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 478:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 481:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 484:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 487
	 Choosing alt 0 in insn 487:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 489
	 Choosing alt 0 in insn 489:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 490:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 491:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 492:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 495:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 498:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 501
	 Choosing alt 0 in insn 501:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 502:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 503
	 Choosing alt 0 in insn 503:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 504:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 505:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 506:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 507
	 Choosing alt 1 in insn 507:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 510:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 511:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 513:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 514:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 515:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 517
	 Choosing alt 0 in insn 517:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 519
	 Choosing alt 0 in insn 519:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 520:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 521:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 522:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 523:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 525:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 528:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 529:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 532
	 Choosing alt 0 in insn 532:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 534
	 Choosing alt 0 in insn 534:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 535:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 536:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 537:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 538
	 Choosing alt 1 in insn 538:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 539:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 541:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 542:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 543:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 545:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 547:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 548:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 549:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 550
	 Choosing alt 0 in insn 550:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 551:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 552:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 553:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 555:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 557:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 559:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 560
	 Choosing alt 0 in insn 560:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 561:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 562:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 563:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 564
	 Choosing alt 1 in insn 564:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 566:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 568:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 569:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 570:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 571
	 Choosing alt 0 in insn 571:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 572:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 573:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 574:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 575:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 576:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 577:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 578:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 580:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 581
	 Choosing alt 0 in insn 581:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 582:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 583:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 584:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 585
	 Choosing alt 1 in insn 585:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 586:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 588:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 589:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 590:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 591:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 592:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 593:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 594:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 595:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 596:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 597:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 598:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 599
	 Choosing alt 0 in insn 599:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 600:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 601:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 602:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 603:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 604:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 605:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 606:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 609
	 Choosing alt 0 in insn 609:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 610:  (0) r  (1) r  (2) le {*adddi_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 611:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 612:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 613:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 614:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 615:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 621:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6 7 8
EBB 9 10 11
EBB 12
EBB 30
EBB 13
EBB 29
EBB 14
EBB 15 16
EBB 17 18 19
EBB 20
EBB 32
EBB 21
EBB 31
EBB 22
EBB 23 24
EBB 25 26
EBB 34
EBB 27
EBB 33
EBB 28

********** Pseudo live ranges #1: **********

  BB 28
   Insn 639: point = 0, n_alt = -1
  BB 33
   Insn 666: point = 0, n_alt = -1
  BB 23
   Insn 436: point = 0, n_alt = -1
   Insn 435: point = 0, n_alt = 0
   Insn 434: point = 1, n_alt = 0
   Insn 433: point = 3, n_alt = 0
   Insn 432: point = 4, n_alt = 0
  BB 27
   Insn 650: point = 5, n_alt = -1
   Insn 621: point = 5, n_alt = 1
  BB 34
   Insn 669: point = 6, n_alt = -1
  BB 25
   Insn 455: point = 7, n_alt = -1
   Insn 454: point = 7, n_alt = 0
   Insn 453: point = 8, n_alt = 0
   Insn 452: point = 10, n_alt = 0
   Insn 451: point = 11, n_alt = 0
  BB 26
   Insn 648: point = 12, n_alt = -1
   Insn 615: point = 12, n_alt = 1
   Insn 614: point = 12, n_alt = 8
   Insn 613: point = 13, n_alt = 3
   Insn 612: point = 14, n_alt = 0
   Insn 611: point = 16, n_alt = 2
   Insn 610: point = 17, n_alt = 3
   Insn 609: point = 19, n_alt = 0
   Insn 608: point = 21, n_alt = 0
   Insn 607: point = 23, n_alt = 0
   Insn 606: point = 24, n_alt = 0
   Insn 605: point = 26, n_alt = 0
   Insn 604: point = 28, n_alt = 0
   Insn 603: point = 29, n_alt = 1
   Insn 602: point = 31, n_alt = 7
   Insn 601: point = 33, n_alt = 4
   Insn 600: point = 34, n_alt = 3
   Insn 599: point = 36, n_alt = 0
   Insn 598: point = 38, n_alt = 0
   Insn 597: point = 40, n_alt = 0
   Insn 596: point = 41, n_alt = 0
   Insn 595: point = 43, n_alt = 0
   Insn 594: point = 45, n_alt = 0
   Insn 593: point = 46, n_alt = 8
   Insn 592: point = 47, n_alt = 1
   Insn 591: point = 49, n_alt = 7
   Insn 590: point = 50, n_alt = 8
   Insn 589: point = 51, n_alt = 1
   Insn 588: point = 53, n_alt = 7
   Insn 587: point = 54, n_alt = -2
   Insn 586: point = 56, n_alt = 2
   Insn 585: point = 58, n_alt = 1
   Insn 584: point = 60, n_alt = 7
   Insn 583: point = 62, n_alt = 4
   Insn 582: point = 63, n_alt = 3
   Insn 581: point = 65, n_alt = 0
   Insn 580: point = 67, n_alt = 0
   Insn 579: point = 69, n_alt = 0
   Insn 578: point = 70, n_alt = 0
   Insn 577: point = 72, n_alt = 0
   Insn 576: point = 74, n_alt = 0
   Insn 575: point = 76, n_alt = 0
   Insn 574: point = 77, n_alt = 7
   Insn 573: point = 79, n_alt = 4
   Insn 572: point = 80, n_alt = 3
   Insn 571: point = 82, n_alt = 0
   Insn 570: point = 84, n_alt = 0
   Insn 569: point = 86, n_alt = 0
   Insn 568: point = 87, n_alt = 0
   Insn 567: point = 89, n_alt = 0
   Insn 566: point = 91, n_alt = 0
   Insn 565: point = 93, n_alt = 0
   Insn 564: point = 94, n_alt = 1
   Insn 563: point = 96, n_alt = 7
   Insn 562: point = 98, n_alt = 4
   Insn 561: point = 99, n_alt = 3
   Insn 560: point = 101, n_alt = 0
   Insn 559: point = 103, n_alt = 0
   Insn 558: point = 105, n_alt = 0
   Insn 557: point = 106, n_alt = 0
   Insn 556: point = 108, n_alt = 0
   Insn 555: point = 110, n_alt = 0
   Insn 554: point = 112, n_alt = 0
   Insn 553: point = 113, n_alt = 7
   Insn 552: point = 115, n_alt = 4
   Insn 551: point = 116, n_alt = 3
   Insn 550: point = 118, n_alt = 0
   Insn 549: point = 120, n_alt = 0
   Insn 548: point = 122, n_alt = 0
   Insn 547: point = 123, n_alt = 0
   Insn 546: point = 125, n_alt = 0
   Insn 545: point = 127, n_alt = 0
   Insn 544: point = 129, n_alt = 0
   Insn 543: point = 130, n_alt = 8
   Insn 542: point = 131, n_alt = 1
   Insn 541: point = 133, n_alt = 7
   Insn 540: point = 134, n_alt = -2
   Insn 539: point = 136, n_alt = 2
   Insn 538: point = 138, n_alt = 1
   Insn 537: point = 140, n_alt = 7
   Insn 536: point = 142, n_alt = 4
   Insn 535: point = 143, n_alt = 3
   Insn 534: point = 145, n_alt = 0
   Insn 533: point = 147, n_alt = 0
   Insn 532: point = 149, n_alt = 0
   Insn 531: point = 151, n_alt = 0
   Insn 530: point = 152, n_alt = 0
   Insn 529: point = 154, n_alt = 0
   Insn 528: point = 156, n_alt = 0
   Insn 527: point = 158, n_alt = 0
   Insn 526: point = 160, n_alt = 0
   Insn 525: point = 161, n_alt = 0
   Insn 524: point = 163, n_alt = 0
   Insn 523: point = 165, n_alt = 0
   Insn 522: point = 166, n_alt = 7
   Insn 521: point = 168, n_alt = 4
   Insn 520: point = 169, n_alt = 3
   Insn 519: point = 171, n_alt = 0
   Insn 518: point = 173, n_alt = 0
   Insn 517: point = 175, n_alt = 0
   Insn 516: point = 177, n_alt = 0
   Insn 515: point = 178, n_alt = 0
   Insn 514: point = 180, n_alt = 0
   Insn 513: point = 182, n_alt = 0
   Insn 512: point = 184, n_alt = 0
   Insn 511: point = 186, n_alt = 0
   Insn 510: point = 187, n_alt = 0
   Insn 509: point = 189, n_alt = 0
   Insn 508: point = 191, n_alt = 0
   Insn 507: point = 192, n_alt = 1
   Insn 506: point = 194, n_alt = 7
   Insn 505: point = 196, n_alt = 4
   Insn 504: point = 197, n_alt = 3
   Insn 503: point = 199, n_alt = 0
   Insn 502: point = 201, n_alt = 0
   Insn 501: point = 203, n_alt = 0
   Insn 500: point = 205, n_alt = 0
   Insn 499: point = 206, n_alt = 0
   Insn 498: point = 208, n_alt = 0
   Insn 497: point = 210, n_alt = 0
   Insn 496: point = 212, n_alt = 0
   Insn 495: point = 213, n_alt = 0
   Insn 494: point = 215, n_alt = 0
   Insn 493: point = 217, n_alt = 0
   Insn 492: point = 218, n_alt = 7
   Insn 491: point = 220, n_alt = 4
   Insn 490: point = 221, n_alt = 3
   Insn 489: point = 223, n_alt = 0
   Insn 488: point = 225, n_alt = 0
   Insn 487: point = 227, n_alt = 0
   Insn 486: point = 229, n_alt = 0
   Insn 485: point = 230, n_alt = 0
   Insn 484: point = 232, n_alt = 0
   Insn 483: point = 234, n_alt = 0
   Insn 482: point = 236, n_alt = 0
   Insn 481: point = 237, n_alt = 0
   Insn 480: point = 239, n_alt = 0
   Insn 479: point = 241, n_alt = 0
   Insn 478: point = 242, n_alt = 8
   Insn 477: point = 243, n_alt = 2
   Insn 476: point = 245, n_alt = 7
   Insn 475: point = 246, n_alt = -2
   Insn 474: point = 248, n_alt = 1
   Insn 473: point = 250, n_alt = 7
   Insn 472: point = 252, n_alt = 4
   Insn 471: point = 253, n_alt = 8
   Insn 470: point = 254, n_alt = 2
   Insn 469: point = 256, n_alt = 7
   Insn 468: point = 257, n_alt = -2
   Insn 467: point = 259, n_alt = 1
   Insn 466: point = 261, n_alt = 7
   Insn 465: point = 263, n_alt = 0
   Insn 464: point = 265, n_alt = 4
   Insn 463: point = 266, n_alt = 3
   Insn 462: point = 268, n_alt = 0
   Insn 461: point = 270, n_alt = 0
   Insn 460: point = 272, n_alt = 0
   Insn 459: point = 273, n_alt = 0
   Insn 458: point = 275, n_alt = 0
   Insn 457: point = 277, n_alt = 0
  BB 24
   Insn 449: point = 279, n_alt = 1
   Insn 448: point = 279, n_alt = 0
   Insn 447: point = 280, n_alt = 1
   Insn 672: point = 281, n_alt = -2
	Hard reg 0 is preferable by r576 with profit 1000
   Insn 446: point = 283, n_alt = 0
   Insn 671: point = 284, n_alt = -2
	Hard reg 0 is preferable by r576 with profit 1000
	Hard reg 1 is preferable by r576 with profit 1000
   Insn 445: point = 286, n_alt = 0
   Insn 444: point = 287, n_alt = -2
   Insn 443: point = 289, n_alt = 0
   Insn 442: point = 291, n_alt = 0
   Insn 441: point = 293, n_alt = 0
   Insn 440: point = 295, n_alt = 0
   Insn 439: point = 297, n_alt = 0
   Insn 438: point = 298, n_alt = 0
  BB 22
   Insn 430: point = 300, n_alt = 1
   Insn 429: point = 301, n_alt = 0
   Insn 428: point = 302, n_alt = 0
   Insn 427: point = 303, n_alt = 0
   Insn 426: point = 303, n_alt = 3
   Insn 425: point = 303, n_alt = 4
   Insn 424: point = 303, n_alt = 0
   Insn 423: point = 303, n_alt = 3
   Insn 422: point = 303, n_alt = 4
  BB 31
   Insn 660: point = 303, n_alt = -1
  BB 15
   Insn 176: point = 303, n_alt = -1
   Insn 175: point = 303, n_alt = 0
   Insn 174: point = 304, n_alt = 0
   Insn 173: point = 306, n_alt = 0
   Insn 172: point = 307, n_alt = 0
  BB 21
   Insn 646: point = 308, n_alt = -1
   Insn 416: point = 308, n_alt = 1
  BB 32
   Insn 663: point = 309, n_alt = -1
  BB 17
   Insn 184: point = 310, n_alt = -1
   Insn 183: point = 310, n_alt = 0
   Insn 182: point = 311, n_alt = 0
   Insn 181: point = 313, n_alt = 0
   Insn 180: point = 314, n_alt = 0
  BB 20
   Insn 644: point = 315, n_alt = -1
   Insn 410: point = 315, n_alt = 1
  BB 19
   Insn 407: point = 316, n_alt = 8
   Insn 406: point = 317, n_alt = 4
   Insn 405: point = 318, n_alt = 1
   Insn 404: point = 320, n_alt = 3
   Insn 403: point = 322, n_alt = 0
   Insn 402: point = 324, n_alt = 1
   Insn 401: point = 326, n_alt = 0
   Insn 400: point = 327, n_alt = 0
   Insn 399: point = 329, n_alt = 1
   Insn 398: point = 331, n_alt = 0
   Insn 397: point = 332, n_alt = 7
   Insn 396: point = 334, n_alt = 0
   Insn 395: point = 336, n_alt = 4
   Insn 394: point = 337, n_alt = 3
   Insn 393: point = 339, n_alt = 0
   Insn 392: point = 341, n_alt = 1
   Insn 391: point = 343, n_alt = 0
   Insn 390: point = 344, n_alt = 0
   Insn 389: point = 346, n_alt = 1
   Insn 388: point = 348, n_alt = 0
   Insn 387: point = 349, n_alt = 1
   Insn 386: point = 351, n_alt = 7
   Insn 385: point = 352, n_alt = -2
   Insn 384: point = 354, n_alt = 1
   Insn 383: point = 356, n_alt = 7
   Insn 382: point = 358, n_alt = 3
   Insn 381: point = 359, n_alt = 3
   Insn 380: point = 361, n_alt = 0
   Insn 379: point = 363, n_alt = 1
   Insn 378: point = 365, n_alt = 0
   Insn 377: point = 366, n_alt = 0
   Insn 376: point = 368, n_alt = 1
   Insn 375: point = 370, n_alt = 0
   Insn 374: point = 372, n_alt = 0
   Insn 373: point = 373, n_alt = 1
   Insn 372: point = 375, n_alt = 7
   Insn 371: point = 377, n_alt = 3
   Insn 370: point = 378, n_alt = 3
   Insn 369: point = 380, n_alt = 0
   Insn 368: point = 382, n_alt = 1
   Insn 367: point = 384, n_alt = 0
   Insn 366: point = 386, n_alt = 0
   Insn 365: point = 387, n_alt = 0
   Insn 364: point = 389, n_alt = 0
   Insn 363: point = 391, n_alt = 0
   Insn 362: point = 393, n_alt = 1
   Insn 361: point = 395, n_alt = 0
   Insn 360: point = 396, n_alt = 0
   Insn 359: point = 398, n_alt = 1
   Insn 358: point = 400, n_alt = 0
   Insn 357: point = 401, n_alt = 1
   Insn 356: point = 403, n_alt = 7
   Insn 355: point = 405, n_alt = 3
   Insn 354: point = 406, n_alt = 3
   Insn 353: point = 408, n_alt = 0
   Insn 352: point = 410, n_alt = 1
   Insn 351: point = 412, n_alt = 0
   Insn 350: point = 414, n_alt = 0
   Insn 349: point = 415, n_alt = 0
   Insn 348: point = 417, n_alt = 0
   Insn 347: point = 419, n_alt = 0
   Insn 346: point = 421, n_alt = 1
   Insn 345: point = 423, n_alt = 0
   Insn 344: point = 424, n_alt = 0
   Insn 343: point = 426, n_alt = 1
   Insn 342: point = 428, n_alt = 0
   Insn 341: point = 429, n_alt = 7
   Insn 340: point = 431, n_alt = 3
   Insn 339: point = 432, n_alt = 3
   Insn 338: point = 434, n_alt = 0
   Insn 337: point = 436, n_alt = 1
   Insn 336: point = 438, n_alt = 0
   Insn 335: point = 439, n_alt = 0
   Insn 334: point = 441, n_alt = 1
   Insn 333: point = 443, n_alt = 0
   Insn 332: point = 445, n_alt = 0
   Insn 331: point = 446, n_alt = 8
   Insn 330: point = 447, n_alt = 4
   Insn 329: point = 448, n_alt = 1
   Insn 328: point = 450, n_alt = 3
   Insn 327: point = 452, n_alt = 0
   Insn 326: point = 454, n_alt = 1
   Insn 325: point = 456, n_alt = 0
   Insn 324: point = 457, n_alt = 0
   Insn 323: point = 459, n_alt = 1
   Insn 322: point = 461, n_alt = 0
   Insn 321: point = 462, n_alt = 7
   Insn 320: point = 464, n_alt = 0
   Insn 319: point = 466, n_alt = 4
   Insn 318: point = 467, n_alt = 3
   Insn 317: point = 469, n_alt = 0
   Insn 316: point = 471, n_alt = 1
   Insn 315: point = 473, n_alt = 0
   Insn 314: point = 474, n_alt = 0
   Insn 313: point = 476, n_alt = 1
   Insn 312: point = 478, n_alt = 0
   Insn 311: point = 479, n_alt = 1
   Insn 310: point = 481, n_alt = 7
   Insn 309: point = 482, n_alt = -2
   Insn 308: point = 484, n_alt = 1
   Insn 307: point = 486, n_alt = 7
   Insn 306: point = 488, n_alt = 3
   Insn 305: point = 489, n_alt = 3
   Insn 304: point = 491, n_alt = 0
   Insn 303: point = 493, n_alt = 1
   Insn 302: point = 495, n_alt = 0
   Insn 301: point = 496, n_alt = 0
   Insn 300: point = 498, n_alt = 1
   Insn 299: point = 500, n_alt = 0
   Insn 298: point = 502, n_alt = 0
   Insn 297: point = 503, n_alt = 1
   Insn 296: point = 505, n_alt = 7
   Insn 295: point = 507, n_alt = 3
   Insn 294: point = 508, n_alt = 3
   Insn 293: point = 510, n_alt = 0
   Insn 292: point = 512, n_alt = 1
   Insn 291: point = 514, n_alt = 0
   Insn 290: point = 516, n_alt = 0
   Insn 289: point = 517, n_alt = 0
   Insn 288: point = 519, n_alt = 0
   Insn 287: point = 521, n_alt = 0
   Insn 286: point = 523, n_alt = 1
   Insn 285: point = 525, n_alt = 0
   Insn 284: point = 526, n_alt = 0
   Insn 283: point = 528, n_alt = 1
   Insn 282: point = 530, n_alt = 0
   Insn 281: point = 531, n_alt = 1
   Insn 280: point = 533, n_alt = 7
   Insn 279: point = 535, n_alt = 3
   Insn 278: point = 536, n_alt = 3
   Insn 277: point = 538, n_alt = 0
   Insn 276: point = 540, n_alt = 1
   Insn 275: point = 542, n_alt = 0
   Insn 274: point = 544, n_alt = 0
   Insn 273: point = 545, n_alt = 0
   Insn 272: point = 547, n_alt = 0
   Insn 271: point = 549, n_alt = 0
   Insn 270: point = 551, n_alt = 1
   Insn 269: point = 553, n_alt = 0
   Insn 268: point = 554, n_alt = 0
   Insn 267: point = 556, n_alt = 1
   Insn 266: point = 558, n_alt = 0
   Insn 265: point = 559, n_alt = 7
   Insn 264: point = 561, n_alt = 3
   Insn 263: point = 562, n_alt = 3
   Insn 262: point = 564, n_alt = 0
   Insn 261: point = 566, n_alt = 1
   Insn 260: point = 568, n_alt = 0
   Insn 259: point = 569, n_alt = 0
   Insn 258: point = 571, n_alt = 1
   Insn 257: point = 573, n_alt = 0
   Insn 256: point = 575, n_alt = 0
  BB 18
   Insn 254: point = 577, n_alt = -1
   Insn 253: point = 577, n_alt = 0
   Insn 252: point = 578, n_alt = 0
   Insn 251: point = 580, n_alt = 3
   Insn 250: point = 581, n_alt = 8
   Insn 249: point = 582, n_alt = 4
   Insn 248: point = 583, n_alt = 1
   Insn 247: point = 585, n_alt = 7
   Insn 246: point = 586, n_alt = 3
   Insn 245: point = 588, n_alt = 0
   Insn 244: point = 590, n_alt = 1
   Insn 243: point = 592, n_alt = 0
   Insn 242: point = 593, n_alt = 0
   Insn 241: point = 595, n_alt = 1
   Insn 240: point = 597, n_alt = 0
   Insn 239: point = 598, n_alt = -2
   Insn 238: point = 600, n_alt = 1
   Insn 237: point = 602, n_alt = 7
   Insn 236: point = 604, n_alt = 3
   Insn 235: point = 605, n_alt = 3
   Insn 234: point = 607, n_alt = 0
   Insn 233: point = 609, n_alt = 1
   Insn 232: point = 611, n_alt = 0
   Insn 231: point = 612, n_alt = 0
   Insn 230: point = 614, n_alt = 1
   Insn 229: point = 616, n_alt = 0
   Insn 228: point = 618, n_alt = 0
   Insn 227: point = 619, n_alt = 1
   Insn 226: point = 621, n_alt = 7
   Insn 225: point = 623, n_alt = 3
   Insn 224: point = 624, n_alt = 3
   Insn 223: point = 626, n_alt = 0
   Insn 222: point = 628, n_alt = 1
   Insn 221: point = 630, n_alt = 0
   Insn 220: point = 632, n_alt = 0
   Insn 219: point = 633, n_alt = 0
   Insn 218: point = 635, n_alt = 0
   Insn 217: point = 637, n_alt = 0
   Insn 216: point = 639, n_alt = 1
   Insn 215: point = 641, n_alt = 0
   Insn 214: point = 642, n_alt = 0
   Insn 213: point = 644, n_alt = 1
   Insn 212: point = 646, n_alt = 0
   Insn 211: point = 647, n_alt = 1
   Insn 210: point = 649, n_alt = 7
   Insn 209: point = 651, n_alt = 3
   Insn 208: point = 652, n_alt = 3
   Insn 207: point = 654, n_alt = 0
   Insn 206: point = 656, n_alt = 1
   Insn 205: point = 658, n_alt = 0
   Insn 204: point = 660, n_alt = 0
   Insn 203: point = 661, n_alt = 0
   Insn 202: point = 663, n_alt = 0
   Insn 201: point = 665, n_alt = 0
   Insn 200: point = 667, n_alt = 1
   Insn 199: point = 669, n_alt = 0
   Insn 198: point = 670, n_alt = 0
   Insn 197: point = 672, n_alt = 1
   Insn 196: point = 674, n_alt = 0
   Insn 195: point = 675, n_alt = 7
   Insn 194: point = 677, n_alt = 3
   Insn 193: point = 678, n_alt = 3
   Insn 192: point = 680, n_alt = 0
   Insn 191: point = 682, n_alt = 1
   Insn 190: point = 684, n_alt = 0
   Insn 189: point = 685, n_alt = 0
   Insn 188: point = 687, n_alt = 1
   Insn 187: point = 689, n_alt = 0
   Insn 186: point = 691, n_alt = 0
  BB 16
   Insn 178: point = 693, n_alt = 1
  BB 14
   Insn 170: point = 694, n_alt = 1
   Insn 169: point = 695, n_alt = 0
   Insn 168: point = 696, n_alt = 0
   Insn 167: point = 697, n_alt = 0
   Insn 166: point = 697, n_alt = 3
   Insn 165: point = 697, n_alt = -2
   Insn 164: point = 698, n_alt = 3
   Insn 163: point = 699, n_alt = 0
   Insn 162: point = 699, n_alt = 3
   Insn 161: point = 699, n_alt = -2
   Insn 160: point = 700, n_alt = 3
   Insn 159: point = 701, n_alt = 0
   Insn 158: point = 701, n_alt = 3
   Insn 157: point = 701, n_alt = -2
   Insn 156: point = 702, n_alt = 3
  BB 29
   Insn 654: point = 703, n_alt = -1
  BB 3
   Insn 18: point = 703, n_alt = -1
   Insn 17: point = 703, n_alt = 0
   Insn 16: point = 704, n_alt = 0
   Insn 15: point = 706, n_alt = 0
   Insn 14: point = 707, n_alt = 0
  BB 13
   Insn 642: point = 708, n_alt = -1
   Insn 150: point = 708, n_alt = 1
  BB 30
   Insn 657: point = 709, n_alt = -1
  BB 5
   Insn 26: point = 710, n_alt = -1
   Insn 25: point = 710, n_alt = 0
   Insn 24: point = 711, n_alt = 0
   Insn 23: point = 713, n_alt = 0
   Insn 22: point = 714, n_alt = 0
  BB 12
   Insn 640: point = 715, n_alt = -1
   Insn 144: point = 715, n_alt = 1
  BB 11
   Insn 141: point = 716, n_alt = 8
   Insn 140: point = 717, n_alt = 7
   Insn 139: point = 718, n_alt = 4
   Insn 138: point = 719, n_alt = 3
   Insn 137: point = 721, n_alt = 0
   Insn 136: point = 723, n_alt = 1
   Insn 135: point = 725, n_alt = 0
   Insn 134: point = 726, n_alt = 0
   Insn 133: point = 728, n_alt = 1
   Insn 132: point = 730, n_alt = 0
  BB 10
   Insn 127: point = 732, n_alt = -1
   Insn 126: point = 732, n_alt = 1
  BB 9
   Insn 125: point = 734, n_alt = -1
   Insn 124: point = 734, n_alt = 1
   Insn 123: point = 734, n_alt = 7
   Insn 122: point = 735, n_alt = 7
   Insn 121: point = 737, n_alt = 4
   Insn 120: point = 738, n_alt = 3
   Insn 119: point = 740, n_alt = 0
   Insn 118: point = 742, n_alt = 1
   Insn 117: point = 744, n_alt = 0
   Insn 116: point = 745, n_alt = 0
   Insn 115: point = 747, n_alt = 1
   Insn 114: point = 749, n_alt = 0
  BB 8
   Insn 111: point = 751, n_alt = 8
   Insn 110: point = 752, n_alt = 7
   Insn 109: point = 753, n_alt = 4
   Insn 108: point = 754, n_alt = 3
   Insn 107: point = 756, n_alt = 0
   Insn 106: point = 758, n_alt = 1
   Insn 105: point = 760, n_alt = 0
   Insn 104: point = 761, n_alt = 0
   Insn 103: point = 763, n_alt = 1
   Insn 102: point = 765, n_alt = 0
  BB 7
   Insn 97: point = 767, n_alt = -1
   Insn 96: point = 767, n_alt = 1
  BB 6
   Insn 95: point = 769, n_alt = -1
   Insn 94: point = 769, n_alt = 1
   Insn 93: point = 769, n_alt = 7
   Insn 92: point = 770, n_alt = 7
   Insn 91: point = 772, n_alt = 4
   Insn 90: point = 773, n_alt = 3
   Insn 89: point = 775, n_alt = 0
   Insn 88: point = 777, n_alt = 1
   Insn 87: point = 779, n_alt = 0
   Insn 86: point = 780, n_alt = 0
   Insn 85: point = 782, n_alt = 1
   Insn 84: point = 784, n_alt = 0
   Insn 83: point = 785, n_alt = 8
   Insn 82: point = 786, n_alt = 4
   Insn 81: point = 787, n_alt = 7
   Insn 80: point = 789, n_alt = 3
   Insn 79: point = 790, n_alt = 3
   Insn 78: point = 792, n_alt = 0
   Insn 77: point = 794, n_alt = 1
   Insn 76: point = 796, n_alt = 0
   Insn 75: point = 797, n_alt = 0
   Insn 74: point = 799, n_alt = 1
   Insn 73: point = 801, n_alt = 0
   Insn 72: point = 802, n_alt = 3
   Insn 71: point = 804, n_alt = 0
   Insn 70: point = 806, n_alt = 1
   Insn 69: point = 808, n_alt = 0
   Insn 68: point = 809, n_alt = 0
   Insn 67: point = 811, n_alt = 1
   Insn 66: point = 813, n_alt = 0
   Insn 65: point = 814, n_alt = 8
   Insn 64: point = 815, n_alt = 4
   Insn 63: point = 816, n_alt = 7
   Insn 62: point = 818, n_alt = 3
   Insn 61: point = 819, n_alt = 3
   Insn 60: point = 821, n_alt = 0
   Insn 59: point = 823, n_alt = 1
   Insn 58: point = 825, n_alt = 0
   Insn 57: point = 826, n_alt = 0
   Insn 56: point = 828, n_alt = 1
   Insn 55: point = 830, n_alt = 0
   Insn 54: point = 831, n_alt = 3
   Insn 53: point = 833, n_alt = 0
   Insn 52: point = 835, n_alt = 1
   Insn 51: point = 837, n_alt = 0
   Insn 50: point = 838, n_alt = 0
   Insn 49: point = 840, n_alt = 1
   Insn 48: point = 842, n_alt = 0
   Insn 47: point = 843, n_alt = 8
   Insn 46: point = 844, n_alt = 7
   Insn 45: point = 845, n_alt = 3
   Insn 44: point = 846, n_alt = 3
   Insn 43: point = 848, n_alt = 0
   Insn 42: point = 850, n_alt = 1
   Insn 41: point = 852, n_alt = 0
   Insn 40: point = 853, n_alt = 0
   Insn 39: point = 855, n_alt = 1
   Insn 38: point = 857, n_alt = 0
   Insn 37: point = 858, n_alt = 8
   Insn 36: point = 859, n_alt = 7
   Insn 35: point = 860, n_alt = 4
   Insn 34: point = 861, n_alt = 3
   Insn 33: point = 863, n_alt = 0
   Insn 32: point = 865, n_alt = 1
   Insn 31: point = 867, n_alt = 0
   Insn 30: point = 868, n_alt = 0
   Insn 29: point = 870, n_alt = 1
   Insn 28: point = 872, n_alt = 0
  BB 4
   Insn 20: point = 874, n_alt = 1
  BB 2
   Insn 12: point = 875, n_alt = 1
   Insn 11: point = 876, n_alt = 0
   Insn 10: point = 877, n_alt = 0
   Insn 6: point = 878, n_alt = 5
   Insn 5: point = 878, n_alt = 5
   Insn 4: point = 878, n_alt = 5
   Insn 3: point = 878, n_alt = 5
   Insn 2: point = 878, n_alt = 5
 r87: [869..870]
 r88: [864..868]
 r89: [864..865]
 r90: [862..863]
 r91: [858..861]
 r92: [854..855]
 r93: [849..853]
 r94: [849..850]
 r95: [847..848]
 r96: [843..846]
 r97: [839..840]
 r98: [834..838]
 r99: [834..835]
 r100: [832..833]
 r101: [817..831]
 r102: [827..828]
 r103: [822..826]
 r104: [822..823]
 r105: [820..821]
 r106: [814..819]
 r107: [814..816]
 r108: [810..811]
 r109: [805..809]
 r110: [805..806]
 r111: [803..804]
 r112: [788..802]
 r113: [798..799]
 r114: [793..797]
 r115: [793..794]
 r116: [791..792]
 r117: [785..790]
 r118: [785..787]
 r119: [781..782]
 r120: [776..780]
 r121: [776..777]
 r122: [774..775]
 r123: [771..773]
 r124: [767..770]
 r125: [767..769]
 r126: [762..763]
 r127: [757..761]
 r128: [757..758]
 r129: [755..756]
 r130: [751..754]
 r131: [746..747]
 r132: [741..745]
 r133: [741..742]
 r134: [739..740]
 r135: [736..738]
 r136: [732..735]
 r137: [732..734]
 r138: [727..728]
 r139: [722..726]
 r140: [722..723]
 r141: [720..721]
 r142: [716..719]
 r143: [688..689]
 r144: [686..687]
 r145: [681..685]
 r146: [681..682]
 r147: [679..680]
 r148: [676..678]
 r149: [648..675]
 r150: [671..672]
 r151: [655..670]
 r152: [666..667]
 r153: [664..665]
 r154: [659..661]
 r155: [657..658]
 r156: [655..656]
 r157: [653..654]
 r158: [650..652]
 r159: [648..649]
 r160: [620..647]
 r161: [643..644]
 r162: [627..642]
 r163: [638..639]
 r164: [636..637]
 r165: [631..633]
 r166: [629..630]
 r167: [627..628]
 r168: [625..626]
 r169: [622..624]
 r170: [620..621]
 r171: [601..619]
 r172: [615..616]
 r173: [613..614]
 r174: [608..612]
 r175: [608..609]
 r176: [606..607]
 r177: [603..605]
 r178: [601..602]
 r179: [599..600]
 r180: [584..598]
 r181: [594..595]
 r182: [589..593]
 r183: [589..590]
 r184: [587..588]
 r185: [581..586]
 r186: [581..583]
 r187: [577..578]
 r188: [572..573]
 r189: [570..571]
 r190: [565..569]
 r191: [565..566]
 r192: [563..564]
 r193: [560..562]
 r194: [532..559]
 r195: [555..556]
 r196: [539..554]
 r197: [550..551]
 r198: [548..549]
 r199: [543..545]
 r200: [541..542]
 r201: [539..540]
 r202: [537..538]
 r203: [534..536]
 r204: [532..533]
 r205: [504..531]
 r206: [527..528]
 r207: [511..526]
 r208: [522..523]
 r209: [520..521]
 r210: [515..517]
 r211: [513..514]
 r212: [511..512]
 r213: [509..510]
 r214: [506..508]
 r215: [504..505]
 r216: [485..503]
 r217: [499..500]
 r218: [497..498]
 r219: [492..496]
 r220: [492..493]
 r221: [490..491]
 r222: [487..489]
 r223: [485..486]
 r224: [483..484]
 r225: [480..482]
 r226: [449..479]
 r227: [475..476]
 r228: [470..474]
 r229: [470..471]
 r230: [468..469]
 r231: [465..467]
 r232: [449..462]
 r233: [458..459]
 r234: [453..457]
 r235: [453..454]
 r236: [451..452]
 r237: [446..450]
 r238: [446..448]
 r239: [442..443]
 r240: [440..441]
 r241: [435..439]
 r242: [435..436]
 r243: [433..434]
 r244: [430..432]
 r245: [402..429]
 r246: [425..426]
 r247: [409..424]
 r248: [420..421]
 r249: [418..419]
 r250: [413..415]
 r251: [411..412]
 r252: [409..410]
 r253: [407..408]
 r254: [404..406]
 r255: [402..403]
 r256: [374..401]
 r257: [397..398]
 r258: [381..396]
 r259: [392..393]
 r260: [390..391]
 r261: [385..387]
 r262: [383..384]
 r263: [381..382]
 r264: [379..380]
 r265: [376..378]
 r266: [374..375]
 r267: [355..373]
 r268: [369..370]
 r269: [367..368]
 r270: [362..366]
 r271: [362..363]
 r272: [360..361]
 r273: [357..359]
 r274: [355..356]
 r275: [353..354]
 r276: [350..352]
 r277: [319..349]
 r278: [345..346]
 r279: [340..344]
 r280: [340..341]
 r281: [338..339]
 r282: [335..337]
 r283: [319..332]
 r284: [328..329]
 r285: [323..327]
 r286: [323..324]
 r287: [321..322]
 r288: [316..320]
 r289: [316..318]
 r290: [283..287]
 r291: [274..275]
 r292: [269..273]
 r293: [269..270]
 r294: [267..268]
 r295: [264..266]
 r296: [260..261]
 r297: [258..259]
 r298: [255..257]
 r299: [249..250]
 r300: [247..248]
 r301: [244..246]
 r302: [238..239]
 r303: [224..237]
 r304: [233..234]
 r305: [231..232]
 r306: [228..230]
 r307: [226..227]
 r308: [224..225]
 r309: [222..223]
 r310: [219..221]
 r311: [193..218]
 r312: [214..215]
 r313: [200..213]
 r314: [209..210]
 r315: [207..208]
 r316: [204..206]
 r317: [202..203]
 r318: [200..201]
 r319: [198..199]
 r320: [195..197]
 r321: [193..194]
 r322: [137..192]
 r323: [188..189]
 r324: [172..187]
 r325: [183..184]
 r326: [181..182]
 r327: [176..178]
 r328: [174..175]
 r329: [172..173]
 r330: [170..171]
 r331: [167..169]
 r332: [139..166]
 r333: [162..163]
 r334: [146..161]
 r335: [157..158]
 r336: [155..156]
 r337: [150..152]
 r338: [148..149]
 r339: [146..147]
 r340: [144..145]
 r341: [141..143]
 r342: [139..140]
 r343: [137..138]
 r344: [135..136]
 r345: [132..134]
 r346: [126..127]
 r347: [124..125]
 r348: [119..123]
 r349: [119..120]
 r350: [117..118]
 r351: [114..116]
 r352: [95..113]
 r353: [109..110]
 r354: [107..108]
 r355: [102..106]
 r356: [102..103]
 r357: [100..101]
 r358: [97..99]
 r359: [95..96]
 r360: [57..94]
 r361: [90..91]
 r362: [88..89]
 r363: [83..87]
 r364: [83..84]
 r365: [81..82]
 r366: [78..80]
 r367: [59..77]
 r368: [73..74]
 r369: [71..72]
 r370: [66..70]
 r371: [66..67]
 r372: [64..65]
 r373: [61..63]
 r374: [59..60]
 r375: [57..58]
 r376: [55..56]
 r377: [52..54]
 r378: [42..43]
 r379: [37..41]
 r380: [37..38]
 r381: [35..36]
 r382: [32..34]
 r383: [30..31]
 r384: [15..29]
 r385: [25..26]
 r386: [20..24]
 r387: [20..21]
 r388: [18..19]
 r389: [12..17]
 r390: [12..14]
 r391: [875..877]
 r392: [703..876]
 r393: [703..704]
 r394: [710..711]
 r395: [694..696]
 r396: [303..695]
 r397: [303..304]
 r398: [310..311]
 r399: [300..302]
 r400: [0..301]
 r401: [0..1]
 r402: [7..279]
 r403: [7..8]
 r404: [705..706]
 r405: [712..713]
 r406: [871..872]
 r407: [866..867]
 r408: [858..860]
 r409: [858..859]
 r410: [856..857]
 r411: [851..852]
 r412: [843..845]
 r413: [843..844]
 r414: [841..842]
 r415: [836..837]
 r416: [829..830]
 r417: [824..825]
 r418: [817..818]
 r419: [814..815]
 r420: [812..813]
 r421: [807..808]
 r422: [800..801]
 r423: [795..796]
 r424: [788..789]
 r425: [785..786]
 r426: [783..784]
 r427: [778..779]
 r428: [771..772]
 r429: [764..765]
 r430: [759..760]
 r431: [751..753]
 r432: [751..752]
 r433: [748..749]
 r434: [743..744]
 r435: [736..737]
 r436: [729..730]
 r437: [724..725]
 r438: [716..718]
 r439: [716..717]
 r440: [701..702]
 r441: [699..700]
 r442: [697..698]
 r443: [305..306]
 r444: [312..313]
 r445: [690..691]
 r446: [683..684]
 r447: [676..677]
 r448: [673..674]
 r449: [668..669]
 r450: [662..663]
 r451: [659..660]
 r452: [650..651]
 r453: [645..646]
 r454: [640..641]
 r455: [634..635]
 r456: [631..632]
 r457: [622..623]
 r458: [617..618]
 r459: [610..611]
 r460: [603..604]
 r461: [596..597]
 r462: [591..592]
 r463: [584..585]
 r464: [581..582]
 r465: [579..580]
 r466: [574..575]
 r467: [567..568]
 r468: [560..561]
 r469: [557..558]
 r470: [552..553]
 r471: [546..547]
 r472: [543..544]
 r473: [534..535]
 r474: [529..530]
 r475: [524..525]
 r476: [518..519]
 r477: [515..516]
 r478: [506..507]
 r479: [501..502]
 r480: [494..495]
 r481: [487..488]
 r482: [480..481]
 r483: [477..478]
 r484: [472..473]
 r485: [463..466]
 r486: [463..464]
 r487: [460..461]
 r488: [455..456]
 r489: [446..447]
 r490: [444..445]
 r491: [437..438]
 r492: [430..431]
 r493: [427..428]
 r494: [422..423]
 r495: [416..417]
 r496: [413..414]
 r497: [404..405]
 r498: [399..400]
 r499: [394..395]
 r500: [388..389]
 r501: [385..386]
 r502: [376..377]
 r503: [371..372]
 r504: [364..365]
 r505: [357..358]
 r506: [350..351]
 r507: [347..348]
 r508: [342..343]
 r509: [333..336]
 r510: [333..334]
 r511: [330..331]
 r512: [325..326]
 r513: [316..317]
 r514: [2..3]
 r515: [294..298]
 r516: [296..297]
 r517: [290..295]
 r518: [292..293]
 r519: [290..291]
 r520: [288..289]
 r521: [285..286]
 r522: [280..281]
 r523: [9..10]
 r524: [276..277]
 r525: [271..272]
 r526: [262..265]
 r527: [262..263]
 r528: [253..254]
 r529: [255..256]
 r530: [251..252]
 r531: [242..243]
 r532: [244..245]
 r533: [240..241]
 r534: [235..236]
 r535: [228..229]
 r536: [219..220]
 r537: [216..217]
 r538: [211..212]
 r539: [204..205]
 r540: [195..196]
 r541: [190..191]
 r542: [185..186]
 r543: [179..180]
 r544: [176..177]
 r545: [167..168]
 r546: [164..165]
 r547: [159..160]
 r548: [153..154]
 r549: [150..151]
 r550: [141..142]
 r551: [130..131]
 r552: [132..133]
 r553: [128..129]
 r554: [121..122]
 r555: [114..115]
 r556: [111..112]
 r557: [104..105]
 r558: [97..98]
 r559: [92..93]
 r560: [85..86]
 r561: [78..79]
 r562: [75..76]
 r563: [68..69]
 r564: [61..62]
 r565: [50..51]
 r566: [52..53]
 r567: [46..47]
 r568: [48..49]
 r569: [44..45]
 r570: [39..40]
 r571: [32..33]
 r572: [27..28]
 r573: [22..23]
 r574: [15..16]
 r575: [12..13]
 r576: [282..284]
Compressing live ranges: from 878 to 722 - 82%
Ranges after the compression:
 r87: [716..717]
 r88: [712..715]
 r89: [712..713]
 r90: [710..711]
 r91: [708..709]
 r92: [704..705]
 r93: [700..703]
 r94: [700..701]
 r95: [698..699]
 r96: [696..697]
 r97: [692..693]
 r98: [688..691]
 r99: [688..689]
 r100: [686..687]
 r101: [674..685]
 r102: [682..683]
 r103: [678..681]
 r104: [678..679]
 r105: [676..677]
 r106: [672..675]
 r107: [672..673]
 r108: [668..669]
 r109: [664..667]
 r110: [664..665]
 r111: [662..663]
 r112: [650..661]
 r113: [658..659]
 r114: [654..657]
 r115: [654..655]
 r116: [652..653]
 r117: [648..651]
 r118: [648..649]
 r119: [644..645]
 r120: [640..643]
 r121: [640..641]
 r122: [638..639]
 r123: [636..637]
 r124: [634..635]
 r125: [634..635]
 r126: [630..631]
 r127: [626..629]
 r128: [626..627]
 r129: [624..625]
 r130: [622..623]
 r131: [618..619]
 r132: [614..617]
 r133: [614..615]
 r134: [612..613]
 r135: [610..611]
 r136: [608..609]
 r137: [608..609]
 r138: [604..605]
 r139: [600..603]
 r140: [600..601]
 r141: [598..599]
 r142: [596..597]
 r143: [576..577]
 r144: [574..575]
 r145: [570..573]
 r146: [570..571]
 r147: [568..569]
 r148: [566..567]
 r149: [542..565]
 r150: [562..563]
 r151: [548..561]
 r152: [558..559]
 r153: [556..557]
 r154: [552..553]
 r155: [550..551]
 r156: [548..549]
 r157: [546..547]
 r158: [544..545]
 r159: [542..543]
 r160: [518..541]
 r161: [538..539]
 r162: [524..537]
 r163: [534..535]
 r164: [532..533]
 r165: [528..529]
 r166: [526..527]
 r167: [524..525]
 r168: [522..523]
 r169: [520..521]
 r170: [518..519]
 r171: [502..517]
 r172: [514..515]
 r173: [512..513]
 r174: [508..511]
 r175: [508..509]
 r176: [506..507]
 r177: [504..505]
 r178: [502..503]
 r179: [500..501]
 r180: [488..499]
 r181: [496..497]
 r182: [492..495]
 r183: [492..493]
 r184: [490..491]
 r185: [486..489]
 r186: [486..487]
 r187: [482..483]
 r188: [478..479]
 r189: [476..477]
 r190: [472..475]
 r191: [472..473]
 r192: [470..471]
 r193: [468..469]
 r194: [444..467]
 r195: [464..465]
 r196: [450..463]
 r197: [460..461]
 r198: [458..459]
 r199: [454..455]
 r200: [452..453]
 r201: [450..451]
 r202: [448..449]
 r203: [446..447]
 r204: [444..445]
 r205: [420..443]
 r206: [440..441]
 r207: [426..439]
 r208: [436..437]
 r209: [434..435]
 r210: [430..431]
 r211: [428..429]
 r212: [426..427]
 r213: [424..425]
 r214: [422..423]
 r215: [420..421]
 r216: [404..419]
 r217: [416..417]
 r218: [414..415]
 r219: [410..413]
 r220: [410..411]
 r221: [408..409]
 r222: [406..407]
 r223: [404..405]
 r224: [402..403]
 r225: [400..401]
 r226: [374..399]
 r227: [396..397]
 r228: [392..395]
 r229: [392..393]
 r230: [390..391]
 r231: [388..389]
 r232: [374..385]
 r233: [382..383]
 r234: [378..381]
 r235: [378..379]
 r236: [376..377]
 r237: [372..375]
 r238: [372..373]
 r239: [368..369]
 r240: [366..367]
 r241: [362..365]
 r242: [362..363]
 r243: [360..361]
 r244: [358..359]
 r245: [334..357]
 r246: [354..355]
 r247: [340..353]
 r248: [350..351]
 r249: [348..349]
 r250: [344..345]
 r251: [342..343]
 r252: [340..341]
 r253: [338..339]
 r254: [336..337]
 r255: [334..335]
 r256: [310..333]
 r257: [330..331]
 r258: [316..329]
 r259: [326..327]
 r260: [324..325]
 r261: [320..321]
 r262: [318..319]
 r263: [316..317]
 r264: [314..315]
 r265: [312..313]
 r266: [310..311]
 r267: [294..309]
 r268: [306..307]
 r269: [304..305]
 r270: [300..303]
 r271: [300..301]
 r272: [298..299]
 r273: [296..297]
 r274: [294..295]
 r275: [292..293]
 r276: [290..291]
 r277: [264..289]
 r278: [286..287]
 r279: [282..285]
 r280: [282..283]
 r281: [280..281]
 r282: [278..279]
 r283: [264..275]
 r284: [272..273]
 r285: [268..271]
 r286: [268..269]
 r287: [266..267]
 r288: [262..265]
 r289: [262..263]
 r290: [238..241]
 r291: [232..233]
 r292: [228..231]
 r293: [228..229]
 r294: [226..227]
 r295: [224..225]
 r296: [220..221]
 r297: [218..219]
 r298: [216..217]
 r299: [210..211]
 r300: [208..209]
 r301: [206..207]
 r302: [200..201]
 r303: [188..199]
 r304: [196..197]
 r305: [194..195]
 r306: [192..193]
 r307: [190..191]
 r308: [188..189]
 r309: [186..187]
 r310: [184..185]
 r311: [162..183]
 r312: [180..181]
 r313: [168..179]
 r314: [176..177]
 r315: [174..175]
 r316: [172..173]
 r317: [170..171]
 r318: [168..169]
 r319: [166..167]
 r320: [164..165]
 r321: [162..163]
 r322: [114..161]
 r323: [158..159]
 r324: [144..157]
 r325: [154..155]
 r326: [152..153]
 r327: [148..149]
 r328: [146..147]
 r329: [144..145]
 r330: [142..143]
 r331: [140..141]
 r332: [116..139]
 r333: [136..137]
 r334: [122..135]
 r335: [132..133]
 r336: [130..131]
 r337: [126..127]
 r338: [124..125]
 r339: [122..123]
 r340: [120..121]
 r341: [118..119]
 r342: [116..117]
 r343: [114..115]
 r344: [112..113]
 r345: [110..111]
 r346: [104..105]
 r347: [102..103]
 r348: [98..101]
 r349: [98..99]
 r350: [96..97]
 r351: [94..95]
 r352: [78..93]
 r353: [90..91]
 r354: [88..89]
 r355: [84..87]
 r356: [84..85]
 r357: [82..83]
 r358: [80..81]
 r359: [78..79]
 r360: [46..77]
 r361: [74..75]
 r362: [72..73]
 r363: [68..71]
 r364: [68..69]
 r365: [66..67]
 r366: [64..65]
 r367: [48..63]
 r368: [60..61]
 r369: [58..59]
 r370: [54..57]
 r371: [54..55]
 r372: [52..53]
 r373: [50..51]
 r374: [48..49]
 r375: [46..47]
 r376: [44..45]
 r377: [42..43]
 r378: [32..33]
 r379: [28..31]
 r380: [28..29]
 r381: [26..27]
 r382: [24..25]
 r383: [22..23]
 r384: [10..21]
 r385: [18..19]
 r386: [14..17]
 r387: [14..15]
 r388: [12..13]
 r389: [8..11]
 r390: [8..9]
 r391: [720..721]
 r392: [588..721]
 r393: [588..589]
 r394: [592..593]
 r395: [580..581]
 r396: [254..581]
 r397: [254..255]
 r398: [258..259]
 r399: [252..253]
 r400: [0..253]
 r401: [0..1]
 r402: [4..235]
 r403: [4..5]
 r404: [590..591]
 r405: [594..595]
 r406: [718..719]
 r407: [714..715]
 r408: [708..709]
 r409: [708..709]
 r410: [706..707]
 r411: [702..703]
 r412: [696..697]
 r413: [696..697]
 r414: [694..695]
 r415: [690..691]
 r416: [684..685]
 r417: [680..681]
 r418: [674..675]
 r419: [672..673]
 r420: [670..671]
 r421: [666..667]
 r422: [660..661]
 r423: [656..657]
 r424: [650..651]
 r425: [648..649]
 r426: [646..647]
 r427: [642..643]
 r428: [636..637]
 r429: [632..633]
 r430: [628..629]
 r431: [622..623]
 r432: [622..623]
 r433: [620..621]
 r434: [616..617]
 r435: [610..611]
 r436: [606..607]
 r437: [602..603]
 r438: [596..597]
 r439: [596..597]
 r440: [586..587]
 r441: [584..585]
 r442: [582..583]
 r443: [256..257]
 r444: [260..261]
 r445: [578..579]
 r446: [572..573]
 r447: [566..567]
 r448: [564..565]
 r449: [560..561]
 r450: [554..555]
 r451: [552..553]
 r452: [544..545]
 r453: [540..541]
 r454: [536..537]
 r455: [530..531]
 r456: [528..529]
 r457: [520..521]
 r458: [516..517]
 r459: [510..511]
 r460: [504..505]
 r461: [498..499]
 r462: [494..495]
 r463: [488..489]
 r464: [486..487]
 r465: [484..485]
 r466: [480..481]
 r467: [474..475]
 r468: [468..469]
 r469: [466..467]
 r470: [462..463]
 r471: [456..457]
 r472: [454..455]
 r473: [446..447]
 r474: [442..443]
 r475: [438..439]
 r476: [432..433]
 r477: [430..431]
 r478: [422..423]
 r479: [418..419]
 r480: [412..413]
 r481: [406..407]
 r482: [400..401]
 r483: [398..399]
 r484: [394..395]
 r485: [386..389]
 r486: [386..387]
 r487: [384..385]
 r488: [380..381]
 r489: [372..373]
 r490: [370..371]
 r491: [364..365]
 r492: [358..359]
 r493: [356..357]
 r494: [352..353]
 r495: [346..347]
 r496: [344..345]
 r497: [336..337]
 r498: [332..333]
 r499: [328..329]
 r500: [322..323]
 r501: [320..321]
 r502: [312..313]
 r503: [308..309]
 r504: [302..303]
 r505: [296..297]
 r506: [290..291]
 r507: [288..289]
 r508: [284..285]
 r509: [276..279]
 r510: [276..277]
 r511: [274..275]
 r512: [270..271]
 r513: [262..263]
 r514: [2..3]
 r515: [248..251]
 r516: [250..251]
 r517: [244..249]
 r518: [246..247]
 r519: [244..245]
 r520: [242..243]
 r521: [240..241]
 r522: [236..237]
 r523: [6..7]
 r524: [234..235]
 r525: [230..231]
 r526: [222..225]
 r527: [222..223]
 r528: [214..215]
 r529: [216..217]
 r530: [212..213]
 r531: [204..205]
 r532: [206..207]
 r533: [202..203]
 r534: [198..199]
 r535: [192..193]
 r536: [184..185]
 r537: [182..183]
 r538: [178..179]
 r539: [172..173]
 r540: [164..165]
 r541: [160..161]
 r542: [156..157]
 r543: [150..151]
 r544: [148..149]
 r545: [140..141]
 r546: [138..139]
 r547: [134..135]
 r548: [128..129]
 r549: [126..127]
 r550: [118..119]
 r551: [108..109]
 r552: [110..111]
 r553: [106..107]
 r554: [100..101]
 r555: [94..95]
 r556: [92..93]
 r557: [86..87]
 r558: [80..81]
 r559: [76..77]
 r560: [70..71]
 r561: [64..65]
 r562: [62..63]
 r563: [56..57]
 r564: [50..51]
 r565: [40..41]
 r566: [42..43]
 r567: [36..37]
 r568: [38..39]
 r569: [34..35]
 r570: [30..31]
 r571: [24..25]
 r572: [20..21]
 r573: [16..17]
 r574: [10..11]
 r575: [8..9]
 r576: [238..239]

********** Assignment #1: **********

	 Assigning to 576 (cl=GENERAL_REGS, orig=521, freq=3000, tfirst=576, tfreq=3000)...
	   Assign 1 to reload r576 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 37
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 63
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 65
changing reg in insn 63
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 81
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 83
changing reg in insn 81
changing reg in insn 83
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 92
changing reg in insn 96
changing reg in insn 94
changing reg in insn 93
changing reg in insn 96
changing reg in insn 94
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 111
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 122
changing reg in insn 122
changing reg in insn 126
changing reg in insn 124
changing reg in insn 123
changing reg in insn 126
changing reg in insn 124
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 141
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 191
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 195
changing reg in insn 195
changing reg in insn 211
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 205
changing reg in insn 205
changing reg in insn 206
changing reg in insn 206
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 227
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 221
changing reg in insn 221
changing reg in insn 222
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 226
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 229
changing reg in insn 230
changing reg in insn 230
changing reg in insn 231
changing reg in insn 231
changing reg in insn 233
changing reg in insn 234
changing reg in insn 235
changing reg in insn 235
changing reg in insn 237
changing reg in insn 237
changing reg in insn 238
changing reg in insn 239
changing reg in insn 239
changing reg in insn 241
changing reg in insn 242
changing reg in insn 242
changing reg in insn 244
changing reg in insn 245
changing reg in insn 246
changing reg in insn 246
changing reg in insn 250
changing reg in insn 248
changing reg in insn 250
changing reg in insn 252
changing reg in insn 253
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 261
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 265
changing reg in insn 265
changing reg in insn 281
changing reg in insn 267
changing reg in insn 268
changing reg in insn 268
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 272
changing reg in insn 273
changing reg in insn 275
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 280
changing reg in insn 280
changing reg in insn 281
changing reg in insn 281
changing reg in insn 297
changing reg in insn 283
changing reg in insn 284
changing reg in insn 284
changing reg in insn 286
changing reg in insn 287
changing reg in insn 287
changing reg in insn 288
changing reg in insn 289
changing reg in insn 291
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 296
changing reg in insn 296
changing reg in insn 297
changing reg in insn 297
changing reg in insn 299
changing reg in insn 300
changing reg in insn 300
changing reg in insn 301
changing reg in insn 301
changing reg in insn 303
changing reg in insn 304
changing reg in insn 305
changing reg in insn 305
changing reg in insn 307
changing reg in insn 307
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 311
changing reg in insn 311
changing reg in insn 313
changing reg in insn 314
changing reg in insn 314
changing reg in insn 316
changing reg in insn 317
changing reg in insn 318
changing reg in insn 318
changing reg in insn 320
changing reg in insn 321
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 326
changing reg in insn 327
changing reg in insn 328
changing reg in insn 328
changing reg in insn 331
changing reg in insn 329
changing reg in insn 331
changing reg in insn 333
changing reg in insn 334
changing reg in insn 334
changing reg in insn 335
changing reg in insn 335
changing reg in insn 337
changing reg in insn 338
changing reg in insn 339
changing reg in insn 339
changing reg in insn 341
changing reg in insn 341
changing reg in insn 357
changing reg in insn 343
changing reg in insn 344
changing reg in insn 344
changing reg in insn 346
changing reg in insn 347
changing reg in insn 347
changing reg in insn 348
changing reg in insn 349
changing reg in insn 351
changing reg in insn 351
changing reg in insn 352
changing reg in insn 352
changing reg in insn 353
changing reg in insn 354
changing reg in insn 354
changing reg in insn 356
changing reg in insn 356
changing reg in insn 357
changing reg in insn 357
changing reg in insn 373
changing reg in insn 359
changing reg in insn 360
changing reg in insn 360
changing reg in insn 362
changing reg in insn 363
changing reg in insn 363
changing reg in insn 364
changing reg in insn 365
changing reg in insn 367
changing reg in insn 367
changing reg in insn 368
changing reg in insn 368
changing reg in insn 369
changing reg in insn 370
changing reg in insn 370
changing reg in insn 372
changing reg in insn 372
changing reg in insn 373
changing reg in insn 373
changing reg in insn 375
changing reg in insn 376
changing reg in insn 376
changing reg in insn 377
changing reg in insn 377
changing reg in insn 379
changing reg in insn 380
changing reg in insn 381
changing reg in insn 381
changing reg in insn 383
changing reg in insn 383
changing reg in insn 384
changing reg in insn 385
changing reg in insn 385
changing reg in insn 387
changing reg in insn 387
changing reg in insn 389
changing reg in insn 390
changing reg in insn 390
changing reg in insn 392
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 396
changing reg in insn 397
changing reg in insn 399
changing reg in insn 400
changing reg in insn 400
changing reg in insn 402
changing reg in insn 403
changing reg in insn 404
changing reg in insn 404
changing reg in insn 407
changing reg in insn 405
changing reg in insn 407
changing reg in insn 444
changing reg in insn 446
changing reg in insn 458
changing reg in insn 459
changing reg in insn 459
changing reg in insn 461
changing reg in insn 462
changing reg in insn 463
changing reg in insn 463
changing reg in insn 465
changing reg in insn 466
changing reg in insn 467
changing reg in insn 467
changing reg in insn 467
changing reg in insn 468
changing reg in insn 468
changing reg in insn 470
changing reg in insn 473
changing reg in insn 474
changing reg in insn 474
changing reg in insn 474
changing reg in insn 475
changing reg in insn 475
changing reg in insn 477
changing reg in insn 480
changing reg in insn 481
changing reg in insn 481
changing reg in insn 483
changing reg in insn 484
changing reg in insn 484
changing reg in insn 485
changing reg in insn 485
changing reg in insn 487
changing reg in insn 487
changing reg in insn 488
changing reg in insn 488
changing reg in insn 489
changing reg in insn 490
changing reg in insn 490
changing reg in insn 492
changing reg in insn 492
changing reg in insn 494
changing reg in insn 495
changing reg in insn 495
changing reg in insn 497
changing reg in insn 498
changing reg in insn 498
changing reg in insn 499
changing reg in insn 499
changing reg in insn 501
changing reg in insn 501
changing reg in insn 502
changing reg in insn 502
changing reg in insn 503
changing reg in insn 504
changing reg in insn 504
changing reg in insn 506
changing reg in insn 506
changing reg in insn 507
changing reg in insn 539
changing reg in insn 509
changing reg in insn 510
changing reg in insn 510
changing reg in insn 512
changing reg in insn 513
changing reg in insn 513
changing reg in insn 514
changing reg in insn 515
changing reg in insn 517
changing reg in insn 517
changing reg in insn 518
changing reg in insn 518
changing reg in insn 519
changing reg in insn 520
changing reg in insn 520
changing reg in insn 522
changing reg in insn 522
changing reg in insn 524
changing reg in insn 525
changing reg in insn 525
changing reg in insn 527
changing reg in insn 528
changing reg in insn 528
changing reg in insn 529
changing reg in insn 530
changing reg in insn 532
changing reg in insn 532
changing reg in insn 533
changing reg in insn 533
changing reg in insn 534
changing reg in insn 535
changing reg in insn 535
changing reg in insn 537
changing reg in insn 537
changing reg in insn 538
changing reg in insn 539
changing reg in insn 539
changing reg in insn 540
changing reg in insn 540
changing reg in insn 542
changing reg in insn 545
changing reg in insn 546
changing reg in insn 546
changing reg in insn 547
changing reg in insn 547
changing reg in insn 549
changing reg in insn 550
changing reg in insn 551
changing reg in insn 551
changing reg in insn 553
changing reg in insn 553
changing reg in insn 555
changing reg in insn 556
changing reg in insn 556
changing reg in insn 557
changing reg in insn 557
changing reg in insn 559
changing reg in insn 560
changing reg in insn 561
changing reg in insn 561
changing reg in insn 563
changing reg in insn 563
changing reg in insn 564
changing reg in insn 586
changing reg in insn 566
changing reg in insn 567
changing reg in insn 567
changing reg in insn 568
changing reg in insn 568
changing reg in insn 570
changing reg in insn 571
changing reg in insn 572
changing reg in insn 572
changing reg in insn 574
changing reg in insn 574
changing reg in insn 576
changing reg in insn 577
changing reg in insn 577
changing reg in insn 578
changing reg in insn 578
changing reg in insn 580
changing reg in insn 581
changing reg in insn 582
changing reg in insn 582
changing reg in insn 584
changing reg in insn 584
changing reg in insn 585
changing reg in insn 586
changing reg in insn 586
changing reg in insn 587
changing reg in insn 587
changing reg in insn 589
changing reg in insn 595
changing reg in insn 596
changing reg in insn 596
changing reg in insn 598
changing reg in insn 599
changing reg in insn 600
changing reg in insn 600
changing reg in insn 602
changing reg in insn 602
changing reg in insn 603
changing reg in insn 603
changing reg in insn 612
changing reg in insn 612
changing reg in insn 605
changing reg in insn 606
changing reg in insn 606
changing reg in insn 608
changing reg in insn 609
changing reg in insn 610
changing reg in insn 610
changing reg in insn 614
changing reg in insn 612
changing reg in insn 614
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
changing reg in insn 24
changing reg in insn 25
changing reg in insn 168
changing reg in insn 170
changing reg in insn 169
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 182
changing reg in insn 183
changing reg in insn 428
changing reg in insn 430
changing reg in insn 429
changing reg in insn 432
changing reg in insn 434
changing reg in insn 435
changing reg in insn 448
changing reg in insn 451
changing reg in insn 453
changing reg in insn 454
changing reg in insn 15
changing reg in insn 16
changing reg in insn 23
changing reg in insn 24
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 35
changing reg in insn 37
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 47
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 91
changing reg in insn 92
changing reg in insn 102
changing reg in insn 103
changing reg in insn 105
changing reg in insn 106
changing reg in insn 109
changing reg in insn 111
changing reg in insn 110
changing reg in insn 111
changing reg in insn 114
changing reg in insn 115
changing reg in insn 117
changing reg in insn 118
changing reg in insn 121
changing reg in insn 122
changing reg in insn 132
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 139
changing reg in insn 141
changing reg in insn 140
changing reg in insn 141
changing reg in insn 156
changing reg in insn 157
changing reg in insn 160
changing reg in insn 161
changing reg in insn 164
changing reg in insn 165
changing reg in insn 173
changing reg in insn 174
changing reg in insn 181
changing reg in insn 182
changing reg in insn 186
changing reg in insn 187
changing reg in insn 190
changing reg in insn 191
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 200
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 209
changing reg in insn 210
changing reg in insn 212
changing reg in insn 213
changing reg in insn 215
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 220
changing reg in insn 225
changing reg in insn 226
changing reg in insn 228
changing reg in insn 229
changing reg in insn 232
changing reg in insn 233
changing reg in insn 236
changing reg in insn 237
changing reg in insn 240
changing reg in insn 241
changing reg in insn 243
changing reg in insn 244
changing reg in insn 247
changing reg in insn 249
changing reg in insn 250
changing reg in insn 251
changing reg in insn 252
changing reg in insn 256
changing reg in insn 257
changing reg in insn 260
changing reg in insn 261
changing reg in insn 264
changing reg in insn 265
changing reg in insn 266
changing reg in insn 267
changing reg in insn 269
changing reg in insn 270
changing reg in insn 272
changing reg in insn 273
changing reg in insn 274
changing reg in insn 279
changing reg in insn 280
changing reg in insn 282
changing reg in insn 283
changing reg in insn 285
changing reg in insn 286
changing reg in insn 288
changing reg in insn 289
changing reg in insn 290
changing reg in insn 295
changing reg in insn 296
changing reg in insn 298
changing reg in insn 299
changing reg in insn 302
changing reg in insn 303
changing reg in insn 306
changing reg in insn 307
changing reg in insn 310
changing reg in insn 311
changing reg in insn 312
changing reg in insn 313
changing reg in insn 315
changing reg in insn 316
changing reg in insn 319
changing reg in insn 321
changing reg in insn 320
changing reg in insn 321
changing reg in insn 322
changing reg in insn 323
changing reg in insn 325
changing reg in insn 326
changing reg in insn 330
changing reg in insn 331
changing reg in insn 332
changing reg in insn 333
changing reg in insn 336
changing reg in insn 337
changing reg in insn 340
changing reg in insn 341
changing reg in insn 342
changing reg in insn 343
changing reg in insn 345
changing reg in insn 346
changing reg in insn 348
changing reg in insn 349
changing reg in insn 350
changing reg in insn 355
changing reg in insn 356
changing reg in insn 358
changing reg in insn 359
changing reg in insn 361
changing reg in insn 362
changing reg in insn 364
changing reg in insn 365
changing reg in insn 366
changing reg in insn 371
changing reg in insn 372
changing reg in insn 374
changing reg in insn 375
changing reg in insn 378
changing reg in insn 379
changing reg in insn 382
changing reg in insn 383
changing reg in insn 386
changing reg in insn 387
changing reg in insn 388
changing reg in insn 389
changing reg in insn 391
changing reg in insn 392
changing reg in insn 395
changing reg in insn 397
changing reg in insn 396
changing reg in insn 397
changing reg in insn 398
changing reg in insn 399
changing reg in insn 401
changing reg in insn 402
changing reg in insn 406
changing reg in insn 407
changing reg in insn 433
changing reg in insn 434
changing reg in insn 438
changing reg in insn 441
changing reg in insn 439
changing reg in insn 439
changing reg in insn 440
changing reg in insn 440
changing reg in insn 443
changing reg in insn 441
changing reg in insn 441
changing reg in insn 442
changing reg in insn 442
changing reg in insn 443
changing reg in insn 443
changing reg in insn 444
changing reg in insn 445
changing reg in insn 447
changing reg in insn 452
changing reg in insn 453
changing reg in insn 457
changing reg in insn 458
changing reg in insn 460
changing reg in insn 461
changing reg in insn 464
changing reg in insn 466
changing reg in insn 465
changing reg in insn 466
changing reg in insn 470
changing reg in insn 471
changing reg in insn 469
changing reg in insn 470
changing reg in insn 472
changing reg in insn 473
changing reg in insn 477
changing reg in insn 478
changing reg in insn 476
changing reg in insn 477
changing reg in insn 479
changing reg in insn 480
changing reg in insn 482
changing reg in insn 483
changing reg in insn 486
changing reg in insn 491
changing reg in insn 492
changing reg in insn 493
changing reg in insn 494
changing reg in insn 496
changing reg in insn 497
changing reg in insn 500
changing reg in insn 505
changing reg in insn 506
changing reg in insn 508
changing reg in insn 509
changing reg in insn 511
changing reg in insn 512
changing reg in insn 514
changing reg in insn 515
changing reg in insn 516
changing reg in insn 521
changing reg in insn 522
changing reg in insn 523
changing reg in insn 524
changing reg in insn 526
changing reg in insn 527
changing reg in insn 529
changing reg in insn 530
changing reg in insn 531
changing reg in insn 536
changing reg in insn 537
changing reg in insn 542
changing reg in insn 543
changing reg in insn 541
changing reg in insn 542
changing reg in insn 544
changing reg in insn 545
changing reg in insn 548
changing reg in insn 549
changing reg in insn 552
changing reg in insn 553
changing reg in insn 554
changing reg in insn 555
changing reg in insn 558
changing reg in insn 559
changing reg in insn 562
changing reg in insn 563
changing reg in insn 565
changing reg in insn 566
changing reg in insn 569
changing reg in insn 570
changing reg in insn 573
changing reg in insn 574
changing reg in insn 575
changing reg in insn 576
changing reg in insn 579
changing reg in insn 580
changing reg in insn 583
changing reg in insn 584
changing reg in insn 589
changing reg in insn 590
changing reg in insn 588
changing reg in insn 589
changing reg in insn 592
changing reg in insn 593
changing reg in insn 591
changing reg in insn 592
changing reg in insn 594
changing reg in insn 595
changing reg in insn 597
changing reg in insn 598
changing reg in insn 601
changing reg in insn 602
changing reg in insn 604
changing reg in insn 605
changing reg in insn 607
changing reg in insn 608
changing reg in insn 611
changing reg in insn 612
changing reg in insn 613
changing reg in insn 614
deleting insn with uid = 444.
deleting insn with uid = 671.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 159.
verify found no changes in insn with uid = 163.
verify found no changes in insn with uid = 167.
verify found no changes in insn with uid = 424.
verify found no changes in insn with uid = 427.


calmcvg

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 37 [r8]
;;  ref usage 	r0={115d,110u} r1={221d,217u} r2={61d,56u} r4={37d,32u,6e} r5={15d,10u,4e} r6={1d,182u} r7={1d,39u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={190d,17u} r18={5d} r19={5d} r20={1d,1u,20e} r21={57d,55u,1e} r22={33d,29u} r23={8d,2u} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d,1u} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 1844{1062d,751u,31e} in 578{573 regular + 5 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 391 392
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 q1d+0 S8 A64])
        (reg:DI 5 di [ q1d ])) "CALMCVG.f":1 85 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 u1d+0 S8 A64])
        (reg:DI 4 si [ u1d ])) "CALMCVG.f":1 85 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 v1d+0 S8 A64])
        (reg:DI 1 dx [ v1d ])) "CALMCVG.f":1 85 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [4 ih+0 S8 A64])
        (reg:DI 2 cx [ ih ])) "CALMCVG.f":1 85 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 qcnvg+0 S8 A64])
        (reg:DI 37 r8 [ qcnvg ])) "CALMCVG.f":1 85 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 1 dx [orig:391 _321 ] [391])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f3e7cde43f0 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "CALMCVG.f":89 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [orig:392 _322 ] [392])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f3e7cde43f0 parallel>)
                    (const_int 12 [0xc]))) [1 parallel.jend+0 S4 A32])) "CALMCVG.f":89 86 {*movsi_internal}
     (nil))
(insn 12 11 151 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (reg:SI 1 dx [orig:391 _321 ] [391])) "CALMCVG.f":89 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              13 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392
;; lr  def 	 17 [flags] 393 404
(code_label 151 12 13 3 9 (nil) [1 uses])
(note 13 151 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:392 _322 ] [392]))) "CALMCVG.f":89 11 {*cmpsi_1}
     (nil))
(insn 15 14 16 3 (set (reg:QI 1 dx [404])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALMCVG.f":89 678 {*setcc_qi}
     (nil))
(insn 16 15 17 3 (set (reg:SI 1 dx [orig:393 _324 ] [393])
        (zero_extend:SI (reg:QI 1 dx [404]))) "CALMCVG.f":89 140 {*zero_extendqisi2}
     (nil))
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:393 _324 ] [393])
            (const_int 0 [0]))) "CALMCVG.f":89 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 653)
            (pc))) "CALMCVG.f":89 682 {*jcc}
     (nil)
 -> 653)
;;  succ:       29
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 145 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALMCVG.f":90 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              12 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 394 405
(code_label 145 20 21 5 8 (nil) [1 uses])
(note 21 145 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALMCVG.f":90 11 {*cmpsi_1}
     (nil))
(insn 23 22 24 5 (set (reg:QI 1 dx [405])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALMCVG.f":90 678 {*setcc_qi}
     (nil))
(insn 24 23 25 5 (set (reg:SI 1 dx [orig:394 _326 ] [394])
        (zero_extend:SI (reg:QI 1 dx [405]))) "CALMCVG.f":90 140 {*zero_extendqisi2}
     (nil))
(insn 25 24 26 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:394 _326 ] [394])
            (const_int 0 [0]))) "CALMCVG.f":90 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 26 25 27 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 656)
            (pc))) "CALMCVG.f":90 682 {*jcc}
     (nil)
 -> 656)
;;  succ:       30
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg:SI 1 dx [406])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":91 86 {*movsi_internal}
     (nil))
(insn 29 28 30 6 (set (reg:DI 1 dx [orig:87 _1 ] [87])
        (sign_extend:DI (reg:SI 1 dx [406]))) "CALMCVG.f":91 149 {*extendsidi2_rex64}
     (nil))
(insn 30 29 31 6 (parallel [
            (set (reg:DI 2 cx [orig:88 _2 ] [88])
                (mult:DI (reg:DI 1 dx [orig:87 _1 ] [87])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":91 349 {*muldi3_1}
     (nil))
(insn 31 30 32 6 (set (reg:SI 1 dx [407])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":91 86 {*movsi_internal}
     (nil))
(insn 32 31 33 6 (set (reg:DI 1 dx [orig:89 _3 ] [89])
        (sign_extend:DI (reg:SI 1 dx [407]))) "CALMCVG.f":91 149 {*extendsidi2_rex64}
     (nil))
(insn 33 32 34 6 (parallel [
            (set (reg:DI 1 dx [orig:90 _4 ] [90])
                (plus:DI (reg:DI 1 dx [orig:89 _3 ] [89])
                    (reg:DI 2 cx [orig:88 _2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":91 222 {*adddi_1}
     (nil))
(insn 34 33 35 6 (parallel [
            (set (reg:DI 2 cx [orig:91 _5 ] [91])
                (plus:DI (reg:DI 1 dx [orig:90 _4 ] [90])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":91 222 {*adddi_1}
     (nil))
(insn 35 34 36 6 (set (reg/f:DI 1 dx [408])
        (symbol_ref:DI ("qv.3985") [flags 0x202]  <var_decl 0x7f3e7cde4f30 qv>)) "CALMCVG.f":91 85 {*movdi_internal}
     (nil))
(insn 36 35 37 6 (set (reg:SF 21 xmm0 [409])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALMCVG.f":91 131 {*movsf_internal}
     (nil))
(insn 37 36 38 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:91 _5 ] [91])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [408])) [2 qv S4 A32])
        (reg:SF 21 xmm0 [409])) "CALMCVG.f":91 131 {*movsf_internal}
     (nil))
(insn 38 37 39 6 (set (reg:SI 1 dx [410])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":92 86 {*movsi_internal}
     (nil))
(insn 39 38 40 6 (set (reg:DI 1 dx [orig:92 _6 ] [92])
        (sign_extend:DI (reg:SI 1 dx [410]))) "CALMCVG.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 40 39 41 6 (parallel [
            (set (reg:DI 2 cx [orig:93 _7 ] [93])
                (mult:DI (reg:DI 1 dx [orig:92 _6 ] [92])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":92 349 {*muldi3_1}
     (nil))
(insn 41 40 42 6 (set (reg:SI 1 dx [411])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":92 86 {*movsi_internal}
     (nil))
(insn 42 41 43 6 (set (reg:DI 1 dx [orig:94 _8 ] [94])
        (sign_extend:DI (reg:SI 1 dx [411]))) "CALMCVG.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 6 (parallel [
            (set (reg:DI 1 dx [orig:95 _9 ] [95])
                (plus:DI (reg:DI 1 dx [orig:94 _8 ] [94])
                    (reg:DI 2 cx [orig:93 _7 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":92 222 {*adddi_1}
     (nil))
(insn 44 43 45 6 (parallel [
            (set (reg:DI 2 cx [orig:96 _10 ] [96])
                (plus:DI (reg:DI 1 dx [orig:95 _9 ] [95])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":92 222 {*adddi_1}
     (nil))
(insn 45 44 46 6 (set (reg/f:DI 1 dx [412])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 qcnvg+0 S8 A64])) "CALMCVG.f":92 85 {*movdi_internal}
     (nil))
(insn 46 45 47 6 (set (reg:SF 21 xmm0 [413])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALMCVG.f":92 131 {*movsf_internal}
     (nil))
(insn 47 46 48 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:96 _10 ] [96])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [412])) [2 *qcnvg_328(D) S4 A32])
        (reg:SF 21 xmm0 [413])) "CALMCVG.f":92 131 {*movsf_internal}
     (nil))
(insn 48 47 49 6 (set (reg:SI 1 dx [414])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":93 86 {*movsi_internal}
     (nil))
(insn 49 48 50 6 (set (reg:DI 1 dx [orig:97 _11 ] [97])
        (sign_extend:DI (reg:SI 1 dx [414]))) "CALMCVG.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 50 49 51 6 (parallel [
            (set (reg:DI 2 cx [orig:98 _12 ] [98])
                (mult:DI (reg:DI 1 dx [orig:97 _11 ] [97])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":93 349 {*muldi3_1}
     (nil))
(insn 51 50 52 6 (set (reg:SI 1 dx [415])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":93 86 {*movsi_internal}
     (nil))
(insn 52 51 53 6 (set (reg:DI 1 dx [orig:99 _13 ] [99])
        (sign_extend:DI (reg:SI 1 dx [415]))) "CALMCVG.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 53 52 54 6 (parallel [
            (set (reg:DI 1 dx [orig:100 _14 ] [100])
                (plus:DI (reg:DI 1 dx [orig:99 _13 ] [99])
                    (reg:DI 2 cx [orig:98 _12 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":93 222 {*adddi_1}
     (nil))
(insn 54 53 55 6 (parallel [
            (set (reg:DI 4 si [orig:101 _15 ] [101])
                (plus:DI (reg:DI 1 dx [orig:100 _14 ] [100])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":93 222 {*adddi_1}
     (nil))
(insn 55 54 56 6 (set (reg:SI 1 dx [416])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":93 86 {*movsi_internal}
     (nil))
(insn 56 55 57 6 (set (reg:DI 1 dx [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 1 dx [416]))) "CALMCVG.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 57 56 58 6 (parallel [
            (set (reg:DI 2 cx [orig:103 _17 ] [103])
                (mult:DI (reg:DI 1 dx [orig:102 _16 ] [102])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":93 349 {*muldi3_1}
     (nil))
(insn 58 57 59 6 (set (reg:SI 1 dx [417])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":93 86 {*movsi_internal}
     (nil))
(insn 59 58 60 6 (set (reg:DI 1 dx [orig:104 _18 ] [104])
        (sign_extend:DI (reg:SI 1 dx [417]))) "CALMCVG.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 60 59 61 6 (parallel [
            (set (reg:DI 1 dx [orig:105 _19 ] [105])
                (plus:DI (reg:DI 1 dx [orig:104 _18 ] [104])
                    (reg:DI 2 cx [orig:103 _17 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":93 222 {*adddi_1}
     (nil))
(insn 61 60 62 6 (parallel [
            (set (reg:DI 2 cx [orig:106 _20 ] [106])
                (plus:DI (reg:DI 1 dx [orig:105 _19 ] [105])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":93 222 {*adddi_1}
     (nil))
(insn 62 61 63 6 (set (reg/f:DI 1 dx [418])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 u1d+0 S8 A64])) "CALMCVG.f":93 85 {*movdi_internal}
     (nil))
(insn 63 62 64 6 (set (reg:SF 21 xmm0 [orig:107 _21 ] [107])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:101 _15 ] [101])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [418])) [2 *u1d_330(D) S4 A32])) "CALMCVG.f":93 131 {*movsf_internal}
     (nil))
(insn 64 63 65 6 (set (reg/f:DI 1 dx [419])
        (symbol_ref:DI ("uwnd.3990") [flags 0x202]  <var_decl 0x7f3e7cde81b0 uwnd>)) "CALMCVG.f":93 85 {*movdi_internal}
     (nil))
(insn 65 64 66 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:106 _20 ] [106])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [419])) [2 uwnd S4 A32])
        (reg:SF 21 xmm0 [orig:107 _21 ] [107])) "CALMCVG.f":93 131 {*movsf_internal}
     (nil))
(insn 66 65 67 6 (set (reg:SI 1 dx [420])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":94 86 {*movsi_internal}
     (nil))
(insn 67 66 68 6 (set (reg:DI 1 dx [orig:108 _22 ] [108])
        (sign_extend:DI (reg:SI 1 dx [420]))) "CALMCVG.f":94 149 {*extendsidi2_rex64}
     (nil))
(insn 68 67 69 6 (parallel [
            (set (reg:DI 2 cx [orig:109 _23 ] [109])
                (mult:DI (reg:DI 1 dx [orig:108 _22 ] [108])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":94 349 {*muldi3_1}
     (nil))
(insn 69 68 70 6 (set (reg:SI 1 dx [421])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":94 86 {*movsi_internal}
     (nil))
(insn 70 69 71 6 (set (reg:DI 1 dx [orig:110 _24 ] [110])
        (sign_extend:DI (reg:SI 1 dx [421]))) "CALMCVG.f":94 149 {*extendsidi2_rex64}
     (nil))
(insn 71 70 72 6 (parallel [
            (set (reg:DI 1 dx [orig:111 _25 ] [111])
                (plus:DI (reg:DI 1 dx [orig:110 _24 ] [110])
                    (reg:DI 2 cx [orig:109 _23 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":94 222 {*adddi_1}
     (nil))
(insn 72 71 73 6 (parallel [
            (set (reg:DI 4 si [orig:112 _26 ] [112])
                (plus:DI (reg:DI 1 dx [orig:111 _25 ] [111])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":94 222 {*adddi_1}
     (nil))
(insn 73 72 74 6 (set (reg:SI 1 dx [422])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":94 86 {*movsi_internal}
     (nil))
(insn 74 73 75 6 (set (reg:DI 1 dx [orig:113 _27 ] [113])
        (sign_extend:DI (reg:SI 1 dx [422]))) "CALMCVG.f":94 149 {*extendsidi2_rex64}
     (nil))
(insn 75 74 76 6 (parallel [
            (set (reg:DI 2 cx [orig:114 _28 ] [114])
                (mult:DI (reg:DI 1 dx [orig:113 _27 ] [113])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":94 349 {*muldi3_1}
     (nil))
(insn 76 75 77 6 (set (reg:SI 1 dx [423])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":94 86 {*movsi_internal}
     (nil))
(insn 77 76 78 6 (set (reg:DI 1 dx [orig:115 _29 ] [115])
        (sign_extend:DI (reg:SI 1 dx [423]))) "CALMCVG.f":94 149 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 6 (parallel [
            (set (reg:DI 1 dx [orig:116 _30 ] [116])
                (plus:DI (reg:DI 1 dx [orig:115 _29 ] [115])
                    (reg:DI 2 cx [orig:114 _28 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":94 222 {*adddi_1}
     (nil))
(insn 79 78 80 6 (parallel [
            (set (reg:DI 2 cx [orig:117 _31 ] [117])
                (plus:DI (reg:DI 1 dx [orig:116 _30 ] [116])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":94 222 {*adddi_1}
     (nil))
(insn 80 79 81 6 (set (reg/f:DI 1 dx [424])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 v1d+0 S8 A64])) "CALMCVG.f":94 85 {*movdi_internal}
     (nil))
(insn 81 80 82 6 (set (reg:SF 21 xmm0 [orig:118 _32 ] [118])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:112 _26 ] [112])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [424])) [2 *v1d_332(D) S4 A32])) "CALMCVG.f":94 131 {*movsf_internal}
     (nil))
(insn 82 81 83 6 (set (reg/f:DI 1 dx [425])
        (symbol_ref:DI ("vwnd.3992") [flags 0x202]  <var_decl 0x7f3e7cde8240 vwnd>)) "CALMCVG.f":94 85 {*movdi_internal}
     (nil))
(insn 83 82 84 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:117 _31 ] [117])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [425])) [2 vwnd S4 A32])
        (reg:SF 21 xmm0 [orig:118 _32 ] [118])) "CALMCVG.f":94 131 {*movsf_internal}
     (nil))
(insn 84 83 85 6 (set (reg:SI 1 dx [426])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":95 86 {*movsi_internal}
     (nil))
(insn 85 84 86 6 (set (reg:DI 1 dx [orig:119 _33 ] [119])
        (sign_extend:DI (reg:SI 1 dx [426]))) "CALMCVG.f":95 149 {*extendsidi2_rex64}
     (nil))
(insn 86 85 87 6 (parallel [
            (set (reg:DI 2 cx [orig:120 _34 ] [120])
                (mult:DI (reg:DI 1 dx [orig:119 _33 ] [119])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":95 349 {*muldi3_1}
     (nil))
(insn 87 86 88 6 (set (reg:SI 1 dx [427])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":95 86 {*movsi_internal}
     (nil))
(insn 88 87 89 6 (set (reg:DI 1 dx [orig:121 _35 ] [121])
        (sign_extend:DI (reg:SI 1 dx [427]))) "CALMCVG.f":95 149 {*extendsidi2_rex64}
     (nil))
(insn 89 88 90 6 (parallel [
            (set (reg:DI 1 dx [orig:122 _36 ] [122])
                (plus:DI (reg:DI 1 dx [orig:121 _35 ] [121])
                    (reg:DI 2 cx [orig:120 _34 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":95 222 {*adddi_1}
     (nil))
(insn 90 89 91 6 (parallel [
            (set (reg:DI 2 cx [orig:123 _37 ] [123])
                (plus:DI (reg:DI 1 dx [orig:122 _36 ] [122])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":95 222 {*adddi_1}
     (nil))
(insn 91 90 92 6 (set (reg/f:DI 1 dx [428])
        (symbol_ref:DI ("uwnd.3990") [flags 0x202]  <var_decl 0x7f3e7cde81b0 uwnd>)) "CALMCVG.f":95 85 {*movdi_internal}
     (nil))
(insn 92 91 93 6 (set (reg:SF 21 xmm0 [orig:124 _38 ] [124])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:123 _37 ] [123])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [428])) [2 uwnd S4 A32])) "CALMCVG.f":95 131 {*movsf_internal}
     (nil))
(insn 93 92 94 6 (set (reg:SF 22 xmm1 [orig:125 _39 ] [125])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f3e7cde4000 options>) [2 options.spval+0 S4 A128])) "CALMCVG.f":1 131 {*movsf_internal}
     (nil))
(insn 94 93 95 6 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [orig:124 _38 ] [124])
                    (reg:SF 22 xmm1 [orig:125 _39 ] [125]))
            ] UNSPEC_NOTRAP)) "CALMCVG.f":95 54 {*cmpiusf}
     (nil))
(jump_insn 95 94 631 6 (set (pc)
        (if_then_else (unordered (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref 112)
            (pc))) "CALMCVG.f":95 682 {*jcc}
     (nil)
 -> 112)
;;  succ:       9
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124 125 392

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124 125 392
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124 125
;; lr  def 	 17 [flags]
(note 631 95 96 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 96 631 97 7 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [orig:124 _38 ] [124])
                    (reg:SF 22 xmm1 [orig:125 _39 ] [125]))
            ] UNSPEC_NOTRAP)) "CALMCVG.f":95 54 {*cmpiusf}
     (nil))
(jump_insn 97 96 101 7 (set (pc)
        (if_then_else (ltgt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 112)
            (pc))) "CALMCVG.f":95 682 {*jcc}
     (nil)
 -> 112)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 126 127 128 129 130 429 430 431 432
(note 101 97 102 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 8 (set (reg:SI 1 dx [429])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":95 86 {*movsi_internal}
     (nil))
(insn 103 102 104 8 (set (reg:DI 1 dx [orig:126 _40 ] [126])
        (sign_extend:DI (reg:SI 1 dx [429]))) "CALMCVG.f":95 149 {*extendsidi2_rex64}
     (nil))
(insn 104 103 105 8 (parallel [
            (set (reg:DI 2 cx [orig:127 _41 ] [127])
                (mult:DI (reg:DI 1 dx [orig:126 _40 ] [126])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":95 349 {*muldi3_1}
     (nil))
(insn 105 104 106 8 (set (reg:SI 1 dx [430])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":95 86 {*movsi_internal}
     (nil))
(insn 106 105 107 8 (set (reg:DI 1 dx [orig:128 _42 ] [128])
        (sign_extend:DI (reg:SI 1 dx [430]))) "CALMCVG.f":95 149 {*extendsidi2_rex64}
     (nil))
(insn 107 106 108 8 (parallel [
            (set (reg:DI 1 dx [orig:129 _43 ] [129])
                (plus:DI (reg:DI 1 dx [orig:128 _42 ] [128])
                    (reg:DI 2 cx [orig:127 _41 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":95 222 {*adddi_1}
     (nil))
(insn 108 107 109 8 (parallel [
            (set (reg:DI 2 cx [orig:130 _44 ] [130])
                (plus:DI (reg:DI 1 dx [orig:129 _43 ] [129])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":95 222 {*adddi_1}
     (nil))
(insn 109 108 110 8 (set (reg/f:DI 1 dx [431])
        (symbol_ref:DI ("uwnd.3990") [flags 0x202]  <var_decl 0x7f3e7cde81b0 uwnd>)) "CALMCVG.f":95 85 {*movdi_internal}
     (nil))
(insn 110 109 111 8 (set (reg:SF 21 xmm0 [432])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALMCVG.f":95 131 {*movsf_internal}
     (nil))
(insn 111 110 112 8 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:130 _44 ] [130])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [431])) [2 uwnd S4 A32])
        (reg:SF 21 xmm0 [432])) "CALMCVG.f":95 131 {*movsf_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              6
;;              7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 131 132 133 134 135 136 137 433 434 435
(code_label 112 111 113 9 4 (nil) [2 uses])
(note 113 112 114 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 9 (set (reg:SI 1 dx [433])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":96 86 {*movsi_internal}
     (nil))
(insn 115 114 116 9 (set (reg:DI 1 dx [orig:131 _45 ] [131])
        (sign_extend:DI (reg:SI 1 dx [433]))) "CALMCVG.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 116 115 117 9 (parallel [
            (set (reg:DI 2 cx [orig:132 _46 ] [132])
                (mult:DI (reg:DI 1 dx [orig:131 _45 ] [131])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":96 349 {*muldi3_1}
     (nil))
(insn 117 116 118 9 (set (reg:SI 1 dx [434])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":96 86 {*movsi_internal}
     (nil))
(insn 118 117 119 9 (set (reg:DI 1 dx [orig:133 _47 ] [133])
        (sign_extend:DI (reg:SI 1 dx [434]))) "CALMCVG.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 119 118 120 9 (parallel [
            (set (reg:DI 1 dx [orig:134 _48 ] [134])
                (plus:DI (reg:DI 1 dx [orig:133 _47 ] [133])
                    (reg:DI 2 cx [orig:132 _46 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":96 222 {*adddi_1}
     (nil))
(insn 120 119 121 9 (parallel [
            (set (reg:DI 2 cx [orig:135 _49 ] [135])
                (plus:DI (reg:DI 1 dx [orig:134 _48 ] [134])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":96 222 {*adddi_1}
     (nil))
(insn 121 120 122 9 (set (reg/f:DI 1 dx [435])
        (symbol_ref:DI ("vwnd.3992") [flags 0x202]  <var_decl 0x7f3e7cde8240 vwnd>)) "CALMCVG.f":96 85 {*movdi_internal}
     (nil))
(insn 122 121 123 9 (set (reg:SF 21 xmm0 [orig:136 _50 ] [136])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:135 _49 ] [135])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [435])) [2 vwnd S4 A32])) "CALMCVG.f":96 131 {*movsf_internal}
     (nil))
(insn 123 122 124 9 (set (reg:SF 22 xmm1 [orig:137 _51 ] [137])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f3e7cde4000 options>) [2 options.spval+0 S4 A128])) "CALMCVG.f":1 131 {*movsf_internal}
     (nil))
(insn 124 123 125 9 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [orig:136 _50 ] [136])
                    (reg:SF 22 xmm1 [orig:137 _51 ] [137]))
            ] UNSPEC_NOTRAP)) "CALMCVG.f":96 54 {*cmpiusf}
     (nil))
(jump_insn 125 124 634 9 (set (pc)
        (if_then_else (unordered (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) "CALMCVG.f":96 682 {*jcc}
     (nil)
 -> 142)
;;  succ:       12
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 136 137 392

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 136 137 392
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 136 137
;; lr  def 	 17 [flags]
(note 634 125 126 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 126 634 127 10 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [orig:136 _50 ] [136])
                    (reg:SF 22 xmm1 [orig:137 _51 ] [137]))
            ] UNSPEC_NOTRAP)) "CALMCVG.f":96 54 {*cmpiusf}
     (nil))
(jump_insn 127 126 131 10 (set (pc)
        (if_then_else (ltgt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 142)
            (pc))) "CALMCVG.f":96 682 {*jcc}
     (nil)
 -> 142)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138 139 140 141 142 436 437 438 439
(note 131 127 132 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 133 11 (set (reg:SI 1 dx [436])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":96 86 {*movsi_internal}
     (nil))
(insn 133 132 134 11 (set (reg:DI 1 dx [orig:138 _52 ] [138])
        (sign_extend:DI (reg:SI 1 dx [436]))) "CALMCVG.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 134 133 135 11 (parallel [
            (set (reg:DI 2 cx [orig:139 _53 ] [139])
                (mult:DI (reg:DI 1 dx [orig:138 _52 ] [138])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":96 349 {*muldi3_1}
     (nil))
(insn 135 134 136 11 (set (reg:SI 1 dx [437])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":96 86 {*movsi_internal}
     (nil))
(insn 136 135 137 11 (set (reg:DI 1 dx [orig:140 _54 ] [140])
        (sign_extend:DI (reg:SI 1 dx [437]))) "CALMCVG.f":96 149 {*extendsidi2_rex64}
     (nil))
(insn 137 136 138 11 (parallel [
            (set (reg:DI 1 dx [orig:141 _55 ] [141])
                (plus:DI (reg:DI 1 dx [orig:140 _54 ] [140])
                    (reg:DI 2 cx [orig:139 _53 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":96 222 {*adddi_1}
     (nil))
(insn 138 137 139 11 (parallel [
            (set (reg:DI 2 cx [orig:142 _56 ] [142])
                (plus:DI (reg:DI 1 dx [orig:141 _55 ] [141])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":96 222 {*adddi_1}
     (nil))
(insn 139 138 140 11 (set (reg/f:DI 1 dx [438])
        (symbol_ref:DI ("vwnd.3992") [flags 0x202]  <var_decl 0x7f3e7cde8240 vwnd>)) "CALMCVG.f":96 85 {*movdi_internal}
     (nil))
(insn 140 139 141 11 (set (reg:SF 21 xmm0 [439])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALMCVG.f":96 131 {*movsf_internal}
     (nil))
(insn 141 140 142 11 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:142 _56 ] [142])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [438])) [2 vwnd S4 A32])
        (reg:SF 21 xmm0 [439])) "CALMCVG.f":96 131 {*movsf_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 30, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              9
;;              10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 142 141 143 12 6 (nil) [2 uses])
(note 143 142 144 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 640 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":90 221 {*addsi_1}
     (nil))
(jump_insn 640 144 641 12 (set (pc)
        (label_ref 145)) "CALMCVG.f":90 683 {jump}
     (nil)
 -> 145)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392

(barrier 641 640 656)
;; basic block 30, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 656 641 655 30 23 (nil) [1 uses])
(note 655 656 657 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 657 655 148 30 (const_int 0 [0]) "CALMCVG.f":96 718 {nop}
     (nil))
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392

;; basic block 13, loop depth 0, maybe hot
;;  prev block 30, next block 29, flags: (RTL, MODIFIED)
;;  pred:       30 [always]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 148 657 149 13 3 (nil) [0 uses])
(note 149 148 150 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 642 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":89 221 {*addsi_1}
     (nil))
(jump_insn 642 150 643 13 (set (pc)
        (label_ref 151)) "CALMCVG.f":89 683 {jump}
     (nil)
 -> 151)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 392

(barrier 643 642 653)
;; basic block 29, loop depth 0, maybe hot
;;  prev block 13, next block 14, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 653 643 652 29 22 (nil) [1 uses])
(note 652 653 654 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 654 652 154 29 (const_int 0 [0]) "CALMCVG.f":90 718 {nop}
     (nil))
;;  succ:       14 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 29, next block 15, flags: (RTL, MODIFIED)
;;  pred:       29 [always]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 395 396 440 441 442
(code_label 154 654 155 14 2 (nil) [0 uses])
(note 155 154 156 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 14 (set (reg:DI 0 ax [440])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 q1d+0 S8 A64])) "CALMCVG.f":102 85 {*movdi_internal}
     (nil))
(insn 157 156 158 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [440])) "CALMCVG.f":102 85 {*movdi_internal}
     (nil))
(insn 158 157 159 14 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALMCVG.f":102 88 {*movqi_internal}
     (nil))
(call_insn 159 158 160 14 (call (mem:QI (symbol_ref:DI ("exch_") [flags 0x41]  <function_decl 0x7f3e7cdd1600 exch>) [0 exch S1 A8])
        (const_int 0 [0])) "CALMCVG.f":102 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 160 159 161 14 (set (reg:DI 0 ax [441])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 u1d+0 S8 A64])) "CALMCVG.f":103 85 {*movdi_internal}
     (nil))
(insn 161 160 162 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [441])) "CALMCVG.f":103 85 {*movdi_internal}
     (nil))
(insn 162 161 163 14 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALMCVG.f":103 88 {*movqi_internal}
     (nil))
(call_insn 163 162 164 14 (call (mem:QI (symbol_ref:DI ("exch_") [flags 0x41]  <function_decl 0x7f3e7cdd1600 exch>) [0 exch S1 A8])
        (const_int 0 [0])) "CALMCVG.f":103 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 164 163 165 14 (set (reg:DI 0 ax [442])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 v1d+0 S8 A64])) "CALMCVG.f":104 85 {*movdi_internal}
     (nil))
(insn 165 164 166 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [442])) "CALMCVG.f":104 85 {*movdi_internal}
     (nil))
(insn 166 165 167 14 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALMCVG.f":104 88 {*movqi_internal}
     (nil))
(call_insn 167 166 168 14 (call (mem:QI (symbol_ref:DI ("exch_") [flags 0x41]  <function_decl 0x7f3e7cdd1600 exch>) [0 exch S1 A8])
        (const_int 0 [0])) "CALMCVG.f":104 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 168 167 169 14 (set (reg:SI 1 dx [orig:395 _342 ] [395])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f3e7cde43f0 parallel>)
                    (const_int 16 [0x10]))) [1 parallel.jsta_m+0 S4 A128])) "CALMCVG.f":107 86 {*movsi_internal}
     (nil))
(insn 169 168 170 14 (set (reg:SI 0 ax [orig:396 _343 ] [396])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f3e7cde43f0 parallel>)
                    (const_int 20 [0x14]))) [1 parallel.jend_m+0 S4 A32])) "CALMCVG.f":107 86 {*movsi_internal}
     (nil))
(insn 170 169 417 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (reg:SI 1 dx [orig:395 _342 ] [395])) "CALMCVG.f":107 86 {*movsi_internal}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;;              21 [always] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396
;; lr  def 	 17 [flags] 397 443
(code_label 417 170 171 15 14 (nil) [1 uses])
(note 171 417 172 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:396 _343 ] [396]))) "CALMCVG.f":107 11 {*cmpsi_1}
     (nil))
(insn 173 172 174 15 (set (reg:QI 1 dx [443])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALMCVG.f":107 678 {*setcc_qi}
     (nil))
(insn 174 173 175 15 (set (reg:SI 1 dx [orig:397 _345 ] [397])
        (zero_extend:SI (reg:QI 1 dx [443]))) "CALMCVG.f":107 140 {*zero_extendqisi2}
     (nil))
(insn 175 174 176 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:397 _345 ] [397])
            (const_int 0 [0]))) "CALMCVG.f":107 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 176 175 177 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 659)
            (pc))) "CALMCVG.f":107 682 {*jcc}
     (nil)
 -> 659)
;;  succ:       31
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 177 176 178 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 178 177 411 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 2 [0x2])) "CALMCVG.f":108 86 {*movsi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              20 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 398 444
(code_label 411 178 179 17 13 (nil) [1 uses])
(note 179 411 180 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 118 [0x76]))) "CALMCVG.f":108 11 {*cmpsi_1}
     (nil))
(insn 181 180 182 17 (set (reg:QI 1 dx [444])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALMCVG.f":108 678 {*setcc_qi}
     (nil))
(insn 182 181 183 17 (set (reg:SI 1 dx [orig:398 _347 ] [398])
        (zero_extend:SI (reg:QI 1 dx [444]))) "CALMCVG.f":108 140 {*zero_extendqisi2}
     (nil))
(insn 183 182 184 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:398 _347 ] [398])
            (const_int 0 [0]))) "CALMCVG.f":108 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 184 183 185 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 662)
            (pc))) "CALMCVG.f":108 682 {*jcc}
     (nil)
 -> 662)
;;  succ:       32
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465
(note 185 184 186 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 18 (set (reg:SI 1 dx [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 187 186 188 18 (parallel [
            (set (reg:SI 1 dx [orig:143 _57 ] [143])
                (plus:SI (reg:SI 1 dx [445])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 188 187 189 18 (set (reg:DI 1 dx [orig:144 _58 ] [144])
        (sign_extend:DI (reg:SI 1 dx [orig:143 _57 ] [143]))) "CALMCVG.f":110 149 {*extendsidi2_rex64}
     (nil))
(insn 189 188 190 18 (parallel [
            (set (reg:DI 2 cx [orig:145 _59 ] [145])
                (mult:DI (reg:DI 1 dx [orig:144 _58 ] [144])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 349 {*muldi3_1}
     (nil))
(insn 190 189 191 18 (set (reg:SI 1 dx [446])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 191 190 192 18 (set (reg:DI 1 dx [orig:146 _60 ] [146])
        (sign_extend:DI (reg:SI 1 dx [446]))) "CALMCVG.f":110 149 {*extendsidi2_rex64}
     (nil))
(insn 192 191 193 18 (parallel [
            (set (reg:DI 1 dx [orig:147 _61 ] [147])
                (plus:DI (reg:DI 1 dx [orig:146 _60 ] [146])
                    (reg:DI 2 cx [orig:145 _59 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 193 192 194 18 (parallel [
            (set (reg:DI 2 cx [orig:148 _62 ] [148])
                (plus:DI (reg:DI 1 dx [orig:147 _61 ] [147])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 194 193 195 18 (set (reg/f:DI 1 dx [447])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 q1d+0 S8 A64])) "CALMCVG.f":110 85 {*movdi_internal}
     (nil))
(insn 195 194 196 18 (set (reg:SF 22 xmm1 [orig:149 _63 ] [149])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:148 _62 ] [148])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [447])) [2 *q1d_338(D) S4 A32])) "CALMCVG.f":110 131 {*movsf_internal}
     (nil))
(insn 196 195 197 18 (set (reg:SI 1 dx [448])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 197 196 198 18 (set (reg:DI 1 dx [orig:150 _64 ] [150])
        (sign_extend:DI (reg:SI 1 dx [448]))) "CALMCVG.f":110 149 {*extendsidi2_rex64}
     (nil))
(insn 198 197 199 18 (parallel [
            (set (reg:DI 2 cx [orig:151 _65 ] [151])
                (mult:DI (reg:DI 1 dx [orig:150 _64 ] [150])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 349 {*muldi3_1}
     (nil))
(insn 199 198 200 18 (set (reg:SI 1 dx [449])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 200 199 201 18 (set (reg:DI 1 dx [orig:152 _66 ] [152])
        (sign_extend:DI (reg:SI 1 dx [449]))) "CALMCVG.f":110 149 {*extendsidi2_rex64}
     (nil))
(insn 201 200 202 18 (parallel [
            (set (reg:DI 1 dx [orig:153 _67 ] [153])
                (plus:DI (reg:DI 1 dx [orig:152 _66 ] [152])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 202 201 203 18 (parallel [
            (set (reg:DI 1 dx [450])
                (plus:DI (reg:DI 1 dx [orig:153 _67 ] [153])
                    (const_int 747 [0x2eb])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 203 202 204 18 (set (reg:SI 4 si [orig:154 _68 ] [154])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [450])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f3e7cde0870 indx>)) [1 indx.ivw S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 204 203 205 18 (set (reg:SI 1 dx [451])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 205 204 206 18 (parallel [
            (set (reg:SI 1 dx [orig:155 _69 ] [155])
                (plus:SI (reg:SI 1 dx [451])
                    (reg:SI 4 si [orig:154 _68 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:154 _68 ] [154])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 206 205 207 18 (set (reg:DI 1 dx [orig:156 _70 ] [156])
        (sign_extend:DI (reg:SI 1 dx [orig:155 _69 ] [155]))) "CALMCVG.f":110 149 {*extendsidi2_rex64}
     (nil))
(insn 207 206 208 18 (parallel [
            (set (reg:DI 1 dx [orig:157 _71 ] [157])
                (plus:DI (reg:DI 1 dx [orig:156 _70 ] [156])
                    (reg:DI 2 cx [orig:151 _65 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 208 207 209 18 (parallel [
            (set (reg:DI 2 cx [orig:158 _72 ] [158])
                (plus:DI (reg:DI 1 dx [orig:157 _71 ] [157])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 209 208 210 18 (set (reg/f:DI 1 dx [452])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 q1d+0 S8 A64])) "CALMCVG.f":110 85 {*movdi_internal}
     (nil))
(insn 210 209 211 18 (set (reg:SF 21 xmm0 [orig:159 _73 ] [159])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:158 _72 ] [158])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [452])) [2 *q1d_338(D) S4 A32])) "CALMCVG.f":110 131 {*movsf_internal}
     (nil))
(insn 211 210 212 18 (set (reg:SF 22 xmm1 [orig:160 _74 ] [160])
        (plus:SF (reg:SF 22 xmm1 [orig:149 _63 ] [149])
            (reg:SF 21 xmm0 [orig:159 _73 ] [159]))) "CALMCVG.f":110 838 {*fop_sf_comm}
     (nil))
(insn 212 211 213 18 (set (reg:SI 1 dx [453])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 213 212 214 18 (set (reg:DI 1 dx [orig:161 _75 ] [161])
        (sign_extend:DI (reg:SI 1 dx [453]))) "CALMCVG.f":110 149 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 18 (parallel [
            (set (reg:DI 2 cx [orig:162 _76 ] [162])
                (mult:DI (reg:DI 1 dx [orig:161 _75 ] [161])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 349 {*muldi3_1}
     (nil))
(insn 215 214 216 18 (set (reg:SI 1 dx [454])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 216 215 217 18 (set (reg:DI 1 dx [orig:163 _77 ] [163])
        (sign_extend:DI (reg:SI 1 dx [454]))) "CALMCVG.f":110 149 {*extendsidi2_rex64}
     (nil))
(insn 217 216 218 18 (parallel [
            (set (reg:DI 1 dx [orig:164 _78 ] [164])
                (plus:DI (reg:DI 1 dx [orig:163 _77 ] [163])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 218 217 219 18 (parallel [
            (set (reg:DI 1 dx [455])
                (plus:DI (reg:DI 1 dx [orig:164 _78 ] [164])
                    (const_int 498 [0x1f2])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 219 218 220 18 (set (reg:SI 4 si [orig:165 _79 ] [165])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [455])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f3e7cde0870 indx>)) [1 indx.ive S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 220 219 221 18 (set (reg:SI 1 dx [456])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 221 220 222 18 (parallel [
            (set (reg:SI 1 dx [orig:166 _80 ] [166])
                (plus:SI (reg:SI 1 dx [456])
                    (reg:SI 4 si [orig:165 _79 ] [165])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:165 _79 ] [165])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 222 221 223 18 (set (reg:DI 1 dx [orig:167 _81 ] [167])
        (sign_extend:DI (reg:SI 1 dx [orig:166 _80 ] [166]))) "CALMCVG.f":110 149 {*extendsidi2_rex64}
     (nil))
(insn 223 222 224 18 (parallel [
            (set (reg:DI 1 dx [orig:168 _82 ] [168])
                (plus:DI (reg:DI 1 dx [orig:167 _81 ] [167])
                    (reg:DI 2 cx [orig:162 _76 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 224 223 225 18 (parallel [
            (set (reg:DI 2 cx [orig:169 _83 ] [169])
                (plus:DI (reg:DI 1 dx [orig:168 _82 ] [168])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 225 224 226 18 (set (reg/f:DI 1 dx [457])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 q1d+0 S8 A64])) "CALMCVG.f":110 85 {*movdi_internal}
     (nil))
(insn 226 225 227 18 (set (reg:SF 21 xmm0 [orig:170 _84 ] [170])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:169 _83 ] [169])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [457])) [2 *q1d_338(D) S4 A32])) "CALMCVG.f":110 131 {*movsf_internal}
     (nil))
(insn 227 226 228 18 (set (reg:SF 22 xmm1 [orig:171 _85 ] [171])
        (plus:SF (reg:SF 22 xmm1 [orig:160 _74 ] [160])
            (reg:SF 21 xmm0 [orig:170 _84 ] [170]))) "CALMCVG.f":110 838 {*fop_sf_comm}
     (nil))
(insn 228 227 229 18 (set (reg:SI 1 dx [458])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 229 228 230 18 (parallel [
            (set (reg:SI 1 dx [orig:172 _86 ] [172])
                (plus:SI (reg:SI 1 dx [458])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 230 229 231 18 (set (reg:DI 1 dx [orig:173 _87 ] [173])
        (sign_extend:DI (reg:SI 1 dx [orig:172 _86 ] [172]))) "CALMCVG.f":110 149 {*extendsidi2_rex64}
     (nil))
(insn 231 230 232 18 (parallel [
            (set (reg:DI 2 cx [orig:174 _88 ] [174])
                (mult:DI (reg:DI 1 dx [orig:173 _87 ] [173])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 349 {*muldi3_1}
     (nil))
(insn 232 231 233 18 (set (reg:SI 1 dx [459])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 233 232 234 18 (set (reg:DI 1 dx [orig:175 _89 ] [175])
        (sign_extend:DI (reg:SI 1 dx [459]))) "CALMCVG.f":110 149 {*extendsidi2_rex64}
     (nil))
(insn 234 233 235 18 (parallel [
            (set (reg:DI 1 dx [orig:176 _90 ] [176])
                (plus:DI (reg:DI 1 dx [orig:175 _89 ] [175])
                    (reg:DI 2 cx [orig:174 _88 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 235 234 236 18 (parallel [
            (set (reg:DI 2 cx [orig:177 _91 ] [177])
                (plus:DI (reg:DI 1 dx [orig:176 _90 ] [176])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 236 235 237 18 (set (reg/f:DI 1 dx [460])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 q1d+0 S8 A64])) "CALMCVG.f":110 85 {*movdi_internal}
     (nil))
(insn 237 236 238 18 (set (reg:SF 21 xmm0 [orig:178 _92 ] [178])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:177 _91 ] [177])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [460])) [2 *q1d_338(D) S4 A32])) "CALMCVG.f":110 131 {*movsf_internal}
     (nil))
(insn 238 237 239 18 (set (reg:SF 21 xmm0 [orig:179 _93 ] [179])
        (plus:SF (reg:SF 21 xmm0 [orig:178 _92 ] [178])
            (reg:SF 22 xmm1 [orig:171 _85 ] [171]))) "CALMCVG.f":110 838 {*fop_sf_comm}
     (nil))
(insn 239 238 240 18 (set (reg:SF 22 xmm1 [orig:180 _94 ] [180])
        (reg:SF 21 xmm0 [orig:179 _93 ] [179])) "CALMCVG.f":110 131 {*movsf_internal}
     (nil))
(insn 240 239 241 18 (set (reg:SI 1 dx [461])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 241 240 242 18 (set (reg:DI 1 dx [orig:181 _95 ] [181])
        (sign_extend:DI (reg:SI 1 dx [461]))) "CALMCVG.f":110 149 {*extendsidi2_rex64}
     (nil))
(insn 242 241 243 18 (parallel [
            (set (reg:DI 2 cx [orig:182 _96 ] [182])
                (mult:DI (reg:DI 1 dx [orig:181 _95 ] [181])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 349 {*muldi3_1}
     (nil))
(insn 243 242 244 18 (set (reg:SI 1 dx [462])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":110 86 {*movsi_internal}
     (nil))
(insn 244 243 245 18 (set (reg:DI 1 dx [orig:183 _97 ] [183])
        (sign_extend:DI (reg:SI 1 dx [462]))) "CALMCVG.f":110 149 {*extendsidi2_rex64}
     (nil))
(insn 245 244 246 18 (parallel [
            (set (reg:DI 1 dx [orig:184 _98 ] [184])
                (plus:DI (reg:DI 1 dx [orig:183 _97 ] [183])
                    (reg:DI 2 cx [orig:182 _96 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 246 245 247 18 (parallel [
            (set (reg:DI 2 cx [orig:185 _99 ] [185])
                (plus:DI (reg:DI 1 dx [orig:184 _98 ] [184])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":110 222 {*adddi_1}
     (nil))
(insn 247 246 248 18 (set (reg:SF 21 xmm0 [463])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALMCVG.f":110 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.5e-1 [0x0.8p-1])
        (nil)))
(insn 248 247 249 18 (set (reg:SF 21 xmm0 [orig:186 _100 ] [186])
        (mult:SF (reg:SF 21 xmm0 [463])
            (reg:SF 22 xmm1 [orig:180 _94 ] [180]))) "CALMCVG.f":110 838 {*fop_sf_comm}
     (nil))
(insn 249 248 250 18 (set (reg/f:DI 1 dx [464])
        (symbol_ref:DI ("qv.3985") [flags 0x202]  <var_decl 0x7f3e7cde4f30 qv>)) "CALMCVG.f":110 85 {*movdi_internal}
     (nil))
(insn 250 249 251 18 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:185 _99 ] [185])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [464])) [2 qv S4 A32])
        (reg:SF 21 xmm0 [orig:186 _100 ] [186])) "CALMCVG.f":110 131 {*movsf_internal}
     (nil))
(insn 251 250 252 18 (set (reg/f:DI 1 dx [465])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [4 ih+0 S8 A64])) "CALMCVG.f":111 85 {*movdi_internal}
     (nil))
(insn 252 251 253 18 (set (reg:SI 1 dx [orig:187 _101 ] [187])
        (mem:SI (reg/f:DI 1 dx [465]) [1 *ih_349(D)+0 S4 A32])) "CALMCVG.f":111 86 {*movsi_internal}
     (nil))
(insn 253 252 254 18 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 1 dx [orig:187 _101 ] [187])
            (const_int 0 [0]))) "CALMCVG.f":111 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 254 253 255 18 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 408)
            (pc))) "CALMCVG.f":111 682 {*jcc}
     (nil)
 -> 408)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags
(note 255 254 256 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 19 (set (reg:SI 1 dx [466])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 257 256 258 19 (parallel [
            (set (reg:SI 1 dx [orig:188 _102 ] [188])
                (plus:SI (reg:SI 1 dx [466])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 258 257 259 19 (set (reg:DI 1 dx [orig:189 _103 ] [189])
        (sign_extend:DI (reg:SI 1 dx [orig:188 _102 ] [188]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 259 258 260 19 (parallel [
            (set (reg:DI 2 cx [orig:190 _104 ] [190])
                (mult:DI (reg:DI 1 dx [orig:189 _103 ] [189])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 349 {*muldi3_1}
     (nil))
(insn 260 259 261 19 (set (reg:SI 1 dx [467])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 261 260 262 19 (set (reg:DI 1 dx [orig:191 _105 ] [191])
        (sign_extend:DI (reg:SI 1 dx [467]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 262 261 263 19 (parallel [
            (set (reg:DI 1 dx [orig:192 _106 ] [192])
                (plus:DI (reg:DI 1 dx [orig:191 _105 ] [191])
                    (reg:DI 2 cx [orig:190 _104 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 263 262 264 19 (parallel [
            (set (reg:DI 2 cx [orig:193 _107 ] [193])
                (plus:DI (reg:DI 1 dx [orig:192 _106 ] [192])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 264 263 265 19 (set (reg/f:DI 1 dx [468])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 u1d+0 S8 A64])) "CALMCVG.f":114 85 {*movdi_internal}
     (nil))
(insn 265 264 266 19 (set (reg:SF 22 xmm1 [orig:194 _108 ] [194])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:193 _107 ] [193])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [468])) [2 *u1d_330(D) S4 A32])) "CALMCVG.f":114 131 {*movsf_internal}
     (nil))
(insn 266 265 267 19 (set (reg:SI 1 dx [469])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 267 266 268 19 (set (reg:DI 1 dx [orig:195 _109 ] [195])
        (sign_extend:DI (reg:SI 1 dx [469]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 268 267 269 19 (parallel [
            (set (reg:DI 2 cx [orig:196 _110 ] [196])
                (mult:DI (reg:DI 1 dx [orig:195 _109 ] [195])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 349 {*muldi3_1}
     (nil))
(insn 269 268 270 19 (set (reg:SI 1 dx [470])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 270 269 271 19 (set (reg:DI 1 dx [orig:197 _111 ] [197])
        (sign_extend:DI (reg:SI 1 dx [470]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 271 270 272 19 (parallel [
            (set (reg:DI 1 dx [orig:198 _112 ] [198])
                (plus:DI (reg:DI 1 dx [orig:197 _111 ] [197])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 272 271 273 19 (parallel [
            (set (reg:DI 1 dx [471])
                (plus:DI (reg:DI 1 dx [orig:198 _112 ] [198])
                    (const_int 747 [0x2eb])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 273 272 274 19 (set (reg:SI 4 si [orig:199 _113 ] [199])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [471])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f3e7cde0870 indx>)) [1 indx.ivw S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 274 273 275 19 (set (reg:SI 1 dx [472])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 275 274 276 19 (parallel [
            (set (reg:SI 1 dx [orig:200 _114 ] [200])
                (plus:SI (reg:SI 1 dx [472])
                    (reg:SI 4 si [orig:199 _113 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:199 _113 ] [199])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 276 275 277 19 (set (reg:DI 1 dx [orig:201 _115 ] [201])
        (sign_extend:DI (reg:SI 1 dx [orig:200 _114 ] [200]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 277 276 278 19 (parallel [
            (set (reg:DI 1 dx [orig:202 _116 ] [202])
                (plus:DI (reg:DI 1 dx [orig:201 _115 ] [201])
                    (reg:DI 2 cx [orig:196 _110 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 278 277 279 19 (parallel [
            (set (reg:DI 2 cx [orig:203 _117 ] [203])
                (plus:DI (reg:DI 1 dx [orig:202 _116 ] [202])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 279 278 280 19 (set (reg/f:DI 1 dx [473])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 u1d+0 S8 A64])) "CALMCVG.f":114 85 {*movdi_internal}
     (nil))
(insn 280 279 281 19 (set (reg:SF 21 xmm0 [orig:204 _118 ] [204])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:203 _117 ] [203])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [473])) [2 *u1d_330(D) S4 A32])) "CALMCVG.f":114 131 {*movsf_internal}
     (nil))
(insn 281 280 282 19 (set (reg:SF 22 xmm1 [orig:205 _119 ] [205])
        (plus:SF (reg:SF 22 xmm1 [orig:194 _108 ] [194])
            (reg:SF 21 xmm0 [orig:204 _118 ] [204]))) "CALMCVG.f":114 838 {*fop_sf_comm}
     (nil))
(insn 282 281 283 19 (set (reg:SI 1 dx [474])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 283 282 284 19 (set (reg:DI 1 dx [orig:206 _120 ] [206])
        (sign_extend:DI (reg:SI 1 dx [474]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 284 283 285 19 (parallel [
            (set (reg:DI 2 cx [orig:207 _121 ] [207])
                (mult:DI (reg:DI 1 dx [orig:206 _120 ] [206])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 349 {*muldi3_1}
     (nil))
(insn 285 284 286 19 (set (reg:SI 1 dx [475])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 286 285 287 19 (set (reg:DI 1 dx [orig:208 _122 ] [208])
        (sign_extend:DI (reg:SI 1 dx [475]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 287 286 288 19 (parallel [
            (set (reg:DI 1 dx [orig:209 _123 ] [209])
                (plus:DI (reg:DI 1 dx [orig:208 _122 ] [208])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 288 287 289 19 (parallel [
            (set (reg:DI 1 dx [476])
                (plus:DI (reg:DI 1 dx [orig:209 _123 ] [209])
                    (const_int 498 [0x1f2])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 289 288 290 19 (set (reg:SI 4 si [orig:210 _124 ] [210])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [476])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f3e7cde0870 indx>)) [1 indx.ive S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 290 289 291 19 (set (reg:SI 1 dx [477])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 291 290 292 19 (parallel [
            (set (reg:SI 1 dx [orig:211 _125 ] [211])
                (plus:SI (reg:SI 1 dx [477])
                    (reg:SI 4 si [orig:210 _124 ] [210])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:210 _124 ] [210])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 292 291 293 19 (set (reg:DI 1 dx [orig:212 _126 ] [212])
        (sign_extend:DI (reg:SI 1 dx [orig:211 _125 ] [211]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 293 292 294 19 (parallel [
            (set (reg:DI 1 dx [orig:213 _127 ] [213])
                (plus:DI (reg:DI 1 dx [orig:212 _126 ] [212])
                    (reg:DI 2 cx [orig:207 _121 ] [207])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 294 293 295 19 (parallel [
            (set (reg:DI 2 cx [orig:214 _128 ] [214])
                (plus:DI (reg:DI 1 dx [orig:213 _127 ] [213])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 295 294 296 19 (set (reg/f:DI 1 dx [478])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 u1d+0 S8 A64])) "CALMCVG.f":114 85 {*movdi_internal}
     (nil))
(insn 296 295 297 19 (set (reg:SF 21 xmm0 [orig:215 _129 ] [215])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:214 _128 ] [214])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [478])) [2 *u1d_330(D) S4 A32])) "CALMCVG.f":114 131 {*movsf_internal}
     (nil))
(insn 297 296 298 19 (set (reg:SF 22 xmm1 [orig:216 _130 ] [216])
        (plus:SF (reg:SF 22 xmm1 [orig:205 _119 ] [205])
            (reg:SF 21 xmm0 [orig:215 _129 ] [215]))) "CALMCVG.f":114 838 {*fop_sf_comm}
     (nil))
(insn 298 297 299 19 (set (reg:SI 1 dx [479])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 299 298 300 19 (parallel [
            (set (reg:SI 1 dx [orig:217 _131 ] [217])
                (plus:SI (reg:SI 1 dx [479])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 300 299 301 19 (set (reg:DI 1 dx [orig:218 _132 ] [218])
        (sign_extend:DI (reg:SI 1 dx [orig:217 _131 ] [217]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 301 300 302 19 (parallel [
            (set (reg:DI 2 cx [orig:219 _133 ] [219])
                (mult:DI (reg:DI 1 dx [orig:218 _132 ] [218])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 349 {*muldi3_1}
     (nil))
(insn 302 301 303 19 (set (reg:SI 1 dx [480])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 303 302 304 19 (set (reg:DI 1 dx [orig:220 _134 ] [220])
        (sign_extend:DI (reg:SI 1 dx [480]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 304 303 305 19 (parallel [
            (set (reg:DI 1 dx [orig:221 _135 ] [221])
                (plus:DI (reg:DI 1 dx [orig:220 _134 ] [220])
                    (reg:DI 2 cx [orig:219 _133 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 305 304 306 19 (parallel [
            (set (reg:DI 2 cx [orig:222 _136 ] [222])
                (plus:DI (reg:DI 1 dx [orig:221 _135 ] [221])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 306 305 307 19 (set (reg/f:DI 1 dx [481])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 u1d+0 S8 A64])) "CALMCVG.f":114 85 {*movdi_internal}
     (nil))
(insn 307 306 308 19 (set (reg:SF 21 xmm0 [orig:223 _137 ] [223])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:222 _136 ] [222])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [481])) [2 *u1d_330(D) S4 A32])) "CALMCVG.f":114 131 {*movsf_internal}
     (nil))
(insn 308 307 309 19 (set (reg:SF 21 xmm0 [orig:224 _138 ] [224])
        (plus:SF (reg:SF 21 xmm0 [orig:223 _137 ] [223])
            (reg:SF 22 xmm1 [orig:216 _130 ] [216]))) "CALMCVG.f":114 838 {*fop_sf_comm}
     (nil))
(insn 309 308 310 19 (set (reg:SF 22 xmm1 [orig:225 _139 ] [225])
        (reg:SF 21 xmm0 [orig:224 _138 ] [224])) "CALMCVG.f":114 131 {*movsf_internal}
     (nil))
(insn 310 309 311 19 (set (reg:SF 21 xmm0 [482])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALMCVG.f":114 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.5e-1 [0x0.8p-1])
        (nil)))
(insn 311 310 312 19 (set (reg:SF 22 xmm1 [orig:226 _140 ] [226])
        (mult:SF (reg:SF 22 xmm1 [orig:225 _139 ] [225])
            (reg:SF 21 xmm0 [482]))) "CALMCVG.f":114 838 {*fop_sf_comm}
     (nil))
(insn 312 311 313 19 (set (reg:SI 1 dx [483])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 313 312 314 19 (set (reg:DI 1 dx [orig:227 _141 ] [227])
        (sign_extend:DI (reg:SI 1 dx [483]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 314 313 315 19 (parallel [
            (set (reg:DI 2 cx [orig:228 _142 ] [228])
                (mult:DI (reg:DI 1 dx [orig:227 _141 ] [227])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 349 {*muldi3_1}
     (nil))
(insn 315 314 316 19 (set (reg:SI 1 dx [484])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 316 315 317 19 (set (reg:DI 1 dx [orig:229 _143 ] [229])
        (sign_extend:DI (reg:SI 1 dx [484]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 317 316 318 19 (parallel [
            (set (reg:DI 1 dx [orig:230 _144 ] [230])
                (plus:DI (reg:DI 1 dx [orig:229 _143 ] [229])
                    (reg:DI 2 cx [orig:228 _142 ] [228])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 318 317 319 19 (parallel [
            (set (reg:DI 2 cx [orig:231 _145 ] [231])
                (plus:DI (reg:DI 1 dx [orig:230 _144 ] [230])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 319 318 320 19 (set (reg/f:DI 1 dx [485])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f3e7cde0b40 masks>)) "CALMCVG.f":114 85 {*movdi_internal}
     (nil))
(insn 320 319 321 19 (parallel [
            (set (reg:DI 2 cx [486])
                (plus:DI (reg:DI 2 cx [orig:231 _145 ] [231])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 321 320 322 19 (set (reg:SF 21 xmm0 [orig:232 _146 ] [232])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [486])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [485])) [2 masks.vbm2 S4 A32])) "CALMCVG.f":114 131 {*movsf_internal}
     (nil))
(insn 322 321 323 19 (set (reg:SI 1 dx [487])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 323 322 324 19 (set (reg:DI 1 dx [orig:233 _147 ] [233])
        (sign_extend:DI (reg:SI 1 dx [487]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 324 323 325 19 (parallel [
            (set (reg:DI 2 cx [orig:234 _148 ] [234])
                (mult:DI (reg:DI 1 dx [orig:233 _147 ] [233])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 349 {*muldi3_1}
     (nil))
(insn 325 324 326 19 (set (reg:SI 1 dx [488])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":114 86 {*movsi_internal}
     (nil))
(insn 326 325 327 19 (set (reg:DI 1 dx [orig:235 _149 ] [235])
        (sign_extend:DI (reg:SI 1 dx [488]))) "CALMCVG.f":114 149 {*extendsidi2_rex64}
     (nil))
(insn 327 326 328 19 (parallel [
            (set (reg:DI 1 dx [orig:236 _150 ] [236])
                (plus:DI (reg:DI 1 dx [orig:235 _149 ] [235])
                    (reg:DI 2 cx [orig:234 _148 ] [234])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 328 327 329 19 (parallel [
            (set (reg:DI 2 cx [orig:237 _151 ] [237])
                (plus:DI (reg:DI 1 dx [orig:236 _150 ] [236])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":114 222 {*adddi_1}
     (nil))
(insn 329 328 330 19 (set (reg:SF 21 xmm0 [orig:238 _152 ] [238])
        (mult:SF (reg:SF 21 xmm0 [orig:232 _146 ] [232])
            (reg:SF 22 xmm1 [orig:226 _140 ] [226]))) "CALMCVG.f":114 838 {*fop_sf_comm}
     (nil))
(insn 330 329 331 19 (set (reg/f:DI 1 dx [489])
        (symbol_ref:DI ("uwnd.3990") [flags 0x202]  <var_decl 0x7f3e7cde81b0 uwnd>)) "CALMCVG.f":114 85 {*movdi_internal}
     (nil))
(insn 331 330 332 19 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:237 _151 ] [237])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [489])) [2 uwnd S4 A32])
        (reg:SF 21 xmm0 [orig:238 _152 ] [238])) "CALMCVG.f":114 131 {*movsf_internal}
     (nil))
(insn 332 331 333 19 (set (reg:SI 1 dx [490])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 333 332 334 19 (parallel [
            (set (reg:SI 1 dx [orig:239 _153 ] [239])
                (plus:SI (reg:SI 1 dx [490])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 334 333 335 19 (set (reg:DI 1 dx [orig:240 _154 ] [240])
        (sign_extend:DI (reg:SI 1 dx [orig:239 _153 ] [239]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 335 334 336 19 (parallel [
            (set (reg:DI 2 cx [orig:241 _155 ] [241])
                (mult:DI (reg:DI 1 dx [orig:240 _154 ] [240])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 349 {*muldi3_1}
     (nil))
(insn 336 335 337 19 (set (reg:SI 1 dx [491])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 337 336 338 19 (set (reg:DI 1 dx [orig:242 _156 ] [242])
        (sign_extend:DI (reg:SI 1 dx [491]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 338 337 339 19 (parallel [
            (set (reg:DI 1 dx [orig:243 _157 ] [243])
                (plus:DI (reg:DI 1 dx [orig:242 _156 ] [242])
                    (reg:DI 2 cx [orig:241 _155 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 339 338 340 19 (parallel [
            (set (reg:DI 2 cx [orig:244 _158 ] [244])
                (plus:DI (reg:DI 1 dx [orig:243 _157 ] [243])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 340 339 341 19 (set (reg/f:DI 1 dx [492])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 v1d+0 S8 A64])) "CALMCVG.f":117 85 {*movdi_internal}
     (nil))
(insn 341 340 342 19 (set (reg:SF 22 xmm1 [orig:245 _159 ] [245])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:244 _158 ] [244])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [492])) [2 *v1d_332(D) S4 A32])) "CALMCVG.f":117 131 {*movsf_internal}
     (nil))
(insn 342 341 343 19 (set (reg:SI 1 dx [493])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 343 342 344 19 (set (reg:DI 1 dx [orig:246 _160 ] [246])
        (sign_extend:DI (reg:SI 1 dx [493]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 344 343 345 19 (parallel [
            (set (reg:DI 2 cx [orig:247 _161 ] [247])
                (mult:DI (reg:DI 1 dx [orig:246 _160 ] [246])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 349 {*muldi3_1}
     (nil))
(insn 345 344 346 19 (set (reg:SI 1 dx [494])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 346 345 347 19 (set (reg:DI 1 dx [orig:248 _162 ] [248])
        (sign_extend:DI (reg:SI 1 dx [494]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 347 346 348 19 (parallel [
            (set (reg:DI 1 dx [orig:249 _163 ] [249])
                (plus:DI (reg:DI 1 dx [orig:248 _162 ] [248])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 348 347 349 19 (parallel [
            (set (reg:DI 1 dx [495])
                (plus:DI (reg:DI 1 dx [orig:249 _163 ] [249])
                    (const_int 747 [0x2eb])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 349 348 350 19 (set (reg:SI 4 si [orig:250 _164 ] [250])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [495])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f3e7cde0870 indx>)) [1 indx.ivw S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 350 349 351 19 (set (reg:SI 1 dx [496])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 351 350 352 19 (parallel [
            (set (reg:SI 1 dx [orig:251 _165 ] [251])
                (plus:SI (reg:SI 1 dx [496])
                    (reg:SI 4 si [orig:250 _164 ] [250])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:250 _164 ] [250])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 352 351 353 19 (set (reg:DI 1 dx [orig:252 _166 ] [252])
        (sign_extend:DI (reg:SI 1 dx [orig:251 _165 ] [251]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 353 352 354 19 (parallel [
            (set (reg:DI 1 dx [orig:253 _167 ] [253])
                (plus:DI (reg:DI 1 dx [orig:252 _166 ] [252])
                    (reg:DI 2 cx [orig:247 _161 ] [247])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 354 353 355 19 (parallel [
            (set (reg:DI 2 cx [orig:254 _168 ] [254])
                (plus:DI (reg:DI 1 dx [orig:253 _167 ] [253])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 355 354 356 19 (set (reg/f:DI 1 dx [497])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 v1d+0 S8 A64])) "CALMCVG.f":117 85 {*movdi_internal}
     (nil))
(insn 356 355 357 19 (set (reg:SF 21 xmm0 [orig:255 _169 ] [255])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:254 _168 ] [254])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [497])) [2 *v1d_332(D) S4 A32])) "CALMCVG.f":117 131 {*movsf_internal}
     (nil))
(insn 357 356 358 19 (set (reg:SF 22 xmm1 [orig:256 _170 ] [256])
        (plus:SF (reg:SF 22 xmm1 [orig:245 _159 ] [245])
            (reg:SF 21 xmm0 [orig:255 _169 ] [255]))) "CALMCVG.f":117 838 {*fop_sf_comm}
     (nil))
(insn 358 357 359 19 (set (reg:SI 1 dx [498])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 359 358 360 19 (set (reg:DI 1 dx [orig:257 _171 ] [257])
        (sign_extend:DI (reg:SI 1 dx [498]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 360 359 361 19 (parallel [
            (set (reg:DI 2 cx [orig:258 _172 ] [258])
                (mult:DI (reg:DI 1 dx [orig:257 _171 ] [257])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 349 {*muldi3_1}
     (nil))
(insn 361 360 362 19 (set (reg:SI 1 dx [499])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 362 361 363 19 (set (reg:DI 1 dx [orig:259 _173 ] [259])
        (sign_extend:DI (reg:SI 1 dx [499]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 363 362 364 19 (parallel [
            (set (reg:DI 1 dx [orig:260 _174 ] [260])
                (plus:DI (reg:DI 1 dx [orig:259 _173 ] [259])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 364 363 365 19 (parallel [
            (set (reg:DI 1 dx [500])
                (plus:DI (reg:DI 1 dx [orig:260 _174 ] [260])
                    (const_int 498 [0x1f2])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 365 364 366 19 (set (reg:SI 4 si [orig:261 _175 ] [261])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [500])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f3e7cde0870 indx>)) [1 indx.ive S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 366 365 367 19 (set (reg:SI 1 dx [501])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 367 366 368 19 (parallel [
            (set (reg:SI 1 dx [orig:262 _176 ] [262])
                (plus:SI (reg:SI 1 dx [501])
                    (reg:SI 4 si [orig:261 _175 ] [261])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:261 _175 ] [261])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 368 367 369 19 (set (reg:DI 1 dx [orig:263 _177 ] [263])
        (sign_extend:DI (reg:SI 1 dx [orig:262 _176 ] [262]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 369 368 370 19 (parallel [
            (set (reg:DI 1 dx [orig:264 _178 ] [264])
                (plus:DI (reg:DI 1 dx [orig:263 _177 ] [263])
                    (reg:DI 2 cx [orig:258 _172 ] [258])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 370 369 371 19 (parallel [
            (set (reg:DI 2 cx [orig:265 _179 ] [265])
                (plus:DI (reg:DI 1 dx [orig:264 _178 ] [264])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 371 370 372 19 (set (reg/f:DI 1 dx [502])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 v1d+0 S8 A64])) "CALMCVG.f":117 85 {*movdi_internal}
     (nil))
(insn 372 371 373 19 (set (reg:SF 21 xmm0 [orig:266 _180 ] [266])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:265 _179 ] [265])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [502])) [2 *v1d_332(D) S4 A32])) "CALMCVG.f":117 131 {*movsf_internal}
     (nil))
(insn 373 372 374 19 (set (reg:SF 22 xmm1 [orig:267 _181 ] [267])
        (plus:SF (reg:SF 22 xmm1 [orig:256 _170 ] [256])
            (reg:SF 21 xmm0 [orig:266 _180 ] [266]))) "CALMCVG.f":117 838 {*fop_sf_comm}
     (nil))
(insn 374 373 375 19 (set (reg:SI 1 dx [503])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 375 374 376 19 (parallel [
            (set (reg:SI 1 dx [orig:268 _182 ] [268])
                (plus:SI (reg:SI 1 dx [503])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 376 375 377 19 (set (reg:DI 1 dx [orig:269 _183 ] [269])
        (sign_extend:DI (reg:SI 1 dx [orig:268 _182 ] [268]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 377 376 378 19 (parallel [
            (set (reg:DI 2 cx [orig:270 _184 ] [270])
                (mult:DI (reg:DI 1 dx [orig:269 _183 ] [269])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 349 {*muldi3_1}
     (nil))
(insn 378 377 379 19 (set (reg:SI 1 dx [504])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 379 378 380 19 (set (reg:DI 1 dx [orig:271 _185 ] [271])
        (sign_extend:DI (reg:SI 1 dx [504]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 380 379 381 19 (parallel [
            (set (reg:DI 1 dx [orig:272 _186 ] [272])
                (plus:DI (reg:DI 1 dx [orig:271 _185 ] [271])
                    (reg:DI 2 cx [orig:270 _184 ] [270])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 381 380 382 19 (parallel [
            (set (reg:DI 2 cx [orig:273 _187 ] [273])
                (plus:DI (reg:DI 1 dx [orig:272 _186 ] [272])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 382 381 383 19 (set (reg/f:DI 1 dx [505])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 v1d+0 S8 A64])) "CALMCVG.f":117 85 {*movdi_internal}
     (nil))
(insn 383 382 384 19 (set (reg:SF 21 xmm0 [orig:274 _188 ] [274])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:273 _187 ] [273])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [505])) [2 *v1d_332(D) S4 A32])) "CALMCVG.f":117 131 {*movsf_internal}
     (nil))
(insn 384 383 385 19 (set (reg:SF 21 xmm0 [orig:275 _189 ] [275])
        (plus:SF (reg:SF 21 xmm0 [orig:274 _188 ] [274])
            (reg:SF 22 xmm1 [orig:267 _181 ] [267]))) "CALMCVG.f":117 838 {*fop_sf_comm}
     (nil))
(insn 385 384 386 19 (set (reg:SF 22 xmm1 [orig:276 _190 ] [276])
        (reg:SF 21 xmm0 [orig:275 _189 ] [275])) "CALMCVG.f":117 131 {*movsf_internal}
     (nil))
(insn 386 385 387 19 (set (reg:SF 21 xmm0 [506])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALMCVG.f":117 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.5e-1 [0x0.8p-1])
        (nil)))
(insn 387 386 388 19 (set (reg:SF 22 xmm1 [orig:277 _191 ] [277])
        (mult:SF (reg:SF 22 xmm1 [orig:276 _190 ] [276])
            (reg:SF 21 xmm0 [506]))) "CALMCVG.f":117 838 {*fop_sf_comm}
     (nil))
(insn 388 387 389 19 (set (reg:SI 1 dx [507])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 389 388 390 19 (set (reg:DI 1 dx [orig:278 _192 ] [278])
        (sign_extend:DI (reg:SI 1 dx [507]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 390 389 391 19 (parallel [
            (set (reg:DI 2 cx [orig:279 _193 ] [279])
                (mult:DI (reg:DI 1 dx [orig:278 _192 ] [278])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 349 {*muldi3_1}
     (nil))
(insn 391 390 392 19 (set (reg:SI 1 dx [508])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 392 391 393 19 (set (reg:DI 1 dx [orig:280 _194 ] [280])
        (sign_extend:DI (reg:SI 1 dx [508]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 393 392 394 19 (parallel [
            (set (reg:DI 1 dx [orig:281 _195 ] [281])
                (plus:DI (reg:DI 1 dx [orig:280 _194 ] [280])
                    (reg:DI 2 cx [orig:279 _193 ] [279])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 394 393 395 19 (parallel [
            (set (reg:DI 2 cx [orig:282 _196 ] [282])
                (plus:DI (reg:DI 1 dx [orig:281 _195 ] [281])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 395 394 396 19 (set (reg/f:DI 1 dx [509])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f3e7cde0b40 masks>)) "CALMCVG.f":117 85 {*movdi_internal}
     (nil))
(insn 396 395 397 19 (parallel [
            (set (reg:DI 2 cx [510])
                (plus:DI (reg:DI 2 cx [orig:282 _196 ] [282])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 397 396 398 19 (set (reg:SF 21 xmm0 [orig:283 _197 ] [283])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [510])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [509])) [2 masks.vbm2 S4 A32])) "CALMCVG.f":117 131 {*movsf_internal}
     (nil))
(insn 398 397 399 19 (set (reg:SI 1 dx [511])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 399 398 400 19 (set (reg:DI 1 dx [orig:284 _198 ] [284])
        (sign_extend:DI (reg:SI 1 dx [511]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 400 399 401 19 (parallel [
            (set (reg:DI 2 cx [orig:285 _199 ] [285])
                (mult:DI (reg:DI 1 dx [orig:284 _198 ] [284])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 349 {*muldi3_1}
     (nil))
(insn 401 400 402 19 (set (reg:SI 1 dx [512])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":117 86 {*movsi_internal}
     (nil))
(insn 402 401 403 19 (set (reg:DI 1 dx [orig:286 _200 ] [286])
        (sign_extend:DI (reg:SI 1 dx [512]))) "CALMCVG.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 403 402 404 19 (parallel [
            (set (reg:DI 1 dx [orig:287 _201 ] [287])
                (plus:DI (reg:DI 1 dx [orig:286 _200 ] [286])
                    (reg:DI 2 cx [orig:285 _199 ] [285])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 404 403 405 19 (parallel [
            (set (reg:DI 2 cx [orig:288 _202 ] [288])
                (plus:DI (reg:DI 1 dx [orig:287 _201 ] [287])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":117 222 {*adddi_1}
     (nil))
(insn 405 404 406 19 (set (reg:SF 21 xmm0 [orig:289 _203 ] [289])
        (mult:SF (reg:SF 21 xmm0 [orig:283 _197 ] [283])
            (reg:SF 22 xmm1 [orig:277 _191 ] [277]))) "CALMCVG.f":117 838 {*fop_sf_comm}
     (nil))
(insn 406 405 407 19 (set (reg/f:DI 1 dx [513])
        (symbol_ref:DI ("vwnd.3992") [flags 0x202]  <var_decl 0x7f3e7cde8240 vwnd>)) "CALMCVG.f":117 85 {*movdi_internal}
     (nil))
(insn 407 406 408 19 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:288 _202 ] [288])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [513])) [2 vwnd S4 A32])
        (reg:SF 21 xmm0 [orig:289 _203 ] [289])) "CALMCVG.f":117 131 {*movsf_internal}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 32, flags: (RTL, MODIFIED)
;;  pred:       18
;;              19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 408 407 409 20 12 (nil) [1 uses])
(note 409 408 410 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 410 409 644 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":108 221 {*addsi_1}
     (nil))
(jump_insn 644 410 645 20 (set (pc)
        (label_ref 411)) "CALMCVG.f":108 683 {jump}
     (nil)
 -> 411)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396

(barrier 645 644 662)
;; basic block 32, loop depth 0, maybe hot
;;  prev block 20, next block 21, flags: (RTL, MODIFIED)
;;  pred:       17
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 662 645 661 32 25 (nil) [1 uses])
(note 661 662 663 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 663 661 414 32 (const_int 0 [0]) "CALMCVG.f":111 718 {nop}
     (nil))
;;  succ:       21 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396

;; basic block 21, loop depth 0, maybe hot
;;  prev block 32, next block 31, flags: (RTL, MODIFIED)
;;  pred:       32 [always]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 414 663 415 21 11 (nil) [0 uses])
(note 415 414 416 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 416 415 646 21 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":107 221 {*addsi_1}
     (nil))
(jump_insn 646 416 647 21 (set (pc)
        (label_ref 417)) "CALMCVG.f":107 683 {jump}
     (nil)
 -> 417)
;;  succ:       15 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 396

(barrier 647 646 659)
;; basic block 31, loop depth 0, maybe hot
;;  prev block 21, next block 22, flags: (RTL, MODIFIED)
;;  pred:       15
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 659 647 658 31 24 (nil) [1 uses])
(note 658 659 660 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 660 658 420 31 (const_int 0 [0]) "CALMCVG.f":108 718 {nop}
     (nil))
;;  succ:       22 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 31, next block 23, flags: (RTL, MODIFIED)
;;  pred:       31 [always]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 399 400
(code_label 420 660 421 22 10 (nil) [0 uses])
(note 421 420 422 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 422 421 423 22 (set (reg:DI 5 di)
        (symbol_ref:DI ("qv.3985") [flags 0x202]  <var_decl 0x7f3e7cde4f30 qv>)) "CALMCVG.f":124 85 {*movdi_internal}
     (nil))
(insn 423 422 424 22 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALMCVG.f":124 88 {*movqi_internal}
     (nil))
(call_insn 424 423 425 22 (call (mem:QI (symbol_ref:DI ("exch_") [flags 0x41]  <function_decl 0x7f3e7cdd1600 exch>) [0 exch S1 A8])
        (const_int 0 [0])) "CALMCVG.f":124 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 425 424 426 22 (set (reg:DI 5 di)
        (symbol_ref:DI ("vwnd.3992") [flags 0x202]  <var_decl 0x7f3e7cde8240 vwnd>)) "CALMCVG.f":125 85 {*movdi_internal}
     (nil))
(insn 426 425 427 22 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALMCVG.f":125 88 {*movqi_internal}
     (nil))
(call_insn 427 426 428 22 (call (mem:QI (symbol_ref:DI ("exch_") [flags 0x41]  <function_decl 0x7f3e7cdd1600 exch>) [0 exch S1 A8])
        (const_int 0 [0])) "CALMCVG.f":125 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 428 427 429 22 (set (reg:SI 0 ax [orig:399 _356 ] [399])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f3e7cde43f0 parallel>)
                    (const_int 24 [0x18]))) [1 parallel.jsta_m2+0 S4 A64])) "CALMCVG.f":129 86 {*movsi_internal}
     (nil))
(insn 429 428 430 22 (set (reg:SI 2 cx [orig:400 _357 ] [400])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7f3e7cde43f0 parallel>)
                    (const_int 28 [0x1c]))) [1 parallel.jend_m2+0 S4 A32])) "CALMCVG.f":129 86 {*movsi_internal}
     (nil))
(insn 430 429 622 22 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (reg:SI 0 ax [orig:399 _356 ] [399])) "CALMCVG.f":129 86 {*movsi_internal}
     (nil))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;;              27 [always] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400
;; lr  def 	 17 [flags] 401 514
(code_label 622 430 431 23 18 (nil) [1 uses])
(note 431 622 432 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 432 431 433 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 2 cx [orig:400 _357 ] [400]))) "CALMCVG.f":129 11 {*cmpsi_1}
     (nil))
(insn 433 432 434 23 (set (reg:QI 0 ax [514])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALMCVG.f":129 678 {*setcc_qi}
     (nil))
(insn 434 433 435 23 (set (reg:SI 0 ax [orig:401 _359 ] [401])
        (zero_extend:SI (reg:QI 0 ax [514]))) "CALMCVG.f":129 140 {*zero_extendqisi2}
     (nil))
(insn 435 434 436 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:401 _359 ] [401])
            (const_int 0 [0]))) "CALMCVG.f":129 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 436 435 437 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 665)
            (pc))) "CALMCVG.f":129 682 {*jcc}
     (nil)
 -> 665)
;;  succ:       33
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 290 402 515 516 517 518 519 520 521 522
(note 437 436 438 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 438 437 439 24 (set (reg:SI 0 ax [515])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":130 86 {*movsi_internal}
     (nil))
(insn 439 438 440 24 (parallel [
            (set (reg:SI 1 dx [516])
                (ashiftrt:SI (reg:SI 0 ax [515])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":130 582 {ashrsi3_cvt}
     (nil))
(insn 440 439 441 24 (parallel [
            (set (reg:SI 1 dx [517])
                (lshiftrt:SI (reg:SI 1 dx [516])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":130 587 {*lshrsi3_1}
     (nil))
(insn 441 440 442 24 (parallel [
            (set (reg:SI 0 ax [518])
                (plus:SI (reg:SI 0 ax [515])
                    (reg:SI 1 dx [517])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":130 221 {*addsi_1}
     (nil))
(insn 442 441 443 24 (parallel [
            (set (reg:SI 0 ax [519])
                (and:SI (reg:SI 0 ax [518])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":130 426 {*andsi_1}
     (nil))
(insn 443 442 445 24 (parallel [
            (set (reg:SI 0 ax [520])
                (minus:SI (reg:SI 0 ax [519])
                    (reg:SI 1 dx [517])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":130 277 {*subsi_1}
     (nil))
(insn 445 443 446 24 (set (reg:SI 1 dx [521])
        (const_int 118 [0x76])) "CALMCVG.f":130 86 {*movsi_internal}
     (nil))
(insn 446 445 672 24 (parallel [
            (set (reg:SI 1 dx [521])
                (minus:SI (reg:SI 1 dx [521])
                    (reg:SI 0 ax [orig:290 _204 ] [290])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":130 277 {*subsi_1}
     (nil))
(insn 672 446 447 24 (set (reg:SI 0 ax [522])
        (reg:SI 1 dx [521])) "CALMCVG.f":130 86 {*movsi_internal}
     (nil))
(insn 447 672 448 24 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 iend+0 S4 A32])
        (reg:SI 0 ax [522])) "CALMCVG.f":130 86 {*movsi_internal}
     (nil))
(insn 448 447 449 24 (set (reg:SI 1 dx [orig:402 _361 ] [402])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 iend+0 S4 A32])) "CALMCVG.f":131 86 {*movsi_internal}
     (nil))
(insn 449 448 616 24 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 2 [0x2])) "CALMCVG.f":131 86 {*movsi_internal}
     (nil))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400 402

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;;              26 [always] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400 402
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 402
;; lr  def 	 17 [flags] 403 523
(code_label 616 449 450 25 17 (nil) [1 uses])
(note 450 616 451 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 451 450 452 25 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (reg:SI 1 dx [orig:402 _361 ] [402]))) "CALMCVG.f":131 11 {*cmpsi_1}
     (nil))
(insn 452 451 453 25 (set (reg:QI 0 ax [523])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALMCVG.f":131 678 {*setcc_qi}
     (nil))
(insn 453 452 454 25 (set (reg:SI 0 ax [orig:403 _363 ] [403])
        (zero_extend:SI (reg:QI 0 ax [523]))) "CALMCVG.f":131 140 {*zero_extendqisi2}
     (nil))
(insn 454 453 455 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:403 _363 ] [403])
            (const_int 0 [0]))) "CALMCVG.f":131 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 455 454 456 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 668)
            (pc))) "CALMCVG.f":131 682 {*jcc}
     (nil)
 -> 668)
;;  succ:       34
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400 402

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 34, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400 402
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags
(note 456 455 457 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 457 456 458 26 (set (reg:SI 0 ax [524])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":132 86 {*movsi_internal}
     (nil))
(insn 458 457 459 26 (set (reg:DI 0 ax [orig:291 _205 ] [291])
        (sign_extend:DI (reg:SI 0 ax [524]))) "CALMCVG.f":132 149 {*extendsidi2_rex64}
     (nil))
(insn 459 458 460 26 (parallel [
            (set (reg:DI 4 si [orig:292 _206 ] [292])
                (mult:DI (reg:DI 0 ax [orig:291 _205 ] [291])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":132 349 {*muldi3_1}
     (nil))
(insn 460 459 461 26 (set (reg:SI 0 ax [525])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":132 86 {*movsi_internal}
     (nil))
(insn 461 460 462 26 (set (reg:DI 0 ax [orig:293 _207 ] [293])
        (sign_extend:DI (reg:SI 0 ax [525]))) "CALMCVG.f":132 149 {*extendsidi2_rex64}
     (nil))
(insn 462 461 463 26 (parallel [
            (set (reg:DI 0 ax [orig:294 _208 ] [294])
                (plus:DI (reg:DI 0 ax [orig:293 _207 ] [293])
                    (reg:DI 4 si [orig:292 _206 ] [292])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":132 222 {*adddi_1}
     (nil))
(insn 463 462 464 26 (parallel [
            (set (reg:DI 4 si [orig:295 _209 ] [295])
                (plus:DI (reg:DI 0 ax [orig:294 _208 ] [294])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":132 222 {*adddi_1}
     (nil))
(insn 464 463 465 26 (set (reg/f:DI 0 ax [526])
        (symbol_ref:DI ("dynam_") [flags 0x202]  <var_decl 0x7f3e7cdd9870 dynam>)) "CALMCVG.f":132 85 {*movdi_internal}
     (nil))
(insn 465 464 466 26 (parallel [
            (set (reg:DI 4 si [527])
                (plus:DI (reg:DI 4 si [orig:295 _209 ] [295])
                    (const_int 1207 [0x4b7])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":132 222 {*adddi_1}
     (nil))
(insn 466 465 467 26 (set (reg:SF 21 xmm0 [orig:296 _210 ] [296])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [527])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [526])) [2 dynam.dx S4 A32])) "CALMCVG.f":132 131 {*movsf_internal}
     (nil))
(insn 467 466 468 26 (set (reg:SF 21 xmm0 [orig:297 _211 ] [297])
        (plus:SF (reg:SF 21 xmm0 [orig:296 _210 ] [296])
            (reg:SF 21 xmm0 [orig:296 _210 ] [296]))) "CALMCVG.f":132 838 {*fop_sf_comm}
     (nil))
(insn 468 467 469 26 (set (reg:SF 22 xmm1 [orig:298 _212 ] [298])
        (reg:SF 21 xmm0 [orig:297 _211 ] [297])) "CALMCVG.f":132 131 {*movsf_internal}
     (nil))
(insn 469 468 470 26 (set (reg:SF 21 xmm0 [529])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "CALMCVG.f":132 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 470 469 471 26 (set (reg:SF 21 xmm0 [528])
        (div:SF (reg:SF 21 xmm0 [529])
            (reg:SF 22 xmm1 [orig:298 _212 ] [298]))) "CALMCVG.f":132 841 {*fop_sf_1}
     (nil))
(insn 471 470 472 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 r2dx+0 S4 A32])
        (reg:SF 21 xmm0 [528])) "CALMCVG.f":132 131 {*movsf_internal}
     (nil))
(insn 472 471 473 26 (set (reg/f:DI 0 ax [530])
        (symbol_ref:DI ("dynam_") [flags 0x202]  <var_decl 0x7f3e7cdd9870 dynam>)) "CALMCVG.f":1 85 {*movdi_internal}
     (nil))
(insn 473 472 474 26 (set (reg:SF 21 xmm0 [orig:299 _213 ] [299])
        (mem/c:SF (reg/f:DI 0 ax [530]) [2 dynam.dy+0 S4 A128])) "CALMCVG.f":1 131 {*movsf_internal}
     (nil))
(insn 474 473 475 26 (set (reg:SF 21 xmm0 [orig:300 _214 ] [300])
        (plus:SF (reg:SF 21 xmm0 [orig:299 _213 ] [299])
            (reg:SF 21 xmm0 [orig:299 _213 ] [299]))) "CALMCVG.f":133 838 {*fop_sf_comm}
     (nil))
(insn 475 474 476 26 (set (reg:SF 22 xmm1 [orig:301 _215 ] [301])
        (reg:SF 21 xmm0 [orig:300 _214 ] [300])) "CALMCVG.f":133 131 {*movsf_internal}
     (nil))
(insn 476 475 477 26 (set (reg:SF 21 xmm0 [532])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "CALMCVG.f":133 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 477 476 478 26 (set (reg:SF 21 xmm0 [531])
        (div:SF (reg:SF 21 xmm0 [532])
            (reg:SF 22 xmm1 [orig:301 _215 ] [301]))) "CALMCVG.f":133 841 {*fop_sf_1}
     (nil))
(insn 478 477 479 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 r2dy+0 S4 A32])
        (reg:SF 21 xmm0 [531])) "CALMCVG.f":133 131 {*movsf_internal}
     (nil))
(insn 479 478 480 26 (set (reg:SI 0 ax [533])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 480 479 481 26 (set (reg:DI 0 ax [orig:302 _216 ] [302])
        (sign_extend:DI (reg:SI 0 ax [533]))) "CALMCVG.f":135 149 {*extendsidi2_rex64}
     (nil))
(insn 481 480 482 26 (parallel [
            (set (reg:DI 4 si [orig:303 _217 ] [303])
                (mult:DI (reg:DI 0 ax [orig:302 _216 ] [302])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 349 {*muldi3_1}
     (nil))
(insn 482 481 483 26 (set (reg:SI 0 ax [534])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 483 482 484 26 (set (reg:DI 0 ax [orig:304 _218 ] [304])
        (sign_extend:DI (reg:SI 0 ax [534]))) "CALMCVG.f":135 149 {*extendsidi2_rex64}
     (nil))
(insn 484 483 485 26 (parallel [
            (set (reg:DI 0 ax [orig:305 _219 ] [305])
                (plus:DI (reg:DI 0 ax [orig:304 _218 ] [304])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 485 484 486 26 (set (reg:SI 5 di [orig:306 _220 ] [306])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:305 _219 ] [305])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f3e7cde0870 indx>)) [1 indx.ihe S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 486 485 487 26 (set (reg:SI 0 ax [535])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 487 486 488 26 (parallel [
            (set (reg:SI 0 ax [orig:307 _221 ] [307])
                (plus:SI (reg:SI 0 ax [535])
                    (reg:SI 5 di [orig:306 _220 ] [306])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 5 di [orig:306 _220 ] [306])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 488 487 489 26 (set (reg:DI 0 ax [orig:308 _222 ] [308])
        (sign_extend:DI (reg:SI 0 ax [orig:307 _221 ] [307]))) "CALMCVG.f":135 149 {*extendsidi2_rex64}
     (nil))
(insn 489 488 490 26 (parallel [
            (set (reg:DI 0 ax [orig:309 _223 ] [309])
                (plus:DI (reg:DI 0 ax [orig:308 _222 ] [308])
                    (reg:DI 4 si [orig:303 _217 ] [303])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 490 489 491 26 (parallel [
            (set (reg:DI 4 si [orig:310 _224 ] [310])
                (plus:DI (reg:DI 0 ax [orig:309 _223 ] [309])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 491 490 492 26 (set (reg/f:DI 0 ax [536])
        (symbol_ref:DI ("qv.3985") [flags 0x202]  <var_decl 0x7f3e7cde4f30 qv>)) "CALMCVG.f":135 85 {*movdi_internal}
     (nil))
(insn 492 491 493 26 (set (reg:SF 22 xmm1 [orig:311 _225 ] [311])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:310 _224 ] [310])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [536])) [2 qv S4 A32])) "CALMCVG.f":135 131 {*movsf_internal}
     (nil))
(insn 493 492 494 26 (set (reg:SI 0 ax [537])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 494 493 495 26 (set (reg:DI 0 ax [orig:312 _226 ] [312])
        (sign_extend:DI (reg:SI 0 ax [537]))) "CALMCVG.f":135 149 {*extendsidi2_rex64}
     (nil))
(insn 495 494 496 26 (parallel [
            (set (reg:DI 4 si [orig:313 _227 ] [313])
                (mult:DI (reg:DI 0 ax [orig:312 _226 ] [312])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 349 {*muldi3_1}
     (nil))
(insn 496 495 497 26 (set (reg:SI 0 ax [538])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 497 496 498 26 (set (reg:DI 0 ax [orig:314 _228 ] [314])
        (sign_extend:DI (reg:SI 0 ax [538]))) "CALMCVG.f":135 149 {*extendsidi2_rex64}
     (nil))
(insn 498 497 499 26 (parallel [
            (set (reg:DI 0 ax [orig:315 _229 ] [315])
                (plus:DI (reg:DI 0 ax [orig:314 _228 ] [314])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 499 498 500 26 (set (reg:SI 5 di [orig:316 _230 ] [316])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:315 _229 ] [315])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f3e7cde0870 indx>)) [1 indx.ihe S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 500 499 501 26 (set (reg:SI 0 ax [539])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 501 500 502 26 (parallel [
            (set (reg:SI 0 ax [orig:317 _231 ] [317])
                (plus:SI (reg:SI 0 ax [539])
                    (reg:SI 5 di [orig:316 _230 ] [316])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 5 di [orig:316 _230 ] [316])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 502 501 503 26 (set (reg:DI 0 ax [orig:318 _232 ] [318])
        (sign_extend:DI (reg:SI 0 ax [orig:317 _231 ] [317]))) "CALMCVG.f":135 149 {*extendsidi2_rex64}
     (nil))
(insn 503 502 504 26 (parallel [
            (set (reg:DI 0 ax [orig:319 _233 ] [319])
                (plus:DI (reg:DI 0 ax [orig:318 _232 ] [318])
                    (reg:DI 4 si [orig:313 _227 ] [313])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 504 503 505 26 (parallel [
            (set (reg:DI 4 si [orig:320 _234 ] [320])
                (plus:DI (reg:DI 0 ax [orig:319 _233 ] [319])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 505 504 506 26 (set (reg/f:DI 0 ax [540])
        (symbol_ref:DI ("uwnd.3990") [flags 0x202]  <var_decl 0x7f3e7cde81b0 uwnd>)) "CALMCVG.f":135 85 {*movdi_internal}
     (nil))
(insn 506 505 507 26 (set (reg:SF 21 xmm0 [orig:321 _235 ] [321])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:320 _234 ] [320])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [540])) [2 uwnd S4 A32])) "CALMCVG.f":135 131 {*movsf_internal}
     (nil))
(insn 507 506 508 26 (set (reg:SF 21 xmm0 [orig:322 _236 ] [322])
        (mult:SF (reg:SF 21 xmm0 [orig:321 _235 ] [321])
            (reg:SF 22 xmm1 [orig:311 _225 ] [311]))) "CALMCVG.f":135 838 {*fop_sf_comm}
     (nil))
(insn 508 507 509 26 (set (reg:SI 0 ax [541])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 509 508 510 26 (set (reg:DI 0 ax [orig:323 _237 ] [323])
        (sign_extend:DI (reg:SI 0 ax [541]))) "CALMCVG.f":135 149 {*extendsidi2_rex64}
     (nil))
(insn 510 509 511 26 (parallel [
            (set (reg:DI 4 si [orig:324 _238 ] [324])
                (mult:DI (reg:DI 0 ax [orig:323 _237 ] [323])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 349 {*muldi3_1}
     (nil))
(insn 511 510 512 26 (set (reg:SI 0 ax [542])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 512 511 513 26 (set (reg:DI 0 ax [orig:325 _239 ] [325])
        (sign_extend:DI (reg:SI 0 ax [542]))) "CALMCVG.f":135 149 {*extendsidi2_rex64}
     (nil))
(insn 513 512 514 26 (parallel [
            (set (reg:DI 0 ax [orig:326 _240 ] [326])
                (plus:DI (reg:DI 0 ax [orig:325 _239 ] [325])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 514 513 515 26 (parallel [
            (set (reg:DI 0 ax [543])
                (plus:DI (reg:DI 0 ax [orig:326 _240 ] [326])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 515 514 516 26 (set (reg:SI 5 di [orig:327 _241 ] [327])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [543])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f3e7cde0870 indx>)) [1 indx.ihw S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 516 515 517 26 (set (reg:SI 0 ax [544])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 517 516 518 26 (parallel [
            (set (reg:SI 0 ax [orig:328 _242 ] [328])
                (plus:SI (reg:SI 0 ax [544])
                    (reg:SI 5 di [orig:327 _241 ] [327])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 5 di [orig:327 _241 ] [327])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 518 517 519 26 (set (reg:DI 0 ax [orig:329 _243 ] [329])
        (sign_extend:DI (reg:SI 0 ax [orig:328 _242 ] [328]))) "CALMCVG.f":135 149 {*extendsidi2_rex64}
     (nil))
(insn 519 518 520 26 (parallel [
            (set (reg:DI 0 ax [orig:330 _244 ] [330])
                (plus:DI (reg:DI 0 ax [orig:329 _243 ] [329])
                    (reg:DI 4 si [orig:324 _238 ] [324])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 520 519 521 26 (parallel [
            (set (reg:DI 4 si [orig:331 _245 ] [331])
                (plus:DI (reg:DI 0 ax [orig:330 _244 ] [330])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 521 520 522 26 (set (reg/f:DI 0 ax [545])
        (symbol_ref:DI ("qv.3985") [flags 0x202]  <var_decl 0x7f3e7cde4f30 qv>)) "CALMCVG.f":135 85 {*movdi_internal}
     (nil))
(insn 522 521 523 26 (set (reg:SF 23 xmm2 [orig:332 _246 ] [332])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:331 _245 ] [331])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [545])) [2 qv S4 A32])) "CALMCVG.f":135 131 {*movsf_internal}
     (nil))
(insn 523 522 524 26 (set (reg:SI 0 ax [546])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 524 523 525 26 (set (reg:DI 0 ax [orig:333 _247 ] [333])
        (sign_extend:DI (reg:SI 0 ax [546]))) "CALMCVG.f":135 149 {*extendsidi2_rex64}
     (nil))
(insn 525 524 526 26 (parallel [
            (set (reg:DI 4 si [orig:334 _248 ] [334])
                (mult:DI (reg:DI 0 ax [orig:333 _247 ] [333])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 349 {*muldi3_1}
     (nil))
(insn 526 525 527 26 (set (reg:SI 0 ax [547])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 527 526 528 26 (set (reg:DI 0 ax [orig:335 _249 ] [335])
        (sign_extend:DI (reg:SI 0 ax [547]))) "CALMCVG.f":135 149 {*extendsidi2_rex64}
     (nil))
(insn 528 527 529 26 (parallel [
            (set (reg:DI 0 ax [orig:336 _250 ] [336])
                (plus:DI (reg:DI 0 ax [orig:335 _249 ] [335])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 529 528 530 26 (parallel [
            (set (reg:DI 0 ax [548])
                (plus:DI (reg:DI 0 ax [orig:336 _250 ] [336])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 530 529 531 26 (set (reg:SI 5 di [orig:337 _251 ] [337])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [548])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7f3e7cde0870 indx>)) [1 indx.ihw S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 531 530 532 26 (set (reg:SI 0 ax [549])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":135 86 {*movsi_internal}
     (nil))
(insn 532 531 533 26 (parallel [
            (set (reg:SI 0 ax [orig:338 _252 ] [338])
                (plus:SI (reg:SI 0 ax [549])
                    (reg:SI 5 di [orig:337 _251 ] [337])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 5 di [orig:337 _251 ] [337])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 533 532 534 26 (set (reg:DI 0 ax [orig:339 _253 ] [339])
        (sign_extend:DI (reg:SI 0 ax [orig:338 _252 ] [338]))) "CALMCVG.f":135 149 {*extendsidi2_rex64}
     (nil))
(insn 534 533 535 26 (parallel [
            (set (reg:DI 0 ax [orig:340 _254 ] [340])
                (plus:DI (reg:DI 0 ax [orig:339 _253 ] [339])
                    (reg:DI 4 si [orig:334 _248 ] [334])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 535 534 536 26 (parallel [
            (set (reg:DI 4 si [orig:341 _255 ] [341])
                (plus:DI (reg:DI 0 ax [orig:340 _254 ] [340])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":135 222 {*adddi_1}
     (nil))
(insn 536 535 537 26 (set (reg/f:DI 0 ax [550])
        (symbol_ref:DI ("uwnd.3990") [flags 0x202]  <var_decl 0x7f3e7cde81b0 uwnd>)) "CALMCVG.f":135 85 {*movdi_internal}
     (nil))
(insn 537 536 538 26 (set (reg:SF 22 xmm1 [orig:342 _256 ] [342])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:341 _255 ] [341])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [550])) [2 uwnd S4 A32])) "CALMCVG.f":135 131 {*movsf_internal}
     (nil))
(insn 538 537 539 26 (set (reg:SF 22 xmm1 [orig:343 _257 ] [343])
        (mult:SF (reg:SF 22 xmm1 [orig:342 _256 ] [342])
            (reg:SF 23 xmm2 [orig:332 _246 ] [332]))) "CALMCVG.f":135 838 {*fop_sf_comm}
     (nil))
(insn 539 538 540 26 (set (reg:SF 21 xmm0 [orig:344 _258 ] [344])
        (minus:SF (reg:SF 21 xmm0 [orig:322 _236 ] [322])
            (reg:SF 22 xmm1 [orig:343 _257 ] [343]))) "CALMCVG.f":135 841 {*fop_sf_1}
     (nil))
(insn 540 539 541 26 (set (reg:SF 22 xmm1 [orig:345 _259 ] [345])
        (reg:SF 21 xmm0 [orig:344 _258 ] [344])) "CALMCVG.f":135 131 {*movsf_internal}
     (nil))
(insn 541 540 542 26 (set (reg:SF 21 xmm0 [552])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 r2dx+0 S4 A32])) "CALMCVG.f":135 131 {*movsf_internal}
     (nil))
(insn 542 541 543 26 (set (reg:SF 21 xmm0 [551])
        (mult:SF (reg:SF 21 xmm0 [552])
            (reg:SF 22 xmm1 [orig:345 _259 ] [345]))) "CALMCVG.f":135 838 {*fop_sf_comm}
     (nil))
(insn 543 542 544 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 qudx+0 S4 A32])
        (reg:SF 21 xmm0 [551])) "CALMCVG.f":135 131 {*movsf_internal}
     (nil))
(insn 544 543 545 26 (set (reg:SI 0 ax [553])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":136 86 {*movsi_internal}
     (nil))
(insn 545 544 546 26 (parallel [
            (set (reg:SI 0 ax [orig:346 _260 ] [346])
                (plus:SI (reg:SI 0 ax [553])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 546 545 547 26 (set (reg:DI 0 ax [orig:347 _261 ] [347])
        (sign_extend:DI (reg:SI 0 ax [orig:346 _260 ] [346]))) "CALMCVG.f":136 149 {*extendsidi2_rex64}
     (nil))
(insn 547 546 548 26 (parallel [
            (set (reg:DI 4 si [orig:348 _262 ] [348])
                (mult:DI (reg:DI 0 ax [orig:347 _261 ] [347])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 349 {*muldi3_1}
     (nil))
(insn 548 547 549 26 (set (reg:SI 0 ax [554])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":136 86 {*movsi_internal}
     (nil))
(insn 549 548 550 26 (set (reg:DI 0 ax [orig:349 _263 ] [349])
        (sign_extend:DI (reg:SI 0 ax [554]))) "CALMCVG.f":136 149 {*extendsidi2_rex64}
     (nil))
(insn 550 549 551 26 (parallel [
            (set (reg:DI 0 ax [orig:350 _264 ] [350])
                (plus:DI (reg:DI 0 ax [orig:349 _263 ] [349])
                    (reg:DI 4 si [orig:348 _262 ] [348])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 222 {*adddi_1}
     (nil))
(insn 551 550 552 26 (parallel [
            (set (reg:DI 4 si [orig:351 _265 ] [351])
                (plus:DI (reg:DI 0 ax [orig:350 _264 ] [350])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 222 {*adddi_1}
     (nil))
(insn 552 551 553 26 (set (reg/f:DI 0 ax [555])
        (symbol_ref:DI ("qv.3985") [flags 0x202]  <var_decl 0x7f3e7cde4f30 qv>)) "CALMCVG.f":136 85 {*movdi_internal}
     (nil))
(insn 553 552 554 26 (set (reg:SF 22 xmm1 [orig:352 _266 ] [352])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:351 _265 ] [351])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [555])) [2 qv S4 A32])) "CALMCVG.f":136 131 {*movsf_internal}
     (nil))
(insn 554 553 555 26 (set (reg:SI 0 ax [556])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":136 86 {*movsi_internal}
     (nil))
(insn 555 554 556 26 (parallel [
            (set (reg:SI 0 ax [orig:353 _267 ] [353])
                (plus:SI (reg:SI 0 ax [556])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 556 555 557 26 (set (reg:DI 0 ax [orig:354 _268 ] [354])
        (sign_extend:DI (reg:SI 0 ax [orig:353 _267 ] [353]))) "CALMCVG.f":136 149 {*extendsidi2_rex64}
     (nil))
(insn 557 556 558 26 (parallel [
            (set (reg:DI 4 si [orig:355 _269 ] [355])
                (mult:DI (reg:DI 0 ax [orig:354 _268 ] [354])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 349 {*muldi3_1}
     (nil))
(insn 558 557 559 26 (set (reg:SI 0 ax [557])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":136 86 {*movsi_internal}
     (nil))
(insn 559 558 560 26 (set (reg:DI 0 ax [orig:356 _270 ] [356])
        (sign_extend:DI (reg:SI 0 ax [557]))) "CALMCVG.f":136 149 {*extendsidi2_rex64}
     (nil))
(insn 560 559 561 26 (parallel [
            (set (reg:DI 0 ax [orig:357 _271 ] [357])
                (plus:DI (reg:DI 0 ax [orig:356 _270 ] [356])
                    (reg:DI 4 si [orig:355 _269 ] [355])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 222 {*adddi_1}
     (nil))
(insn 561 560 562 26 (parallel [
            (set (reg:DI 4 si [orig:358 _272 ] [358])
                (plus:DI (reg:DI 0 ax [orig:357 _271 ] [357])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 222 {*adddi_1}
     (nil))
(insn 562 561 563 26 (set (reg/f:DI 0 ax [558])
        (symbol_ref:DI ("vwnd.3992") [flags 0x202]  <var_decl 0x7f3e7cde8240 vwnd>)) "CALMCVG.f":136 85 {*movdi_internal}
     (nil))
(insn 563 562 564 26 (set (reg:SF 21 xmm0 [orig:359 _273 ] [359])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:358 _272 ] [358])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [558])) [2 vwnd S4 A32])) "CALMCVG.f":136 131 {*movsf_internal}
     (nil))
(insn 564 563 565 26 (set (reg:SF 21 xmm0 [orig:360 _274 ] [360])
        (mult:SF (reg:SF 21 xmm0 [orig:359 _273 ] [359])
            (reg:SF 22 xmm1 [orig:352 _266 ] [352]))) "CALMCVG.f":136 838 {*fop_sf_comm}
     (nil))
(insn 565 564 566 26 (set (reg:SI 0 ax [559])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":136 86 {*movsi_internal}
     (nil))
(insn 566 565 567 26 (parallel [
            (set (reg:SI 0 ax [orig:361 _275 ] [361])
                (plus:SI (reg:SI 0 ax [559])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 567 566 568 26 (set (reg:DI 0 ax [orig:362 _276 ] [362])
        (sign_extend:DI (reg:SI 0 ax [orig:361 _275 ] [361]))) "CALMCVG.f":136 149 {*extendsidi2_rex64}
     (nil))
(insn 568 567 569 26 (parallel [
            (set (reg:DI 4 si [orig:363 _277 ] [363])
                (mult:DI (reg:DI 0 ax [orig:362 _276 ] [362])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 349 {*muldi3_1}
     (nil))
(insn 569 568 570 26 (set (reg:SI 0 ax [560])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":136 86 {*movsi_internal}
     (nil))
(insn 570 569 571 26 (set (reg:DI 0 ax [orig:364 _278 ] [364])
        (sign_extend:DI (reg:SI 0 ax [560]))) "CALMCVG.f":136 149 {*extendsidi2_rex64}
     (nil))
(insn 571 570 572 26 (parallel [
            (set (reg:DI 0 ax [orig:365 _279 ] [365])
                (plus:DI (reg:DI 0 ax [orig:364 _278 ] [364])
                    (reg:DI 4 si [orig:363 _277 ] [363])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 222 {*adddi_1}
     (nil))
(insn 572 571 573 26 (parallel [
            (set (reg:DI 4 si [orig:366 _280 ] [366])
                (plus:DI (reg:DI 0 ax [orig:365 _279 ] [365])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 222 {*adddi_1}
     (nil))
(insn 573 572 574 26 (set (reg/f:DI 0 ax [561])
        (symbol_ref:DI ("qv.3985") [flags 0x202]  <var_decl 0x7f3e7cde4f30 qv>)) "CALMCVG.f":136 85 {*movdi_internal}
     (nil))
(insn 574 573 575 26 (set (reg:SF 23 xmm2 [orig:367 _281 ] [367])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:366 _280 ] [366])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [561])) [2 qv S4 A32])) "CALMCVG.f":136 131 {*movsf_internal}
     (nil))
(insn 575 574 576 26 (set (reg:SI 0 ax [562])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":136 86 {*movsi_internal}
     (nil))
(insn 576 575 577 26 (parallel [
            (set (reg:SI 0 ax [orig:368 _282 ] [368])
                (plus:SI (reg:SI 0 ax [562])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 577 576 578 26 (set (reg:DI 0 ax [orig:369 _283 ] [369])
        (sign_extend:DI (reg:SI 0 ax [orig:368 _282 ] [368]))) "CALMCVG.f":136 149 {*extendsidi2_rex64}
     (nil))
(insn 578 577 579 26 (parallel [
            (set (reg:DI 4 si [orig:370 _284 ] [370])
                (mult:DI (reg:DI 0 ax [orig:369 _283 ] [369])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 349 {*muldi3_1}
     (nil))
(insn 579 578 580 26 (set (reg:SI 0 ax [563])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":136 86 {*movsi_internal}
     (nil))
(insn 580 579 581 26 (set (reg:DI 0 ax [orig:371 _285 ] [371])
        (sign_extend:DI (reg:SI 0 ax [563]))) "CALMCVG.f":136 149 {*extendsidi2_rex64}
     (nil))
(insn 581 580 582 26 (parallel [
            (set (reg:DI 0 ax [orig:372 _286 ] [372])
                (plus:DI (reg:DI 0 ax [orig:371 _285 ] [371])
                    (reg:DI 4 si [orig:370 _284 ] [370])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 222 {*adddi_1}
     (nil))
(insn 582 581 583 26 (parallel [
            (set (reg:DI 4 si [orig:373 _287 ] [373])
                (plus:DI (reg:DI 0 ax [orig:372 _286 ] [372])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":136 222 {*adddi_1}
     (nil))
(insn 583 582 584 26 (set (reg/f:DI 0 ax [564])
        (symbol_ref:DI ("vwnd.3992") [flags 0x202]  <var_decl 0x7f3e7cde8240 vwnd>)) "CALMCVG.f":136 85 {*movdi_internal}
     (nil))
(insn 584 583 585 26 (set (reg:SF 22 xmm1 [orig:374 _288 ] [374])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:373 _287 ] [373])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [564])) [2 vwnd S4 A32])) "CALMCVG.f":136 131 {*movsf_internal}
     (nil))
(insn 585 584 586 26 (set (reg:SF 22 xmm1 [orig:375 _289 ] [375])
        (mult:SF (reg:SF 22 xmm1 [orig:374 _288 ] [374])
            (reg:SF 23 xmm2 [orig:367 _281 ] [367]))) "CALMCVG.f":136 838 {*fop_sf_comm}
     (nil))
(insn 586 585 587 26 (set (reg:SF 21 xmm0 [orig:376 _290 ] [376])
        (minus:SF (reg:SF 21 xmm0 [orig:360 _274 ] [360])
            (reg:SF 22 xmm1 [orig:375 _289 ] [375]))) "CALMCVG.f":136 841 {*fop_sf_1}
     (nil))
(insn 587 586 588 26 (set (reg:SF 22 xmm1 [orig:377 _291 ] [377])
        (reg:SF 21 xmm0 [orig:376 _290 ] [376])) "CALMCVG.f":136 131 {*movsf_internal}
     (nil))
(insn 588 587 589 26 (set (reg:SF 21 xmm0 [566])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 r2dy+0 S4 A32])) "CALMCVG.f":136 131 {*movsf_internal}
     (nil))
(insn 589 588 590 26 (set (reg:SF 21 xmm0 [565])
        (mult:SF (reg:SF 21 xmm0 [566])
            (reg:SF 22 xmm1 [orig:377 _291 ] [377]))) "CALMCVG.f":136 838 {*fop_sf_comm}
     (nil))
(insn 590 589 591 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 qvdy+0 S4 A32])
        (reg:SF 21 xmm0 [565])) "CALMCVG.f":136 131 {*movsf_internal}
     (nil))
(insn 591 590 592 26 (set (reg:SF 21 xmm0 [568])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 qudx+0 S4 A32])) "CALMCVG.f":137 131 {*movsf_internal}
     (nil))
(insn 592 591 593 26 (set (reg:SF 21 xmm0 [567])
        (plus:SF (reg:SF 21 xmm0 [568])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 qvdy+0 S4 A32]))) "CALMCVG.f":137 838 {*fop_sf_comm}
     (nil))
(insn 593 592 594 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 qdiv+0 S4 A32])
        (reg:SF 21 xmm0 [567])) "CALMCVG.f":137 131 {*movsf_internal}
     (nil))
(insn 594 593 595 26 (set (reg:SI 0 ax [569])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":138 86 {*movsi_internal}
     (nil))
(insn 595 594 596 26 (set (reg:DI 0 ax [orig:378 _292 ] [378])
        (sign_extend:DI (reg:SI 0 ax [569]))) "CALMCVG.f":138 149 {*extendsidi2_rex64}
     (nil))
(insn 596 595 597 26 (parallel [
            (set (reg:DI 4 si [orig:379 _293 ] [379])
                (mult:DI (reg:DI 0 ax [orig:378 _292 ] [378])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":138 349 {*muldi3_1}
     (nil))
(insn 597 596 598 26 (set (reg:SI 0 ax [570])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":138 86 {*movsi_internal}
     (nil))
(insn 598 597 599 26 (set (reg:DI 0 ax [orig:380 _294 ] [380])
        (sign_extend:DI (reg:SI 0 ax [570]))) "CALMCVG.f":138 149 {*extendsidi2_rex64}
     (nil))
(insn 599 598 600 26 (parallel [
            (set (reg:DI 0 ax [orig:381 _295 ] [381])
                (plus:DI (reg:DI 0 ax [orig:380 _294 ] [380])
                    (reg:DI 4 si [orig:379 _293 ] [379])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":138 222 {*adddi_1}
     (nil))
(insn 600 599 601 26 (parallel [
            (set (reg:DI 4 si [orig:382 _296 ] [382])
                (plus:DI (reg:DI 0 ax [orig:381 _295 ] [381])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":138 222 {*adddi_1}
     (nil))
(insn 601 600 602 26 (set (reg/f:DI 0 ax [571])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7f3e7cde0b40 masks>)) "CALMCVG.f":138 85 {*movdi_internal}
     (nil))
(insn 602 601 603 26 (set (reg:SF 21 xmm0 [orig:383 _297 ] [383])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:382 _296 ] [382])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [571])) [2 masks.hbm2 S4 A32])) "CALMCVG.f":138 131 {*movsf_internal}
     (nil))
(insn 603 602 604 26 (set (reg:SF 21 xmm0 [orig:384 _298 ] [384])
        (mult:SF (reg:SF 21 xmm0 [orig:383 _297 ] [383])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 qdiv+0 S4 A32]))) "CALMCVG.f":138 838 {*fop_sf_comm}
     (nil))
(insn 604 603 605 26 (set (reg:SI 0 ax [572])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALMCVG.f":138 86 {*movsi_internal}
     (nil))
(insn 605 604 606 26 (set (reg:DI 0 ax [orig:385 _299 ] [385])
        (sign_extend:DI (reg:SI 0 ax [572]))) "CALMCVG.f":138 149 {*extendsidi2_rex64}
     (nil))
(insn 606 605 607 26 (parallel [
            (set (reg:DI 4 si [orig:386 _300 ] [386])
                (mult:DI (reg:DI 0 ax [orig:385 _299 ] [385])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":138 349 {*muldi3_1}
     (nil))
(insn 607 606 608 26 (set (reg:SI 0 ax [573])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALMCVG.f":138 86 {*movsi_internal}
     (nil))
(insn 608 607 609 26 (set (reg:DI 0 ax [orig:387 _301 ] [387])
        (sign_extend:DI (reg:SI 0 ax [573]))) "CALMCVG.f":138 149 {*extendsidi2_rex64}
     (nil))
(insn 609 608 610 26 (parallel [
            (set (reg:DI 0 ax [orig:388 _302 ] [388])
                (plus:DI (reg:DI 0 ax [orig:387 _301 ] [387])
                    (reg:DI 4 si [orig:386 _300 ] [386])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":138 222 {*adddi_1}
     (nil))
(insn 610 609 611 26 (parallel [
            (set (reg:DI 4 si [orig:389 _303 ] [389])
                (plus:DI (reg:DI 0 ax [orig:388 _302 ] [388])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":138 222 {*adddi_1}
     (nil))
(insn 611 610 612 26 (set (reg:V4SF 22 xmm1 [574])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S16 A128])) "CALMCVG.f":138 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 612 611 613 26 (parallel [
            (set (reg:SF 21 xmm0 [orig:390 _304 ] [390])
                (neg:SF (reg:SF 21 xmm0 [orig:384 _298 ] [384])))
            (use (reg:V4SF 22 xmm1 [574]))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":138 507 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:384 _298 ] [384]))
        (nil)))
(insn 613 612 614 26 (set (reg/f:DI 0 ax [575])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 qcnvg+0 S8 A64])) "CALMCVG.f":138 85 {*movdi_internal}
     (nil))
(insn 614 613 615 26 (set (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:389 _303 ] [389])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [575])) [2 *qcnvg_328(D) S4 A32])
        (reg:SF 21 xmm0 [orig:390 _304 ] [390])) "CALMCVG.f":138 131 {*movsf_internal}
     (nil))
(insn 615 614 648 26 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":131 221 {*addsi_1}
     (nil))
(jump_insn 648 615 649 26 (set (pc)
        (label_ref 616)) "CALMCVG.f":131 683 {jump}
     (nil)
 -> 616)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400 402

(barrier 649 648 668)
;; basic block 34, loop depth 0, maybe hot
;;  prev block 26, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 668 649 667 34 27 (nil) [1 uses])
(note 667 668 669 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 669 667 619 34 (const_int 0 [0]) "CALMCVG.f":138 718 {nop}
     (nil))
;;  succ:       27 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400

;; basic block 27, loop depth 0, maybe hot
;;  prev block 34, next block 33, flags: (RTL, MODIFIED)
;;  pred:       34 [always]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 619 669 620 27 16 (nil) [0 uses])
(note 620 619 621 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 621 620 650 27 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALMCVG.f":129 221 {*addsi_1}
     (nil))
(jump_insn 650 621 651 27 (set (pc)
        (label_ref 622)) "CALMCVG.f":129 683 {jump}
     (nil)
 -> 622)
;;  succ:       23 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 400

(barrier 651 650 665)
;; basic block 33, loop depth 0, maybe hot
;;  prev block 27, next block 28, flags: (RTL, MODIFIED)
;;  pred:       23
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 665 651 664 33 26 (nil) [1 uses])
(note 664 665 666 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 666 664 625 33 (const_int 0 [0]) "CALMCVG.f":131 718 {nop}
     (nil))
;;  succ:       28 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, maybe hot
;;  prev block 33, next block 1, flags: (RTL, MODIFIED)
;;  pred:       33 [always]  (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 625 666 626 28 15 (nil) [0 uses])
(note 626 625 639 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 639 626 670 28 (const_int 0 [0]) "CALMCVG.f":144 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 670 639 0 NOTE_INSN_DELETED)
