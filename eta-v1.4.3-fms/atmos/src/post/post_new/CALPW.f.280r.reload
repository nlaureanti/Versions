
;; Function calpw (calpw_, funcdef_no=0, decl_uid=3769, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 44:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 47:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 51
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 52:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 54:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 57:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 64
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 65:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 66:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 67:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 68:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 69:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 72:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 75
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 78:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 81:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 84:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 88
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 89:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 90:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 92:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 95:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 98:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 102
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 103:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 104:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 105:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 106
	 Choosing alt 1 in insn 106:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 108:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=193 from oldreg=131, assigning class SSE_REGS to r193
  108: r193:SF=r193:SF*[frame:DI-0x10]
      REG_DEAD r131:SF
    Inserting insn reload before:
  175: r193:SF=r131:SF
    Inserting insn reload after:
  176: r132:SF=r193:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 109:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 110:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 113:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 116:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 120
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 121:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 122:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 124:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 125
	 Choosing alt 1 in insn 125:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 128:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 132:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 133
	 Choosing alt 1 in insn 133:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 135:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 136:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 142:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 148:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 7 8
EBB 14
EBB 9
EBB 13
EBB 10
EBB 12
EBB 11

********** Pseudo live ranges #1: **********

  BB 11
   Insn 158: point = 0, n_alt = -1
  BB 12
   Insn 167: point = 0, n_alt = -1
  BB 3
   Insn 21: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = 0
   Insn 19: point = 1, n_alt = 0
   Insn 18: point = 3, n_alt = 0
   Insn 17: point = 4, n_alt = 0
  BB 10
   Insn 163: point = 4, n_alt = -1
   Insn 148: point = 4, n_alt = 1
  BB 13
   Insn 170: point = 4, n_alt = -1
  BB 5
   Insn 31: point = 4, n_alt = -1
   Insn 30: point = 4, n_alt = 0
   Insn 29: point = 5, n_alt = 0
   Insn 28: point = 7, n_alt = 0
   Insn 27: point = 8, n_alt = 0
  BB 9
   Insn 161: point = 9, n_alt = -1
   Insn 142: point = 9, n_alt = 1
  BB 14
   Insn 173: point = 10, n_alt = -1
  BB 7
   Insn 39: point = 11, n_alt = -1
   Insn 38: point = 11, n_alt = 0
   Insn 37: point = 12, n_alt = 0
   Insn 36: point = 14, n_alt = 0
   Insn 35: point = 15, n_alt = 0
  BB 8
   Insn 159: point = 16, n_alt = -1
   Insn 136: point = 16, n_alt = 1
   Insn 135: point = 16, n_alt = 8
   Insn 134: point = 17, n_alt = 3
   Insn 133: point = 18, n_alt = 1
   Insn 132: point = 20, n_alt = 3
   Insn 131: point = 22, n_alt = 0
   Insn 130: point = 24, n_alt = 1
   Insn 129: point = 26, n_alt = 0
   Insn 128: point = 27, n_alt = 0
   Insn 127: point = 29, n_alt = 1
   Insn 126: point = 31, n_alt = 0
   Insn 125: point = 32, n_alt = 1
   Insn 124: point = 34, n_alt = 7
   Insn 123: point = 36, n_alt = 0
   Insn 122: point = 38, n_alt = 4
   Insn 121: point = 39, n_alt = 3
   Insn 120: point = 41, n_alt = 0
   Insn 119: point = 43, n_alt = 1
   Insn 118: point = 45, n_alt = 0
   Insn 117: point = 46, n_alt = 0
   Insn 116: point = 48, n_alt = 0
   Insn 115: point = 50, n_alt = 1
   Insn 114: point = 52, n_alt = 0
   Insn 113: point = 53, n_alt = 1
   Insn 112: point = 55, n_alt = 1
   Insn 111: point = 57, n_alt = 0
   Insn 110: point = 58, n_alt = 1
   Insn 109: point = 60, n_alt = 7
   Insn 176: point = 61, n_alt = -2
	Hard reg 23 is preferable by r193 with profit 1000
   Insn 108: point = 63, n_alt = 1
   Insn 175: point = 63, n_alt = -2
	Hard reg 23 is preferable by r193 with profit 1000
	Hard reg 21 is preferable by r193 with profit 1000
   Insn 107: point = 65, n_alt = -2
   Insn 106: point = 67, n_alt = 1
   Insn 105: point = 69, n_alt = 7
   Insn 104: point = 71, n_alt = 4
   Insn 103: point = 72, n_alt = 3
   Insn 102: point = 74, n_alt = 0
   Insn 101: point = 76, n_alt = 1
   Insn 100: point = 78, n_alt = 0
   Insn 99: point = 79, n_alt = 0
   Insn 98: point = 81, n_alt = 0
   Insn 97: point = 83, n_alt = 1
   Insn 96: point = 85, n_alt = 0
   Insn 95: point = 86, n_alt = 1
   Insn 94: point = 88, n_alt = 1
   Insn 93: point = 90, n_alt = 0
   Insn 92: point = 91, n_alt = 7
   Insn 91: point = 93, n_alt = 0
   Insn 90: point = 95, n_alt = 4
   Insn 89: point = 96, n_alt = 3
   Insn 88: point = 98, n_alt = 0
   Insn 87: point = 100, n_alt = 1
   Insn 86: point = 102, n_alt = 0
   Insn 85: point = 103, n_alt = 0
   Insn 84: point = 105, n_alt = 0
   Insn 83: point = 107, n_alt = 1
   Insn 82: point = 109, n_alt = 0
   Insn 81: point = 110, n_alt = 1
   Insn 80: point = 112, n_alt = 1
   Insn 79: point = 114, n_alt = 0
   Insn 78: point = 115, n_alt = 7
   Insn 77: point = 117, n_alt = 3
   Insn 76: point = 118, n_alt = 3
   Insn 75: point = 120, n_alt = 0
   Insn 74: point = 122, n_alt = 1
   Insn 73: point = 124, n_alt = 0
   Insn 72: point = 125, n_alt = 0
   Insn 71: point = 127, n_alt = 1
   Insn 70: point = 129, n_alt = 0
   Insn 69: point = 130, n_alt = 8
   Insn 68: point = 131, n_alt = 2
   Insn 67: point = 133, n_alt = 7
   Insn 66: point = 135, n_alt = 4
   Insn 65: point = 136, n_alt = 3
   Insn 64: point = 138, n_alt = 0
   Insn 63: point = 140, n_alt = 1
   Insn 62: point = 142, n_alt = 0
   Insn 61: point = 143, n_alt = 0
   Insn 60: point = 145, n_alt = 0
   Insn 59: point = 147, n_alt = 1
   Insn 58: point = 149, n_alt = 0
   Insn 57: point = 150, n_alt = 1
   Insn 56: point = 152, n_alt = 1
   Insn 55: point = 154, n_alt = 0
   Insn 54: point = 155, n_alt = 7
   Insn 53: point = 157, n_alt = 4
   Insn 52: point = 158, n_alt = 3
   Insn 51: point = 160, n_alt = 0
   Insn 50: point = 162, n_alt = 1
   Insn 49: point = 164, n_alt = 0
   Insn 48: point = 165, n_alt = 0
   Insn 47: point = 167, n_alt = 0
   Insn 46: point = 169, n_alt = 1
   Insn 45: point = 171, n_alt = 0
   Insn 44: point = 172, n_alt = 1
   Insn 43: point = 174, n_alt = 1
   Insn 42: point = 176, n_alt = 0
   Insn 41: point = 178, n_alt = 0
  BB 6
   Insn 33: point = 180, n_alt = 1
  BB 4
   Insn 25: point = 181, n_alt = 1
   Insn 24: point = 182, n_alt = 0
   Insn 23: point = 183, n_alt = 0
  BB 2
   Insn 15: point = 184, n_alt = 1
   Insn 12: point = 184, n_alt = 0
   Insn 11: point = 184, n_alt = -2
   Insn 10: point = 185, n_alt = 0
   Insn 9: point = 185, n_alt = -2
   Insn 8: point = 186, n_alt = 2
   Insn 7: point = 187, n_alt = -2
   Insn 6: point = 189, n_alt = 3
   Insn 2: point = 190, n_alt = 5
 r87: [175..176]
 r88: [173..174]
 r89: [166..172]
 r90: [168..169]
 r91: [166..167]
 r92: [161..165]
 r93: [161..162]
 r94: [159..160]
 r95: [156..158]
 r96: [132..155]
 r97: [151..152]
 r98: [144..150]
 r99: [146..147]
 r100: [144..145]
 r101: [139..143]
 r102: [139..140]
 r103: [137..138]
 r104: [134..136]
 r105: [132..133]
 r106: [126..127]
 r107: [121..125]
 r108: [121..122]
 r109: [119..120]
 r110: [116..118]
 r111: [19..115]
 r112: [111..112]
 r113: [104..110]
 r114: [106..107]
 r115: [104..105]
 r116: [99..103]
 r117: [99..100]
 r118: [97..98]
 r119: [94..96]
 r120: [68..91]
 r121: [87..88]
 r122: [80..86]
 r123: [82..83]
 r124: [80..81]
 r125: [75..79]
 r126: [75..76]
 r127: [73..74]
 r128: [70..72]
 r129: [68..69]
 r130: [66..67]
 r131: [64..65]
 r132: [59..61]
 r133: [33..58]
 r134: [54..55]
 r135: [47..53]
 r136: [49..50]
 r137: [47..48]
 r138: [42..46]
 r139: [42..43]
 r140: [40..41]
 r141: [37..39]
 r142: [33..34]
 r143: [19..32]
 r144: [28..29]
 r145: [23..27]
 r146: [23..24]
 r147: [21..22]
 r148: [16..20]
 r149: [16..18]
 r150: [0..1]
 r151: [181..183]
 r152: [4..182]
 r153: [4..5]
 r154: [11..12]
 r155: [188..189]
 r156: [184..187]
 r157: [185..186]
 r160: [2..3]
 r161: [6..7]
 r162: [13..14]
 r163: [177..178]
 r164: [170..171]
 r165: [163..164]
 r166: [156..157]
 r167: [153..154]
 r168: [148..149]
 r169: [141..142]
 r170: [134..135]
 r171: [130..131]
 r172: [128..129]
 r173: [123..124]
 r174: [116..117]
 r175: [113..114]
 r176: [108..109]
 r177: [101..102]
 r178: [92..95]
 r179: [92..93]
 r180: [89..90]
 r181: [84..85]
 r182: [77..78]
 r183: [70..71]
 r184: [59..60]
 r185: [56..57]
 r186: [51..52]
 r187: [44..45]
 r188: [35..38]
 r189: [35..36]
 r190: [30..31]
 r191: [25..26]
 r192: [16..17]
 r193: [62..63]
Compressing live ranges: from 190 to 156 - 82%
Ranges after the compression:
 r87: [146..147]
 r88: [144..145]
 r89: [138..143]
 r90: [140..141]
 r91: [138..139]
 r92: [134..137]
 r93: [134..135]
 r94: [132..133]
 r95: [130..131]
 r96: [110..129]
 r97: [126..127]
 r98: [120..125]
 r99: [122..123]
 r100: [120..121]
 r101: [116..119]
 r102: [116..117]
 r103: [114..115]
 r104: [112..113]
 r105: [110..111]
 r106: [104..105]
 r107: [100..103]
 r108: [100..101]
 r109: [98..99]
 r110: [96..97]
 r111: [14..95]
 r112: [92..93]
 r113: [86..91]
 r114: [88..89]
 r115: [86..87]
 r116: [82..85]
 r117: [82..83]
 r118: [80..81]
 r119: [78..79]
 r120: [56..75]
 r121: [72..73]
 r122: [66..71]
 r123: [68..69]
 r124: [66..67]
 r125: [62..65]
 r126: [62..63]
 r127: [60..61]
 r128: [58..59]
 r129: [56..57]
 r130: [54..55]
 r131: [52..53]
 r132: [48..49]
 r133: [26..47]
 r134: [44..45]
 r135: [38..43]
 r136: [40..41]
 r137: [38..39]
 r138: [34..37]
 r139: [34..35]
 r140: [32..33]
 r141: [30..31]
 r142: [26..27]
 r143: [14..25]
 r144: [22..23]
 r145: [18..21]
 r146: [18..19]
 r147: [16..17]
 r148: [12..15]
 r149: [12..13]
 r150: [0..1]
 r151: [150..151]
 r152: [4..151]
 r153: [4..5]
 r154: [8..9]
 r155: [154..155]
 r156: [152..153]
 r157: [152..153]
 r160: [2..3]
 r161: [6..7]
 r162: [10..11]
 r163: [148..149]
 r164: [142..143]
 r165: [136..137]
 r166: [130..131]
 r167: [128..129]
 r168: [124..125]
 r169: [118..119]
 r170: [112..113]
 r171: [108..109]
 r172: [106..107]
 r173: [102..103]
 r174: [96..97]
 r175: [94..95]
 r176: [90..91]
 r177: [84..85]
 r178: [76..79]
 r179: [76..77]
 r180: [74..75]
 r181: [70..71]
 r182: [64..65]
 r183: [58..59]
 r184: [48..49]
 r185: [46..47]
 r186: [42..43]
 r187: [36..37]
 r188: [28..31]
 r189: [28..29]
 r190: [24..25]
 r191: [20..21]
 r192: [12..13]
 r193: [50..51]

********** Assignment #1: **********

	 Assigning to 193 (cl=SSE_REGS, orig=131, freq=3000, tfirst=193, tfreq=3000)...
	   Assign 23 to reload r193 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 48
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 68
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 61
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 85
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 99
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 110
changing reg in insn 110
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 117
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 135
changing reg in insn 133
changing reg in insn 135
changing reg in insn 19
changing reg in insn 20
changing reg in insn 23
changing reg in insn 25
changing reg in insn 24
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 37
changing reg in insn 38
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 11
changing reg in insn 8
changing reg in insn 9
changing reg in insn 18
changing reg in insn 19
changing reg in insn 28
changing reg in insn 29
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 73
changing reg in insn 74
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 90
changing reg in insn 92
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 101
changing reg in insn 104
changing reg in insn 105
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 118
changing reg in insn 119
changing reg in insn 122
changing reg in insn 124
changing reg in insn 123
changing reg in insn 124
changing reg in insn 126
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
deleting insn with uid = 7.
deleting insn with uid = 9.
deleting insn with uid = 107.
deleting insn with uid = 176.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


calpw

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2]
;;  ref usage 	r0={6d,4u} r1={66d,64u} r2={23d,21u} r4={3d,1u} r5={3d,2u} r6={1d,51u} r7={1d,15u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={44d,6u} r18={1d} r19={1d} r20={1d,1u,1e} r21={10d,8u} r22={4d,2u} r23={6d,4u} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 418{238d,179u,1e} in 131{130 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 155 156 157
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 pw+0 S8 A64])
        (reg:DI 5 di [ pw ])) "CALPW.f":1 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 8 2 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 pw+0 S8 A64])) "CALPW.f":82 85 {*movdi_internal}
     (nil))
(insn 8 6 10 2 (set (reg:DI 1 dx [157])
        (const_int 118524 [0x1cefc])) "CALPW.f":82 85 {*movdi_internal}
     (nil))
(insn 10 8 11 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "CALPW.f":82 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [156])) "CALPW.f":82 85 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7fb88a5f9900 __builtin_memset>) [0 __builtin_memset S1 A8])
            (const_int 0 [0]))) "CALPW.f":82 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 15 12 149 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
        (const_int 1 [0x1])) "CALPW.f":89 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              10 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 160
(code_label 149 15 16 3 7 (nil) [1 uses])
(note 16 149 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 38 [0x26]))) "CALPW.f":89 11 {*cmpsi_1}
     (nil))
(insn 18 17 19 3 (set (reg:QI 0 ax [160])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALPW.f":89 678 {*setcc_qi}
     (nil))
(insn 19 18 20 3 (set (reg:SI 0 ax [orig:150 _74 ] [150])
        (zero_extend:SI (reg:QI 0 ax [160]))) "CALPW.f":89 140 {*zero_extendqisi2}
     (nil))
(insn 20 19 21 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:150 _74 ] [150])
            (const_int 0 [0]))) "CALPW.f":89 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 21 20 22 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 166)
            (pc))) "CALPW.f":89 682 {*jcc}
     (nil)
 -> 166)
;;  succ:       12
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 151 152
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg:SI 1 dx [orig:151 _75 ] [151])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb88a7622d0 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "CALPW.f":90 86 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:SI 0 ax [orig:152 _76 ] [152])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fb88a7622d0 parallel>)
                    (const_int 12 [0xc]))) [1 parallel.jend+0 S4 A32])) "CALPW.f":90 86 {*movsi_internal}
     (nil))
(insn 25 24 143 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (reg:SI 1 dx [orig:151 _75 ] [151])) "CALPW.f":90 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              9 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  def 	 17 [flags] 153 161
(code_label 143 25 26 5 6 (nil) [1 uses])
(note 26 143 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:152 _76 ] [152]))) "CALPW.f":90 11 {*cmpsi_1}
     (nil))
(insn 28 27 29 5 (set (reg:QI 1 dx [161])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALPW.f":90 678 {*setcc_qi}
     (nil))
(insn 29 28 30 5 (set (reg:SI 1 dx [orig:153 _78 ] [153])
        (zero_extend:SI (reg:QI 1 dx [161]))) "CALPW.f":90 140 {*zero_extendqisi2}
     (nil))
(insn 30 29 31 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:153 _78 ] [153])
            (const_int 0 [0]))) "CALPW.f":90 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 31 30 32 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 169)
            (pc))) "CALPW.f":90 682 {*jcc}
     (nil)
 -> 169)
;;  succ:       13
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 137 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALPW.f":91 86 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              8 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 162
(code_label 137 33 34 7 5 (nil) [1 uses])
(note 34 137 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALPW.f":91 11 {*cmpsi_1}
     (nil))
(insn 36 35 37 7 (set (reg:QI 1 dx [162])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALPW.f":91 678 {*setcc_qi}
     (nil))
(insn 37 36 38 7 (set (reg:SI 1 dx [orig:154 _80 ] [154])
        (zero_extend:SI (reg:QI 1 dx [162]))) "CALPW.f":91 140 {*zero_extendqisi2}
     (nil))
(insn 38 37 39 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:154 _80 ] [154])
            (const_int 0 [0]))) "CALPW.f":91 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 39 38 40 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 172)
            (pc))) "CALPW.f":91 682 {*jcc}
     (nil)
 -> 172)
;;  succ:       14
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 14, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192
(note 40 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 8 (set (reg:SI 1 dx [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALPW.f":92 86 {*movsi_internal}
     (nil))
(insn 42 41 43 8 (parallel [
            (set (reg:SI 1 dx [orig:87 _1 ] [87])
                (plus:SI (reg:SI 1 dx [163])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 43 42 44 8 (set (reg:DI 1 dx [orig:88 _2 ] [88])
        (sign_extend:DI (reg:SI 1 dx [orig:87 _1 ] [87]))) "CALPW.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 8 (parallel [
            (set (reg:DI 2 cx [orig:89 _3 ] [89])
                (mult:DI (reg:DI 1 dx [orig:88 _2 ] [88])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 349 {*muldi3_1}
     (nil))
(insn 45 44 46 8 (set (reg:SI 1 dx [164])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":92 86 {*movsi_internal}
     (nil))
(insn 46 45 47 8 (set (reg:DI 1 dx [orig:90 _4 ] [90])
        (sign_extend:DI (reg:SI 1 dx [164]))) "CALPW.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 47 46 48 8 (parallel [
            (set (reg:DI 1 dx [orig:91 _5 ] [91])
                (mult:DI (reg:DI 1 dx [orig:90 _4 ] [90])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 349 {*muldi3_1}
     (nil))
(insn 48 47 49 8 (parallel [
            (set (reg:DI 2 cx [orig:92 _6 ] [92])
                (plus:DI (reg:DI 2 cx [orig:89 _3 ] [89])
                    (reg:DI 1 dx [orig:91 _5 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 222 {*adddi_1}
     (nil))
(insn 49 48 50 8 (set (reg:SI 1 dx [165])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":92 86 {*movsi_internal}
     (nil))
(insn 50 49 51 8 (set (reg:DI 1 dx [orig:93 _7 ] [93])
        (sign_extend:DI (reg:SI 1 dx [165]))) "CALPW.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 51 50 52 8 (parallel [
            (set (reg:DI 1 dx [orig:94 _8 ] [94])
                (plus:DI (reg:DI 1 dx [orig:93 _7 ] [93])
                    (reg:DI 2 cx [orig:92 _6 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 222 {*adddi_1}
     (nil))
(insn 52 51 53 8 (parallel [
            (set (reg:DI 2 cx [orig:95 _9 ] [95])
                (plus:DI (reg:DI 1 dx [orig:94 _8 ] [94])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 222 {*adddi_1}
     (nil))
(insn 53 52 54 8 (set (reg/f:DI 1 dx [166])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7fb88a756bd0 extra>)) "CALPW.f":92 85 {*movdi_internal}
     (nil))
(insn 54 53 55 8 (set (reg:SF 21 xmm0 [orig:96 _10 ] [96])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:95 _9 ] [95])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [166])) [2 extra.pint S4 A32])) "CALPW.f":92 131 {*movsf_internal}
     (nil))
(insn 55 54 56 8 (set (reg:SI 1 dx [167])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALPW.f":92 86 {*movsi_internal}
     (nil))
(insn 56 55 57 8 (set (reg:DI 1 dx [orig:97 _11 ] [97])
        (sign_extend:DI (reg:SI 1 dx [167]))) "CALPW.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 57 56 58 8 (parallel [
            (set (reg:DI 2 cx [orig:98 _12 ] [98])
                (mult:DI (reg:DI 1 dx [orig:97 _11 ] [97])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 349 {*muldi3_1}
     (nil))
(insn 58 57 59 8 (set (reg:SI 1 dx [168])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":92 86 {*movsi_internal}
     (nil))
(insn 59 58 60 8 (set (reg:DI 1 dx [orig:99 _13 ] [99])
        (sign_extend:DI (reg:SI 1 dx [168]))) "CALPW.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 60 59 61 8 (parallel [
            (set (reg:DI 1 dx [orig:100 _14 ] [100])
                (mult:DI (reg:DI 1 dx [orig:99 _13 ] [99])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 349 {*muldi3_1}
     (nil))
(insn 61 60 62 8 (parallel [
            (set (reg:DI 2 cx [orig:101 _15 ] [101])
                (plus:DI (reg:DI 2 cx [orig:98 _12 ] [98])
                    (reg:DI 1 dx [orig:100 _14 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 222 {*adddi_1}
     (nil))
(insn 62 61 63 8 (set (reg:SI 1 dx [169])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":92 86 {*movsi_internal}
     (nil))
(insn 63 62 64 8 (set (reg:DI 1 dx [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 1 dx [169]))) "CALPW.f":92 149 {*extendsidi2_rex64}
     (nil))
(insn 64 63 65 8 (parallel [
            (set (reg:DI 1 dx [orig:103 _17 ] [103])
                (plus:DI (reg:DI 1 dx [orig:102 _16 ] [102])
                    (reg:DI 2 cx [orig:101 _15 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 222 {*adddi_1}
     (nil))
(insn 65 64 66 8 (parallel [
            (set (reg:DI 2 cx [orig:104 _18 ] [104])
                (plus:DI (reg:DI 1 dx [orig:103 _17 ] [103])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":92 222 {*adddi_1}
     (nil))
(insn 66 65 67 8 (set (reg/f:DI 1 dx [170])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7fb88a756bd0 extra>)) "CALPW.f":92 85 {*movdi_internal}
     (nil))
(insn 67 66 68 8 (set (reg:SF 22 xmm1 [orig:105 _19 ] [105])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:104 _18 ] [104])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [170])) [2 extra.pint S4 A32])) "CALPW.f":92 131 {*movsf_internal}
     (nil))
(insn 68 67 69 8 (set (reg:SF 21 xmm0 [171])
        (minus:SF (reg:SF 21 xmm0 [orig:96 _10 ] [96])
            (reg:SF 22 xmm1 [orig:105 _19 ] [105]))) "CALPW.f":92 841 {*fop_sf_1}
     (nil))
(insn 69 68 70 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 dp+0 S4 A32])
        (reg:SF 21 xmm0 [171])) "CALPW.f":92 131 {*movsf_internal}
     (nil))
(insn 70 69 71 8 (set (reg:SI 1 dx [172])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 71 70 72 8 (set (reg:DI 1 dx [orig:106 _20 ] [106])
        (sign_extend:DI (reg:SI 1 dx [172]))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 72 71 73 8 (parallel [
            (set (reg:DI 2 cx [orig:107 _21 ] [107])
                (mult:DI (reg:DI 1 dx [orig:106 _20 ] [106])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (nil))
(insn 73 72 74 8 (set (reg:SI 1 dx [173])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 74 73 75 8 (set (reg:DI 1 dx [orig:108 _22 ] [108])
        (sign_extend:DI (reg:SI 1 dx [173]))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 75 74 76 8 (parallel [
            (set (reg:DI 1 dx [orig:109 _23 ] [109])
                (plus:DI (reg:DI 1 dx [orig:108 _22 ] [108])
                    (reg:DI 2 cx [orig:107 _21 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 76 75 77 8 (parallel [
            (set (reg:DI 2 cx [orig:110 _24 ] [110])
                (plus:DI (reg:DI 1 dx [orig:109 _23 ] [109])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 77 76 78 8 (set (reg/f:DI 1 dx [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 pw+0 S8 A64])) "CALPW.f":93 85 {*movdi_internal}
     (nil))
(insn 78 77 79 8 (set (reg:SF 22 xmm1 [orig:111 _25 ] [111])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:110 _24 ] [110])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [174])) [2 *pw_71(D) S4 A32])) "CALPW.f":93 131 {*movsf_internal}
     (nil))
(insn 79 78 80 8 (set (reg:SI 1 dx [175])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 80 79 81 8 (set (reg:DI 1 dx [orig:112 _26 ] [112])
        (sign_extend:DI (reg:SI 1 dx [175]))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 8 (parallel [
            (set (reg:DI 2 cx [orig:113 _27 ] [113])
                (mult:DI (reg:DI 1 dx [orig:112 _26 ] [112])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (nil))
(insn 82 81 83 8 (set (reg:SI 1 dx [176])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 83 82 84 8 (set (reg:DI 1 dx [orig:114 _28 ] [114])
        (sign_extend:DI (reg:SI 1 dx [176]))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 84 83 85 8 (parallel [
            (set (reg:DI 1 dx [orig:115 _29 ] [115])
                (mult:DI (reg:DI 1 dx [orig:114 _28 ] [114])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (nil))
(insn 85 84 86 8 (parallel [
            (set (reg:DI 2 cx [orig:116 _30 ] [116])
                (plus:DI (reg:DI 2 cx [orig:113 _27 ] [113])
                    (reg:DI 1 dx [orig:115 _29 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 86 85 87 8 (set (reg:SI 1 dx [177])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 87 86 88 8 (set (reg:DI 1 dx [orig:117 _31 ] [117])
        (sign_extend:DI (reg:SI 1 dx [177]))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 8 (parallel [
            (set (reg:DI 1 dx [orig:118 _32 ] [118])
                (plus:DI (reg:DI 1 dx [orig:117 _31 ] [117])
                    (reg:DI 2 cx [orig:116 _30 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 89 88 90 8 (parallel [
            (set (reg:DI 2 cx [orig:119 _33 ] [119])
                (plus:DI (reg:DI 1 dx [orig:118 _32 ] [118])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 90 89 91 8 (set (reg/f:DI 1 dx [178])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fb88a762b40 vrbls>)) "CALPW.f":93 85 {*movdi_internal}
     (nil))
(insn 91 90 92 8 (parallel [
            (set (reg:DI 2 cx [179])
                (plus:DI (reg:DI 2 cx [orig:119 _33 ] [119])
                    (const_int 3466827 [0x34e64b])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 92 91 93 8 (set (reg:SF 23 xmm2 [orig:120 _34 ] [120])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [179])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [178])) [2 vrbls.q S4 A32])) "CALPW.f":93 131 {*movsf_internal}
     (nil))
(insn 93 92 94 8 (set (reg:SI 1 dx [180])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 94 93 95 8 (set (reg:DI 1 dx [orig:121 _35 ] [121])
        (sign_extend:DI (reg:SI 1 dx [180]))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 95 94 96 8 (parallel [
            (set (reg:DI 2 cx [orig:122 _36 ] [122])
                (mult:DI (reg:DI 1 dx [orig:121 _35 ] [121])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (nil))
(insn 96 95 97 8 (set (reg:SI 1 dx [181])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 97 96 98 8 (set (reg:DI 1 dx [orig:123 _37 ] [123])
        (sign_extend:DI (reg:SI 1 dx [181]))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 8 (parallel [
            (set (reg:DI 1 dx [orig:124 _38 ] [124])
                (mult:DI (reg:DI 1 dx [orig:123 _37 ] [123])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (nil))
(insn 99 98 100 8 (parallel [
            (set (reg:DI 2 cx [orig:125 _39 ] [125])
                (plus:DI (reg:DI 2 cx [orig:122 _36 ] [122])
                    (reg:DI 1 dx [orig:124 _38 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 100 99 101 8 (set (reg:SI 1 dx [182])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 101 100 102 8 (set (reg:DI 1 dx [orig:126 _40 ] [126])
        (sign_extend:DI (reg:SI 1 dx [182]))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 8 (parallel [
            (set (reg:DI 1 dx [orig:127 _41 ] [127])
                (plus:DI (reg:DI 1 dx [orig:126 _40 ] [126])
                    (reg:DI 2 cx [orig:125 _39 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 103 102 104 8 (parallel [
            (set (reg:DI 2 cx [orig:128 _42 ] [128])
                (plus:DI (reg:DI 1 dx [orig:127 _41 ] [127])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 104 103 105 8 (set (reg/f:DI 1 dx [183])
        (symbol_ref:DI ("cldwtr_") [flags 0x202]  <var_decl 0x7fb8917bfab0 cldwtr>)) "CALPW.f":93 85 {*movdi_internal}
     (nil))
(insn 105 104 106 8 (set (reg:SF 21 xmm0 [orig:129 _43 ] [129])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:128 _42 ] [128])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [183])) [2 cldwtr.cwm S4 A32])) "CALPW.f":93 131 {*movsf_internal}
     (nil))
(insn 106 105 175 8 (set (reg:SF 21 xmm0 [orig:130 _44 ] [130])
        (plus:SF (reg:SF 21 xmm0 [orig:129 _43 ] [129])
            (reg:SF 23 xmm2 [orig:120 _34 ] [120]))) "CALPW.f":93 838 {*fop_sf_comm}
     (nil))
(insn 175 106 108 8 (set (reg:SF 23 xmm2 [orig:131 _45 ] [131])
        (reg:SF 21 xmm0 [orig:131 _45 ] [131])) "CALPW.f":93 131 {*movsf_internal}
     (nil))
(insn 108 175 109 8 (set (reg:SF 23 xmm2 [orig:131 _45 ] [131])
        (mult:SF (reg:SF 23 xmm2 [orig:131 _45 ] [131])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 dp+0 S4 A32]))) "CALPW.f":93 838 {*fop_sf_comm}
     (nil))
(insn 109 108 110 8 (set (reg:SF 21 xmm0 [184])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALPW.f":93 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0204081237316131591796875e-1 [0x0.d0fac6p-3])
        (nil)))
(insn 110 109 111 8 (set (reg:SF 23 xmm2 [orig:133 _47 ] [133])
        (mult:SF (reg:SF 23 xmm2 [orig:132 _46 ] [132])
            (reg:SF 21 xmm0 [184]))) "CALPW.f":93 838 {*fop_sf_comm}
     (nil))
(insn 111 110 112 8 (set (reg:SI 1 dx [185])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 112 111 113 8 (set (reg:DI 1 dx [orig:134 _48 ] [134])
        (sign_extend:DI (reg:SI 1 dx [185]))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 8 (parallel [
            (set (reg:DI 2 cx [orig:135 _49 ] [135])
                (mult:DI (reg:DI 1 dx [orig:134 _48 ] [134])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (nil))
(insn 114 113 115 8 (set (reg:SI 1 dx [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 115 114 116 8 (set (reg:DI 1 dx [orig:136 _50 ] [136])
        (sign_extend:DI (reg:SI 1 dx [186]))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 116 115 117 8 (parallel [
            (set (reg:DI 1 dx [orig:137 _51 ] [137])
                (mult:DI (reg:DI 1 dx [orig:136 _50 ] [136])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (nil))
(insn 117 116 118 8 (parallel [
            (set (reg:DI 2 cx [orig:138 _52 ] [138])
                (plus:DI (reg:DI 2 cx [orig:135 _49 ] [135])
                    (reg:DI 1 dx [orig:137 _51 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 118 117 119 8 (set (reg:SI 1 dx [187])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 119 118 120 8 (set (reg:DI 1 dx [orig:139 _53 ] [139])
        (sign_extend:DI (reg:SI 1 dx [187]))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 120 119 121 8 (parallel [
            (set (reg:DI 1 dx [orig:140 _54 ] [140])
                (plus:DI (reg:DI 1 dx [orig:139 _53 ] [139])
                    (reg:DI 2 cx [orig:138 _52 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 121 120 122 8 (parallel [
            (set (reg:DI 2 cx [orig:141 _55 ] [141])
                (plus:DI (reg:DI 1 dx [orig:140 _54 ] [140])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 122 121 123 8 (set (reg/f:DI 1 dx [188])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fb88a75ee10 masks>)) "CALPW.f":93 85 {*movdi_internal}
     (nil))
(insn 123 122 124 8 (parallel [
            (set (reg:DI 2 cx [189])
                (plus:DI (reg:DI 2 cx [orig:141 _55 ] [141])
                    (const_int 148155 [0x242bb])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 124 123 125 8 (set (reg:SF 21 xmm0 [orig:142 _56 ] [142])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [189])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [188])) [2 masks.htm S4 A32])) "CALPW.f":93 131 {*movsf_internal}
     (nil))
(insn 125 124 126 8 (set (reg:SF 21 xmm0 [orig:143 _57 ] [143])
        (mult:SF (reg:SF 21 xmm0 [orig:142 _56 ] [142])
            (reg:SF 23 xmm2 [orig:133 _47 ] [133]))) "CALPW.f":93 838 {*fop_sf_comm}
     (nil))
(insn 126 125 127 8 (set (reg:SI 1 dx [190])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 127 126 128 8 (set (reg:DI 1 dx [orig:144 _58 ] [144])
        (sign_extend:DI (reg:SI 1 dx [190]))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 128 127 129 8 (parallel [
            (set (reg:DI 2 cx [orig:145 _59 ] [145])
                (mult:DI (reg:DI 1 dx [orig:144 _58 ] [144])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 349 {*muldi3_1}
     (nil))
(insn 129 128 130 8 (set (reg:SI 1 dx [191])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "CALPW.f":93 86 {*movsi_internal}
     (nil))
(insn 130 129 131 8 (set (reg:DI 1 dx [orig:146 _60 ] [146])
        (sign_extend:DI (reg:SI 1 dx [191]))) "CALPW.f":93 149 {*extendsidi2_rex64}
     (nil))
(insn 131 130 132 8 (parallel [
            (set (reg:DI 1 dx [orig:147 _61 ] [147])
                (plus:DI (reg:DI 1 dx [orig:146 _60 ] [146])
                    (reg:DI 2 cx [orig:145 _59 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 132 131 133 8 (parallel [
            (set (reg:DI 2 cx [orig:148 _62 ] [148])
                (plus:DI (reg:DI 1 dx [orig:147 _61 ] [147])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":93 222 {*adddi_1}
     (nil))
(insn 133 132 134 8 (set (reg:SF 21 xmm0 [orig:149 _63 ] [149])
        (plus:SF (reg:SF 21 xmm0 [orig:143 _57 ] [143])
            (reg:SF 22 xmm1 [orig:111 _25 ] [111]))) "CALPW.f":93 838 {*fop_sf_comm}
     (nil))
(insn 134 133 135 8 (set (reg/f:DI 1 dx [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 pw+0 S8 A64])) "CALPW.f":93 85 {*movdi_internal}
     (nil))
(insn 135 134 136 8 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:148 _62 ] [148])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [192])) [2 *pw_71(D) S4 A32])
        (reg:SF 21 xmm0 [orig:149 _63 ] [149])) "CALPW.f":93 131 {*movsf_internal}
     (nil))
(insn 136 135 159 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":91 221 {*addsi_1}
     (nil))
(jump_insn 159 136 160 8 (set (pc)
        (label_ref 137)) "CALPW.f":91 683 {jump}
     (nil)
 -> 137)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

(barrier 160 159 172)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 8, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 172 160 171 14 11 (nil) [1 uses])
(note 171 172 173 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 173 171 140 14 (const_int 0 [0]) "CALPW.f":93 718 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

;; basic block 9, loop depth 0, maybe hot
;;  prev block 14, next block 13, flags: (RTL, MODIFIED)
;;  pred:       14 [always]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 140 173 141 9 4 (nil) [0 uses])
(note 141 140 142 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 161 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":90 221 {*addsi_1}
     (nil))
(jump_insn 161 142 162 9 (set (pc)
        (label_ref 143)) "CALPW.f":90 683 {jump}
     (nil)
 -> 143)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152

(barrier 162 161 169)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 9, next block 10, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 169 162 168 13 10 (nil) [1 uses])
(note 168 169 170 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 170 168 146 13 (const_int 0 [0]) "CALPW.f":91 718 {nop}
     (nil))
;;  succ:       10 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 13, next block 12, flags: (RTL, MODIFIED)
;;  pred:       13 [always]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 146 170 147 10 3 (nil) [0 uses])
(note 147 146 148 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 163 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALPW.f":89 221 {*addsi_1}
     (nil))
(jump_insn 163 148 164 10 (set (pc)
        (label_ref 149)) "CALPW.f":89 683 {jump}
     (nil)
 -> 149)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 164 163 166)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 10, next block 11, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 166 164 165 12 9 (nil) [1 uses])
(note 165 166 167 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 167 165 152 12 (const_int 0 [0]) "CALPW.f":90 718 {nop}
     (nil))
;;  succ:       11 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 12, next block 1, flags: (RTL, MODIFIED)
;;  pred:       12 [always]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 152 167 153 11 2 (nil) [0 uses])
(note 153 152 158 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 158 153 174 11 (const_int 0 [0]) "CALPW.f":104 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 174 158 0 NOTE_INSN_DELETED)
