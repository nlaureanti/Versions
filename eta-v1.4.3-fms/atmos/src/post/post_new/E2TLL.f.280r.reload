
;; Function e2tll (e2tll_, funcdef_no=0, decl_uid=3772, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 9:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 10:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 11
	 Choosing alt 1 in insn 11:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 15:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 16:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 17:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 1 in insn 18:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 22:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 32:  (0) r  (1) r  (2) le {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Small class reload: reject+=3
          alt=0,overall=21,losers=2,rld_nregs=2
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 33:  (0) rm  (1) 0 {ashrsi3_cvt}
      Creating newreg=194 from oldreg=152, assigning class GENERAL_REGS to r194
   33: {r194:SI=r194:SI>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  202: r194:SI=r93:SI
    Inserting insn reload after:
  203: r152:SI=r194:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=195 from oldreg=155, assigning class GENERAL_REGS to r195
   37: {r195:SI=r195:SI-r153:SI;clobber flags:CC;}
      REG_DEAD r155:SI
      REG_DEAD r153:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  204: r195:SI=r155:SI
    Inserting insn reload after:
  205: r156:SI=r195:SI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) v  (1) r {*floatsisf2_mixed}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 40:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 41
	 Choosing alt 1 in insn 41:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 42:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=196 from oldreg=97, assigning class SSE_REGS to r196
   42: r196:SF=r196:SF+[frame:DI-0x10]
      REG_DEAD r97:SF
    Inserting insn reload before:
  206: r196:SF=r97:SF
    Inserting insn reload after:
  207: r98:SF=r196:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 43:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 45:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=197 from oldreg=98, assigning class SSE_REGS to r197
   45: r197:SF=r197:SF-r100:SF
      REG_DEAD r100:SF
      REG_DEAD r98:SF
    Inserting insn reload before:
  208: r197:SF=r98:SF
    Inserting insn reload after:
  209: r157:SF=r197:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 46:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) v  (1) r {*floatsisf2_mixed}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 50:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 51
	 Choosing alt 1 in insn 51:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 52:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 1 in insn 53:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 54:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) r {*cmpsi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 63:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 65:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 66
	 Choosing alt 1 in insn 66:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 67:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 70:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 73
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 74:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 76:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 77:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 80:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 83
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 84:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 86:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 87:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 88:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 94:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
            1 Costly set: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =*d  (1) *a {ashrsi3_cvt}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 112:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) v  (1) r {*floatsisf2_mixed}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 116:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 117
	 Choosing alt 1 in insn 117:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 118:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=198 from oldreg=120, assigning class SSE_REGS to r198
  118: r198:SF=r198:SF+[frame:DI-0x10]
      REG_DEAD r120:SF
    Inserting insn reload before:
  210: r198:SF=r120:SF
    Inserting insn reload after:
  211: r121:SF=r198:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 119:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 121:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=199 from oldreg=121, assigning class SSE_REGS to r199
  121: r199:SF=r199:SF-r123:SF
      REG_DEAD r123:SF
      REG_DEAD r121:SF
    Inserting insn reload before:
  212: r199:SF=r121:SF
    Inserting insn reload after:
  213: r179:SF=r199:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 122:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) v  (1) r {*floatsisf2_mixed}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 126:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 1 in insn 127:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 128:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 129
	 Choosing alt 1 in insn 129:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 130:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) r {*cmpsi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 139:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 141:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 142
	 Choosing alt 1 in insn 142:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 143:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 146:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 149
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 150:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 152:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 153:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 156:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 159
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 160:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 161:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 162:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 163:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 164:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 170:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 16
EBB 7
EBB 15
EBB 8
EBB 9 10
EBB 11 12
EBB 18
EBB 13
EBB 17
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
   Insn 180: point = 0, n_alt = -1
  BB 17
   Insn 197: point = 0, n_alt = -1
  BB 9
   Insn 106: point = 0, n_alt = -1
   Insn 105: point = 0, n_alt = 0
   Insn 104: point = 1, n_alt = 0
   Insn 103: point = 3, n_alt = 0
   Insn 102: point = 4, n_alt = 0
  BB 13
   Insn 187: point = 4, n_alt = -1
   Insn 170: point = 4, n_alt = 1
  BB 18
   Insn 200: point = 4, n_alt = -1
  BB 11
   Insn 137: point = 4, n_alt = -1
   Insn 136: point = 4, n_alt = 0
   Insn 135: point = 5, n_alt = 0
   Insn 134: point = 7, n_alt = 0
   Insn 133: point = 8, n_alt = 0
  BB 12
   Insn 185: point = 8, n_alt = -1
   Insn 164: point = 8, n_alt = 1
   Insn 163: point = 8, n_alt = 8
   Insn 162: point = 9, n_alt = 7
   Insn 161: point = 10, n_alt = 3
   Insn 160: point = 11, n_alt = 3
   Insn 159: point = 13, n_alt = 0
   Insn 158: point = 15, n_alt = 0
   Insn 157: point = 17, n_alt = 0
   Insn 156: point = 18, n_alt = 0
   Insn 155: point = 20, n_alt = 0
   Insn 154: point = 22, n_alt = 0
   Insn 153: point = 23, n_alt = 8
   Insn 152: point = 24, n_alt = 7
   Insn 151: point = 25, n_alt = 3
   Insn 150: point = 26, n_alt = 3
   Insn 149: point = 28, n_alt = 0
   Insn 148: point = 30, n_alt = 0
   Insn 147: point = 32, n_alt = 0
   Insn 146: point = 33, n_alt = 0
   Insn 145: point = 35, n_alt = 0
   Insn 144: point = 37, n_alt = 0
   Insn 143: point = 38, n_alt = 8
   Insn 142: point = 39, n_alt = 1
   Insn 141: point = 41, n_alt = 7
   Insn 140: point = 42, n_alt = 1
   Insn 139: point = 44, n_alt = 7
  BB 10
   Insn 131: point = 45, n_alt = 1
   Insn 130: point = 45, n_alt = 8
   Insn 129: point = 46, n_alt = 1
   Insn 128: point = 48, n_alt = 7
   Insn 127: point = 49, n_alt = 1
   Insn 126: point = 51, n_alt = 7
   Insn 125: point = 52, n_alt = 1
   Insn 124: point = 54, n_alt = 0
   Insn 123: point = 56, n_alt = 0
   Insn 122: point = 57, n_alt = 8
   Insn 213: point = 58, n_alt = -2
	Hard reg 21 is preferable by r199 with profit 1000
   Insn 121: point = 60, n_alt = 2
   Insn 212: point = 61, n_alt = -2
	Hard reg 21 is preferable by r199 with profit 1000
	Hard reg 22 is preferable by r199 with profit 1000
   Insn 120: point = 63, n_alt = 1
   Insn 119: point = 65, n_alt = 7
   Insn 211: point = 66, n_alt = -2
	Hard reg 22 is preferable by r198 with profit 1000
   Insn 118: point = 68, n_alt = 1
   Insn 210: point = 68, n_alt = -2
	Hard reg 22 is preferable by r198 with profit 1000
	Hard reg 21 is preferable by r198 with profit 1000
   Insn 117: point = 70, n_alt = 1
   Insn 116: point = 72, n_alt = 7
   Insn 115: point = 73, n_alt = 1
   Insn 114: point = 75, n_alt = -2
   Insn 113: point = 77, n_alt = 0
   Insn 112: point = 79, n_alt = 0
   Insn 111: point = 81, n_alt = 0
   Insn 110: point = 83, n_alt = 0
   Insn 109: point = 85, n_alt = 0
   Insn 108: point = 86, n_alt = 0
  BB 8
   Insn 100: point = 87, n_alt = 1
  BB 15
   Insn 191: point = 87, n_alt = -1
  BB 3
   Insn 29: point = 87, n_alt = -1
   Insn 28: point = 87, n_alt = 0
   Insn 27: point = 88, n_alt = 0
   Insn 26: point = 90, n_alt = 0
   Insn 25: point = 91, n_alt = 0
  BB 7
   Insn 183: point = 91, n_alt = -1
   Insn 94: point = 91, n_alt = 1
  BB 16
   Insn 194: point = 91, n_alt = -1
  BB 5
   Insn 61: point = 91, n_alt = -1
   Insn 60: point = 91, n_alt = 0
   Insn 59: point = 92, n_alt = 0
   Insn 58: point = 94, n_alt = 0
   Insn 57: point = 95, n_alt = 0
  BB 6
   Insn 181: point = 95, n_alt = -1
   Insn 88: point = 95, n_alt = 1
   Insn 87: point = 95, n_alt = 8
   Insn 86: point = 96, n_alt = 7
   Insn 85: point = 97, n_alt = 3
   Insn 84: point = 98, n_alt = 3
   Insn 83: point = 100, n_alt = 0
   Insn 82: point = 102, n_alt = 0
   Insn 81: point = 104, n_alt = 0
   Insn 80: point = 105, n_alt = 0
   Insn 79: point = 107, n_alt = 0
   Insn 78: point = 109, n_alt = 0
   Insn 77: point = 110, n_alt = 8
   Insn 76: point = 111, n_alt = 7
   Insn 75: point = 112, n_alt = 3
   Insn 74: point = 113, n_alt = 3
   Insn 73: point = 115, n_alt = 0
   Insn 72: point = 117, n_alt = 0
   Insn 71: point = 119, n_alt = 0
   Insn 70: point = 120, n_alt = 0
   Insn 69: point = 122, n_alt = 0
   Insn 68: point = 124, n_alt = 0
   Insn 67: point = 125, n_alt = 8
   Insn 66: point = 126, n_alt = 1
   Insn 65: point = 128, n_alt = 7
   Insn 64: point = 129, n_alt = 1
   Insn 63: point = 131, n_alt = 7
  BB 4
   Insn 55: point = 132, n_alt = 1
   Insn 54: point = 132, n_alt = 8
   Insn 53: point = 133, n_alt = 1
   Insn 52: point = 135, n_alt = 7
   Insn 51: point = 136, n_alt = 1
   Insn 50: point = 138, n_alt = 7
   Insn 49: point = 139, n_alt = 1
   Insn 48: point = 141, n_alt = 0
   Insn 47: point = 143, n_alt = 0
   Insn 46: point = 144, n_alt = 8
   Insn 209: point = 145, n_alt = -2
	Hard reg 21 is preferable by r197 with profit 1000
   Insn 45: point = 147, n_alt = 2
   Insn 208: point = 148, n_alt = -2
	Hard reg 21 is preferable by r197 with profit 1000
	Hard reg 22 is preferable by r197 with profit 1000
   Insn 44: point = 150, n_alt = 1
   Insn 43: point = 152, n_alt = 7
   Insn 207: point = 153, n_alt = -2
	Hard reg 22 is preferable by r196 with profit 1000
   Insn 42: point = 155, n_alt = 1
   Insn 206: point = 155, n_alt = -2
	Hard reg 22 is preferable by r196 with profit 1000
	Hard reg 21 is preferable by r196 with profit 1000
   Insn 41: point = 157, n_alt = 1
   Insn 40: point = 159, n_alt = 7
   Insn 39: point = 160, n_alt = 1
   Insn 38: point = 162, n_alt = -2
   Insn 205: point = 164, n_alt = -2
	Hard reg 0 is preferable by r195 with profit 1000
   Insn 37: point = 166, n_alt = 0
   Insn 204: point = 167, n_alt = -2
	Hard reg 0 is preferable by r195 with profit 1000
	Hard reg 1 is preferable by r195 with profit 1000
   Insn 36: point = 169, n_alt = 0
   Insn 35: point = 171, n_alt = 0
   Insn 34: point = 173, n_alt = 0
   Insn 203: point = 175, n_alt = -2
	Hard reg 0 is preferable by r194 with profit 1000
   Insn 33: point = 177, n_alt = 1
   Insn 202: point = 177, n_alt = -2
   Insn 32: point = 178, n_alt = 3
   Insn 31: point = 180, n_alt = 0
  BB 2
   Insn 23: point = 181, n_alt = 1
   Insn 22: point = 181, n_alt = 8
   Insn 21: point = 182, n_alt = 1
   Insn 20: point = 184, n_alt = 2
   Insn 19: point = 185, n_alt = -2
   Insn 18: point = 187, n_alt = 1
   Insn 17: point = 189, n_alt = 7
   Insn 16: point = 190, n_alt = 7
   Insn 15: point = 191, n_alt = 8
   Insn 14: point = 192, n_alt = 1
   Insn 13: point = 194, n_alt = 2
   Insn 12: point = 195, n_alt = -2
   Insn 11: point = 197, n_alt = 1
   Insn 10: point = 199, n_alt = 7
   Insn 9: point = 200, n_alt = 7
   Insn 5: point = 201, n_alt = 5
   Insn 4: point = 201, n_alt = 5
   Insn 3: point = 201, n_alt = 5
   Insn 2: point = 201, n_alt = 5
 r87: [198..200]
 r88: [196..197]
 r89: [193..195]
 r90: [188..190]
 r91: [186..187]
 r92: [183..185]
 r93: [172..178]
 r94: [161..162]
 r95: [158..160]
 r96: [158..159]
 r97: [156..157]
 r98: [149..153]
 r99: [151..152]
 r100: [147..150]
 r101: [140..141]
 r102: [137..139]
 r103: [137..138]
 r104: [134..136]
 r105: [130..131]
 r106: [127..129]
 r107: [121..122]
 r108: [116..120]
 r109: [116..117]
 r110: [114..115]
 r111: [110..113]
 r112: [106..107]
 r113: [101..105]
 r114: [101..102]
 r115: [99..100]
 r116: [95..98]
 r117: [74..75]
 r118: [71..73]
 r119: [71..72]
 r120: [69..70]
 r121: [62..66]
 r122: [64..65]
 r123: [60..63]
 r124: [53..54]
 r125: [50..52]
 r126: [50..51]
 r127: [47..49]
 r128: [43..44]
 r129: [40..42]
 r130: [34..35]
 r131: [29..33]
 r132: [29..30]
 r133: [27..28]
 r134: [23..26]
 r135: [19..20]
 r136: [14..18]
 r137: [14..15]
 r138: [12..13]
 r139: [8..11]
 r140: [87..88]
 r141: [91..92]
 r142: [0..1]
 r143: [4..5]
 r144: [198..199]
 r145: [191..192]
 r146: [193..194]
 r147: [188..189]
 r148: [181..182]
 r149: [183..184]
 r150: [89..90]
 r151: [179..180]
 r152: [174..175]
 r153: [166..173]
 r154: [170..171]
 r155: [168..169]
 r156: [163..164]
 r157: [144..145]
 r158: [142..143]
 r159: [132..133]
 r160: [134..135]
 r161: [93..94]
 r162: [125..126]
 r163: [127..128]
 r164: [123..124]
 r165: [118..119]
 r166: [110..112]
 r167: [110..111]
 r168: [108..109]
 r169: [103..104]
 r170: [95..97]
 r171: [95..96]
 r172: [2..3]
 r173: [82..86]
 r174: [84..85]
 r175: [78..83]
 r176: [80..81]
 r177: [78..79]
 r178: [76..77]
 r179: [57..58]
 r180: [55..56]
 r181: [45..46]
 r182: [47..48]
 r183: [6..7]
 r184: [38..39]
 r185: [40..41]
 r186: [36..37]
 r187: [31..32]
 r188: [23..25]
 r189: [23..24]
 r190: [21..22]
 r191: [16..17]
 r192: [8..10]
 r193: [8..9]
 r194: [176..177]
 r195: [165..167]
 r196: [154..155]
 r197: [146..148]
 r198: [67..68]
 r199: [59..61]
Compressing live ranges: from 201 to 170 - 84%
Ranges after the compression:
 r87: [168..169]
 r88: [166..167]
 r89: [164..165]
 r90: [160..161]
 r91: [158..159]
 r92: [156..157]
 r93: [146..151]
 r94: [136..137]
 r95: [134..135]
 r96: [134..135]
 r97: [132..133]
 r98: [126..129]
 r99: [128..129]
 r100: [124..127]
 r101: [118..119]
 r102: [116..117]
 r103: [116..117]
 r104: [114..115]
 r105: [110..111]
 r106: [108..109]
 r107: [102..103]
 r108: [98..101]
 r109: [98..99]
 r110: [96..97]
 r111: [94..95]
 r112: [90..91]
 r113: [86..89]
 r114: [86..87]
 r115: [84..85]
 r116: [82..83]
 r117: [62..63]
 r118: [60..61]
 r119: [60..61]
 r120: [58..59]
 r121: [52..55]
 r122: [54..55]
 r123: [50..53]
 r124: [44..45]
 r125: [42..43]
 r126: [42..43]
 r127: [40..41]
 r128: [36..37]
 r129: [34..35]
 r130: [28..29]
 r131: [24..27]
 r132: [24..25]
 r133: [22..23]
 r134: [20..21]
 r135: [16..17]
 r136: [12..15]
 r137: [12..13]
 r138: [10..11]
 r139: [8..9]
 r140: [74..75]
 r141: [78..79]
 r142: [0..1]
 r143: [4..5]
 r144: [168..169]
 r145: [162..163]
 r146: [164..165]
 r147: [160..161]
 r148: [154..155]
 r149: [156..157]
 r150: [76..77]
 r151: [152..153]
 r152: [148..149]
 r153: [140..147]
 r154: [144..145]
 r155: [142..143]
 r156: [138..139]
 r157: [122..123]
 r158: [120..121]
 r159: [112..113]
 r160: [114..115]
 r161: [80..81]
 r162: [106..107]
 r163: [108..109]
 r164: [104..105]
 r165: [100..101]
 r166: [94..95]
 r167: [94..95]
 r168: [92..93]
 r169: [88..89]
 r170: [82..83]
 r171: [82..83]
 r172: [2..3]
 r173: [70..73]
 r174: [72..73]
 r175: [66..71]
 r176: [68..69]
 r177: [66..67]
 r178: [64..65]
 r179: [48..49]
 r180: [46..47]
 r181: [38..39]
 r182: [40..41]
 r183: [6..7]
 r184: [32..33]
 r185: [34..35]
 r186: [30..31]
 r187: [26..27]
 r188: [20..21]
 r189: [20..21]
 r190: [18..19]
 r191: [14..15]
 r192: [8..9]
 r193: [8..9]
 r194: [150..151]
 r195: [140..141]
 r196: [130..131]
 r197: [124..125]
 r198: [56..57]
 r199: [50..51]

********** Assignment #1: **********

	 Assigning to 194 (cl=GENERAL_REGS, orig=152, freq=3000, tfirst=194, tfreq=3000)...
	   Assign 0 to reload r194 (freq=3000)
	 Assigning to 195 (cl=GENERAL_REGS, orig=155, freq=3000, tfirst=195, tfreq=3000)...
	   Assign 1 to reload r195 (freq=3000)
	 Assigning to 196 (cl=SSE_REGS, orig=97, freq=3000, tfirst=196, tfreq=3000)...
	   Assign 22 to reload r196 (freq=3000)
	 Assigning to 197 (cl=SSE_REGS, orig=98, freq=3000, tfirst=197, tfreq=3000)...
	   Assign 22 to reload r197 (freq=3000)
	 Assigning to 198 (cl=SSE_REGS, orig=120, freq=3000, tfirst=198, tfreq=3000)...
	   Assign 22 to reload r198 (freq=3000)
	 Assigning to 199 (cl=SSE_REGS, orig=121, freq=3000, tfirst=199, tfreq=3000)...
	   Assign 22 to reload r199 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 14
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 21
changing reg in insn 21
changing reg in insn 32
changing reg in insn 35
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 64
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 87
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 140
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 153
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 163
changing reg in insn 27
changing reg in insn 28
changing reg in insn 59
changing reg in insn 60
changing reg in insn 104
changing reg in insn 105
changing reg in insn 135
changing reg in insn 136
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 20
changing reg in insn 21
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 37
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 38
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 53
changing reg in insn 54
changing reg in insn 52
changing reg in insn 58
changing reg in insn 59
changing reg in insn 66
changing reg in insn 67
changing reg in insn 65
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 75
changing reg in insn 77
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 82
changing reg in insn 85
changing reg in insn 87
changing reg in insn 86
changing reg in insn 87
changing reg in insn 103
changing reg in insn 104
changing reg in insn 108
changing reg in insn 111
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 113
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 129
changing reg in insn 130
changing reg in insn 128
changing reg in insn 134
changing reg in insn 135
changing reg in insn 142
changing reg in insn 143
changing reg in insn 141
changing reg in insn 144
changing reg in insn 145
changing reg in insn 147
changing reg in insn 148
changing reg in insn 151
changing reg in insn 153
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 157
changing reg in insn 158
changing reg in insn 161
changing reg in insn 163
changing reg in insn 162
changing reg in insn 163
deleting insn with uid = 203.
deleting insn with uid = 204.
deleting insn with uid = 38.
deleting insn with uid = 207.
deleting insn with uid = 208.
deleting insn with uid = 114.
deleting insn with uid = 211.
deleting insn with uid = 212.
starting the processing of deferred insns
ending the processing of deferred insns


e2tll

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 21 [xmm0] 22 [xmm1]
;;  ref usage 	r0={46d,47u} r1={15d,17u} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,72u} r7={1d,18u} r17={39d,8u} r20={1d,1u,3e} r21={35d,38u} r22={19d,18u,2e} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 395{168d,222u,5e} in 156{156 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 144 145 146 147 148 149
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 htlat+0 S8 A64])
        (reg:DI 5 di [ htlat ])) "E2TLL.f":1 85 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 htlon+0 S8 A64])
        (reg:DI 4 si [ htlon ])) "E2TLL.f":1 85 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 vtlat+0 S8 A64])
        (reg:DI 1 dx [ vtlat ])) "E2TLL.f":1 85 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [3 vtlon+0 S8 A64])
        (reg:DI 2 cx [ vtlon ])) "E2TLL.f":1 85 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:SF 22 xmm1 [orig:87 _1 ] [87])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SF 21 xmm0 [144])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "E2TLL.f":66 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.18e+2 [0x0.ecp+7])
        (nil)))
(insn 11 10 12 2 (set (reg:SF 21 xmm0 [orig:88 _2 ] [88])
        (mult:SF (reg:SF 21 xmm0 [144])
            (reg:SF 22 xmm1 [orig:87 _1 ] [87]))) "E2TLL.f":66 838 {*fop_sf_comm}
     (nil))
(insn 12 11 13 2 (set (reg:SF 22 xmm1 [orig:89 _3 ] [89])
        (reg:SF 21 xmm0 [orig:88 _2 ] [88])) "E2TLL.f":66 131 {*movsf_internal}
     (nil))
(insn 13 12 14 2 (set (reg:V4SF 21 xmm0 [146])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S16 A128])) "E2TLL.f":66 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 14 13 15 2 (parallel [
            (set (reg:SF 21 xmm0 [145])
                (neg:SF (reg:SF 22 xmm1 [orig:89 _3 ] [89])))
            (use (reg:V4SF 21 xmm0 [146]))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":66 507 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 22 xmm1 [orig:89 _3 ] [89]))
        (nil)))
(insn 15 14 16 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 wbd+0 S4 A32])
        (reg:SF 21 xmm0 [145])) "E2TLL.f":66 131 {*movsf_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SF 22 xmm1 [orig:90 _4 ] [90])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 8 [0x8]))) [4 egrid.dphi+0 S4 A64])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SF 21 xmm0 [147])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "E2TLL.f":67 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.24e+2 [0x0.f8p+7])
        (nil)))
(insn 18 17 19 2 (set (reg:SF 21 xmm0 [orig:91 _5 ] [91])
        (mult:SF (reg:SF 21 xmm0 [147])
            (reg:SF 22 xmm1 [orig:90 _4 ] [90]))) "E2TLL.f":67 838 {*fop_sf_comm}
     (nil))
(insn 19 18 20 2 (set (reg:SF 22 xmm1 [orig:92 _6 ] [92])
        (reg:SF 21 xmm0 [orig:91 _5 ] [91])) "E2TLL.f":67 131 {*movsf_internal}
     (nil))
(insn 20 19 21 2 (set (reg:V4SF 21 xmm0 [149])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S16 A128])) "E2TLL.f":67 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 21 20 22 2 (parallel [
            (set (reg:SF 21 xmm0 [148])
                (neg:SF (reg:SF 22 xmm1 [orig:92 _6 ] [92])))
            (use (reg:V4SF 21 xmm0 [149]))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":67 507 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 22 xmm1 [orig:92 _6 ] [92]))
        (nil)))
(insn 22 21 23 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 sbd+0 S4 A32])
        (reg:SF 21 xmm0 [148])) "E2TLL.f":67 131 {*movsf_internal}
     (nil))
(insn 23 22 95 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
        (const_int 1 [0x1])) "E2TLL.f":72 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 140 150
(code_label 95 23 24 3 5 (nil) [1 uses])
(note 24 95 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 249 [0xf9]))) "E2TLL.f":72 11 {*cmpsi_1}
     (nil))
(insn 26 25 27 3 (set (reg:QI 0 ax [150])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2TLL.f":72 678 {*setcc_qi}
     (nil))
(insn 27 26 28 3 (set (reg:SI 0 ax [orig:140 _68 ] [140])
        (zero_extend:SI (reg:QI 0 ax [150]))) "E2TLL.f":72 140 {*zero_extendqisi2}
     (nil))
(insn 28 27 29 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:140 _68 ] [140])
            (const_int 0 [0]))) "E2TLL.f":72 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 29 28 30 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 190)
            (pc))) "E2TLL.f":72 682 {*jcc}
     (nil)
 -> 190)
;;  succ:       15
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 96 97 98 99 100 101 102 103 104 151 152 153 154 155 156 157 158 159 160
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg:SI 0 ax [151])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":73 86 {*movsi_internal}
     (nil))
(insn 32 31 202 4 (parallel [
            (set (reg:SI 1 dx [orig:93 _7 ] [93])
                (plus:SI (reg:SI 0 ax [151])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":73 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 202 32 33 4 (set (reg:SI 0 ax [152])
        (reg:SI 1 dx [orig:93 _7 ] [93])) "E2TLL.f":73 86 {*movsi_internal}
     (nil))
(insn 33 202 34 4 (parallel [
            (set (reg:SI 0 ax [152])
                (ashiftrt:SI (reg:SI 0 ax [152])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":73 582 {ashrsi3_cvt}
     (nil))
(insn 34 33 35 4 (parallel [
            (set (reg:SI 0 ax [153])
                (lshiftrt:SI (reg:SI 0 ax [152])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":73 587 {*lshrsi3_1}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:SI 1 dx [154])
                (plus:SI (reg:SI 1 dx [orig:93 _7 ] [93])
                    (reg:SI 0 ax [153])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":73 221 {*addsi_1}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:SI 1 dx [155])
                (and:SI (reg:SI 1 dx [154])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":73 426 {*andsi_1}
     (nil))
(insn 37 36 205 4 (parallel [
            (set (reg:SI 1 dx [155])
                (minus:SI (reg:SI 1 dx [155])
                    (reg:SI 0 ax [153])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":73 277 {*subsi_1}
     (nil))
(insn 205 37 39 4 (set (reg:SI 0 ax [156])
        (reg:SI 1 dx [155])) "E2TLL.f":73 86 {*movsi_internal}
     (nil))
(insn 39 205 40 4 (set (reg:SF 22 xmm1 [orig:95 _9 ] [95])
        (float:SF (reg:SI 0 ax [orig:94 _8 ] [94]))) "E2TLL.f":73 203 {*floatsisf2_mixed}
     (nil))
(insn 40 39 41 4 (set (reg:SF 21 xmm0 [orig:96 _10 ] [96])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 41 40 206 4 (set (reg:SF 21 xmm0 [orig:97 _11 ] [97])
        (mult:SF (reg:SF 21 xmm0 [orig:96 _10 ] [96])
            (reg:SF 22 xmm1 [orig:95 _9 ] [95]))) "E2TLL.f":73 838 {*fop_sf_comm}
     (nil))
(insn 206 41 42 4 (set (reg:SF 22 xmm1 [orig:97 _11 ] [97])
        (reg:SF 21 xmm0 [orig:97 _11 ] [97])) "E2TLL.f":73 131 {*movsf_internal}
     (nil))
(insn 42 206 43 4 (set (reg:SF 22 xmm1 [orig:97 _11 ] [97])
        (plus:SF (reg:SF 22 xmm1 [orig:97 _11 ] [97])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [1 wbd+0 S4 A32]))) "E2TLL.f":73 838 {*fop_sf_comm}
     (nil))
(insn 43 42 44 4 (set (reg:SF 21 xmm0 [orig:99 _13 ] [99])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 44 43 45 4 (set (reg:SF 21 xmm0 [orig:100 _14 ] [100])
        (plus:SF (reg:SF 21 xmm0 [orig:99 _13 ] [99])
            (reg:SF 21 xmm0 [orig:99 _13 ] [99]))) "E2TLL.f":73 838 {*fop_sf_comm}
     (nil))
(insn 45 44 209 4 (set (reg:SF 22 xmm1 [orig:98 _12 ] [98])
        (minus:SF (reg:SF 22 xmm1 [orig:98 _12 ] [98])
            (reg:SF 21 xmm0 [orig:100 _14 ] [100]))) "E2TLL.f":73 841 {*fop_sf_1}
     (nil))
(insn 209 45 46 4 (set (reg:SF 21 xmm0 [157])
        (reg:SF 22 xmm1 [orig:98 _12 ] [98])) "E2TLL.f":73 131 {*movsf_internal}
     (nil))
(insn 46 209 47 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])
        (reg:SF 21 xmm0 [157])) "E2TLL.f":73 131 {*movsf_internal}
     (nil))
(insn 47 46 48 4 (set (reg:SI 0 ax [158])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":74 86 {*movsi_internal}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg:SI 0 ax [orig:101 _15 ] [101])
                (plus:SI (reg:SI 0 ax [158])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":74 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 49 48 50 4 (set (reg:SF 22 xmm1 [orig:102 _16 ] [102])
        (float:SF (reg:SI 0 ax [orig:101 _15 ] [101]))) "E2TLL.f":74 203 {*floatsisf2_mixed}
     (nil))
(insn 50 49 51 4 (set (reg:SF 21 xmm0 [orig:103 _17 ] [103])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 8 [0x8]))) [4 egrid.dphi+0 S4 A64])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 51 50 52 4 (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
        (mult:SF (reg:SF 21 xmm0 [orig:103 _17 ] [103])
            (reg:SF 22 xmm1 [orig:102 _16 ] [102]))) "E2TLL.f":74 838 {*fop_sf_comm}
     (nil))
(insn 52 51 53 4 (set (reg:SF 22 xmm1 [160])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 sbd+0 S4 A32])) "E2TLL.f":74 131 {*movsf_internal}
     (nil))
(insn 53 52 54 4 (set (reg:SF 21 xmm0 [159])
        (plus:SF (reg:SF 21 xmm0 [orig:104 _18 ] [104])
            (reg:SF 22 xmm1 [160]))) "E2TLL.f":74 838 {*fop_sf_comm}
     (nil))
(insn 54 53 55 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 elat+0 S4 A32])
        (reg:SF 21 xmm0 [159])) "E2TLL.f":74 131 {*movsf_internal}
     (nil))
(insn 55 54 89 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
        (const_int 1 [0x1])) "E2TLL.f":75 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 161
(code_label 89 55 56 5 4 (nil) [1 uses])
(note 56 89 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
            (const_int 119 [0x77]))) "E2TLL.f":75 11 {*cmpsi_1}
     (nil))
(insn 58 57 59 5 (set (reg:QI 0 ax [161])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2TLL.f":75 678 {*setcc_qi}
     (nil))
(insn 59 58 60 5 (set (reg:SI 0 ax [orig:141 _72 ] [141])
        (zero_extend:SI (reg:QI 0 ax [161]))) "E2TLL.f":75 140 {*zero_extendqisi2}
     (nil))
(insn 60 59 61 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:141 _72 ] [141])
            (const_int 0 [0]))) "E2TLL.f":75 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 61 60 62 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 193)
            (pc))) "E2TLL.f":75 682 {*jcc}
     (nil)
 -> 193)
;;  succ:       16
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 16, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 107 108 109 110 111 112 113 114 115 116 162 163 164 165 166 167 168 169 170 171
(note 62 61 63 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 6 (set (reg:SF 21 xmm0 [orig:105 _19 ] [105])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 64 63 65 6 (set (reg:SF 21 xmm0 [orig:106 _20 ] [106])
        (plus:SF (reg:SF 21 xmm0 [orig:105 _19 ] [105])
            (reg:SF 21 xmm0 [orig:105 _19 ] [105]))) "E2TLL.f":76 838 {*fop_sf_comm}
     (nil))
(insn 65 64 66 6 (set (reg:SF 22 xmm1 [163])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])) "E2TLL.f":76 131 {*movsf_internal}
     (nil))
(insn 66 65 67 6 (set (reg:SF 21 xmm0 [162])
        (plus:SF (reg:SF 21 xmm0 [orig:106 _20 ] [106])
            (reg:SF 22 xmm1 [163]))) "E2TLL.f":76 838 {*fop_sf_comm}
     (nil))
(insn 67 66 68 6 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])
        (reg:SF 21 xmm0 [162])) "E2TLL.f":76 131 {*movsf_internal}
     (nil))
(insn 68 67 69 6 (set (reg:SI 0 ax [164])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":77 86 {*movsi_internal}
     (nil))
(insn 69 68 70 6 (set (reg:DI 0 ax [orig:107 _21 ] [107])
        (sign_extend:DI (reg:SI 0 ax [164]))) "E2TLL.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 70 69 71 6 (parallel [
            (set (reg:DI 1 dx [orig:108 _22 ] [108])
                (mult:DI (reg:DI 0 ax [orig:107 _21 ] [107])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":77 349 {*muldi3_1}
     (nil))
(insn 71 70 72 6 (set (reg:SI 0 ax [165])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "E2TLL.f":77 86 {*movsi_internal}
     (nil))
(insn 72 71 73 6 (set (reg:DI 0 ax [orig:109 _23 ] [109])
        (sign_extend:DI (reg:SI 0 ax [165]))) "E2TLL.f":77 149 {*extendsidi2_rex64}
     (nil))
(insn 73 72 74 6 (parallel [
            (set (reg:DI 0 ax [orig:110 _24 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _23 ] [109])
                    (reg:DI 1 dx [orig:108 _22 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":77 222 {*adddi_1}
     (nil))
(insn 74 73 75 6 (parallel [
            (set (reg:DI 1 dx [orig:111 _25 ] [111])
                (plus:DI (reg:DI 0 ax [orig:110 _24 ] [110])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":77 222 {*adddi_1}
     (nil))
(insn 75 74 76 6 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 htlon+0 S8 A64])) "E2TLL.f":77 85 {*movdi_internal}
     (nil))
(insn 76 75 77 6 (set (reg:SF 21 xmm0 [167])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])) "E2TLL.f":77 131 {*movsf_internal}
     (nil))
(insn 77 76 78 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:111 _25 ] [111])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [166])) [1 *htlon_74(D) S4 A32])
        (reg:SF 21 xmm0 [167])) "E2TLL.f":77 131 {*movsf_internal}
     (nil))
(insn 78 77 79 6 (set (reg:SI 0 ax [168])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":78 86 {*movsi_internal}
     (nil))
(insn 79 78 80 6 (set (reg:DI 0 ax [orig:112 _26 ] [112])
        (sign_extend:DI (reg:SI 0 ax [168]))) "E2TLL.f":78 149 {*extendsidi2_rex64}
     (nil))
(insn 80 79 81 6 (parallel [
            (set (reg:DI 1 dx [orig:113 _27 ] [113])
                (mult:DI (reg:DI 0 ax [orig:112 _26 ] [112])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":78 349 {*muldi3_1}
     (nil))
(insn 81 80 82 6 (set (reg:SI 0 ax [169])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "E2TLL.f":78 86 {*movsi_internal}
     (nil))
(insn 82 81 83 6 (set (reg:DI 0 ax [orig:114 _28 ] [114])
        (sign_extend:DI (reg:SI 0 ax [169]))) "E2TLL.f":78 149 {*extendsidi2_rex64}
     (nil))
(insn 83 82 84 6 (parallel [
            (set (reg:DI 0 ax [orig:115 _29 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 _28 ] [114])
                    (reg:DI 1 dx [orig:113 _27 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":78 222 {*adddi_1}
     (nil))
(insn 84 83 85 6 (parallel [
            (set (reg:DI 1 dx [orig:116 _30 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 _29 ] [115])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":78 222 {*adddi_1}
     (nil))
(insn 85 84 86 6 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 htlat+0 S8 A64])) "E2TLL.f":78 85 {*movdi_internal}
     (nil))
(insn 86 85 87 6 (set (reg:SF 21 xmm0 [171])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 elat+0 S4 A32])) "E2TLL.f":78 131 {*movsf_internal}
     (nil))
(insn 87 86 88 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:116 _30 ] [116])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [170])) [1 *htlat_76(D) S4 A32])
        (reg:SF 21 xmm0 [171])) "E2TLL.f":78 131 {*movsf_internal}
     (nil))
(insn 88 87 181 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":75 221 {*addsi_1}
     (nil))
(jump_insn 181 88 182 6 (set (pc)
        (label_ref 89)) "E2TLL.f":75 683 {jump}
     (nil)
 -> 89)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 182 181 193)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 6, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 193 182 192 16 12 (nil) [1 uses])
(note 192 193 194 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 194 192 92 16 (const_int 0 [0]) "E2TLL.f":78 718 {nop}
     (nil))
;;  succ:       7 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 16, next block 15, flags: (RTL, MODIFIED)
;;  pred:       16 [always]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 92 194 93 7 3 (nil) [0 uses])
(note 93 92 94 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 183 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":72 221 {*addsi_1}
     (nil))
(jump_insn 183 94 184 7 (set (pc)
        (label_ref 95)) "E2TLL.f":72 683 {jump}
     (nil)
 -> 95)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 184 183 190)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 190 184 189 15 11 (nil) [1 uses])
(note 189 190 191 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 191 189 98 15 (const_int 0 [0]) "E2TLL.f":75 718 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 15, next block 9, flags: (RTL, MODIFIED)
;;  pred:       15 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 98 191 99 8 2 (nil) [0 uses])
(note 99 98 100 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 171 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
        (const_int 1 [0x1])) "E2TLL.f":85 86 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              13 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 172
(code_label 171 100 101 9 9 (nil) [1 uses])
(note 101 171 102 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 249 [0xf9]))) "E2TLL.f":85 11 {*cmpsi_1}
     (nil))
(insn 103 102 104 9 (set (reg:QI 0 ax [172])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2TLL.f":85 678 {*setcc_qi}
     (nil))
(insn 104 103 105 9 (set (reg:SI 0 ax [orig:142 _81 ] [142])
        (zero_extend:SI (reg:QI 0 ax [172]))) "E2TLL.f":85 140 {*zero_extendqisi2}
     (nil))
(insn 105 104 106 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:142 _81 ] [142])
            (const_int 0 [0]))) "E2TLL.f":85 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 106 105 107 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 196)
            (pc))) "E2TLL.f":85 682 {*jcc}
     (nil)
 -> 196)
;;  succ:       17
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 117 118 119 120 121 122 123 124 125 126 127 173 174 175 176 177 178 179 180 181 182
(note 107 106 108 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 10 (set (reg:SI 0 ax [173])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":86 86 {*movsi_internal}
     (nil))
(insn 109 108 110 10 (parallel [
            (set (reg:SI 1 dx [174])
                (ashiftrt:SI (reg:SI 0 ax [173])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":86 582 {ashrsi3_cvt}
     (nil))
(insn 110 109 111 10 (parallel [
            (set (reg:SI 1 dx [175])
                (lshiftrt:SI (reg:SI 1 dx [174])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":86 587 {*lshrsi3_1}
     (nil))
(insn 111 110 112 10 (parallel [
            (set (reg:SI 0 ax [176])
                (plus:SI (reg:SI 0 ax [173])
                    (reg:SI 1 dx [175])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":86 221 {*addsi_1}
     (nil))
(insn 112 111 113 10 (parallel [
            (set (reg:SI 0 ax [177])
                (and:SI (reg:SI 0 ax [176])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":86 426 {*andsi_1}
     (nil))
(insn 113 112 115 10 (parallel [
            (set (reg:SI 0 ax [178])
                (minus:SI (reg:SI 0 ax [177])
                    (reg:SI 1 dx [175])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":86 277 {*subsi_1}
     (nil))
(insn 115 113 116 10 (set (reg:SF 22 xmm1 [orig:118 _32 ] [118])
        (float:SF (reg:SI 0 ax [orig:117 _31 ] [117]))) "E2TLL.f":86 203 {*floatsisf2_mixed}
     (nil))
(insn 116 115 117 10 (set (reg:SF 21 xmm0 [orig:119 _33 ] [119])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 117 116 210 10 (set (reg:SF 21 xmm0 [orig:120 _34 ] [120])
        (mult:SF (reg:SF 21 xmm0 [orig:119 _33 ] [119])
            (reg:SF 22 xmm1 [orig:118 _32 ] [118]))) "E2TLL.f":86 838 {*fop_sf_comm}
     (nil))
(insn 210 117 118 10 (set (reg:SF 22 xmm1 [orig:120 _34 ] [120])
        (reg:SF 21 xmm0 [orig:120 _34 ] [120])) "E2TLL.f":86 131 {*movsf_internal}
     (nil))
(insn 118 210 119 10 (set (reg:SF 22 xmm1 [orig:120 _34 ] [120])
        (plus:SF (reg:SF 22 xmm1 [orig:120 _34 ] [120])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [1 wbd+0 S4 A32]))) "E2TLL.f":86 838 {*fop_sf_comm}
     (nil))
(insn 119 118 120 10 (set (reg:SF 21 xmm0 [orig:122 _36 ] [122])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 120 119 121 10 (set (reg:SF 21 xmm0 [orig:123 _37 ] [123])
        (plus:SF (reg:SF 21 xmm0 [orig:122 _36 ] [122])
            (reg:SF 21 xmm0 [orig:122 _36 ] [122]))) "E2TLL.f":86 838 {*fop_sf_comm}
     (nil))
(insn 121 120 213 10 (set (reg:SF 22 xmm1 [orig:121 _35 ] [121])
        (minus:SF (reg:SF 22 xmm1 [orig:121 _35 ] [121])
            (reg:SF 21 xmm0 [orig:123 _37 ] [123]))) "E2TLL.f":86 841 {*fop_sf_1}
     (nil))
(insn 213 121 122 10 (set (reg:SF 21 xmm0 [179])
        (reg:SF 22 xmm1 [orig:121 _35 ] [121])) "E2TLL.f":86 131 {*movsf_internal}
     (nil))
(insn 122 213 123 10 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])
        (reg:SF 21 xmm0 [179])) "E2TLL.f":86 131 {*movsf_internal}
     (nil))
(insn 123 122 124 10 (set (reg:SI 0 ax [180])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":87 86 {*movsi_internal}
     (nil))
(insn 124 123 125 10 (parallel [
            (set (reg:SI 0 ax [orig:124 _38 ] [124])
                (plus:SI (reg:SI 0 ax [180])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":87 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 125 124 126 10 (set (reg:SF 22 xmm1 [orig:125 _39 ] [125])
        (float:SF (reg:SI 0 ax [orig:124 _38 ] [124]))) "E2TLL.f":87 203 {*floatsisf2_mixed}
     (nil))
(insn 126 125 127 10 (set (reg:SF 21 xmm0 [orig:126 _40 ] [126])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 8 [0x8]))) [4 egrid.dphi+0 S4 A64])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 127 126 128 10 (set (reg:SF 21 xmm0 [orig:127 _41 ] [127])
        (mult:SF (reg:SF 21 xmm0 [orig:126 _40 ] [126])
            (reg:SF 22 xmm1 [orig:125 _39 ] [125]))) "E2TLL.f":87 838 {*fop_sf_comm}
     (nil))
(insn 128 127 129 10 (set (reg:SF 22 xmm1 [182])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 sbd+0 S4 A32])) "E2TLL.f":87 131 {*movsf_internal}
     (nil))
(insn 129 128 130 10 (set (reg:SF 21 xmm0 [181])
        (plus:SF (reg:SF 21 xmm0 [orig:127 _41 ] [127])
            (reg:SF 22 xmm1 [182]))) "E2TLL.f":87 838 {*fop_sf_comm}
     (nil))
(insn 130 129 131 10 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 elat+0 S4 A32])
        (reg:SF 21 xmm0 [181])) "E2TLL.f":87 131 {*movsf_internal}
     (nil))
(insn 131 130 165 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
        (const_int 1 [0x1])) "E2TLL.f":88 86 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              12 [always] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 143 183
(code_label 165 131 132 11 8 (nil) [1 uses])
(note 132 165 133 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
            (const_int 119 [0x77]))) "E2TLL.f":88 11 {*cmpsi_1}
     (nil))
(insn 134 133 135 11 (set (reg:QI 0 ax [183])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "E2TLL.f":88 678 {*setcc_qi}
     (nil))
(insn 135 134 136 11 (set (reg:SI 0 ax [orig:143 _85 ] [143])
        (zero_extend:SI (reg:QI 0 ax [183]))) "E2TLL.f":88 140 {*zero_extendqisi2}
     (nil))
(insn 136 135 137 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:143 _85 ] [143])
            (const_int 0 [0]))) "E2TLL.f":88 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 137 136 138 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 199)
            (pc))) "E2TLL.f":88 682 {*jcc}
     (nil)
 -> 199)
;;  succ:       18
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 18, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 128 129 130 131 132 133 134 135 136 137 138 139 184 185 186 187 188 189 190 191 192 193
(note 138 137 139 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 12 (set (reg:SF 21 xmm0 [orig:128 _42 ] [128])
        (mem/j/c:SF (const:DI (plus:DI (symbol_ref:DI ("egrid_") [flags 0x2]  <var_decl 0x7f1b50931ab0 egrid>)
                    (const_int 16 [0x10]))) [4 egrid.dlam+0 S4 A128])) "E2TLL.f":1 131 {*movsf_internal}
     (nil))
(insn 140 139 141 12 (set (reg:SF 21 xmm0 [orig:129 _43 ] [129])
        (plus:SF (reg:SF 21 xmm0 [orig:128 _42 ] [128])
            (reg:SF 21 xmm0 [orig:128 _42 ] [128]))) "E2TLL.f":89 838 {*fop_sf_comm}
     (nil))
(insn 141 140 142 12 (set (reg:SF 22 xmm1 [185])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])) "E2TLL.f":89 131 {*movsf_internal}
     (nil))
(insn 142 141 143 12 (set (reg:SF 21 xmm0 [184])
        (plus:SF (reg:SF 21 xmm0 [orig:129 _43 ] [129])
            (reg:SF 22 xmm1 [185]))) "E2TLL.f":89 838 {*fop_sf_comm}
     (nil))
(insn 143 142 144 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])
        (reg:SF 21 xmm0 [184])) "E2TLL.f":89 131 {*movsf_internal}
     (nil))
(insn 144 143 145 12 (set (reg:SI 0 ax [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":90 86 {*movsi_internal}
     (nil))
(insn 145 144 146 12 (set (reg:DI 0 ax [orig:130 _44 ] [130])
        (sign_extend:DI (reg:SI 0 ax [186]))) "E2TLL.f":90 149 {*extendsidi2_rex64}
     (nil))
(insn 146 145 147 12 (parallel [
            (set (reg:DI 1 dx [orig:131 _45 ] [131])
                (mult:DI (reg:DI 0 ax [orig:130 _44 ] [130])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":90 349 {*muldi3_1}
     (nil))
(insn 147 146 148 12 (set (reg:SI 0 ax [187])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "E2TLL.f":90 86 {*movsi_internal}
     (nil))
(insn 148 147 149 12 (set (reg:DI 0 ax [orig:132 _46 ] [132])
        (sign_extend:DI (reg:SI 0 ax [187]))) "E2TLL.f":90 149 {*extendsidi2_rex64}
     (nil))
(insn 149 148 150 12 (parallel [
            (set (reg:DI 0 ax [orig:133 _47 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 _46 ] [132])
                    (reg:DI 1 dx [orig:131 _45 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":90 222 {*adddi_1}
     (nil))
(insn 150 149 151 12 (parallel [
            (set (reg:DI 1 dx [orig:134 _48 ] [134])
                (plus:DI (reg:DI 0 ax [orig:133 _47 ] [133])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":90 222 {*adddi_1}
     (nil))
(insn 151 150 152 12 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [3 vtlon+0 S8 A64])) "E2TLL.f":90 85 {*movdi_internal}
     (nil))
(insn 152 151 153 12 (set (reg:SF 21 xmm0 [189])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 elon+0 S4 A32])) "E2TLL.f":90 131 {*movsf_internal}
     (nil))
(insn 153 152 154 12 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:134 _48 ] [134])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [188])) [1 *vtlon_87(D) S4 A32])
        (reg:SF 21 xmm0 [189])) "E2TLL.f":90 131 {*movsf_internal}
     (nil))
(insn 154 153 155 12 (set (reg:SI 0 ax [190])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])) "E2TLL.f":91 86 {*movsi_internal}
     (nil))
(insn 155 154 156 12 (set (reg:DI 0 ax [orig:135 _49 ] [135])
        (sign_extend:DI (reg:SI 0 ax [190]))) "E2TLL.f":91 149 {*extendsidi2_rex64}
     (nil))
(insn 156 155 157 12 (parallel [
            (set (reg:DI 1 dx [orig:136 _50 ] [136])
                (mult:DI (reg:DI 0 ax [orig:135 _49 ] [135])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":91 349 {*muldi3_1}
     (nil))
(insn 157 156 158 12 (set (reg:SI 0 ax [191])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "E2TLL.f":91 86 {*movsi_internal}
     (nil))
(insn 158 157 159 12 (set (reg:DI 0 ax [orig:137 _51 ] [137])
        (sign_extend:DI (reg:SI 0 ax [191]))) "E2TLL.f":91 149 {*extendsidi2_rex64}
     (nil))
(insn 159 158 160 12 (parallel [
            (set (reg:DI 0 ax [orig:138 _52 ] [138])
                (plus:DI (reg:DI 0 ax [orig:137 _51 ] [137])
                    (reg:DI 1 dx [orig:136 _50 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":91 222 {*adddi_1}
     (nil))
(insn 160 159 161 12 (parallel [
            (set (reg:DI 1 dx [orig:139 _53 ] [139])
                (plus:DI (reg:DI 0 ax [orig:138 _52 ] [138])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":91 222 {*adddi_1}
     (nil))
(insn 161 160 162 12 (set (reg/f:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 vtlat+0 S8 A64])) "E2TLL.f":91 85 {*movdi_internal}
     (nil))
(insn 162 161 163 12 (set (reg:SF 21 xmm0 [193])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 elat+0 S4 A32])) "E2TLL.f":91 131 {*movsf_internal}
     (nil))
(insn 163 162 164 12 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:139 _53 ] [139])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [192])) [1 *vtlat_89(D) S4 A32])
        (reg:SF 21 xmm0 [193])) "E2TLL.f":91 131 {*movsf_internal}
     (nil))
(insn 164 163 185 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":88 221 {*addsi_1}
     (nil))
(jump_insn 185 164 186 12 (set (pc)
        (label_ref 165)) "E2TLL.f":88 683 {jump}
     (nil)
 -> 165)
;;  succ:       11 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 186 185 199)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 199 186 198 18 14 (nil) [1 uses])
(note 198 199 200 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 200 198 168 18 (const_int 0 [0]) "E2TLL.f":91 718 {nop}
     (nil))
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 18, next block 17, flags: (RTL, MODIFIED)
;;  pred:       18 [always]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 168 200 169 13 7 (nil) [0 uses])
(note 169 168 170 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 187 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "E2TLL.f":85 221 {*addsi_1}
     (nil))
(jump_insn 187 170 188 13 (set (pc)
        (label_ref 171)) "E2TLL.f":85 683 {jump}
     (nil)
 -> 171)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 188 187 196)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 13, next block 14, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 196 188 195 17 13 (nil) [1 uses])
(note 195 196 197 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 197 195 174 17 (const_int 0 [0]) "E2TLL.f":88 718 {nop}
     (nil))
;;  succ:       14 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 17, next block 1, flags: (RTL, MODIFIED)
;;  pred:       17 [always]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 174 197 175 14 6 (nil) [0 uses])
(note 175 174 180 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 180 175 201 14 (const_int 0 [0]) "E2TLL.f":97 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 201 180 0 NOTE_INSN_DELETED)
