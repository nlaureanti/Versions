
;; Function efill (efill_, funcdef_no=0, decl_uid=3768, cgraph_uid=0, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 27 n_edges 34 count 39 (  1.4)
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 24 10 23 11 12 13 14 15 16 17 18 19 26 20 25 21 22
;;
;; Loop 3
;;  header 14, latch 20
;;  depth 1, outer 0
;;  nodes: 14 20 26 16 15 19 18 17
;;
;; Loop 4
;;  header 16, latch 19
;;  depth 2, outer 3
;;  nodes: 16 19 18 17
;;
;; Loop 1
;;  header 4, latch 10
;;  depth 1, outer 0
;;  nodes: 4 10 24 6 5 9 8 7
;;
;; Loop 2
;;  header 6, latch 9
;;  depth 2, outer 1
;;  nodes: 6 9 8 7
;; 2 succs { 22 3 }
;; 3 succs { 4 }
;; 4 succs { 23 5 }
;; 5 succs { 6 }
;; 6 succs { 24 7 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 6 }
;; 24 succs { 10 }
;; 10 succs { 4 }
;; 23 succs { 11 }
;; 11 succs { 12 13 }
;; 12 succs { 22 }
;; 13 succs { 14 }
;; 14 succs { 25 15 }
;; 15 succs { 16 }
;; 16 succs { 26 17 }
;; 17 succs { 18 19 }
;; 18 succs { 19 }
;; 19 succs { 16 }
;; 26 succs { 20 }
;; 20 succs { 14 }
;; 25 succs { 21 }
;; 21 succs { 22 }
;; 22 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 139.
verify found no changes in insn with uid = 144.
verify found no changes in insn with uid = 147.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r187: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a6 (r187,l0) best SSE_REGS, allocno SSE_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a14 (r183,l0) best SSE_REGS, allocno SSE_REGS
    r182: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a16 (r182,l0) best SSE_REGS, allocno SSE_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a35 (r174,l0) best SSE_REGS, allocno SSE_REGS
    r173: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a36 (r173,l0) best DIREG, allocno GENERAL_REGS
    r172: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a37 (r172,l0) best DIREG, allocno GENERAL_REGS
    r171: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a38 (r171,l0) best DIREG, allocno GENERAL_REGS
    r170: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a44 (r170,l0) best SSE_REGS, allocno SSE_REGS
    r169: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a42 (r169,l0) best SSE_REGS, allocno SSE_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a56 (r165,l0) best SSE_REGS, allocno SSE_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a73 (r157,l0) best SSE_REGS, allocno SSE_REGS
    r156: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a76 (r156,l0) best SSE_REGS, allocno SSE_REGS
    r155: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a79 (r155,l0) best DIREG, allocno GENERAL_REGS
    r154: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a80 (r154,l0) best SIREG, allocno GENERAL_REGS
    r153: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a81 (r153,l0) best DREG, allocno GENERAL_REGS
    r152: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a82 (r152,l0) best CREG, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a13 (r123,l0) best SSE_REGS, allocno SSE_REGS
    r122: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a15 (r122,l0) best SSE_REGS, allocno SSE_REGS
    r121: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a17 (r121,l0) best SSE_REGS, allocno SSE_REGS
    r120: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a18 (r120,l0) best SSE_REGS, allocno SSE_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a33 (r114,l0) best SSE_REGS, allocno SSE_REGS
    r113: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a34 (r113,l0) best SSE_REGS, allocno SSE_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a43 (r111,l0) best SSE_REGS, allocno SSE_REGS
    r110: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a45 (r110,l0) best SSE_REGS, allocno SSE_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a54 (r104,l0) best SSE_REGS, allocno SSE_REGS
    r103: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a55 (r103,l0) best SSE_REGS, allocno SSE_REGS
    r102: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a57 (r102,l0) best SSE_REGS, allocno SSE_REGS
    r101: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a58 (r101,l0) best SSE_REGS, allocno SSE_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a74 (r95,l0) best SSE_REGS, allocno SSE_REGS
    r94: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a75 (r94,l0) best SSE_REGS, allocno SSE_REGS
    r93: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a77 (r93,l0) best SSE_REGS, allocno SSE_REGS
    r92: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a78 (r92,l0) best SSE_REGS, allocno SSE_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r130,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 NON_Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:65000 NO_REX_SSE_REGS:65000 SSE_REGS:65000 MMX_REGS:95000 INT_SSE_REGS:95000 ALL_REGS:1488000 MEM:41000
  a1(r136,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:47000 NO_REX_SSE_REGS:47000 SSE_REGS:47000 MMX_REGS:67000 INT_SSE_REGS:67000 ALL_REGS:1062000 MEM:27000
  a2(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a6(r187,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 NON_Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:24000 FP_TOP_SSE_REGS:24000 FP_SECOND_SSE_REGS:24000 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 ALL_REGS:24000 MEM:12000
  a7(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a8(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a9(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a10(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a11(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a12(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a13(r123,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a14(r183,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a15(r122,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:12000
  a16(r182,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:11000
  a17(r121,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a18(r120,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a19(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a21(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a22(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a23(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a24(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a25(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a26(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a27(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a28(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a29(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a30(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a31(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a32(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a33(r114,l0) costs: AREG:27000 DREG:27000 CREG:27000 BREG:27000 SIREG:27000 DIREG:27000 AD_REGS:27000 CLOBBERED_REGS:27000 Q_REGS:27000 NON_Q_REGS:27000 TLS_GOTBASE_REGS:27000 GENERAL_REGS:27000 FP_TOP_REG:32000 FP_SECOND_REG:32000 FLOAT_REGS:32000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 FP_TOP_SSE_REGS:32000 FP_SECOND_SSE_REGS:32000 FLOAT_SSE_REGS:32000 FLOAT_INT_REGS:32000 INT_SSE_REGS:32000 FLOAT_INT_SSE_REGS:32000 MEM:17000
  a34(r113,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a35(r174,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a36(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a37(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a38(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a39(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a40(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a41(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a42(r169,l0) costs: AREG:10000 DREG:10000 CREG:10000 BREG:10000 SIREG:10000 DIREG:10000 AD_REGS:10000 CLOBBERED_REGS:10000 Q_REGS:10000 NON_Q_REGS:10000 TLS_GOTBASE_REGS:10000 GENERAL_REGS:10000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a43(r111,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a44(r170,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a45(r110,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a46(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a47(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a48(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a49(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a50(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a51(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a52(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a53(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a54(r104,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:12000
  a55(r103,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:12000
  a56(r165,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:11000
  a57(r102,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a58(r101,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a59(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a60(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a61(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a62(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a63(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a64(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a65(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a66(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a67(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a68(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a69(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a70(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a71(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a72(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a73(r157,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 NON_Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:24000 FP_SECOND_SSE_REGS:24000 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 MEM:12000
  a74(r95,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:12000
  a75(r94,l0) costs: AREG:21000 DREG:21000 CREG:21000 BREG:21000 SIREG:21000 DIREG:21000 AD_REGS:21000 CLOBBERED_REGS:21000 Q_REGS:21000 NON_Q_REGS:21000 TLS_GOTBASE_REGS:21000 GENERAL_REGS:21000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:12000
  a76(r156,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:11000
  a77(r93,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:11000
  a78(r92,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 NON_Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FP_TOP_SSE_REGS:25000 FP_SECOND_SSE_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a79(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a80(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a81(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a82(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a83(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a84(r90,l0) costs: AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:2000
  a85(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a86(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a87(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a88(r131,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:31000 NO_REX_SSE_REGS:31000 SSE_REGS:31000 MMX_REGS:41000 INT_SSE_REGS:41000 ALL_REGS:638000 MEM:19000
  a89(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a90(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a91(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a92(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a93(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:17000
  a94(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a95(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a96(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 234(l0): point = 1
   Insn 253(l0): point = 4
   Insn 164(l0): point = 7
   Insn 163(l0): point = 9
   Insn 162(l0): point = 11
   Insn 161(l0): point = 13
   Insn 160(l0): point = 15
   Insn 243(l0): point = 18
   Insn 214(l0): point = 20
   Insn 256(l0): point = 23
   Insn 174(l0): point = 26
   Insn 173(l0): point = 28
   Insn 172(l0): point = 30
   Insn 171(l0): point = 32
   Insn 170(l0): point = 34
   Insn 168(l0): point = 37
   Insn 167(l0): point = 39
   Insn 166(l0): point = 41
   Insn 241(l0): point = 44
   Insn 208(l0): point = 46
   Insn 205(l0): point = 49
   Insn 204(l0): point = 51
   Insn 203(l0): point = 53
   Insn 202(l0): point = 55
   Insn 201(l0): point = 57
   Insn 200(l0): point = 59
   Insn 199(l0): point = 61
   Insn 198(l0): point = 63
   Insn 197(l0): point = 65
   Insn 196(l0): point = 67
   Insn 191(l0): point = 70
   Insn 190(l0): point = 72
   Insn 189(l0): point = 74
   Insn 188(l0): point = 76
   Insn 187(l0): point = 78
   Insn 186(l0): point = 80
   Insn 185(l0): point = 82
   Insn 184(l0): point = 84
   Insn 183(l0): point = 86
   Insn 182(l0): point = 88
   Insn 181(l0): point = 90
   Insn 180(l0): point = 92
   Insn 179(l0): point = 94
   Insn 178(l0): point = 96
   Insn 177(l0): point = 98
   Insn 176(l0): point = 100
   Insn 158(l0): point = 103
   Insn 157(l0): point = 105
   Insn 156(l0): point = 107
   Insn 155(l0): point = 109
   Insn 154(l0): point = 111
   Insn 153(l0): point = 113
   Insn 152(l0): point = 115
   Insn 239(l0): point = 118
   Insn 147(l0): point = 120
   Insn 146(l0): point = 122
   Insn 145(l0): point = 124
   Insn 144(l0): point = 126
   Insn 143(l0): point = 128
   Insn 142(l0): point = 130
   Insn 141(l0): point = 132
   Insn 140(l0): point = 134
   Insn 139(l0): point = 136
   Insn 138(l0): point = 138
   Insn 137(l0): point = 140
   Insn 136(l0): point = 142
   Insn 135(l0): point = 144
   Insn 134(l0): point = 146
   Insn 133(l0): point = 148
   Insn 132(l0): point = 150
   Insn 130(l0): point = 153
   Insn 129(l0): point = 155
   Insn 247(l0): point = 158
   Insn 70(l0): point = 161
   Insn 69(l0): point = 163
   Insn 68(l0): point = 165
   Insn 67(l0): point = 167
   Insn 66(l0): point = 169
   Insn 237(l0): point = 172
   Insn 123(l0): point = 174
   Insn 250(l0): point = 177
   Insn 80(l0): point = 180
   Insn 79(l0): point = 182
   Insn 78(l0): point = 184
   Insn 77(l0): point = 186
   Insn 76(l0): point = 188
   Insn 74(l0): point = 191
   Insn 73(l0): point = 193
   Insn 72(l0): point = 195
   Insn 235(l0): point = 198
   Insn 117(l0): point = 200
   Insn 114(l0): point = 203
   Insn 113(l0): point = 205
   Insn 112(l0): point = 207
   Insn 111(l0): point = 209
   Insn 110(l0): point = 211
   Insn 109(l0): point = 213
   Insn 108(l0): point = 215
   Insn 107(l0): point = 217
   Insn 106(l0): point = 219
   Insn 105(l0): point = 221
   Insn 104(l0): point = 223
   Insn 103(l0): point = 225
   Insn 102(l0): point = 227
   Insn 101(l0): point = 229
   Insn 96(l0): point = 232
   Insn 95(l0): point = 234
   Insn 94(l0): point = 236
   Insn 93(l0): point = 238
   Insn 92(l0): point = 240
   Insn 91(l0): point = 242
   Insn 90(l0): point = 244
   Insn 89(l0): point = 246
   Insn 88(l0): point = 248
   Insn 87(l0): point = 250
   Insn 86(l0): point = 252
   Insn 85(l0): point = 254
   Insn 84(l0): point = 256
   Insn 83(l0): point = 258
   Insn 82(l0): point = 260
   Insn 64(l0): point = 263
   Insn 63(l0): point = 265
   Insn 62(l0): point = 267
   Insn 61(l0): point = 269
   Insn 60(l0): point = 271
   Insn 59(l0): point = 273
   Insn 50(l0): point = 276
   Insn 49(l0): point = 278
   Insn 48(l0): point = 280
   Insn 47(l0): point = 282
   Insn 46(l0): point = 284
   Insn 45(l0): point = 286
   Insn 44(l0): point = 288
   Insn 43(l0): point = 290
   Insn 42(l0): point = 292
   Insn 41(l0): point = 294
   Insn 40(l0): point = 296
   Insn 39(l0): point = 298
   Insn 38(l0): point = 300
   Insn 37(l0): point = 302
   Insn 36(l0): point = 304
   Insn 35(l0): point = 306
   Insn 34(l0): point = 308
   Insn 33(l0): point = 310
   Insn 32(l0): point = 312
   Insn 31(l0): point = 314
   Insn 27(l0): point = 316
   Insn 26(l0): point = 318
   Insn 25(l0): point = 320
   Insn 23(l0): point = 322
   Insn 21(l0): point = 324
   Insn 22(l0): point = 326
   Insn 20(l0): point = 328
   Insn 19(l0): point = 330
   Insn 18(l0): point = 332
   Insn 17(l0): point = 334
   Insn 16(l0): point = 336
   Insn 15(l0): point = 338
   Insn 13(l0): point = 340
   Insn 14(l0): point = 342
   Insn 12(l0): point = 344
   Insn 11(l0): point = 346
   Insn 10(l0): point = 348
   Insn 9(l0): point = 350
   Insn 8(l0): point = 352
   Insn 4(l0): point = 354
   Insn 3(l0): point = 356
   Insn 2(l0): point = 358
 a0(r130): [153..338] [7..117]
 a1(r136): [153..314] [7..117]
 a2(r141): [7..105]
 a3(r143): [44..102] [26..39]
 a4(r186): [50..53]
 a5(r128): [50..55]
 a6(r187): [50..51]
 a7(r127): [56..57]
 a8(r126): [56..61]
 a9(r185): [58..59]
 a10(r125): [62..63]
 a11(r124): [64..65]
 a12(r184): [66..67]
 a13(r123): [73..76]
 a14(r183): [73..74]
 a15(r122): [77..80]
 a16(r182): [77..78]
 a17(r121): [81..82]
 a18(r120): [81..84]
 a19(r181): [85..86]
 a20(r119): [85..88]
 a21(r118): [89..90]
 a22(r117): [89..94]
 a23(r180): [91..92]
 a24(r116): [95..96]
 a25(r115): [97..98]
 a26(r179): [99..100]
 a27(r144): [29..30]
 a28(r178): [31..32]
 a29(r177): [40..41]
 a30(r142): [10..11]
 a31(r176): [12..13]
 a32(r175): [106..107]
 a33(r114): [110..111]
 a34(r113): [112..115]
 a35(r174): [112..113]
 a36(r173): [123..124]
 a37(r172): [129..134]
 a38(r171): [139..140]
 a39(r112): [143..144]
 a40(r137): [161..265]
 a41(r139): [198..262] [180..193]
 a42(r169): [204..205]
 a43(r111): [206..209]
 a44(r170): [206..207]
 a45(r110): [210..211]
 a46(r168): [212..213]
 a47(r109): [212..215]
 a48(r108): [216..217]
 a49(r107): [216..221]
 a50(r167): [218..219]
 a51(r106): [222..223]
 a52(r105): [224..225]
 a53(r166): [226..227]
 a54(r104): [235..236]
 a55(r103): [237..240]
 a56(r165): [237..238]
 a57(r102): [241..242]
 a58(r101): [241..244]
 a59(r164): [245..246]
 a60(r100): [245..248]
 a61(r99): [249..250]
 a62(r98): [249..254]
 a63(r163): [251..252]
 a64(r97): [255..256]
 a65(r96): [257..258]
 a66(r162): [259..260]
 a67(r140): [183..184]
 a68(r161): [185..186]
 a69(r160): [194..195]
 a70(r138): [164..165]
 a71(r159): [166..167]
 a72(r158): [266..267]
 a73(r157): [270..271]
 a74(r95): [279..280]
 a75(r94): [281..284]
 a76(r156): [281..282]
 a77(r93): [285..286]
 a78(r92): [285..288]
 a79(r155): [295..304]
 a80(r154): [297..306]
 a81(r153): [299..308]
 a82(r152): [301..310]
 a83(r151): [303..312]
 a84(r90 [0]): [317..360]
 a84(r90 [1]): [316..360]
 a85(r89): [319..320]
 a86(r132): [321..322]
 a87(r150): [323..326]
 a88(r131): [323..328]
 a89(r149): [331..332]
 a90(r88): [333..334]
 a91(r148): [335..336]
 a92(r147): [339..342]
 a93(r129): [339..344]
 a94(r146): [347..348]
 a95(r87): [349..350]
 a96(r145): [351..352]
Compressing live ranges: from 361 to 132 - 36%
Ranges after the compression:
 a0(r130): [54..123] [0..45]
 a1(r136): [54..111] [0..45]
 a2(r141): [0..39]
 a3(r143): [10..39] [4..7]
 a4(r186): [10..11]
 a5(r128): [10..11]
 a6(r187): [10..11]
 a7(r127): [12..13]
 a8(r126): [12..15]
 a9(r185): [14..15]
 a10(r125): [16..17]
 a11(r124): [18..19]
 a12(r184): [20..21]
 a13(r123): [22..23]
 a14(r183): [22..23]
 a15(r122): [24..25]
 a16(r182): [24..25]
 a17(r121): [26..27]
 a18(r120): [26..27]
 a19(r181): [28..29]
 a20(r119): [28..29]
 a21(r118): [30..31]
 a22(r117): [30..33]
 a23(r180): [32..33]
 a24(r116): [34..35]
 a25(r115): [36..37]
 a26(r179): [38..39]
 a27(r144): [4..5]
 a28(r178): [6..7]
 a29(r177): [8..9]
 a30(r142): [0..1]
 a31(r176): [2..3]
 a32(r175): [40..41]
 a33(r114): [42..43]
 a34(r113): [44..45]
 a35(r174): [44..45]
 a36(r173): [46..47]
 a37(r172): [48..49]
 a38(r171): [50..51]
 a39(r112): [52..53]
 a40(r137): [54..99]
 a41(r139): [64..99] [58..61]
 a42(r169): [64..65]
 a43(r111): [66..67]
 a44(r170): [66..67]
 a45(r110): [68..69]
 a46(r168): [70..71]
 a47(r109): [70..71]
 a48(r108): [72..73]
 a49(r107): [72..75]
 a50(r167): [74..75]
 a51(r106): [76..77]
 a52(r105): [78..79]
 a53(r166): [80..81]
 a54(r104): [82..83]
 a55(r103): [84..85]
 a56(r165): [84..85]
 a57(r102): [86..87]
 a58(r101): [86..87]
 a59(r164): [88..89]
 a60(r100): [88..89]
 a61(r99): [90..91]
 a62(r98): [90..93]
 a63(r163): [92..93]
 a64(r97): [94..95]
 a65(r96): [96..97]
 a66(r162): [98..99]
 a67(r140): [58..59]
 a68(r161): [60..61]
 a69(r160): [62..63]
 a70(r138): [54..55]
 a71(r159): [56..57]
 a72(r158): [100..101]
 a73(r157): [102..103]
 a74(r95): [104..105]
 a75(r94): [106..107]
 a76(r156): [106..107]
 a77(r93): [108..109]
 a78(r92): [108..109]
 a79(r155): [110..111]
 a80(r154): [110..111]
 a81(r153): [110..111]
 a82(r152): [110..111]
 a83(r151): [110..111]
 a84(r90 [0]): [112..131]
 a84(r90 [1]): [112..131]
 a85(r89): [112..113]
 a86(r132): [114..115]
 a87(r150): [116..117]
 a88(r131): [116..117]
 a89(r149): [118..119]
 a90(r88): [120..121]
 a91(r148): [122..123]
 a92(r147): [124..125]
 a93(r129): [124..125]
 a94(r146): [126..127]
 a95(r87): [128..129]
 a96(r145): [130..131]
  pref0:a36(r173)<-hr5@500
  pref1:a37(r172)<-hr5@500
  pref2:a38(r171)<-hr5@500
  pref3:a79(r155)<-hr5@500
  pref4:a80(r154)<-hr4@500
  pref5:a81(r153)<-hr1@500
  pref6:a82(r152)<-hr2@500
  regions=1, blocks=27, points=132
    allocnos=97 (big 1), copies=0, conflicts=0, ranges=102
Disposition:
   95:r87  l0     0   90:r88  l0     0   85:r89  l0     0   84:r90  l0    37
   78:r92  l0    21   77:r93  l0    22   75:r94  l0    21   74:r95  l0    21
   65:r96  l0     2   64:r97  l0     2   62:r98  l0     4   61:r99  l0     2
   60:r100 l0     4   58:r101 l0    21   57:r102 l0    22   55:r103 l0    21
   54:r104 l0    21   52:r105 l0     2   51:r106 l0     2   49:r107 l0     4
   48:r108 l0     2   47:r109 l0     4   45:r110 l0    21   43:r111 l0    21
   39:r112 l0     0   34:r113 l0    22   33:r114 l0    21   25:r115 l0     2
   24:r116 l0     2   22:r117 l0     4   21:r118 l0     2   20:r119 l0     4
   18:r120 l0    21   17:r121 l0    22   15:r122 l0    21   13:r123 l0    22
   11:r124 l0     2   10:r125 l0     2    8:r126 l0     4    7:r127 l0     2
    5:r128 l0     4   93:r129 l0     0    0:r130 l0     3   88:r131 l0     0
   86:r132 l0     0    1:r136 l0    41   40:r137 l0     0   70:r138 l0     1
   41:r139 l0     1   67:r140 l0     2    2:r141 l0     0   30:r142 l0     1
    3:r143 l0     1   27:r144 l0     2   96:r145 l0     0   94:r146 l0     0
   92:r147 l0     1   91:r148 l0     0   89:r149 l0     0   87:r150 l0     1
   83:r151 l0     5   82:r152 l0     2   81:r153 l0     1   80:r154 l0     4
   79:r155 l0     0   76:r156 l0    22   73:r157 l0    21   72:r158 l0     0
   71:r159 l0     1   69:r160 l0     1   68:r161 l0     2   66:r162 l0     2
   63:r163 l0     2   59:r164 l0     2   56:r165 l0    22   53:r166 l0     2
   50:r167 l0     2   46:r168 l0     2   42:r169 l0    21   44:r170 l0    22
   38:r171 l0     0   37:r172 l0     0   36:r173 l0     0   35:r174 l0    21
   32:r175 l0     0   31:r176 l0     1   29:r177 l0     1   28:r178 l0     2
   26:r179 l0     2   23:r180 l0     2   19:r181 l0     2   16:r182 l0    22
   14:r183 l0    21   12:r184 l0     2    9:r185 l0     2    4:r186 l0     2
    6:r187 l0    21
+++Costs: overall 9000, reg 9000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


efill

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8]
;;  ref usage 	r0={6d,1u} r1={7d,3u} r2={6d,1u} r4={7d,3u} r5={9d,5u} r6={1d,26u} r7={1d,30u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,25u} r17={44d,14u} r18={4d} r19={4d} r20={1d,91u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={6d,1u} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={2d,2u} r92={1d,1u} r93={1d,1u} r94={1d,1u,1e} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u,1e} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u,1e} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,2u} r130={1d,6u} r131={1d,2u} r132={1d,1u} r136={1d,4u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} 
;;    total ref usage 767{456d,308u,3e} in 168{164 regular + 4 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 92 93 94 95 129 130 131 132 136 145 146 147 148 149 150 151 152 153 154 155 156
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])
        (reg:DI 5 di [ egrid ])) "EFILL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ egrid ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])
        (reg:DI 4 si [ im ])) "EFILL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ im ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])
        (reg:DI 1 dx [ jm ])) "EFILL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ jm ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 145)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 145) [1 *im_58(D)+0 S4 A32])) "EFILL.f":1 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 145)
        (nil)))
(insn 10 9 11 2 (set (reg:DI 146)
        (sign_extend:DI (reg:SI 87 [ _1 ]))) "EFILL.f":1 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
        (nil)))
(insn 11 10 12 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 ubound.0+0 S8 A64])
        (reg:DI 146)) "EFILL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 146)
        (nil)))
(insn 12 11 14 2 (set (reg:DI 129 [ stride.2_60 ])
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 ubound.0+0 S8 A64])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 14 12 13 2 (set (reg:DI 147)
        (const_int 0 [0])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 13 14 15 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 129 [ stride.2_60 ])
            (const_int 0 [0]))) "EFILL.f":1 8 {*cmpdi_ccno_1}
     (nil))
(insn 15 13 16 2 (set (reg:DI 130 [ stride.2_61 ])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 129 [ stride.2_60 ])
            (reg:DI 147))) "EFILL.f":1 1003 {*movdicc_noc}
     (expr_list:REG_DEAD (reg:DI 147)
        (expr_list:REG_DEAD (reg:DI 129 [ stride.2_60 ])
            (expr_list:REG_DEAD (reg:CCGOC 17 flags)
                (nil)))))
(insn 16 15 17 2 (set (reg/f:DI 148)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 88 [ _2 ])
        (mem:SI (reg/f:DI 148) [1 *jm_62(D)+0 S4 A32])) "EFILL.f":1 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 148)
        (nil)))
(insn 18 17 19 2 (set (reg:DI 149)
        (sign_extend:DI (reg:SI 88 [ _2 ]))) "EFILL.f":1 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
        (nil)))
(insn 19 18 20 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 ubound.1+0 S8 A64])
        (reg:DI 149)) "EFILL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 149)
        (nil)))
(insn 20 19 22 2 (parallel [
            (set (reg:DI 131 [ size.4_64 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [3 ubound.1+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":1 349 {*muldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 22 20 21 2 (set (reg:DI 150)
        (const_int 0 [0])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 21 22 23 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 131 [ size.4_64 ])
            (const_int 0 [0]))) "EFILL.f":1 8 {*cmpdi_ccno_1}
     (nil))
(insn 23 21 25 2 (set (reg:DI 132 [ size.4_65 ])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 131 [ size.4_64 ])
            (reg:DI 150))) "EFILL.f":1 1003 {*movdicc_noc}
     (expr_list:REG_DEAD (reg:DI 150)
        (expr_list:REG_DEAD (reg:DI 131 [ size.4_64 ])
            (expr_list:REG_DEAD (reg:CCGOC 17 flags)
                (nil)))))
(insn 25 23 26 2 (set (reg:DI 89 [ size.6_3 ])
        (reg:DI 132 [ size.4_65 ])) "EFILL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 132 [ size.4_65 ])
        (nil)))
(insn 26 25 27 2 (set (subreg:DI (reg:TI 90 [ _4 ]) 0)
        (reg:DI 89 [ size.6_3 ])) "EFILL.f":1 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 89 [ size.6_3 ])
        (nil)))
(insn 27 26 31 2 (set (subreg:DI (reg:TI 90 [ _4 ]) 8)
        (const_int 0 [0])) "EFILL.f":1 85 {*movdi_internal}
     (expr_list:REG_UNUSED (reg:TI 90 [ _4 ])
        (nil)))
(insn 31 27 32 2 (set (reg:DI 136 [ offset.3_69 ])
        (not:DI (reg:DI 130 [ stride.2_61 ]))) "EFILL.f":1 532 {*one_cmpldi2_1}
     (nil))
(insn 32 31 33 2 (parallel [
            (set (reg:DI 151)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":60 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 33 32 34 2 (parallel [
            (set (reg:DI 152)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":60 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 34 33 35 2 (set (reg:DI 153)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])) "EFILL.f":60 85 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (set (reg:DI 154)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])) "EFILL.f":60 85 {*movdi_internal}
     (nil))
(insn 36 35 37 2 (set (reg:DI 155)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":60 85 {*movdi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:DI 37 r8)
        (reg:DI 151)) "EFILL.f":60 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 151)
        (nil)))
(insn 38 37 39 2 (set (reg:DI 2 cx)
        (reg:DI 152)) "EFILL.f":60 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 152)
        (nil)))
(insn 39 38 40 2 (set (reg:DI 1 dx)
        (reg:DI 153)) "EFILL.f":60 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 153)
        (nil)))
(insn 40 39 41 2 (set (reg:DI 4 si)
        (reg:DI 154)) "EFILL.f":60 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 154)
        (nil)))
(insn 41 40 42 2 (set (reg:DI 5 di)
        (reg:DI 155)) "EFILL.f":60 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 155)
        (nil)))
(insn 42 41 43 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "EFILL.f":60 88 {*movqi_internal}
     (nil))
(call_insn 43 42 44 2 (call (mem:QI (symbol_ref:DI ("minmax_") [flags 0x41]  <function_decl 0x7f09ef033600 minmax>) [0 minmax S1 A8])
        (const_int 0 [0])) "EFILL.f":60 689 {*call}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:DI 1 dx)
                        (expr_list:REG_DEAD (reg:QI 0 ax)
                            (nil)))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (nil))))))))
(insn 44 43 45 2 (set (reg:SF 92 [ fmax.8_6 ])
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [4 fmax+0 S4 A128])) "EFILL.f":61 131 {*movsf_internal}
     (nil))
(insn 45 44 46 2 (set (reg:SF 93 [ _7 ])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f09f60a6e10 options>) [4 options.spval+0 S4 A128])) "EFILL.f":1 131 {*movsf_internal}
     (nil))
(insn 46 45 47 2 (set (reg:SF 94 [ _8 ])
        (minus:SF (reg:SF 92 [ fmax.8_6 ])
            (reg:SF 93 [ _7 ]))) "EFILL.f":61 841 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 93 [ _7 ])
        (expr_list:REG_DEAD (reg:SF 92 [ fmax.8_6 ])
            (nil))))
(insn 47 46 48 2 (set (reg:V4SF 156)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S16 A128])) "EFILL.f":61 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 48 47 49 2 (parallel [
            (set (reg:SF 95 [ _9 ])
                (abs:SF (reg:SF 94 [ _8 ])))
            (use (reg:V4SF 156))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":61 507 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 156)
        (expr_list:REG_DEAD (reg:SF 94 [ _8 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (abs:SF (reg:SF 94 [ _8 ]))
                    (nil))))))
(insn 49 48 50 2 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 95 [ _9 ])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32]))) "EFILL.f":61 53 {*cmpisf}
     (expr_list:REG_DEAD (reg:SF 95 [ _9 ])
        (nil)))
(jump_insn 50 49 226 2 (set (pc)
        (if_then_else (gt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 224)
            (pc))) "EFILL.f":61 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil))
 -> 224)
;;  succ:       22
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 137 157 158
(note 226 50 59 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 59 226 60 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32])
        (const_int 0 [0])) "EFILL.f":65 86 {*movsi_internal}
     (nil))
(insn 60 59 61 3 (set (reg:DF 157)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64])) "EFILL.f":66 130 {*movdf_internal}
     (nil))
(insn 61 60 62 3 (set (mem/c:DF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 sum+0 S8 A64])
        (reg:DF 157)) "EFILL.f":66 130 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 157)
        (nil)))
(insn 62 61 63 3 (set (reg/f:DI 158)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])) "EFILL.f":68 85 {*movdi_internal}
     (nil))
(insn 63 62 64 3 (set (reg:SI 137 [ _74 ])
        (mem:SI (reg/f:DI 158) [1 *jm_62(D)+0 S4 A32])) "EFILL.f":68 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 158)
        (nil)))
(insn 64 63 124 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":68 86 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;;              10 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 137
;; lr  def 	 17 [flags] 138 159
(code_label 124 64 65 4 10 (nil) [1 uses])
(note 65 124 66 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 137 [ _74 ]))) "EFILL.f":68 11 {*cmpsi_1}
     (nil))
(insn 67 66 68 4 (set (reg:QI 159)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":68 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 68 67 69 4 (set (reg:SI 138 [ _76 ])
        (zero_extend:SI (reg:QI 159))) "EFILL.f":68 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 159)
        (nil)))
(insn 69 68 70 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 138 [ _76 ])
            (const_int 0 [0]))) "EFILL.f":68 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 138 [ _76 ])
        (nil)))
(jump_insn 70 69 71 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 246)
            (pc))) "EFILL.f":68 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 246)
;;  succ:       23
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 139 160
(note 71 70 72 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 5 (set (reg/f:DI 160)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])) "EFILL.f":69 85 {*movdi_internal}
     (nil))
(insn 73 72 74 5 (set (reg:SI 139 [ _77 ])
        (mem:SI (reg/f:DI 160) [1 *im_58(D)+0 S4 A32])) "EFILL.f":69 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 160)
        (nil)))
(insn 74 73 118 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":69 86 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;;              9 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139
;; lr  def 	 17 [flags] 140 161
(code_label 118 74 75 6 9 (nil) [1 uses])
(note 75 118 76 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (reg:SI 139 [ _77 ]))) "EFILL.f":69 11 {*cmpsi_1}
     (nil))
(insn 77 76 78 6 (set (reg:QI 161)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":69 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 78 77 79 6 (set (reg:SI 140 [ _79 ])
        (zero_extend:SI (reg:QI 161))) "EFILL.f":69 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 161)
        (nil)))
(insn 79 78 80 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 140 [ _79 ])
            (const_int 0 [0]))) "EFILL.f":69 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 140 [ _79 ])
        (nil)))
(jump_insn 80 79 81 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 249)
            (pc))) "EFILL.f":69 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 249)
;;  succ:       24
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  def 	 17 [flags] 96 97 98 99 100 101 102 103 104 162 163 164 165
(note 81 80 82 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 7 (set (reg:SI 162)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILL.f":70 86 {*movsi_internal}
     (nil))
(insn 83 82 84 7 (set (reg:DI 96 [ _10 ])
        (sign_extend:DI (reg:SI 162))) "EFILL.f":70 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 162)
        (nil)))
(insn 84 83 85 7 (parallel [
            (set (reg:DI 97 [ _11 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (reg:DI 96 [ _10 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 96 [ _10 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 85 84 86 7 (parallel [
            (set (reg:DI 98 [ _12 ])
                (plus:DI (reg:DI 136 [ offset.3_69 ])
                    (reg:DI 97 [ _11 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 97 [ _11 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 86 85 87 7 (set (reg:SI 163)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILL.f":70 86 {*movsi_internal}
     (nil))
(insn 87 86 88 7 (set (reg:DI 99 [ _13 ])
        (sign_extend:DI (reg:SI 163))) "EFILL.f":70 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 163)
        (nil)))
(insn 88 87 89 7 (parallel [
            (set (reg:DI 100 [ _14 ])
                (plus:DI (reg:DI 98 [ _12 ])
                    (reg:DI 99 [ _13 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 99 [ _13 ])
        (expr_list:REG_DEAD (reg:DI 98 [ _12 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 89 88 90 7 (set (reg/f:DI 164)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":70 85 {*movdi_internal}
     (nil))
(insn 90 89 91 7 (set (reg:SF 101 [ _15 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 100 [ _14 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 164)) [4 *egrid_70(D) S4 A32])) "EFILL.f":70 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 164)
        (expr_list:REG_DEAD (reg:DI 100 [ _14 ])
            (nil))))
(insn 91 90 92 7 (set (reg:SF 102 [ _16 ])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f09f60a6e10 options>) [4 options.spval+0 S4 A128])) "EFILL.f":1 131 {*movsf_internal}
     (nil))
(insn 92 91 93 7 (set (reg:SF 103 [ _17 ])
        (minus:SF (reg:SF 101 [ _15 ])
            (reg:SF 102 [ _16 ]))) "EFILL.f":70 841 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 102 [ _16 ])
        (expr_list:REG_DEAD (reg:SF 101 [ _15 ])
            (nil))))
(insn 93 92 94 7 (set (reg:V4SF 165)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S16 A128])) "EFILL.f":70 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 94 93 95 7 (parallel [
            (set (reg:SF 104 [ _18 ])
                (abs:SF (reg:SF 103 [ _17 ])))
            (use (reg:V4SF 165))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 507 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 165)
        (expr_list:REG_DEAD (reg:SF 103 [ _17 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (abs:SF (reg:SF 103 [ _17 ]))
                    (nil))))))
(insn 95 94 96 7 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 104 [ _18 ])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32]))) "EFILL.f":70 53 {*cmpisf}
     (expr_list:REG_DEAD (reg:SF 104 [ _18 ])
        (nil)))
(jump_insn 96 95 100 7 (set (pc)
        (if_then_else (unlt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 115)
            (pc))) "EFILL.f":70 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil))
 -> 115)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  def 	 17 [flags] 105 106 107 108 109 110 111 166 167 168 169 170
(note 100 96 101 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":71 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 102 101 103 8 (set (reg:SI 166)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILL.f":72 86 {*movsi_internal}
     (nil))
(insn 103 102 104 8 (set (reg:DI 105 [ _19 ])
        (sign_extend:DI (reg:SI 166))) "EFILL.f":72 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 166)
        (nil)))
(insn 104 103 105 8 (parallel [
            (set (reg:DI 106 [ _20 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (reg:DI 105 [ _19 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":72 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 105 [ _19 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 105 104 106 8 (parallel [
            (set (reg:DI 107 [ _21 ])
                (plus:DI (reg:DI 136 [ offset.3_69 ])
                    (reg:DI 106 [ _20 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":72 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 106 [ _20 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 106 105 107 8 (set (reg:SI 167)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILL.f":72 86 {*movsi_internal}
     (nil))
(insn 107 106 108 8 (set (reg:DI 108 [ _22 ])
        (sign_extend:DI (reg:SI 167))) "EFILL.f":72 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 167)
        (nil)))
(insn 108 107 109 8 (parallel [
            (set (reg:DI 109 [ _23 ])
                (plus:DI (reg:DI 107 [ _21 ])
                    (reg:DI 108 [ _22 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":72 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 108 [ _22 ])
        (expr_list:REG_DEAD (reg:DI 107 [ _21 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 109 108 110 8 (set (reg/f:DI 168)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":72 85 {*movdi_internal}
     (nil))
(insn 110 109 111 8 (set (reg:SF 110 [ _24 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 109 [ _23 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 168)) [4 *egrid_70(D) S4 A32])) "EFILL.f":72 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 168)
        (expr_list:REG_DEAD (reg:DI 109 [ _23 ])
            (nil))))
(insn 111 110 112 8 (set (reg:DF 111 [ _25 ])
        (float_extend:DF (reg:SF 110 [ _24 ]))) "EFILL.f":72 158 {*extendsfdf2}
     (expr_list:REG_DEAD (reg:SF 110 [ _24 ])
        (nil)))
(insn 112 111 113 8 (set (reg:DF 170)
        (mem/c:DF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 sum+0 S8 A64])) "EFILL.f":72 130 {*movdf_internal}
     (nil))
(insn 113 112 114 8 (set (reg:DF 169)
        (plus:DF (reg:DF 170)
            (reg:DF 111 [ _25 ]))) "EFILL.f":72 839 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 170)
        (expr_list:REG_DEAD (reg:DF 111 [ _25 ])
            (nil))))
(insn 114 113 115 8 (set (mem/c:DF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 sum+0 S8 A64])
        (reg:DF 169)) "EFILL.f":72 130 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 169)
        (nil)))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 24, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;;              7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 115 114 116 9 7 (nil) [1 uses])
(note 116 115 117 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 235 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":69 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 235 117 236 9 (set (pc)
        (label_ref 118)) "EFILL.f":69 683 {jump}
     (nil)
 -> 118)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139

(barrier 236 235 249)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 9, next block 10, flags: (RTL)
;;  pred:       6
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 249 236 248 24 22 (nil) [1 uses])
(note 248 249 250 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 250 248 121 24 (const_int 0 [0]) "EFILL.f":70 718 {nop}
     (nil))
;;  succ:       10 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137

;; basic block 10, loop depth 0, maybe hot
;;  prev block 24, next block 23, flags: (RTL)
;;  pred:       24 [always]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 121 250 122 10 6 (nil) [0 uses])
(note 122 121 123 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 237 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":68 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 237 123 238 10 (set (pc)
        (label_ref 124)) "EFILL.f":68 683 {jump}
     (nil)
 -> 124)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137

(barrier 238 237 246)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 10, next block 11, flags: (RTL)
;;  pred:       4
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 246 238 245 23 21 (nil) [1 uses])
(note 245 246 247 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 247 245 127 23 (const_int 0 [0]) "EFILL.f":69 718 {nop}
     (nil))
;;  succ:       11 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136

;; basic block 11, loop depth 0, maybe hot
;;  prev block 23, next block 12, flags: (RTL)
;;  pred:       23 [always]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 127 247 128 11 5 (nil) [0 uses])
(note 128 127 129 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32])
            (const_int 0 [0]))) "EFILL.f":76 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 130 129 131 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 150)
            (pc))) "EFILL.f":76 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 150)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112 171 172 173
(note 131 130 132 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 133 12 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -584 [0xfffffffffffffdb8])) [7 dt_parm.5.common.filename+0 S8 A64])
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f09ef0432d0 *.LC3>)) "EFILL.f":77 85 {*movdi_internal}
     (nil))
(insn 133 132 134 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -576 [0xfffffffffffffdc0])) [1 dt_parm.5.common.line+0 S4 A128])
        (const_int 77 [0x4d])) "EFILL.f":77 86 {*movsi_internal}
     (nil))
(insn 134 133 135 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [1 dt_parm.5.common.flags+0 S4 A128])
        (const_int 128 [0x80])) "EFILL.f":77 86 {*movsi_internal}
     (nil))
(insn 135 134 136 12 (set (reg:SI 112 [ _26 ])
        (mem/c:SI (symbol_ref:DI ("iounit_") [flags 0x2]  <var_decl 0x7f09f60a6ab0 iounit>) [1 iounit.stdout+0 S4 A128])) "EFILL.f":1 86 {*movsi_internal}
     (nil))
(insn 136 135 137 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -588 [0xfffffffffffffdb4])) [1 dt_parm.5.common.unit+0 S4 A32])
        (reg:SI 112 [ _26 ])) "EFILL.f":77 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 112 [ _26 ])
        (nil)))
(insn 137 136 138 12 (parallel [
            (set (reg:DI 171)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":77 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 138 137 139 12 (set (reg:DI 5 di)
        (reg:DI 171)) "EFILL.f":77 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 171)
        (nil)))
(call_insn 139 138 140 12 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x7f09ef030400 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "EFILL.f":77 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 140 139 141 12 (parallel [
            (set (reg:DI 172)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":77 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 141 140 142 12 (set (reg:DI 1 dx)
        (const_int 37 [0x25])) "EFILL.f":77 85 {*movdi_internal}
     (nil))
(insn 142 141 143 12 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f09ef043360 *.LC4>)) "EFILL.f":77 85 {*movdi_internal}
     (nil))
(insn 143 142 144 12 (set (reg:DI 5 di)
        (reg:DI 172)) "EFILL.f":77 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 172)
        (nil)))
(call_insn 144 143 145 12 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x7f09ef02d500 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "EFILL.f":77 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 145 144 146 12 (parallel [
            (set (reg:DI 173)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":77 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 146 145 147 12 (set (reg:DI 5 di)
        (reg:DI 173)) "EFILL.f":77 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 173)
        (nil)))
(call_insn 147 146 239 12 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x7f09ef030f00 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "EFILL.f":77 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 239 147 240 12 (set (pc)
        (label_ref 224)) "EFILL.f":78 683 {jump}
     (nil)
 -> 224)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 240 239 150)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 113 114 141 174 175
(code_label 150 240 151 13 11 (nil) [1 uses])
(note 151 150 152 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 153 13 (set (reg:DF 113 [ _27 ])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 npts+0 S4 A32]))) "EFILL.f":80 205 {*floatsidf2_mixed}
     (nil))
(insn 153 152 154 13 (set (reg:DF 174)
        (mem/c:DF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 sum+0 S8 A64])) "EFILL.f":80 130 {*movdf_internal}
     (nil))
(insn 154 153 155 13 (set (reg:DF 114 [ _28 ])
        (div:DF (reg:DF 174)
            (reg:DF 113 [ _27 ]))) "EFILL.f":80 842 {*fop_df_1}
     (expr_list:REG_DEAD (reg:DF 174)
        (expr_list:REG_DEAD (reg:DF 113 [ _27 ])
            (nil))))
(insn 155 154 156 13 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [4 avg+0 S4 A32])
        (float_truncate:SF (reg:DF 114 [ _28 ]))) "EFILL.f":80 161 {*truncdfsf_fast_mixed}
     (expr_list:REG_DEAD (reg:DF 114 [ _28 ])
        (nil)))
(insn 156 155 157 13 (set (reg/f:DI 175)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -616 [0xfffffffffffffd98])) [12 jm+0 S8 A64])) "EFILL.f":85 85 {*movdi_internal}
     (nil))
(insn 157 156 158 13 (set (reg:SI 141 [ _93 ])
        (mem:SI (reg/f:DI 175) [1 *jm_62(D)+0 S4 A32])) "EFILL.f":85 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 175)
        (nil)))
(insn 158 157 215 13 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":85 86 {*movsi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;;              20 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141
;; lr  def 	 17 [flags] 142 176
(code_label 215 158 159 14 17 (nil) [1 uses])
(note 159 215 160 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (reg:SI 141 [ _93 ]))) "EFILL.f":85 11 {*cmpsi_1}
     (nil))
(insn 161 160 162 14 (set (reg:QI 176)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":85 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 162 161 163 14 (set (reg:SI 142 [ _95 ])
        (zero_extend:SI (reg:QI 176))) "EFILL.f":85 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 176)
        (nil)))
(insn 163 162 164 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 142 [ _95 ])
            (const_int 0 [0]))) "EFILL.f":85 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 142 [ _95 ])
        (nil)))
(jump_insn 164 163 165 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 252)
            (pc))) "EFILL.f":85 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 252)
;;  succ:       25
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 143 177
(note 165 164 166 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 167 15 (set (reg/f:DI 177)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [12 im+0 S8 A64])) "EFILL.f":86 85 {*movdi_internal}
     (nil))
(insn 167 166 168 15 (set (reg:SI 143 [ _96 ])
        (mem:SI (reg/f:DI 177) [1 *im_58(D)+0 S4 A32])) "EFILL.f":86 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 177)
        (nil)))
(insn 168 167 209 15 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":86 86 {*movsi_internal}
     (nil))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
;;              19 [always] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143
;; lr  def 	 17 [flags] 144 178
(code_label 209 168 169 16 16 (nil) [1 uses])
(note 169 209 170 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 171 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (reg:SI 143 [ _96 ]))) "EFILL.f":86 11 {*cmpsi_1}
     (nil))
(insn 171 170 172 16 (set (reg:QI 178)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":86 678 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 172 171 173 16 (set (reg:SI 144 [ _98 ])
        (zero_extend:SI (reg:QI 178))) "EFILL.f":86 140 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 178)
        (nil)))
(insn 173 172 174 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 144 [ _98 ])
            (const_int 0 [0]))) "EFILL.f":86 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 144 [ _98 ])
        (nil)))
(jump_insn 174 173 175 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 255)
            (pc))) "EFILL.f":86 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 255)
;;  succ:       26
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  def 	 17 [flags] 115 116 117 118 119 120 121 122 123 179 180 181 182 183
(note 175 174 176 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 17 (set (reg:SI 179)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILL.f":87 86 {*movsi_internal}
     (nil))
(insn 177 176 178 17 (set (reg:DI 115 [ _29 ])
        (sign_extend:DI (reg:SI 179))) "EFILL.f":87 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 179)
        (nil)))
(insn 178 177 179 17 (parallel [
            (set (reg:DI 116 [ _30 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (reg:DI 115 [ _29 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 115 [ _29 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 179 178 180 17 (parallel [
            (set (reg:DI 117 [ _31 ])
                (plus:DI (reg:DI 136 [ offset.3_69 ])
                    (reg:DI 116 [ _30 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 116 [ _30 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 180 179 181 17 (set (reg:SI 180)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILL.f":87 86 {*movsi_internal}
     (nil))
(insn 181 180 182 17 (set (reg:DI 118 [ _32 ])
        (sign_extend:DI (reg:SI 180))) "EFILL.f":87 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 180)
        (nil)))
(insn 182 181 183 17 (parallel [
            (set (reg:DI 119 [ _33 ])
                (plus:DI (reg:DI 117 [ _31 ])
                    (reg:DI 118 [ _32 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 118 [ _32 ])
        (expr_list:REG_DEAD (reg:DI 117 [ _31 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 183 182 184 17 (set (reg/f:DI 181)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":87 85 {*movdi_internal}
     (nil))
(insn 184 183 185 17 (set (reg:SF 120 [ _34 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 119 [ _33 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 181)) [4 *egrid_70(D) S4 A32])) "EFILL.f":87 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 181)
        (expr_list:REG_DEAD (reg:DI 119 [ _33 ])
            (nil))))
(insn 185 184 186 17 (set (reg:SF 121 [ _35 ])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f09f60a6e10 options>) [4 options.spval+0 S4 A128])) "EFILL.f":1 131 {*movsf_internal}
     (nil))
(insn 186 185 187 17 (set (reg:SF 122 [ _36 ])
        (minus:SF (reg:SF 120 [ _34 ])
            (reg:SF 121 [ _35 ]))) "EFILL.f":87 841 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 121 [ _35 ])
        (expr_list:REG_DEAD (reg:SF 120 [ _34 ])
            (nil))))
(insn 187 186 188 17 (set (reg:V4SF 182)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S16 A128])) "EFILL.f":87 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 188 187 189 17 (parallel [
            (set (reg:SF 123 [ _37 ])
                (abs:SF (reg:SF 122 [ _36 ])))
            (use (reg:V4SF 182))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 507 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 182)
        (expr_list:REG_DEAD (reg:SF 122 [ _36 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (abs:SF (reg:SF 122 [ _36 ]))
                    (nil))))))
(insn 189 188 190 17 (set (reg:SF 183)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "EFILL.f":87 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.999999960041972002500187954865396022796630859375e-13 [0x0.8cbcccp-39])
        (nil)))
(insn 190 189 191 17 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 183)
            (reg:SF 123 [ _37 ]))) "EFILL.f":87 53 {*cmpisf}
     (expr_list:REG_DEAD (reg:SF 183)
        (expr_list:REG_DEAD (reg:SF 123 [ _37 ])
            (nil))))
(jump_insn 191 190 195 17 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 206)
            (pc))) "EFILL.f":87 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil))
 -> 206)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  def 	 17 [flags] 124 125 126 127 128 184 185 186 187
(note 195 191 196 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 18 (set (reg:SI 184)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "EFILL.f":87 86 {*movsi_internal}
     (nil))
(insn 197 196 198 18 (set (reg:DI 124 [ _38 ])
        (sign_extend:DI (reg:SI 184))) "EFILL.f":87 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 184)
        (nil)))
(insn 198 197 199 18 (parallel [
            (set (reg:DI 125 [ _39 ])
                (mult:DI (reg:DI 130 [ stride.2_61 ])
                    (reg:DI 124 [ _38 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 124 [ _38 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 199 198 200 18 (parallel [
            (set (reg:DI 126 [ _40 ])
                (plus:DI (reg:DI 136 [ offset.3_69 ])
                    (reg:DI 125 [ _39 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 125 [ _39 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 200 199 201 18 (set (reg:SI 185)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "EFILL.f":87 86 {*movsi_internal}
     (nil))
(insn 201 200 202 18 (set (reg:DI 127 [ _41 ])
        (sign_extend:DI (reg:SI 185))) "EFILL.f":87 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 185)
        (nil)))
(insn 202 201 203 18 (parallel [
            (set (reg:DI 128 [ _42 ])
                (plus:DI (reg:DI 126 [ _40 ])
                    (reg:DI 127 [ _41 ])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 127 [ _41 ])
        (expr_list:REG_DEAD (reg:DI 126 [ _40 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 203 202 204 18 (set (reg/f:DI 186)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -600 [0xfffffffffffffda8])) [11 egrid+0 S8 A64])) "EFILL.f":87 85 {*movdi_internal}
     (nil))
(insn 204 203 205 18 (set (reg:SF 187)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [4 avg+0 S4 A32])) "EFILL.f":87 131 {*movsf_internal}
     (nil))
(insn 205 204 206 18 (set (mem:SF (plus:DI (mult:DI (reg:DI 128 [ _42 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 186)) [4 *egrid_70(D) S4 A32])
        (reg:SF 187)) "EFILL.f":87 131 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 187)
        (expr_list:REG_DEAD (reg/f:DI 186)
            (expr_list:REG_DEAD (reg:DI 128 [ _42 ])
                (nil)))))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 26, flags: (RTL)
;;  pred:       18 (FALLTHRU)
;;              17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 206 205 207 19 14 (nil) [1 uses])
(note 207 206 208 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 241 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":86 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 241 208 242 19 (set (pc)
        (label_ref 209)) "EFILL.f":86 683 {jump}
     (nil)
 -> 209)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143

(barrier 242 241 255)
;; basic block 26, loop depth 0, maybe hot
;;  prev block 19, next block 20, flags: (RTL)
;;  pred:       16
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 255 242 254 26 24 (nil) [1 uses])
(note 254 255 256 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 256 254 212 26 (const_int 0 [0]) "EFILL.f":87 718 {nop}
     (nil))
;;  succ:       20 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141

;; basic block 20, loop depth 0, maybe hot
;;  prev block 26, next block 25, flags: (RTL)
;;  pred:       26 [always]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 212 256 213 20 13 (nil) [0 uses])
(note 213 212 214 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 243 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":85 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 243 214 244 20 (set (pc)
        (label_ref 215)) "EFILL.f":85 683 {jump}
     (nil)
 -> 215)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141

(barrier 244 243 252)
;; basic block 25, loop depth 0, maybe hot
;;  prev block 20, next block 21, flags: (RTL)
;;  pred:       14
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 252 244 251 25 23 (nil) [1 uses])
(note 251 252 253 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 253 251 218 25 (const_int 0 [0]) "EFILL.f":86 718 {nop}
     (nil))
;;  succ:       21 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 25, next block 22, flags: (RTL)
;;  pred:       25 [always]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 218 253 219 21 12 (nil) [0 uses])
(note 219 218 234 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 234 219 224 21 (const_int 0 [0]) "EFILL.f":95 718 {nop}
     (nil))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 1, flags: (RTL)
;;  pred:       21 (FALLTHRU)
;;              2
;;              12 [always] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 224 234 225 22 1 (nil) [2 uses])
(note 225 224 0 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

