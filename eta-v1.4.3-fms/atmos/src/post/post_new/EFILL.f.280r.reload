
;; Function efill (efill_, funcdef_no=0, decl_uid=3768, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=656, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=624, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 15:  (0) =r  (2) rm  (3) 0 {*movdicc_noc}
      Creating newreg=188 from oldreg=147, assigning class GENERAL_REGS to r188
   15: r188:DI={(flags:CCGOC>=0)?r129:DI:r188:DI}
      REG_DEAD r147:DI
      REG_DEAD r129:DI
      REG_DEAD flags:CCGOC
    Inserting insn reload before:
  258: r188:DI=r147:DI
    Inserting insn reload after:
  259: r130:DI=r188:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 20:  (0) r  (1) 0  (2) mr {*muldi3_1}
      Creating newreg=189 from oldreg=131, assigning class GENERAL_REGS to r189
   20: {r189:DI=r189:DI*[frame:DI-0x38];clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  260: r189:DI=r130:DI
    Inserting insn reload after:
  261: r131:DI=r189:DI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) r  (1) Z {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0 {*one_cmpldi2_1}
      Creating newreg=190 from oldreg=136, assigning class GENERAL_REGS to r190
   31: r190:DI=~r190:DI
    Inserting insn reload before:
  262: r190:DI=r130:DI
    Inserting insn reload after:
  263: r136:DI=r190:DI

            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 32:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 33:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) rBwBz {*call}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 44:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 45:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) v  (1) vm {*cmpisf}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 60:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 61:  (0) m  (1) v {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 84
	 Choosing alt 2 in insn 84:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 90:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 91:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 92:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 93:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) v  (1) vm {*cmpisf}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 101:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 104
	 Choosing alt 2 in insn 104:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 110:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) v  (1) vm {*extendsfdf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 112:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 113
	 Choosing alt 1 in insn 113:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 114:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 117:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 123:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 132:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 137:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 140:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 141:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 142:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 145:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) rBwBz {*call}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 152:  (0) v  (1) m {*floatsidf2_mixed}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 153:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 154:  (0) x  (1) 0  (2) xm {*fop_df_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 155:  (0) v  (1) vm {*truncdfsf_fast_mixed}
      Creating newreg=191, assigning class ALL_SSE_REGS to r191
  155: r191:SF=float_trunc(r114:DF)
      REG_DEAD r114:DF
    Inserting insn reload after:
  264: [frame:DI-0x3c]=r191:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 264:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 168:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 177:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 178
	 Choosing alt 2 in insn 178:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 184:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 185:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 186:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 187:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 189:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 198
	 Choosing alt 2 in insn 198:  (0) r  (1) 0  (2) mr {*muldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 203:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 204:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 205:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 208:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 214:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6 7 8
EBB 9
EBB 24
EBB 10
EBB 23
EBB 11 12
EBB 13
EBB 14 15
EBB 16 17 18
EBB 19
EBB 26
EBB 20
EBB 25
EBB 21
EBB 22

********** Pseudo live ranges #1: **********

  BB 22
  BB 12
   Insn 239: point = 0, n_alt = -1
   Insn 147: point = 0, n_alt = 0
   Insn 146: point = 0, n_alt = -2
   Insn 145: point = 1, n_alt = 3
   Insn 144: point = 2, n_alt = 0
   Insn 143: point = 2, n_alt = -2
   Insn 142: point = 3, n_alt = 2
   Insn 141: point = 3, n_alt = 2
   Insn 140: point = 3, n_alt = 3
   Insn 139: point = 4, n_alt = 0
   Insn 138: point = 4, n_alt = -2
   Insn 137: point = 5, n_alt = 3
   Insn 136: point = 6, n_alt = 1
   Insn 135: point = 7, n_alt = 0
   Insn 134: point = 8, n_alt = 1
   Insn 133: point = 8, n_alt = 1
   Insn 132: point = 8, n_alt = 5
  BB 21
   Insn 234: point = 8, n_alt = -1
  BB 25
   Insn 253: point = 8, n_alt = -1
  BB 14
   Insn 164: point = 8, n_alt = -1
   Insn 163: point = 8, n_alt = 0
   Insn 162: point = 9, n_alt = 0
   Insn 161: point = 11, n_alt = 0
   Insn 160: point = 12, n_alt = 0
  BB 20
   Insn 243: point = 13, n_alt = -1
   Insn 214: point = 13, n_alt = 1
  BB 26
   Insn 256: point = 14, n_alt = -1
  BB 16
   Insn 174: point = 15, n_alt = -1
   Insn 173: point = 15, n_alt = 0
   Insn 172: point = 16, n_alt = 0
   Insn 171: point = 18, n_alt = 0
   Insn 170: point = 19, n_alt = 0
  BB 19
   Insn 241: point = 20, n_alt = -1
   Insn 208: point = 20, n_alt = 1
  BB 18
   Insn 205: point = 21, n_alt = 8
   Insn 204: point = 22, n_alt = 7
   Insn 203: point = 23, n_alt = 3
   Insn 202: point = 24, n_alt = 0
   Insn 201: point = 26, n_alt = 1
   Insn 200: point = 28, n_alt = 0
   Insn 199: point = 29, n_alt = 3
   Insn 198: point = 31, n_alt = 2
   Insn 197: point = 33, n_alt = 1
   Insn 196: point = 35, n_alt = 0
  BB 17
   Insn 191: point = 37, n_alt = -1
   Insn 190: point = 37, n_alt = 1
   Insn 189: point = 38, n_alt = 7
   Insn 188: point = 39, n_alt = 1
   Insn 187: point = 41, n_alt = 2
   Insn 186: point = 42, n_alt = 2
   Insn 185: point = 44, n_alt = 7
   Insn 184: point = 45, n_alt = 7
   Insn 183: point = 47, n_alt = 3
   Insn 182: point = 48, n_alt = 0
   Insn 181: point = 50, n_alt = 1
   Insn 180: point = 52, n_alt = 0
   Insn 179: point = 53, n_alt = 3
   Insn 178: point = 55, n_alt = 2
   Insn 177: point = 57, n_alt = 1
   Insn 176: point = 59, n_alt = 0
  BB 15
   Insn 168: point = 61, n_alt = 1
   Insn 167: point = 61, n_alt = 0
   Insn 166: point = 63, n_alt = 3
  BB 13
   Insn 158: point = 65, n_alt = 1
   Insn 157: point = 65, n_alt = 0
   Insn 156: point = 67, n_alt = 3
   Insn 264: point = 68, n_alt = 8
   Insn 155: point = 69, n_alt = 1
   Insn 154: point = 71, n_alt = 2
   Insn 153: point = 73, n_alt = 14
   Insn 152: point = 74, n_alt = 2
  BB 11
   Insn 130: point = 76, n_alt = -1
   Insn 129: point = 76, n_alt = 1
  BB 23
   Insn 247: point = 77, n_alt = -1
  BB 4
   Insn 70: point = 78, n_alt = -1
   Insn 69: point = 78, n_alt = 0
   Insn 68: point = 79, n_alt = 0
   Insn 67: point = 81, n_alt = 0
   Insn 66: point = 82, n_alt = 0
  BB 10
   Insn 237: point = 83, n_alt = -1
   Insn 123: point = 83, n_alt = 1
  BB 24
   Insn 250: point = 84, n_alt = -1
  BB 6
   Insn 80: point = 85, n_alt = -1
   Insn 79: point = 85, n_alt = 0
   Insn 78: point = 86, n_alt = 0
   Insn 77: point = 88, n_alt = 0
   Insn 76: point = 89, n_alt = 0
  BB 9
   Insn 235: point = 90, n_alt = -1
   Insn 117: point = 90, n_alt = 1
  BB 8
   Insn 114: point = 91, n_alt = 15
   Insn 113: point = 92, n_alt = 1
   Insn 112: point = 94, n_alt = 14
   Insn 111: point = 95, n_alt = 2
   Insn 110: point = 97, n_alt = 7
   Insn 109: point = 99, n_alt = 3
   Insn 108: point = 100, n_alt = 0
   Insn 107: point = 102, n_alt = 1
   Insn 106: point = 104, n_alt = 0
   Insn 105: point = 105, n_alt = 3
   Insn 104: point = 107, n_alt = 2
   Insn 103: point = 109, n_alt = 1
   Insn 102: point = 111, n_alt = 0
   Insn 101: point = 112, n_alt = 1
  BB 7
   Insn 96: point = 113, n_alt = -1
   Insn 95: point = 113, n_alt = 1
   Insn 94: point = 114, n_alt = 0
   Insn 93: point = 116, n_alt = 2
   Insn 92: point = 117, n_alt = 2
   Insn 91: point = 119, n_alt = 7
   Insn 90: point = 120, n_alt = 7
   Insn 89: point = 122, n_alt = 3
   Insn 88: point = 123, n_alt = 0
   Insn 87: point = 125, n_alt = 1
   Insn 86: point = 127, n_alt = 0
   Insn 85: point = 128, n_alt = 3
   Insn 84: point = 130, n_alt = 2
   Insn 83: point = 132, n_alt = 1
   Insn 82: point = 134, n_alt = 0
  BB 5
   Insn 74: point = 136, n_alt = 1
   Insn 73: point = 136, n_alt = 0
   Insn 72: point = 138, n_alt = 3
  BB 3
   Insn 64: point = 140, n_alt = 1
   Insn 63: point = 140, n_alt = 0
   Insn 62: point = 142, n_alt = 3
   Insn 61: point = 143, n_alt = 15
   Insn 60: point = 144, n_alt = 14
   Insn 59: point = 145, n_alt = 1
  BB 2
   Insn 50: point = 146, n_alt = -1
   Insn 49: point = 146, n_alt = 1
   Insn 48: point = 147, n_alt = 0
   Insn 47: point = 149, n_alt = 2
   Insn 46: point = 150, n_alt = 2
   Insn 45: point = 152, n_alt = 7
   Insn 44: point = 153, n_alt = 7
   Insn 43: point = 154, n_alt = 0
   Insn 42: point = 154, n_alt = 3
   Insn 41: point = 154, n_alt = -2
   Insn 40: point = 155, n_alt = -2
   Insn 39: point = 156, n_alt = -2
   Insn 38: point = 157, n_alt = -2
   Insn 37: point = 158, n_alt = -2
   Insn 36: point = 159, n_alt = 3
   Insn 35: point = 160, n_alt = 3
   Insn 34: point = 161, n_alt = 3
   Insn 33: point = 162, n_alt = 3
   Insn 32: point = 163, n_alt = 3
   Insn 263: point = 164, n_alt = -2
	Hard reg 41 is preferable by r190 with profit 1000
   Insn 31: point = 166, n_alt = 0
   Insn 262: point = 166, n_alt = -2
   Insn 27: point = 167, n_alt = 2
   Insn 26: point = 168, n_alt = 3
   Insn 25: point = 169, n_alt = -2
   Insn 23: point = 171, n_alt = 1
   Insn 21: point = 173, n_alt = 0
   Insn 22: point = 173, n_alt = 2
   Insn 261: point = 174, n_alt = -2
	Hard reg 0 is preferable by r189 with profit 1000
   Insn 20: point = 176, n_alt = 2
   Insn 260: point = 176, n_alt = -2
   Insn 19: point = 177, n_alt = 5
   Insn 18: point = 178, n_alt = 0
   Insn 17: point = 180, n_alt = 0
   Insn 16: point = 182, n_alt = 3
   Insn 259: point = 183, n_alt = -2
	Hard reg 3 is preferable by r188 with profit 1000
   Insn 15: point = 185, n_alt = 0
   Insn 258: point = 186, n_alt = -2
	Hard reg 3 is preferable by r188 with profit 1000
	Hard reg 1 is preferable by r188 with profit 1000
   Insn 13: point = 188, n_alt = 0
   Insn 14: point = 188, n_alt = 2
   Insn 12: point = 189, n_alt = 3
   Insn 11: point = 190, n_alt = 5
   Insn 10: point = 191, n_alt = 0
   Insn 9: point = 193, n_alt = 0
   Insn 8: point = 195, n_alt = 3
   Insn 4: point = 196, n_alt = 5
   Insn 3: point = 196, n_alt = 5
   Insn 2: point = 196, n_alt = 5
 r87: [192..193]
 r88: [179..180]
 r89: [168..169]
 r90: [167..196]
 r92: [151..153]
 r93: [151..152]
 r94: [148..150]
 r95: [146..147]
 r96: [131..132]
 r97: [129..130]
 r98: [124..128]
 r99: [124..125]
 r100: [121..123]
 r101: [118..120]
 r102: [118..119]
 r103: [115..117]
 r104: [113..114]
 r105: [108..109]
 r106: [106..107]
 r107: [101..105]
 r108: [101..102]
 r109: [98..100]
 r110: [96..97]
 r111: [93..95]
 r112: [6..7]
 r113: [72..74]
 r114: [70..71]
 r115: [56..57]
 r116: [54..55]
 r117: [49..53]
 r118: [49..50]
 r119: [46..48]
 r120: [43..45]
 r121: [43..44]
 r122: [40..42]
 r123: [37..39]
 r124: [32..33]
 r125: [30..31]
 r126: [25..29]
 r127: [25..26]
 r128: [21..24]
 r129: [185..189]
 r130: [8..183]
 r131: [172..174]
 r132: [170..171]
 r136: [8..164]
 r137: [78..140]
 r138: [78..79]
 r139: [85..136]
 r140: [85..86]
 r141: [8..65]
 r142: [8..9]
 r143: [15..61]
 r144: [15..16]
 r145: [194..195]
 r146: [190..191]
 r147: [187..188]
 r148: [181..182]
 r149: [177..178]
 r150: [172..173]
 r151: [158..163]
 r152: [157..162]
 r153: [156..161]
 r154: [155..160]
 r155: [154..159]
 r156: [148..149]
 r157: [143..144]
 r158: [141..142]
 r159: [80..81]
 r160: [137..138]
 r161: [87..88]
 r162: [133..134]
 r163: [126..127]
 r164: [121..122]
 r165: [115..116]
 r166: [110..111]
 r167: [103..104]
 r168: [98..99]
 r169: [91..92]
 r170: [93..94]
 r171: [4..5]
 r172: [2..3]
 r173: [0..1]
 r174: [72..73]
 r175: [66..67]
 r176: [10..11]
 r177: [62..63]
 r178: [17..18]
 r179: [58..59]
 r180: [51..52]
 r181: [46..47]
 r182: [40..41]
 r183: [37..38]
 r184: [34..35]
 r185: [27..28]
 r186: [21..23]
 r187: [21..22]
 r188: [184..186]
 r189: [175..176]
 r190: [165..166]
 r191: [68..69]
Compressing live ranges: from 197 to 140 - 71%
Ranges after the compression:
 r87: [136..137]
 r88: [126..127]
 r89: [116..117]
 r90: [116..139]
 r92: [110..111]
 r93: [110..111]
 r94: [108..109]
 r95: [106..107]
 r96: [96..97]
 r97: [94..95]
 r98: [90..93]
 r99: [90..91]
 r100: [88..89]
 r101: [86..87]
 r102: [86..87]
 r103: [84..85]
 r104: [82..83]
 r105: [78..79]
 r106: [76..77]
 r107: [72..75]
 r108: [72..73]
 r109: [70..71]
 r110: [68..69]
 r111: [66..67]
 r112: [6..7]
 r113: [54..55]
 r114: [52..53]
 r115: [42..43]
 r116: [40..41]
 r117: [36..39]
 r118: [36..37]
 r119: [34..35]
 r120: [32..33]
 r121: [32..33]
 r122: [30..31]
 r123: [28..29]
 r124: [24..25]
 r125: [22..23]
 r126: [18..21]
 r127: [18..19]
 r128: [16..17]
 r129: [130..133]
 r130: [8..129]
 r131: [120..121]
 r132: [118..119]
 r136: [8..113]
 r137: [56..101]
 r138: [56..57]
 r139: [60..99]
 r140: [60..61]
 r141: [8..47]
 r142: [8..9]
 r143: [12..45]
 r144: [12..13]
 r145: [138..139]
 r146: [134..135]
 r147: [132..133]
 r148: [128..129]
 r149: [124..125]
 r150: [120..121]
 r151: [112..113]
 r152: [112..113]
 r153: [112..113]
 r154: [112..113]
 r155: [112..113]
 r156: [108..109]
 r157: [104..105]
 r158: [102..103]
 r159: [58..59]
 r160: [100..101]
 r161: [62..63]
 r162: [98..99]
 r163: [92..93]
 r164: [88..89]
 r165: [84..85]
 r166: [80..81]
 r167: [74..75]
 r168: [70..71]
 r169: [64..65]
 r170: [66..67]
 r171: [4..5]
 r172: [2..3]
 r173: [0..1]
 r174: [54..55]
 r175: [48..49]
 r176: [10..11]
 r177: [46..47]
 r178: [14..15]
 r179: [44..45]
 r180: [38..39]
 r181: [34..35]
 r182: [30..31]
 r183: [28..29]
 r184: [26..27]
 r185: [20..21]
 r186: [16..17]
 r187: [16..17]
 r188: [130..131]
 r189: [122..123]
 r190: [114..115]
 r191: [50..51]

********** Assignment #1: **********

	 Assigning to 188 (cl=GENERAL_REGS, orig=147, freq=3000, tfirst=188, tfreq=3000)...
	   Assign 3 to reload r188 (freq=3000)
	 Assigning to 189 (cl=GENERAL_REGS, orig=131, freq=3000, tfirst=189, tfreq=3000)...
	   Assign 0 to reload r189 (freq=3000)
	 Assigning to 190 (cl=GENERAL_REGS, orig=136, freq=3000, tfirst=190, tfreq=3000)...
	   Assign 41 to reload r190 (freq=3000)
	 Assigning to 191 (cl=ALL_SSE_REGS, orig=191, freq=2000, tfirst=191, tfreq=2000)...
	   Assign 23 to reload r191 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=656, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=624, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 17
changing reg in insn 18
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 26
changing reg in insn 44
changing reg in insn 46
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 88
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 94
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 108
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 135
changing reg in insn 136
changing reg in insn 152
changing reg in insn 154
changing reg in insn 154
changing reg in insn 155
changing reg in insn 177
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 182
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 184
changing reg in insn 184
changing reg in insn 186
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 188
changing reg in insn 188
changing reg in insn 188
changing reg in insn 190
changing reg in insn 197
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 202
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 205
changing reg in insn 12
changing reg in insn 15
changing reg in insn 13
changing reg in insn 23
changing reg in insn 21
changing reg in insn 23
changing reg in insn 25
changing reg in insn 199
changing reg in insn 179
changing reg in insn 105
changing reg in insn 85
changing reg in insn 63
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 73
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 157
changing reg in insn 160
changing reg in insn 162
changing reg in insn 163
changing reg in insn 167
changing reg in insn 170
changing reg in insn 172
changing reg in insn 173
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 32
changing reg in insn 37
changing reg in insn 33
changing reg in insn 38
changing reg in insn 34
changing reg in insn 39
changing reg in insn 35
changing reg in insn 40
changing reg in insn 36
changing reg in insn 41
changing reg in insn 47
changing reg in insn 48
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 67
changing reg in insn 68
changing reg in insn 72
changing reg in insn 73
changing reg in insn 77
changing reg in insn 78
changing reg in insn 82
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 93
changing reg in insn 94
changing reg in insn 102
changing reg in insn 103
changing reg in insn 106
changing reg in insn 107
changing reg in insn 109
changing reg in insn 110
changing reg in insn 113
changing reg in insn 114
changing reg in insn 112
changing reg in insn 137
changing reg in insn 138
changing reg in insn 140
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 153
changing reg in insn 154
changing reg in insn 156
changing reg in insn 157
changing reg in insn 161
changing reg in insn 162
changing reg in insn 166
changing reg in insn 167
changing reg in insn 171
changing reg in insn 172
changing reg in insn 176
changing reg in insn 177
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 184
changing reg in insn 187
changing reg in insn 188
changing reg in insn 189
changing reg in insn 190
changing reg in insn 196
changing reg in insn 197
changing reg in insn 200
changing reg in insn 201
changing reg in insn 203
changing reg in insn 205
changing reg in insn 204
changing reg in insn 205
deleting insn with uid = 259.
deleting insn with uid = 261.
deleting insn with uid = 25.
deleting insn with uid = 263.
deleting insn with uid = 38.
deleting insn with uid = 39.
deleting insn with uid = 40.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 139.
verify found no changes in insn with uid = 144.
verify found no changes in insn with uid = 147.


efill

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 37 [r8] 38 [r9] 41 [r12]
;;  ref usage 	r0={25d,22u} r1={17d,13u} r2={34d,29u} r3={2d,7u} r4={15d,11u} r5={10d,6u} r6={1d,91u} r7={1d,30u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={44d,14u} r18={4d} r19={4d} r20={1d,1u} r21={21d,16u,3e} r22={14d,9u} r23={6d,1u} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={7d,1u} r38={6d} r39={4d} r40={4d} r41={2d,5u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 714{455d,256u,3e} in 168{164 regular + 4 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 92 93 94 95 129 130 131 132 136 145 146 147 148 149 150 151 152 153 154 155 156
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [11 egrid+0 S8 A64])
        (reg:DI 5 di [ egrid ])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -624 [0xfffffffffffffd90])) [12 im+0 S8 A64])
        (reg:DI 4 si [ im ])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [12 jm+0 S8 A64])
        (reg:DI 1 dx [ jm ])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -624 [0xfffffffffffffd90])) [12 im+0 S8 A64])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [145]) [1 *im_58(D)+0 S4 A32])) "EFILL.f":1 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 0 ax [146])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "EFILL.f":1 149 {*extendsidi2_rex64}
     (nil))
(insn 11 10 12 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 ubound.0+0 S8 A64])
        (reg:DI 0 ax [146])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 12 11 14 2 (set (reg:DI 0 ax [orig:129 stride.2_60 ] [129])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 ubound.0+0 S8 A64])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 14 12 13 2 (set (reg:DI 1 dx [147])
        (const_int 0 [0])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 13 14 258 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:129 stride.2_60 ] [129])
            (const_int 0 [0]))) "EFILL.f":1 8 {*cmpdi_ccno_1}
     (nil))
(insn 258 13 15 2 (set (reg:DI 3 bx [147])
        (reg:DI 1 dx [147])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 15 258 16 2 (set (reg:DI 3 bx [147])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:129 stride.2_60 ] [129])
            (reg:DI 3 bx [147]))) "EFILL.f":1 1003 {*movdicc_noc}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [12 jm+0 S8 A64])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (mem:SI (reg/f:DI 0 ax [148]) [1 *jm_62(D)+0 S4 A32])) "EFILL.f":1 86 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 0 ax [149])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _2 ] [88]))) "EFILL.f":1 149 {*extendsidi2_rex64}
     (nil))
(insn 19 18 260 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 ubound.1+0 S8 A64])
        (reg:DI 0 ax [149])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 260 19 20 2 (set (reg:DI 0 ax [orig:131 size.4_64 ] [131])
        (reg:DI 3 bx [orig:130 stride.2_61 ] [130])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 20 260 22 2 (parallel [
            (set (reg:DI 0 ax [orig:131 size.4_64 ] [131])
                (mult:DI (reg:DI 0 ax [orig:131 size.4_64 ] [131])
                    (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [3 ubound.1+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":1 349 {*muldi3_1}
     (nil))
(insn 22 20 21 2 (set (reg:DI 1 dx [150])
        (const_int 0 [0])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 21 22 23 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:131 size.4_64 ] [131])
            (const_int 0 [0]))) "EFILL.f":1 8 {*cmpdi_ccno_1}
     (nil))
(insn 23 21 26 2 (set (reg:DI 0 ax [orig:132 size.4_65 ] [132])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:131 size.4_64 ] [131])
            (reg:DI 1 dx [150]))) "EFILL.f":1 1003 {*movdicc_noc}
     (nil))
(insn 26 23 27 2 (set (reg:DI 37 r8 [orig:90 _4 ] [90])
        (reg:DI 0 ax [orig:89 size.6_3 ] [89])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 27 26 262 2 (set (reg:DI 38 r9 [ _4+8 ])
        (const_int 0 [0])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 262 27 31 2 (set (reg:DI 41 r12 [orig:136 offset.3_69 ] [136])
        (reg:DI 3 bx [orig:130 stride.2_61 ] [130])) "EFILL.f":1 85 {*movdi_internal}
     (nil))
(insn 31 262 32 2 (set (reg:DI 41 r12 [orig:136 offset.3_69 ] [136])
        (not:DI (reg:DI 41 r12 [orig:136 offset.3_69 ] [136]))) "EFILL.f":1 532 {*one_cmpldi2_1}
     (nil))
(insn 32 31 33 2 (parallel [
            (set (reg:DI 5 di [151])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":60 222 {*adddi_1}
     (nil))
(insn 33 32 34 2 (parallel [
            (set (reg:DI 2 cx [152])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":60 222 {*adddi_1}
     (nil))
(insn 34 33 35 2 (set (reg:DI 1 dx [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [12 jm+0 S8 A64])) "EFILL.f":60 85 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (set (reg:DI 4 si [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -624 [0xfffffffffffffd90])) [12 im+0 S8 A64])) "EFILL.f":60 85 {*movdi_internal}
     (nil))
(insn 36 35 37 2 (set (reg:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [11 egrid+0 S8 A64])) "EFILL.f":60 85 {*movdi_internal}
     (nil))
(insn 37 36 41 2 (set (reg:DI 37 r8)
        (reg:DI 5 di [151])) "EFILL.f":60 85 {*movdi_internal}
     (nil))
(insn 41 37 42 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [155])) "EFILL.f":60 85 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "EFILL.f":60 88 {*movqi_internal}
     (nil))
(call_insn 43 42 44 2 (call (mem:QI (symbol_ref:DI ("minmax_") [flags 0x41]  <function_decl 0x7f09ef033600 minmax>) [0 minmax S1 A8])
        (const_int 0 [0])) "EFILL.f":60 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (nil))))))))
(insn 44 43 45 2 (set (reg:SF 21 xmm0 [orig:92 fmax.8_6 ] [92])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [4 fmax+0 S4 A128])) "EFILL.f":61 131 {*movsf_internal}
     (nil))
(insn 45 44 46 2 (set (reg:SF 22 xmm1 [orig:93 _7 ] [93])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f09f60a6e10 options>) [4 options.spval+0 S4 A128])) "EFILL.f":1 131 {*movsf_internal}
     (nil))
(insn 46 45 47 2 (set (reg:SF 21 xmm0 [orig:94 _8 ] [94])
        (minus:SF (reg:SF 21 xmm0 [orig:92 fmax.8_6 ] [92])
            (reg:SF 22 xmm1 [orig:93 _7 ] [93]))) "EFILL.f":61 841 {*fop_sf_1}
     (nil))
(insn 47 46 48 2 (set (reg:V4SF 22 xmm1 [156])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S16 A128])) "EFILL.f":61 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 48 47 49 2 (parallel [
            (set (reg:SF 21 xmm0 [orig:95 _9 ] [95])
                (abs:SF (reg:SF 21 xmm0 [orig:94 _8 ] [94])))
            (use (reg:V4SF 22 xmm1 [156]))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":61 507 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 21 xmm0 [orig:94 _8 ] [94]))
        (nil)))
(insn 49 48 50 2 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [orig:95 _9 ] [95])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32]))) "EFILL.f":61 53 {*cmpisf}
     (nil))
(jump_insn 50 49 226 2 (set (pc)
        (if_then_else (gt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 224)
            (pc))) "EFILL.f":61 682 {*jcc}
     (nil)
 -> 224)
;;  succ:       22
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 137 157 158
(note 226 50 59 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 59 226 60 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 npts+0 S4 A32])
        (const_int 0 [0])) "EFILL.f":65 86 {*movsi_internal}
     (nil))
(insn 60 59 61 3 (set (reg:DF 21 xmm0 [157])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64])) "EFILL.f":66 130 {*movdf_internal}
     (nil))
(insn 61 60 62 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 sum+0 S8 A64])
        (reg:DF 21 xmm0 [157])) "EFILL.f":66 130 {*movdf_internal}
     (nil))
(insn 62 61 63 3 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [12 jm+0 S8 A64])) "EFILL.f":68 85 {*movdi_internal}
     (nil))
(insn 63 62 64 3 (set (reg:SI 0 ax [orig:137 _74 ] [137])
        (mem:SI (reg/f:DI 0 ax [158]) [1 *jm_62(D)+0 S4 A32])) "EFILL.f":68 86 {*movsi_internal}
     (nil))
(insn 64 63 124 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":68 86 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              10 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 137
;; lr  def 	 17 [flags] 138 159
(code_label 124 64 65 4 10 (nil) [1 uses])
(note 65 124 66 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:137 _74 ] [137]))) "EFILL.f":68 11 {*cmpsi_1}
     (nil))
(insn 67 66 68 4 (set (reg:QI 1 dx [159])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":68 678 {*setcc_qi}
     (nil))
(insn 68 67 69 4 (set (reg:SI 1 dx [orig:138 _76 ] [138])
        (zero_extend:SI (reg:QI 1 dx [159]))) "EFILL.f":68 140 {*zero_extendqisi2}
     (nil))
(insn 69 68 70 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:138 _76 ] [138])
            (const_int 0 [0]))) "EFILL.f":68 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 70 69 71 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 246)
            (pc))) "EFILL.f":68 682 {*jcc}
     (nil)
 -> 246)
;;  succ:       23
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 139 160
(note 71 70 72 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 5 (set (reg/f:DI 1 dx [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -624 [0xfffffffffffffd90])) [12 im+0 S8 A64])) "EFILL.f":69 85 {*movdi_internal}
     (nil))
(insn 73 72 74 5 (set (reg:SI 1 dx [orig:139 _77 ] [139])
        (mem:SI (reg/f:DI 1 dx [160]) [1 *im_58(D)+0 S4 A32])) "EFILL.f":69 86 {*movsi_internal}
     (nil))
(insn 74 73 118 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":69 86 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              9 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139
;; lr  def 	 17 [flags] 140 161
(code_label 118 74 75 6 9 (nil) [1 uses])
(note 75 118 76 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (reg:SI 1 dx [orig:139 _77 ] [139]))) "EFILL.f":69 11 {*cmpsi_1}
     (nil))
(insn 77 76 78 6 (set (reg:QI 2 cx [161])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":69 678 {*setcc_qi}
     (nil))
(insn 78 77 79 6 (set (reg:SI 2 cx [orig:140 _79 ] [140])
        (zero_extend:SI (reg:QI 2 cx [161]))) "EFILL.f":69 140 {*zero_extendqisi2}
     (nil))
(insn 79 78 80 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 2 cx [orig:140 _79 ] [140])
            (const_int 0 [0]))) "EFILL.f":69 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 80 79 81 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 249)
            (pc))) "EFILL.f":69 682 {*jcc}
     (nil)
 -> 249)
;;  succ:       24
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  def 	 17 [flags] 96 97 98 99 100 101 102 103 104 162 163 164 165
(note 81 80 82 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 7 (set (reg:SI 2 cx [162])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "EFILL.f":70 86 {*movsi_internal}
     (nil))
(insn 83 82 84 7 (set (reg:DI 2 cx [orig:96 _10 ] [96])
        (sign_extend:DI (reg:SI 2 cx [162]))) "EFILL.f":70 149 {*extendsidi2_rex64}
     (nil))
(insn 84 83 85 7 (parallel [
            (set (reg:DI 2 cx [orig:97 _11 ] [97])
                (mult:DI (reg:DI 2 cx [orig:96 _10 ] [96])
                    (reg:DI 3 bx [orig:130 stride.2_61 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 349 {*muldi3_1}
     (nil))
(insn 85 84 86 7 (parallel [
            (set (reg:DI 4 si [orig:98 _12 ] [98])
                (plus:DI (reg:DI 41 r12 [orig:136 offset.3_69 ] [136])
                    (reg:DI 2 cx [orig:97 _11 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 222 {*adddi_1}
     (nil))
(insn 86 85 87 7 (set (reg:SI 2 cx [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "EFILL.f":70 86 {*movsi_internal}
     (nil))
(insn 87 86 88 7 (set (reg:DI 2 cx [orig:99 _13 ] [99])
        (sign_extend:DI (reg:SI 2 cx [163]))) "EFILL.f":70 149 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 7 (parallel [
            (set (reg:DI 4 si [orig:100 _14 ] [100])
                (plus:DI (reg:DI 4 si [orig:98 _12 ] [98])
                    (reg:DI 2 cx [orig:99 _13 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 222 {*adddi_1}
     (nil))
(insn 89 88 90 7 (set (reg/f:DI 2 cx [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [11 egrid+0 S8 A64])) "EFILL.f":70 85 {*movdi_internal}
     (nil))
(insn 90 89 91 7 (set (reg:SF 21 xmm0 [orig:101 _15 ] [101])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:100 _14 ] [100])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [164])) [4 *egrid_70(D) S4 A32])) "EFILL.f":70 131 {*movsf_internal}
     (nil))
(insn 91 90 92 7 (set (reg:SF 22 xmm1 [orig:102 _16 ] [102])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f09f60a6e10 options>) [4 options.spval+0 S4 A128])) "EFILL.f":1 131 {*movsf_internal}
     (nil))
(insn 92 91 93 7 (set (reg:SF 21 xmm0 [orig:103 _17 ] [103])
        (minus:SF (reg:SF 21 xmm0 [orig:101 _15 ] [101])
            (reg:SF 22 xmm1 [orig:102 _16 ] [102]))) "EFILL.f":70 841 {*fop_sf_1}
     (nil))
(insn 93 92 94 7 (set (reg:V4SF 22 xmm1 [165])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S16 A128])) "EFILL.f":70 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 94 93 95 7 (parallel [
            (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
                (abs:SF (reg:SF 21 xmm0 [orig:103 _17 ] [103])))
            (use (reg:V4SF 22 xmm1 [165]))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":70 507 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 21 xmm0 [orig:103 _17 ] [103]))
        (nil)))
(insn 95 94 96 7 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [orig:104 _18 ] [104])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32]))) "EFILL.f":70 53 {*cmpisf}
     (nil))
(jump_insn 96 95 100 7 (set (pc)
        (if_then_else (unlt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 115)
            (pc))) "EFILL.f":70 682 {*jcc}
     (nil)
 -> 115)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  def 	 17 [flags] 105 106 107 108 109 110 111 166 167 168 169 170
(note 100 96 101 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [1 npts+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [1 npts+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":71 221 {*addsi_1}
     (nil))
(insn 102 101 103 8 (set (reg:SI 2 cx [166])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "EFILL.f":72 86 {*movsi_internal}
     (nil))
(insn 103 102 104 8 (set (reg:DI 2 cx [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 2 cx [166]))) "EFILL.f":72 149 {*extendsidi2_rex64}
     (nil))
(insn 104 103 105 8 (parallel [
            (set (reg:DI 2 cx [orig:106 _20 ] [106])
                (mult:DI (reg:DI 2 cx [orig:105 _19 ] [105])
                    (reg:DI 3 bx [orig:130 stride.2_61 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":72 349 {*muldi3_1}
     (nil))
(insn 105 104 106 8 (parallel [
            (set (reg:DI 4 si [orig:107 _21 ] [107])
                (plus:DI (reg:DI 41 r12 [orig:136 offset.3_69 ] [136])
                    (reg:DI 2 cx [orig:106 _20 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":72 222 {*adddi_1}
     (nil))
(insn 106 105 107 8 (set (reg:SI 2 cx [167])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "EFILL.f":72 86 {*movsi_internal}
     (nil))
(insn 107 106 108 8 (set (reg:DI 2 cx [orig:108 _22 ] [108])
        (sign_extend:DI (reg:SI 2 cx [167]))) "EFILL.f":72 149 {*extendsidi2_rex64}
     (nil))
(insn 108 107 109 8 (parallel [
            (set (reg:DI 4 si [orig:109 _23 ] [109])
                (plus:DI (reg:DI 4 si [orig:107 _21 ] [107])
                    (reg:DI 2 cx [orig:108 _22 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":72 222 {*adddi_1}
     (nil))
(insn 109 108 110 8 (set (reg/f:DI 2 cx [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [11 egrid+0 S8 A64])) "EFILL.f":72 85 {*movdi_internal}
     (nil))
(insn 110 109 111 8 (set (reg:SF 21 xmm0 [orig:110 _24 ] [110])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:109 _23 ] [109])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [168])) [4 *egrid_70(D) S4 A32])) "EFILL.f":72 131 {*movsf_internal}
     (nil))
(insn 111 110 112 8 (set (reg:DF 21 xmm0 [orig:111 _25 ] [111])
        (float_extend:DF (reg:SF 21 xmm0 [orig:110 _24 ] [110]))) "EFILL.f":72 158 {*extendsfdf2}
     (nil))
(insn 112 111 113 8 (set (reg:DF 22 xmm1 [170])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 sum+0 S8 A64])) "EFILL.f":72 130 {*movdf_internal}
     (nil))
(insn 113 112 114 8 (set (reg:DF 21 xmm0 [169])
        (plus:DF (reg:DF 21 xmm0 [orig:111 _25 ] [111])
            (reg:DF 22 xmm1 [170]))) "EFILL.f":72 839 {*fop_df_comm}
     (nil))
(insn 114 113 115 8 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 sum+0 S8 A64])
        (reg:DF 21 xmm0 [169])) "EFILL.f":72 130 {*movdf_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 24, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 115 114 116 9 7 (nil) [1 uses])
(note 116 115 117 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 235 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":69 221 {*addsi_1}
     (nil))
(jump_insn 235 117 236 9 (set (pc)
        (label_ref 118)) "EFILL.f":69 683 {jump}
     (nil)
 -> 118)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137 139

(barrier 236 235 249)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 9, next block 10, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 249 236 248 24 22 (nil) [1 uses])
(note 248 249 250 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 250 248 121 24 (const_int 0 [0]) "EFILL.f":70 718 {nop}
     (nil))
;;  succ:       10 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137

;; basic block 10, loop depth 0, maybe hot
;;  prev block 24, next block 23, flags: (RTL, MODIFIED)
;;  pred:       24 [always]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 121 250 122 10 6 (nil) [0 uses])
(note 122 121 123 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 237 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":68 221 {*addsi_1}
     (nil))
(jump_insn 237 123 238 10 (set (pc)
        (label_ref 124)) "EFILL.f":68 683 {jump}
     (nil)
 -> 124)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 137

(barrier 238 237 246)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 10, next block 11, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 246 238 245 23 21 (nil) [1 uses])
(note 245 246 247 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 247 245 127 23 (const_int 0 [0]) "EFILL.f":69 718 {nop}
     (nil))
;;  succ:       11 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136

;; basic block 11, loop depth 0, maybe hot
;;  prev block 23, next block 12, flags: (RTL, MODIFIED)
;;  pred:       23 [always]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 127 247 128 11 5 (nil) [0 uses])
(note 128 127 129 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [1 npts+0 S4 A32])
            (const_int 0 [0]))) "EFILL.f":76 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 130 129 131 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 150)
            (pc))) "EFILL.f":76 682 {*jcc}
     (nil)
 -> 150)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112 171 172 173
(note 131 130 132 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 133 12 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [7 dt_parm.5.common.filename+0 S8 A64])
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f09ef0432d0 *.LC3>)) "EFILL.f":77 85 {*movdi_internal}
     (nil))
(insn 133 132 134 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [1 dt_parm.5.common.line+0 S4 A128])
        (const_int 77 [0x4d])) "EFILL.f":77 86 {*movsi_internal}
     (nil))
(insn 134 133 135 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [1 dt_parm.5.common.flags+0 S4 A128])
        (const_int 128 [0x80])) "EFILL.f":77 86 {*movsi_internal}
     (nil))
(insn 135 134 136 12 (set (reg:SI 0 ax [orig:112 _26 ] [112])
        (mem/c:SI (symbol_ref:DI ("iounit_") [flags 0x2]  <var_decl 0x7f09f60a6ab0 iounit>) [1 iounit.stdout+0 S4 A128])) "EFILL.f":1 86 {*movsi_internal}
     (nil))
(insn 136 135 137 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -604 [0xfffffffffffffda4])) [1 dt_parm.5.common.unit+0 S4 A32])
        (reg:SI 0 ax [orig:112 _26 ] [112])) "EFILL.f":77 86 {*movsi_internal}
     (nil))
(insn 137 136 138 12 (parallel [
            (set (reg:DI 0 ax [171])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -608 [0xfffffffffffffda0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":77 222 {*adddi_1}
     (nil))
(insn 138 137 139 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [171])) "EFILL.f":77 85 {*movdi_internal}
     (nil))
(call_insn 139 138 140 12 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x7f09ef030400 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "EFILL.f":77 689 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 140 139 141 12 (parallel [
            (set (reg:DI 0 ax [172])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -608 [0xfffffffffffffda0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":77 222 {*adddi_1}
     (nil))
(insn 141 140 142 12 (set (reg:DI 1 dx)
        (const_int 37 [0x25])) "EFILL.f":77 85 {*movdi_internal}
     (nil))
(insn 142 141 143 12 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f09ef043360 *.LC4>)) "EFILL.f":77 85 {*movdi_internal}
     (nil))
(insn 143 142 144 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [172])) "EFILL.f":77 85 {*movdi_internal}
     (nil))
(call_insn 144 143 145 12 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x7f09ef02d500 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "EFILL.f":77 689 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 145 144 146 12 (parallel [
            (set (reg:DI 0 ax [173])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -608 [0xfffffffffffffda0])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":77 222 {*adddi_1}
     (nil))
(insn 146 145 147 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [173])) "EFILL.f":77 85 {*movdi_internal}
     (nil))
(call_insn 147 146 239 12 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x7f09ef030f00 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "EFILL.f":77 689 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 239 147 240 12 (set (pc)
        (label_ref 224)) "EFILL.f":78 683 {jump}
     (nil)
 -> 224)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 240 239 150)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 113 114 141 174 175
(code_label 150 240 151 13 11 (nil) [1 uses])
(note 151 150 152 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 153 13 (set (reg:DF 22 xmm1 [orig:113 _27 ] [113])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [1 npts+0 S4 A32]))) "EFILL.f":80 205 {*floatsidf2_mixed}
     (nil))
(insn 153 152 154 13 (set (reg:DF 21 xmm0 [174])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 sum+0 S8 A64])) "EFILL.f":80 130 {*movdf_internal}
     (nil))
(insn 154 153 155 13 (set (reg:DF 21 xmm0 [orig:114 _28 ] [114])
        (div:DF (reg:DF 21 xmm0 [174])
            (reg:DF 22 xmm1 [orig:113 _27 ] [113]))) "EFILL.f":80 842 {*fop_df_1}
     (nil))
(insn 155 154 264 13 (set (reg:SF 23 xmm2 [191])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:114 _28 ] [114]))) "EFILL.f":80 161 {*truncdfsf_fast_mixed}
     (nil))
(insn 264 155 156 13 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [4 avg+0 S4 A32])
        (reg:SF 23 xmm2 [191])) "EFILL.f":80 131 {*movsf_internal}
     (nil))
(insn 156 264 157 13 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [12 jm+0 S8 A64])) "EFILL.f":85 85 {*movdi_internal}
     (nil))
(insn 157 156 158 13 (set (reg:SI 0 ax [orig:141 _93 ] [141])
        (mem:SI (reg/f:DI 0 ax [175]) [1 *jm_62(D)+0 S4 A32])) "EFILL.f":85 86 {*movsi_internal}
     (nil))
(insn 158 157 215 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":85 86 {*movsi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              20 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141
;; lr  def 	 17 [flags] 142 176
(code_label 215 158 159 14 17 (nil) [1 uses])
(note 159 215 160 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:141 _93 ] [141]))) "EFILL.f":85 11 {*cmpsi_1}
     (nil))
(insn 161 160 162 14 (set (reg:QI 1 dx [176])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":85 678 {*setcc_qi}
     (nil))
(insn 162 161 163 14 (set (reg:SI 1 dx [orig:142 _95 ] [142])
        (zero_extend:SI (reg:QI 1 dx [176]))) "EFILL.f":85 140 {*zero_extendqisi2}
     (nil))
(insn 163 162 164 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:142 _95 ] [142])
            (const_int 0 [0]))) "EFILL.f":85 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 164 163 165 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 252)
            (pc))) "EFILL.f":85 682 {*jcc}
     (nil)
 -> 252)
;;  succ:       25
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 143 177
(note 165 164 166 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 167 15 (set (reg/f:DI 1 dx [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -624 [0xfffffffffffffd90])) [12 im+0 S8 A64])) "EFILL.f":86 85 {*movdi_internal}
     (nil))
(insn 167 166 168 15 (set (reg:SI 1 dx [orig:143 _96 ] [143])
        (mem:SI (reg/f:DI 1 dx [177]) [1 *im_58(D)+0 S4 A32])) "EFILL.f":86 86 {*movsi_internal}
     (nil))
(insn 168 167 209 15 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "EFILL.f":86 86 {*movsi_internal}
     (nil))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;;              19 [always] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143
;; lr  def 	 17 [flags] 144 178
(code_label 209 168 169 16 16 (nil) [1 uses])
(note 169 209 170 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 171 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (reg:SI 1 dx [orig:143 _96 ] [143]))) "EFILL.f":86 11 {*cmpsi_1}
     (nil))
(insn 171 170 172 16 (set (reg:QI 2 cx [178])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "EFILL.f":86 678 {*setcc_qi}
     (nil))
(insn 172 171 173 16 (set (reg:SI 2 cx [orig:144 _98 ] [144])
        (zero_extend:SI (reg:QI 2 cx [178]))) "EFILL.f":86 140 {*zero_extendqisi2}
     (nil))
(insn 173 172 174 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 2 cx [orig:144 _98 ] [144])
            (const_int 0 [0]))) "EFILL.f":86 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 174 173 175 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 255)
            (pc))) "EFILL.f":86 682 {*jcc}
     (nil)
 -> 255)
;;  succ:       26
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  def 	 17 [flags] 115 116 117 118 119 120 121 122 123 179 180 181 182 183
(note 175 174 176 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 17 (set (reg:SI 2 cx [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "EFILL.f":87 86 {*movsi_internal}
     (nil))
(insn 177 176 178 17 (set (reg:DI 2 cx [orig:115 _29 ] [115])
        (sign_extend:DI (reg:SI 2 cx [179]))) "EFILL.f":87 149 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 17 (parallel [
            (set (reg:DI 2 cx [orig:116 _30 ] [116])
                (mult:DI (reg:DI 2 cx [orig:115 _29 ] [115])
                    (reg:DI 3 bx [orig:130 stride.2_61 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 349 {*muldi3_1}
     (nil))
(insn 179 178 180 17 (parallel [
            (set (reg:DI 4 si [orig:117 _31 ] [117])
                (plus:DI (reg:DI 41 r12 [orig:136 offset.3_69 ] [136])
                    (reg:DI 2 cx [orig:116 _30 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 222 {*adddi_1}
     (nil))
(insn 180 179 181 17 (set (reg:SI 2 cx [180])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "EFILL.f":87 86 {*movsi_internal}
     (nil))
(insn 181 180 182 17 (set (reg:DI 2 cx [orig:118 _32 ] [118])
        (sign_extend:DI (reg:SI 2 cx [180]))) "EFILL.f":87 149 {*extendsidi2_rex64}
     (nil))
(insn 182 181 183 17 (parallel [
            (set (reg:DI 4 si [orig:119 _33 ] [119])
                (plus:DI (reg:DI 4 si [orig:117 _31 ] [117])
                    (reg:DI 2 cx [orig:118 _32 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 222 {*adddi_1}
     (nil))
(insn 183 182 184 17 (set (reg/f:DI 2 cx [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [11 egrid+0 S8 A64])) "EFILL.f":87 85 {*movdi_internal}
     (nil))
(insn 184 183 185 17 (set (reg:SF 21 xmm0 [orig:120 _34 ] [120])
        (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:119 _33 ] [119])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [181])) [4 *egrid_70(D) S4 A32])) "EFILL.f":87 131 {*movsf_internal}
     (nil))
(insn 185 184 186 17 (set (reg:SF 22 xmm1 [orig:121 _35 ] [121])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7f09f60a6e10 options>) [4 options.spval+0 S4 A128])) "EFILL.f":1 131 {*movsf_internal}
     (nil))
(insn 186 185 187 17 (set (reg:SF 21 xmm0 [orig:122 _36 ] [122])
        (minus:SF (reg:SF 21 xmm0 [orig:120 _34 ] [120])
            (reg:SF 22 xmm1 [orig:121 _35 ] [121]))) "EFILL.f":87 841 {*fop_sf_1}
     (nil))
(insn 187 186 188 17 (set (reg:V4SF 22 xmm1 [182])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S16 A128])) "EFILL.f":87 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 188 187 189 17 (parallel [
            (set (reg:SF 22 xmm1 [orig:123 _37 ] [123])
                (abs:SF (reg:SF 21 xmm0 [orig:122 _36 ] [122])))
            (use (reg:V4SF 22 xmm1 [182]))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 507 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 21 xmm0 [orig:122 _36 ] [122]))
        (nil)))
(insn 189 188 190 17 (set (reg:SF 21 xmm0 [183])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "EFILL.f":87 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.999999960041972002500187954865396022796630859375e-13 [0x0.8cbcccp-39])
        (nil)))
(insn 190 189 191 17 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [183])
            (reg:SF 22 xmm1 [orig:123 _37 ] [123]))) "EFILL.f":87 53 {*cmpisf}
     (nil))
(jump_insn 191 190 195 17 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 206)
            (pc))) "EFILL.f":87 682 {*jcc}
     (nil)
 -> 206)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136
;; lr  def 	 17 [flags] 124 125 126 127 128 184 185 186 187
(note 195 191 196 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 18 (set (reg:SI 2 cx [184])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "EFILL.f":87 86 {*movsi_internal}
     (nil))
(insn 197 196 198 18 (set (reg:DI 2 cx [orig:124 _38 ] [124])
        (sign_extend:DI (reg:SI 2 cx [184]))) "EFILL.f":87 149 {*extendsidi2_rex64}
     (nil))
(insn 198 197 199 18 (parallel [
            (set (reg:DI 2 cx [orig:125 _39 ] [125])
                (mult:DI (reg:DI 2 cx [orig:124 _38 ] [124])
                    (reg:DI 3 bx [orig:130 stride.2_61 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 349 {*muldi3_1}
     (nil))
(insn 199 198 200 18 (parallel [
            (set (reg:DI 4 si [orig:126 _40 ] [126])
                (plus:DI (reg:DI 41 r12 [orig:136 offset.3_69 ] [136])
                    (reg:DI 2 cx [orig:125 _39 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 222 {*adddi_1}
     (nil))
(insn 200 199 201 18 (set (reg:SI 2 cx [185])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "EFILL.f":87 86 {*movsi_internal}
     (nil))
(insn 201 200 202 18 (set (reg:DI 2 cx [orig:127 _41 ] [127])
        (sign_extend:DI (reg:SI 2 cx [185]))) "EFILL.f":87 149 {*extendsidi2_rex64}
     (nil))
(insn 202 201 203 18 (parallel [
            (set (reg:DI 4 si [orig:128 _42 ] [128])
                (plus:DI (reg:DI 4 si [orig:126 _40 ] [126])
                    (reg:DI 2 cx [orig:127 _41 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":87 222 {*adddi_1}
     (nil))
(insn 203 202 204 18 (set (reg/f:DI 2 cx [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [11 egrid+0 S8 A64])) "EFILL.f":87 85 {*movdi_internal}
     (nil))
(insn 204 203 205 18 (set (reg:SF 21 xmm0 [187])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [4 avg+0 S4 A32])) "EFILL.f":87 131 {*movsf_internal}
     (nil))
(insn 205 204 206 18 (set (mem:SF (plus:DI (mult:DI (reg:DI 4 si [orig:128 _42 ] [128])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [186])) [4 *egrid_70(D) S4 A32])
        (reg:SF 21 xmm0 [187])) "EFILL.f":87 131 {*movsf_internal}
     (nil))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 26, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;;              17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 206 205 207 19 14 (nil) [1 uses])
(note 207 206 208 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 241 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":86 221 {*addsi_1}
     (nil))
(jump_insn 241 208 242 19 (set (pc)
        (label_ref 209)) "EFILL.f":86 683 {jump}
     (nil)
 -> 209)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141 143

(barrier 242 241 255)
;; basic block 26, loop depth 0, maybe hot
;;  prev block 19, next block 20, flags: (RTL, MODIFIED)
;;  pred:       16
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 255 242 254 26 24 (nil) [1 uses])
(note 254 255 256 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 256 254 212 26 (const_int 0 [0]) "EFILL.f":87 718 {nop}
     (nil))
;;  succ:       20 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141

;; basic block 20, loop depth 0, maybe hot
;;  prev block 26, next block 25, flags: (RTL, MODIFIED)
;;  pred:       26 [always]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 212 256 213 20 13 (nil) [0 uses])
(note 213 212 214 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 243 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "EFILL.f":85 221 {*addsi_1}
     (nil))
(jump_insn 243 214 244 20 (set (pc)
        (label_ref 215)) "EFILL.f":85 683 {jump}
     (nil)
 -> 215)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 130 136 141

(barrier 244 243 252)
;; basic block 25, loop depth 0, maybe hot
;;  prev block 20, next block 21, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 252 244 251 25 23 (nil) [1 uses])
(note 251 252 253 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 253 251 218 25 (const_int 0 [0]) "EFILL.f":86 718 {nop}
     (nil))
;;  succ:       21 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 25, next block 22, flags: (RTL, MODIFIED)
;;  pred:       25 [always]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 218 253 219 21 12 (nil) [0 uses])
(note 219 218 234 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 234 219 224 21 (const_int 0 [0]) "EFILL.f":95 718 {nop}
     (nil))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 1, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;;              2
;;              12 [always] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 224 234 225 22 1 (nil) [2 uses])
(note 225 224 257 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 257 225 0 NOTE_INSN_DELETED)
