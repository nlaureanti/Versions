
;; Function calrch (calrch_, funcdef_no=0, decl_uid=3770, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 35:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 43:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 44:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 46:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 47:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 53:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 59:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 88
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 89:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 90:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 92:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 95:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 99:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 100:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 1 in insn 101:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 102:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 103:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 104:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 110:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 144:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 147
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 148:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 149:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 151:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 155:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 156:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 157:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 158:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 159:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 160:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 161
	 Choosing alt 1 in insn 161:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 163:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 164:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=616,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=625,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=630,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 166:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 169:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 170:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 173:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 176:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 180
	 Choosing alt 0 in insn 180:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 181:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 182:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 184:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 185:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 186:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 187:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 188
	 Choosing alt 1 in insn 188:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 192:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 195:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 199
	 Choosing alt 0 in insn 199:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 200:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 201:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 203:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 204
	 Choosing alt 1 in insn 204:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 207:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 210:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 214
	 Choosing alt 0 in insn 214:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 215:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 216:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 217:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 218:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 219:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 225:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 233:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 234:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 235:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 236:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 237
	 Choosing alt 0 in insn 237:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 243:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 251:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 260:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 261:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 267
	 Choosing alt 0 in insn 267:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 268:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 270:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 271:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 273:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 274:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 275:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 278:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 279
	 Choosing alt 0 in insn 279:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 280:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 281:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 282:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 284:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 285:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 287:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 288:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 291:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 292
	 Choosing alt 0 in insn 292:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 293:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 294:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 295:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 296:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 299:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 300:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 302:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 303:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 306:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 307
	 Choosing alt 0 in insn 307:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 308:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 309:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 310:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 311:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 312:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 314:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 315:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 318:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 319:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 322:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 323
	 Choosing alt 0 in insn 323:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 324:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 325:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 326:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 327:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 329:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 330:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 332:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 333
	 Choosing alt 0 in insn 333:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 334:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 335
	 Choosing alt 1 in insn 335:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 336:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 337:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 338:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 344:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 352:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 360:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 369:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 370:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 376
	 Choosing alt 0 in insn 376:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 377:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 379:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 380:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 382:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 383:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 384:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 387:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 388
	 Choosing alt 0 in insn 388:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 389:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 390:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 391:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 393:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 394:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 396:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 397:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 400:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 401
	 Choosing alt 0 in insn 401:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 402:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 403:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 404:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 405:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 408:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 409:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 411:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 412:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 413:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 416:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 417
	 Choosing alt 0 in insn 417:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 418:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 419:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 420:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 421:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 422:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 424:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 425:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 427:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 428:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 431:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 432
	 Choosing alt 0 in insn 432:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 433:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 434:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 435:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 436:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 438:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 439:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 441:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 442
	 Choosing alt 0 in insn 442:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 443:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 444
	 Choosing alt 1 in insn 444:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 445:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 446:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 447:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 453:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 459:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 460:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 462:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 463:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 467:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 475:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 484:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 485:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 486:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 492
	 Choosing alt 0 in insn 492:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 493:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 495:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 496:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 498:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 499:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 502:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 503
	 Choosing alt 0 in insn 503:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 504:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 505:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 506:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 508:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 509:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 510:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 511:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 512
	 Choosing alt 0 in insn 512:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 513:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 514:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 515:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 517:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 518:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 519:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 521:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 522
	 Choosing alt 0 in insn 522:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 523:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 524:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 525:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 526:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=1058 from oldreg=274, assigning class SSE_REGS to r1058
  526: r1058:SF=r1058:SF-r281:SF
      REG_DEAD r281:SF
      REG_DEAD r274:SF
    Inserting insn reload before:
 1373: r1058:SF=r274:SF
    Inserting insn reload after:
 1374: r282:SF=r1058:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 528:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 529:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 531:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 532
	 Choosing alt 0 in insn 532:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 533:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 534:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 535:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 536
	 Choosing alt 1 in insn 536:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 538:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 539:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 540:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 541:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 542:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 543
	 Choosing alt 0 in insn 543:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 544:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 545:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 546:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 547:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 549:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 550:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 551:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 552:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 553:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 555:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 556
	 Choosing alt 0 in insn 556:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 557:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 558:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 559:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 560
	 Choosing alt 1 in insn 560:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 561:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 562:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 563:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 565:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 566:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 568:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 569:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 570
	 Choosing alt 0 in insn 570:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 571:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 572
	 Choosing alt 1 in insn 572:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 573:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 574:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 575:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 581:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 587:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 593:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 595:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 596:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 597:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 598:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 603:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 605:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 606:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 611:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 614:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 615:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 616:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 620:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 621:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 626:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 627
	 Choosing alt 0 in insn 627:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 628:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 629:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 630:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 631:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 632:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 637:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 638
	 Choosing alt 0 in insn 638:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 639:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 640:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 641:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 642:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 643:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 644:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 645:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 646:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 647:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 648:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 649:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 650
	 Choosing alt 0 in insn 650:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 651:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 652:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 653:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 654:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 655:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 656:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 657:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 658:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 659:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 660:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 661:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 662:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 663:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 664
	 Choosing alt 0 in insn 664:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 665:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 666:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 667:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 668:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 669:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 670:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 671:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 672:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 673:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 674:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 675:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 676:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 677:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 678:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 679
	 Choosing alt 0 in insn 679:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 680:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 681:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 682:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 683:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 684:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 685:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 686:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 687:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 688:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 689:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 690:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 691:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 692:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 693:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 694:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 695
	 Choosing alt 0 in insn 695:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 696:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 697:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 698:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 699:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 700
	 Choosing alt 1 in insn 700:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 701:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 702:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 703:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 704:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 705:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 706:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 707:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 708:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 709:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 710:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 711:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 712:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 713
	 Choosing alt 0 in insn 713:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 714:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 715:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 716:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 717:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 718:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 719:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 720:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 721:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 722:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 723:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 724:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 725:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 726:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 727:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 728
	 Choosing alt 0 in insn 728:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 729:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 730:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 731:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 732:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 733:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 734:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 735:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 736:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 737:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 738:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 739:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 740:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 741:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 742:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 743:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 744
	 Choosing alt 0 in insn 744:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 745:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 746:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 747:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 748:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 749:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 750:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 751:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 752:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 753:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 754:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 755:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 756:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 757:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 758:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 759:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 760:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 761
	 Choosing alt 0 in insn 761:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 762:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 763:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 764:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 765:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 766
	 Choosing alt 1 in insn 766:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 767:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 768:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 769:  (0) v  (1) vm {*cmpiusf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 771:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 772:  (0) v  (1) vm {*cmpiusf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 776:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 777:  (0) v  (1) vm {*cmpiusf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 779:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 780:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 784:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 785:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 786:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 787:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 788:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 789:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 790:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 791:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 792:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 793:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 794
	 Choosing alt 0 in insn 794:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 795:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 796:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 797:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 798:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 799:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 800:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 801:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 802:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 803:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 804:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 805:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 806:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 807:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 808
	 Choosing alt 0 in insn 808:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 809:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 810:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 811:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 812:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 813:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 814:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 815:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 816:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 817:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 818:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 819:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 820:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 821:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 822:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 823
	 Choosing alt 0 in insn 823:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 824:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 825:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 826:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 827:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 828:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 829:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 830:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 831:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 832:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 833:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 834:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 835:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 836:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 837:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 838:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 839
	 Choosing alt 0 in insn 839:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 840:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 841:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 842:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 843:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 844
	 Choosing alt 1 in insn 844:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 846:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 847:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 848:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 849:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 850:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 851:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 852:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 853:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 854:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 855:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 856:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 857:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 858:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 859
	 Choosing alt 0 in insn 859:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 860:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 861:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 862:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 863:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 864:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 865:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 866:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 867:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 868:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 869:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 870:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 871:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 872:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 873:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 874
	 Choosing alt 0 in insn 874:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 875:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 876:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 877:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 878:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 879:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 880:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 881:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 882:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 883:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 884:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 885:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 886:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 887:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 888:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 889:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 890
	 Choosing alt 0 in insn 890:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 891:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 892:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 893:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 894:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 895:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 896:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 897:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 898:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 899:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 900:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 901:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 902:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 903:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 904:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 905:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 906:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 907
	 Choosing alt 0 in insn 907:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 908:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 909:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 910:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 911:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 912
	 Choosing alt 1 in insn 912:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 914:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 915:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 916:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 917:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 918:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 919:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 920:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 921:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 922:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 923:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 924:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 925:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 926
	 Choosing alt 0 in insn 926:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 927:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 928:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 929:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 930:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 931:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 932:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 933:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 934:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 935:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 936:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 937:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 938:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 939:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 940
	 Choosing alt 0 in insn 940:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 941:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 942:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 943:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 944:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 945:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 946:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 947:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 948:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 949:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 950:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 951:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 952:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 953:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 954:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 955
	 Choosing alt 0 in insn 955:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 956:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 957:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 958:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 959:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 960:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 961:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 962:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 963:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 964:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 965:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 966:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 967:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 968:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 969:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 970:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 971
	 Choosing alt 0 in insn 971:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 972:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 973:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 974:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 975:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 976
	 Choosing alt 1 in insn 976:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 978:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 979:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 980:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 981:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 982:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 983:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 984:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 985:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 986:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 987:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 988:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 989:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 990:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 991
	 Choosing alt 0 in insn 991:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 992:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 993:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 994:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 995:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 996:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 997:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 998:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 999:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1000:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1001:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 1002:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1003:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1004:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1005:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1006
	 Choosing alt 0 in insn 1006:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1007:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1008:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1009:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1010:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 1011:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1012:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1013:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1014:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1015:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1016:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1017:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 1018:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1019:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1020:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1021:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1022
	 Choosing alt 0 in insn 1022:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1023:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1024:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1025:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1026:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 1027:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1028:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1029:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1030:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1031:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1032:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1033:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1034:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 1035:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1036:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1037:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1038:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1039
	 Choosing alt 0 in insn 1039:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1040:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1041:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1042:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1043:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1044
	 Choosing alt 1 in insn 1044:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1046:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1047:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1048:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1049:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1050:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1051:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1052:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 1053:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1054:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1055:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1056:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1057
	 Choosing alt 0 in insn 1057:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1058:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1059:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1060:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1061:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1062:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1063:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1064:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1065:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1066:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1067:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 1068:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1069:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1070:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1071:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1072
	 Choosing alt 0 in insn 1072:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1073:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1074:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1075:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1076:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1077:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1079:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1080
	 Choosing alt 1 in insn 1080:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1081:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1082:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1083:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1084:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1085:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1086:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1087:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1088:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1089:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 1090:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1091:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1092:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1093:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1094
	 Choosing alt 0 in insn 1094:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1095:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1096:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1097:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1098:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1099:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1100:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1101:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1102:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1103:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1104:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1105:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1106
	 Choosing alt 0 in insn 1106:  (0) =r  (1) %0  (2) rme {*iorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1107:  (0) r {*cmpsi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1110:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1113:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1114:  (0) =v  (1) vm {*sqrtsf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1115:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1116:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1117:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1118:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1119:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1120:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 1121:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1122:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1123:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1124:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1125
	 Choosing alt 0 in insn 1125:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1126:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1127:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1128:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1129:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1130:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1131:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1132:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1133:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1134:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1135:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1136:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1137:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1138
	 Choosing alt 0 in insn 1138:  (0) =r  (1) %0  (2) rme {*iorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1139:  (0) r {*cmpsi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1142:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1145:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1146:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1147:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1148:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1149:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1150:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1151:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1152:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1153:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 1154:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1155:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1156:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1157:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1158
	 Choosing alt 0 in insn 1158:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1159:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1160:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1161:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1162:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1163:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1164:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1165:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1166:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1167:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 1168:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1169:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1170:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1171:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1172
	 Choosing alt 0 in insn 1172:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1173:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1174:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1175:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1176:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1177:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1178:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1179:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1180:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1181:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1182:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1183:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1184:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1185:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 1187:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=1059 from oldreg=705, assigning class SSE_REGS to r1059
 1187: r1059:SF=r1059:SF*r705:SF
      REG_DEAD r705:SF
    Inserting insn reload before:
 1375: r1059:SF=r705:SF
    Inserting insn reload after:
 1376: r706:SF=r1059:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1188:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1189:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1191:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1192
	 Choosing alt 1 in insn 1192:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1193:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1194:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1195:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1196:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1197:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1198:  (0) v  (1) vm {*cmpisf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1204:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1205:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1206:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1207:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1208:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 1209:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1210:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1211:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1212:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1213
	 Choosing alt 0 in insn 1213:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1214:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1215:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1216:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1217:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1222:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1223:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1224
	 Choosing alt 1 in insn 1224:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1225:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1226:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1227:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1228:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1229:  (0) r  (1) i {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1230:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1231:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1232:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1233:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1234:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1235:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1236:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1237:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 1238:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1239:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1240:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 1241:  (0) =r  (1) %rm  (2) K {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1242:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1243:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1244:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1245
	 Choosing alt 0 in insn 1245:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1246:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1247:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1248:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1249:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1252:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1258:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1264:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 7 8
EBB 67
EBB 9
EBB 66
EBB 10
EBB 65
EBB 11
EBB 12 13
EBB 14 15
EBB 69
EBB 16
EBB 68
EBB 17
EBB 18 19
EBB 20 21
EBB 22 23
EBB 72
EBB 24
EBB 71
EBB 25
EBB 26 27
EBB 28 29
EBB 74
EBB 30
EBB 73
EBB 31
EBB 32 33
EBB 34 35
EBB 76
EBB 36
EBB 75
EBB 37
EBB 38 39
EBB 40 41
EBB 78
EBB 42
EBB 77
EBB 43
EBB 70
EBB 44
EBB 45 46
EBB 47 48
EBB 49 50 51
EBB 52 53
EBB 54 55
EBB 56 57
EBB 58 59
EBB 60
EBB 61
EBB 81
EBB 62
EBB 80
EBB 63
EBB 79
EBB 64

********** Pseudo live ranges #1: **********

  BB 64
   Insn 1283: point = 0, n_alt = -1
  BB 79
   Insn 1365: point = 0, n_alt = -1
  BB 45
   Insn 599: point = 0, n_alt = -1
   Insn 598: point = 0, n_alt = 0
   Insn 597: point = 1, n_alt = 0
   Insn 596: point = 3, n_alt = 0
   Insn 595: point = 4, n_alt = 0
  BB 63
   Insn 1319: point = 4, n_alt = -1
   Insn 1264: point = 4, n_alt = 1
  BB 80
   Insn 1368: point = 4, n_alt = -1
  BB 47
   Insn 609: point = 4, n_alt = -1
   Insn 608: point = 4, n_alt = 0
   Insn 607: point = 5, n_alt = 0
   Insn 606: point = 7, n_alt = 0
   Insn 605: point = 8, n_alt = 0
  BB 62
   Insn 1317: point = 9, n_alt = -1
   Insn 1258: point = 9, n_alt = 1
  BB 81
   Insn 1371: point = 10, n_alt = -1
  BB 49
   Insn 617: point = 11, n_alt = -1
   Insn 616: point = 11, n_alt = 0
   Insn 615: point = 12, n_alt = 0
   Insn 614: point = 14, n_alt = 0
   Insn 613: point = 15, n_alt = 0
  BB 61
   Insn 1315: point = 16, n_alt = -1
   Insn 1252: point = 16, n_alt = 1
  BB 59
   Insn 1313: point = 17, n_alt = -1
   Insn 1217: point = 17, n_alt = 8
   Insn 1216: point = 18, n_alt = 3
   Insn 1215: point = 19, n_alt = 7
   Insn 1214: point = 20, n_alt = 3
   Insn 1213: point = 22, n_alt = 0
   Insn 1212: point = 24, n_alt = 1
   Insn 1211: point = 26, n_alt = 0
   Insn 1210: point = 27, n_alt = 0
   Insn 1209: point = 29, n_alt = 0
   Insn 1208: point = 31, n_alt = 1
   Insn 1207: point = 33, n_alt = 0
   Insn 1206: point = 34, n_alt = 1
   Insn 1205: point = 36, n_alt = 1
   Insn 1204: point = 38, n_alt = 0
  BB 60
   Insn 1249: point = 40, n_alt = 8
   Insn 1248: point = 41, n_alt = 7
   Insn 1247: point = 42, n_alt = 3
   Insn 1246: point = 43, n_alt = 3
   Insn 1245: point = 45, n_alt = 0
   Insn 1244: point = 47, n_alt = 1
   Insn 1243: point = 49, n_alt = 0
   Insn 1242: point = 50, n_alt = 0
   Insn 1241: point = 52, n_alt = 0
   Insn 1240: point = 54, n_alt = 1
   Insn 1239: point = 56, n_alt = 0
   Insn 1238: point = 57, n_alt = 1
   Insn 1237: point = 59, n_alt = 1
   Insn 1236: point = 61, n_alt = 0
   Insn 1235: point = 62, n_alt = 8
   Insn 1234: point = 63, n_alt = 0
   Insn 1233: point = 65, n_alt = 2
   Insn 1232: point = 66, n_alt = 2
   Insn 1231: point = 68, n_alt = 7
   Insn 1230: point = 69, n_alt = 7
   Insn 1229: point = 71, n_alt = 4
   Insn 1228: point = 72, n_alt = 8
   Insn 1227: point = 73, n_alt = 0
   Insn 1226: point = 75, n_alt = 2
   Insn 1225: point = 76, n_alt = 1
   Insn 1224: point = 78, n_alt = 1
   Insn 1223: point = 80, n_alt = 7
   Insn 1222: point = 81, n_alt = 7
  BB 58
   Insn 1199: point = 83, n_alt = -1
   Insn 1198: point = 83, n_alt = 1
   Insn 1197: point = 84, n_alt = 7
   Insn 1196: point = 85, n_alt = 7
   Insn 1195: point = 87, n_alt = 4
   Insn 1194: point = 88, n_alt = 8
   Insn 1193: point = 89, n_alt = 4
   Insn 1192: point = 90, n_alt = 1
   Insn 1191: point = 92, n_alt = 1
   Insn 1190: point = 94, n_alt = -2
   Insn 1189: point = 96, n_alt = 1
   Insn 1188: point = 98, n_alt = 7
   Insn 1376: point = 99, n_alt = -2
	Hard reg 22 is preferable by r1059 with profit 1000
   Insn 1187: point = 101, n_alt = 1
   Insn 1375: point = 102, n_alt = -2
	Hard reg 22 is preferable by r1059 with profit 1000
	Hard reg 21 is preferable by r1059 with profit 1000
   Insn 1186: point = 103, n_alt = -2
   Insn 1185: point = 105, n_alt = 1
   Insn 1184: point = 107, n_alt = 7
   Insn 1183: point = 108, n_alt = 8
   Insn 1182: point = 109, n_alt = 2
   Insn 1181: point = 111, n_alt = 7
   Insn 1180: point = 112, n_alt = 8
   Insn 1179: point = 113, n_alt = 2
   Insn 1178: point = 115, n_alt = 7
   Insn 1177: point = 116, n_alt = 8
   Insn 1176: point = 117, n_alt = 2
   Insn 1175: point = 119, n_alt = 7
   Insn 1174: point = 121, n_alt = 4
   Insn 1173: point = 122, n_alt = 3
   Insn 1172: point = 124, n_alt = 0
   Insn 1171: point = 126, n_alt = 1
   Insn 1170: point = 128, n_alt = 0
   Insn 1169: point = 129, n_alt = 0
   Insn 1168: point = 131, n_alt = 0
   Insn 1167: point = 133, n_alt = 1
   Insn 1166: point = 135, n_alt = 0
   Insn 1165: point = 136, n_alt = 1
   Insn 1164: point = 138, n_alt = 1
   Insn 1163: point = 140, n_alt = 0
   Insn 1162: point = 142, n_alt = 0
   Insn 1161: point = 143, n_alt = 7
   Insn 1160: point = 145, n_alt = 4
   Insn 1159: point = 146, n_alt = 3
   Insn 1158: point = 148, n_alt = 0
   Insn 1157: point = 150, n_alt = 1
   Insn 1156: point = 152, n_alt = 0
   Insn 1155: point = 153, n_alt = 0
   Insn 1154: point = 155, n_alt = 0
   Insn 1153: point = 157, n_alt = 1
   Insn 1152: point = 159, n_alt = 0
   Insn 1151: point = 160, n_alt = 1
   Insn 1150: point = 162, n_alt = 1
   Insn 1149: point = 164, n_alt = 0
   Insn 1148: point = 165, n_alt = 8
   Insn 1147: point = 166, n_alt = 1
   Insn 1146: point = 168, n_alt = 7
   Insn 1145: point = 169, n_alt = 8
  BB 57
   Insn 1142: point = 171, n_alt = 7
  BB 56
   Insn 1140: point = 173, n_alt = -1
   Insn 1139: point = 173, n_alt = 0
   Insn 1138: point = 174, n_alt = 0
   Insn 1137: point = 176, n_alt = 0
   Insn 1136: point = 178, n_alt = 0
   Insn 1135: point = 179, n_alt = 1
   Insn 1134: point = 179, n_alt = 0
   Insn 1133: point = 181, n_alt = 0
   Insn 1132: point = 182, n_alt = 1
   Insn 1131: point = 183, n_alt = 7
   Insn 1130: point = 184, n_alt = 7
   Insn 1129: point = 185, n_alt = 8
   Insn 1128: point = 186, n_alt = 7
   Insn 1127: point = 188, n_alt = 3
   Insn 1126: point = 189, n_alt = 3
   Insn 1125: point = 191, n_alt = 0
   Insn 1124: point = 193, n_alt = 1
   Insn 1123: point = 195, n_alt = 0
   Insn 1122: point = 196, n_alt = 0
   Insn 1121: point = 198, n_alt = 0
   Insn 1120: point = 200, n_alt = 1
   Insn 1119: point = 202, n_alt = 0
   Insn 1118: point = 203, n_alt = 1
   Insn 1117: point = 205, n_alt = 1
   Insn 1116: point = 207, n_alt = 0
   Insn 1115: point = 208, n_alt = 8
   Insn 1114: point = 209, n_alt = 0
   Insn 1113: point = 210, n_alt = 8
  BB 55
   Insn 1110: point = 212, n_alt = 7
  BB 54
   Insn 1108: point = 214, n_alt = -1
   Insn 1107: point = 214, n_alt = 0
   Insn 1106: point = 215, n_alt = 0
   Insn 1105: point = 217, n_alt = 0
   Insn 1104: point = 219, n_alt = 0
   Insn 1103: point = 220, n_alt = 1
   Insn 1102: point = 220, n_alt = 0
   Insn 1101: point = 222, n_alt = 0
   Insn 1100: point = 223, n_alt = 1
   Insn 1099: point = 224, n_alt = 7
   Insn 1098: point = 225, n_alt = 7
   Insn 1097: point = 227, n_alt = 0
   Insn 1096: point = 229, n_alt = 4
   Insn 1095: point = 230, n_alt = 3
   Insn 1094: point = 232, n_alt = 0
   Insn 1093: point = 234, n_alt = 1
   Insn 1092: point = 236, n_alt = 0
   Insn 1091: point = 237, n_alt = 0
   Insn 1090: point = 239, n_alt = 0
   Insn 1089: point = 241, n_alt = 1
   Insn 1088: point = 243, n_alt = 0
   Insn 1087: point = 244, n_alt = 1
   Insn 1086: point = 246, n_alt = 1
   Insn 1085: point = 248, n_alt = 0
   Insn 1084: point = 249, n_alt = 8
   Insn 1083: point = 250, n_alt = 2
   Insn 1082: point = 252, n_alt = 7
   Insn 1081: point = 253, n_alt = 8
   Insn 1080: point = 254, n_alt = 1
   Insn 1079: point = 256, n_alt = 7
   Insn 1078: point = 257, n_alt = -2
   Insn 1077: point = 259, n_alt = 2
   Insn 1076: point = 261, n_alt = 7
   Insn 1075: point = 263, n_alt = 0
   Insn 1074: point = 265, n_alt = 4
   Insn 1073: point = 266, n_alt = 3
   Insn 1072: point = 268, n_alt = 0
   Insn 1071: point = 270, n_alt = 1
   Insn 1070: point = 272, n_alt = 0
   Insn 1069: point = 273, n_alt = 0
   Insn 1068: point = 275, n_alt = 0
   Insn 1067: point = 277, n_alt = 1
   Insn 1066: point = 279, n_alt = 0
   Insn 1065: point = 280, n_alt = 1
   Insn 1064: point = 282, n_alt = 1
   Insn 1063: point = 284, n_alt = 0
   Insn 1062: point = 286, n_alt = 0
   Insn 1061: point = 287, n_alt = 7
   Insn 1060: point = 289, n_alt = 0
   Insn 1059: point = 291, n_alt = 4
   Insn 1058: point = 292, n_alt = 3
   Insn 1057: point = 294, n_alt = 0
   Insn 1056: point = 296, n_alt = 1
   Insn 1055: point = 298, n_alt = 0
   Insn 1054: point = 299, n_alt = 0
   Insn 1053: point = 301, n_alt = 0
   Insn 1052: point = 303, n_alt = 1
   Insn 1051: point = 305, n_alt = 0
   Insn 1050: point = 306, n_alt = 1
   Insn 1049: point = 308, n_alt = 1
   Insn 1048: point = 310, n_alt = 0
   Insn 1047: point = 311, n_alt = 8
   Insn 1046: point = 312, n_alt = 2
   Insn 1045: point = 314, n_alt = -2
   Insn 1044: point = 316, n_alt = 1
   Insn 1043: point = 318, n_alt = 7
   Insn 1042: point = 320, n_alt = 0
   Insn 1041: point = 322, n_alt = 4
   Insn 1040: point = 323, n_alt = 3
   Insn 1039: point = 325, n_alt = 0
   Insn 1038: point = 327, n_alt = 1
   Insn 1037: point = 329, n_alt = 0
   Insn 1036: point = 330, n_alt = 0
   Insn 1035: point = 332, n_alt = 0
   Insn 1034: point = 334, n_alt = 1
   Insn 1033: point = 336, n_alt = 0
   Insn 1032: point = 338, n_alt = 0
   Insn 1031: point = 339, n_alt = 1
   Insn 1030: point = 341, n_alt = 1
   Insn 1029: point = 343, n_alt = 0
   Insn 1028: point = 345, n_alt = 0
   Insn 1027: point = 346, n_alt = 1
   Insn 1026: point = 348, n_alt = 7
   Insn 1025: point = 350, n_alt = 0
   Insn 1024: point = 352, n_alt = 4
   Insn 1023: point = 353, n_alt = 3
   Insn 1022: point = 355, n_alt = 0
   Insn 1021: point = 357, n_alt = 1
   Insn 1020: point = 359, n_alt = 0
   Insn 1019: point = 360, n_alt = 0
   Insn 1018: point = 362, n_alt = 0
   Insn 1017: point = 364, n_alt = 1
   Insn 1016: point = 366, n_alt = 0
   Insn 1015: point = 367, n_alt = 1
   Insn 1014: point = 369, n_alt = 1
   Insn 1013: point = 371, n_alt = 0
   Insn 1012: point = 373, n_alt = 0
   Insn 1011: point = 374, n_alt = 1
   Insn 1010: point = 376, n_alt = 7
   Insn 1009: point = 378, n_alt = 0
   Insn 1008: point = 380, n_alt = 4
   Insn 1007: point = 381, n_alt = 3
   Insn 1006: point = 383, n_alt = 0
   Insn 1005: point = 385, n_alt = 1
   Insn 1004: point = 387, n_alt = 0
   Insn 1003: point = 388, n_alt = 0
   Insn 1002: point = 390, n_alt = 0
   Insn 1001: point = 392, n_alt = 1
   Insn 1000: point = 394, n_alt = 0
   Insn 999: point = 395, n_alt = 1
   Insn 998: point = 397, n_alt = 1
   Insn 997: point = 399, n_alt = 0
   Insn 996: point = 401, n_alt = 0
   Insn 995: point = 402, n_alt = 7
   Insn 994: point = 404, n_alt = 0
   Insn 993: point = 406, n_alt = 4
   Insn 992: point = 407, n_alt = 3
   Insn 991: point = 409, n_alt = 0
   Insn 990: point = 411, n_alt = 1
   Insn 989: point = 413, n_alt = 0
   Insn 988: point = 414, n_alt = 0
   Insn 987: point = 416, n_alt = 0
   Insn 986: point = 418, n_alt = 1
   Insn 985: point = 420, n_alt = 0
   Insn 984: point = 422, n_alt = 0
   Insn 983: point = 423, n_alt = 1
   Insn 982: point = 425, n_alt = 1
   Insn 981: point = 427, n_alt = 0
   Insn 980: point = 429, n_alt = 0
   Insn 979: point = 430, n_alt = 8
   Insn 978: point = 431, n_alt = 2
   Insn 977: point = 433, n_alt = -2
   Insn 976: point = 435, n_alt = 1
   Insn 975: point = 437, n_alt = 7
   Insn 974: point = 439, n_alt = 0
   Insn 973: point = 441, n_alt = 4
   Insn 972: point = 442, n_alt = 3
   Insn 971: point = 444, n_alt = 0
   Insn 970: point = 446, n_alt = 1
   Insn 969: point = 448, n_alt = 0
   Insn 968: point = 449, n_alt = 0
   Insn 967: point = 451, n_alt = 0
   Insn 966: point = 453, n_alt = 1
   Insn 965: point = 455, n_alt = 0
   Insn 964: point = 457, n_alt = 0
   Insn 963: point = 458, n_alt = 1
   Insn 962: point = 460, n_alt = 1
   Insn 961: point = 462, n_alt = 0
   Insn 960: point = 463, n_alt = 1
   Insn 959: point = 465, n_alt = 7
   Insn 958: point = 467, n_alt = 0
   Insn 957: point = 469, n_alt = 4
   Insn 956: point = 470, n_alt = 3
   Insn 955: point = 472, n_alt = 0
   Insn 954: point = 474, n_alt = 1
   Insn 953: point = 476, n_alt = 0
   Insn 952: point = 477, n_alt = 0
   Insn 951: point = 479, n_alt = 0
   Insn 950: point = 481, n_alt = 1
   Insn 949: point = 483, n_alt = 0
   Insn 948: point = 484, n_alt = 1
   Insn 947: point = 486, n_alt = 1
   Insn 946: point = 488, n_alt = 0
   Insn 945: point = 489, n_alt = 1
   Insn 944: point = 491, n_alt = 7
   Insn 943: point = 493, n_alt = 0
   Insn 942: point = 495, n_alt = 4
   Insn 941: point = 496, n_alt = 3
   Insn 940: point = 498, n_alt = 0
   Insn 939: point = 500, n_alt = 1
   Insn 938: point = 502, n_alt = 0
   Insn 937: point = 503, n_alt = 0
   Insn 936: point = 505, n_alt = 0
   Insn 935: point = 507, n_alt = 1
   Insn 934: point = 509, n_alt = 0
   Insn 933: point = 510, n_alt = 1
   Insn 932: point = 512, n_alt = 1
   Insn 931: point = 514, n_alt = 0
   Insn 930: point = 515, n_alt = 7
   Insn 929: point = 517, n_alt = 0
   Insn 928: point = 519, n_alt = 4
   Insn 927: point = 520, n_alt = 3
   Insn 926: point = 522, n_alt = 0
   Insn 925: point = 524, n_alt = 1
   Insn 924: point = 526, n_alt = 0
   Insn 923: point = 527, n_alt = 0
   Insn 922: point = 529, n_alt = 0
   Insn 921: point = 531, n_alt = 1
   Insn 920: point = 533, n_alt = 0
   Insn 919: point = 535, n_alt = 0
   Insn 918: point = 536, n_alt = 1
   Insn 917: point = 538, n_alt = 1
   Insn 916: point = 540, n_alt = 0
   Insn 915: point = 541, n_alt = 8
   Insn 914: point = 542, n_alt = 2
   Insn 913: point = 544, n_alt = -2
   Insn 912: point = 546, n_alt = 1
   Insn 911: point = 548, n_alt = 7
   Insn 910: point = 550, n_alt = 0
   Insn 909: point = 552, n_alt = 4
   Insn 908: point = 553, n_alt = 3
   Insn 907: point = 555, n_alt = 0
   Insn 906: point = 557, n_alt = 1
   Insn 905: point = 559, n_alt = 0
   Insn 904: point = 560, n_alt = 0
   Insn 903: point = 562, n_alt = 0
   Insn 902: point = 564, n_alt = 1
   Insn 901: point = 566, n_alt = 0
   Insn 900: point = 568, n_alt = 0
   Insn 899: point = 569, n_alt = 1
   Insn 898: point = 571, n_alt = 1
   Insn 897: point = 573, n_alt = 0
   Insn 896: point = 575, n_alt = 0
   Insn 895: point = 576, n_alt = 1
   Insn 894: point = 578, n_alt = 7
   Insn 893: point = 580, n_alt = 0
   Insn 892: point = 582, n_alt = 4
   Insn 891: point = 583, n_alt = 3
   Insn 890: point = 585, n_alt = 0
   Insn 889: point = 587, n_alt = 1
   Insn 888: point = 589, n_alt = 0
   Insn 887: point = 590, n_alt = 0
   Insn 886: point = 592, n_alt = 0
   Insn 885: point = 594, n_alt = 1
   Insn 884: point = 596, n_alt = 0
   Insn 883: point = 597, n_alt = 1
   Insn 882: point = 599, n_alt = 1
   Insn 881: point = 601, n_alt = 0
   Insn 880: point = 603, n_alt = 0
   Insn 879: point = 604, n_alt = 1
   Insn 878: point = 606, n_alt = 7
   Insn 877: point = 608, n_alt = 0
   Insn 876: point = 610, n_alt = 4
   Insn 875: point = 611, n_alt = 3
   Insn 874: point = 613, n_alt = 0
   Insn 873: point = 615, n_alt = 1
   Insn 872: point = 617, n_alt = 0
   Insn 871: point = 618, n_alt = 0
   Insn 870: point = 620, n_alt = 0
   Insn 869: point = 622, n_alt = 1
   Insn 868: point = 624, n_alt = 0
   Insn 867: point = 625, n_alt = 1
   Insn 866: point = 627, n_alt = 1
   Insn 865: point = 629, n_alt = 0
   Insn 864: point = 631, n_alt = 0
   Insn 863: point = 632, n_alt = 7
   Insn 862: point = 634, n_alt = 0
   Insn 861: point = 636, n_alt = 4
   Insn 860: point = 637, n_alt = 3
   Insn 859: point = 639, n_alt = 0
   Insn 858: point = 641, n_alt = 1
   Insn 857: point = 643, n_alt = 0
   Insn 856: point = 644, n_alt = 0
   Insn 855: point = 646, n_alt = 0
   Insn 854: point = 648, n_alt = 1
   Insn 853: point = 650, n_alt = 0
   Insn 852: point = 652, n_alt = 0
   Insn 851: point = 653, n_alt = 1
   Insn 850: point = 655, n_alt = 1
   Insn 849: point = 657, n_alt = 0
   Insn 848: point = 659, n_alt = 0
   Insn 847: point = 660, n_alt = 8
   Insn 846: point = 661, n_alt = 2
   Insn 845: point = 663, n_alt = -2
   Insn 844: point = 665, n_alt = 1
   Insn 843: point = 667, n_alt = 7
   Insn 842: point = 669, n_alt = 0
   Insn 841: point = 671, n_alt = 4
   Insn 840: point = 672, n_alt = 3
   Insn 839: point = 674, n_alt = 0
   Insn 838: point = 676, n_alt = 1
   Insn 837: point = 678, n_alt = 0
   Insn 836: point = 679, n_alt = 0
   Insn 835: point = 681, n_alt = 0
   Insn 834: point = 683, n_alt = 1
   Insn 833: point = 685, n_alt = 0
   Insn 832: point = 687, n_alt = 0
   Insn 831: point = 688, n_alt = 1
   Insn 830: point = 690, n_alt = 1
   Insn 829: point = 692, n_alt = 0
   Insn 828: point = 693, n_alt = 1
   Insn 827: point = 695, n_alt = 7
   Insn 826: point = 697, n_alt = 0
   Insn 825: point = 699, n_alt = 4
   Insn 824: point = 700, n_alt = 3
   Insn 823: point = 702, n_alt = 0
   Insn 822: point = 704, n_alt = 1
   Insn 821: point = 706, n_alt = 0
   Insn 820: point = 707, n_alt = 0
   Insn 819: point = 709, n_alt = 0
   Insn 818: point = 711, n_alt = 1
   Insn 817: point = 713, n_alt = 0
   Insn 816: point = 714, n_alt = 1
   Insn 815: point = 716, n_alt = 1
   Insn 814: point = 718, n_alt = 0
   Insn 813: point = 719, n_alt = 1
   Insn 812: point = 721, n_alt = 7
   Insn 811: point = 723, n_alt = 0
   Insn 810: point = 725, n_alt = 4
   Insn 809: point = 726, n_alt = 3
   Insn 808: point = 728, n_alt = 0
   Insn 807: point = 730, n_alt = 1
   Insn 806: point = 732, n_alt = 0
   Insn 805: point = 733, n_alt = 0
   Insn 804: point = 735, n_alt = 0
   Insn 803: point = 737, n_alt = 1
   Insn 802: point = 739, n_alt = 0
   Insn 801: point = 740, n_alt = 1
   Insn 800: point = 742, n_alt = 1
   Insn 799: point = 744, n_alt = 0
   Insn 798: point = 745, n_alt = 7
   Insn 797: point = 747, n_alt = 0
   Insn 796: point = 749, n_alt = 4
   Insn 795: point = 750, n_alt = 3
   Insn 794: point = 752, n_alt = 0
   Insn 793: point = 754, n_alt = 1
   Insn 792: point = 756, n_alt = 0
   Insn 791: point = 757, n_alt = 0
   Insn 790: point = 759, n_alt = 0
   Insn 789: point = 761, n_alt = 1
   Insn 788: point = 763, n_alt = 0
   Insn 787: point = 765, n_alt = 0
   Insn 786: point = 766, n_alt = 1
   Insn 785: point = 768, n_alt = 1
   Insn 784: point = 770, n_alt = 0
  BB 53
   Insn 781: point = 772, n_alt = -1
   Insn 780: point = 772, n_alt = 1
   Insn 779: point = 773, n_alt = 7
  BB 52
   Insn 778: point = 775, n_alt = -1
   Insn 777: point = 775, n_alt = 1
   Insn 776: point = 776, n_alt = 7
  BB 51
   Insn 773: point = 778, n_alt = -1
   Insn 772: point = 778, n_alt = 1
   Insn 771: point = 779, n_alt = 7
  BB 50
   Insn 770: point = 781, n_alt = -1
   Insn 769: point = 781, n_alt = 1
   Insn 768: point = 782, n_alt = 7
   Insn 767: point = 783, n_alt = 8
   Insn 766: point = 784, n_alt = 1
   Insn 765: point = 786, n_alt = 7
   Insn 764: point = 788, n_alt = 0
   Insn 763: point = 790, n_alt = 4
   Insn 762: point = 791, n_alt = 3
   Insn 761: point = 793, n_alt = 0
   Insn 760: point = 795, n_alt = 1
   Insn 759: point = 797, n_alt = 0
   Insn 758: point = 798, n_alt = 0
   Insn 757: point = 800, n_alt = 0
   Insn 756: point = 802, n_alt = 1
   Insn 755: point = 804, n_alt = 0
   Insn 754: point = 806, n_alt = 0
   Insn 753: point = 807, n_alt = 1
   Insn 752: point = 809, n_alt = 1
   Insn 751: point = 811, n_alt = 0
   Insn 750: point = 813, n_alt = 0
   Insn 749: point = 814, n_alt = 1
   Insn 748: point = 816, n_alt = 7
   Insn 747: point = 818, n_alt = 0
   Insn 746: point = 820, n_alt = 4
   Insn 745: point = 821, n_alt = 3
   Insn 744: point = 823, n_alt = 0
   Insn 743: point = 825, n_alt = 1
   Insn 742: point = 827, n_alt = 0
   Insn 741: point = 828, n_alt = 0
   Insn 740: point = 830, n_alt = 0
   Insn 739: point = 832, n_alt = 1
   Insn 738: point = 834, n_alt = 0
   Insn 737: point = 835, n_alt = 1
   Insn 736: point = 837, n_alt = 1
   Insn 735: point = 839, n_alt = 0
   Insn 734: point = 841, n_alt = 0
   Insn 733: point = 842, n_alt = 1
   Insn 732: point = 844, n_alt = 7
   Insn 731: point = 846, n_alt = 0
   Insn 730: point = 848, n_alt = 4
   Insn 729: point = 849, n_alt = 3
   Insn 728: point = 851, n_alt = 0
   Insn 727: point = 853, n_alt = 1
   Insn 726: point = 855, n_alt = 0
   Insn 725: point = 856, n_alt = 0
   Insn 724: point = 858, n_alt = 0
   Insn 723: point = 860, n_alt = 1
   Insn 722: point = 862, n_alt = 0
   Insn 721: point = 863, n_alt = 1
   Insn 720: point = 865, n_alt = 1
   Insn 719: point = 867, n_alt = 0
   Insn 718: point = 869, n_alt = 0
   Insn 717: point = 870, n_alt = 7
   Insn 716: point = 872, n_alt = 0
   Insn 715: point = 874, n_alt = 4
   Insn 714: point = 875, n_alt = 3
   Insn 713: point = 877, n_alt = 0
   Insn 712: point = 879, n_alt = 1
   Insn 711: point = 881, n_alt = 0
   Insn 710: point = 882, n_alt = 0
   Insn 709: point = 884, n_alt = 0
   Insn 708: point = 886, n_alt = 1
   Insn 707: point = 888, n_alt = 0
   Insn 706: point = 890, n_alt = 0
   Insn 705: point = 891, n_alt = 1
   Insn 704: point = 893, n_alt = 1
   Insn 703: point = 895, n_alt = 0
   Insn 702: point = 897, n_alt = 0
   Insn 701: point = 898, n_alt = 8
   Insn 700: point = 899, n_alt = 1
   Insn 699: point = 901, n_alt = 7
   Insn 698: point = 903, n_alt = 0
   Insn 697: point = 905, n_alt = 4
   Insn 696: point = 906, n_alt = 3
   Insn 695: point = 908, n_alt = 0
   Insn 694: point = 910, n_alt = 1
   Insn 693: point = 912, n_alt = 0
   Insn 692: point = 913, n_alt = 0
   Insn 691: point = 915, n_alt = 0
   Insn 690: point = 917, n_alt = 1
   Insn 689: point = 919, n_alt = 0
   Insn 688: point = 921, n_alt = 0
   Insn 687: point = 922, n_alt = 1
   Insn 686: point = 924, n_alt = 1
   Insn 685: point = 926, n_alt = 0
   Insn 684: point = 927, n_alt = 1
   Insn 683: point = 929, n_alt = 7
   Insn 682: point = 931, n_alt = 0
   Insn 681: point = 933, n_alt = 4
   Insn 680: point = 934, n_alt = 3
   Insn 679: point = 936, n_alt = 0
   Insn 678: point = 938, n_alt = 1
   Insn 677: point = 940, n_alt = 0
   Insn 676: point = 941, n_alt = 0
   Insn 675: point = 943, n_alt = 0
   Insn 674: point = 945, n_alt = 1
   Insn 673: point = 947, n_alt = 0
   Insn 672: point = 948, n_alt = 1
   Insn 671: point = 950, n_alt = 1
   Insn 670: point = 952, n_alt = 0
   Insn 669: point = 953, n_alt = 1
   Insn 668: point = 955, n_alt = 7
   Insn 667: point = 957, n_alt = 0
   Insn 666: point = 959, n_alt = 4
   Insn 665: point = 960, n_alt = 3
   Insn 664: point = 962, n_alt = 0
   Insn 663: point = 964, n_alt = 1
   Insn 662: point = 966, n_alt = 0
   Insn 661: point = 967, n_alt = 0
   Insn 660: point = 969, n_alt = 0
   Insn 659: point = 971, n_alt = 1
   Insn 658: point = 973, n_alt = 0
   Insn 657: point = 974, n_alt = 1
   Insn 656: point = 976, n_alt = 1
   Insn 655: point = 978, n_alt = 0
   Insn 654: point = 979, n_alt = 7
   Insn 653: point = 981, n_alt = 0
   Insn 652: point = 983, n_alt = 4
   Insn 651: point = 984, n_alt = 3
   Insn 650: point = 986, n_alt = 0
   Insn 649: point = 988, n_alt = 1
   Insn 648: point = 990, n_alt = 0
   Insn 647: point = 991, n_alt = 0
   Insn 646: point = 993, n_alt = 0
   Insn 645: point = 995, n_alt = 1
   Insn 644: point = 997, n_alt = 0
   Insn 643: point = 999, n_alt = 0
   Insn 642: point = 1000, n_alt = 1
   Insn 641: point = 1002, n_alt = 1
   Insn 640: point = 1004, n_alt = 0
   Insn 639: point = 1005, n_alt = 1
   Insn 638: point = 1006, n_alt = 0
   Insn 637: point = 1008, n_alt = 0
   Insn 633: point = 1009, n_alt = 0
   Insn 632: point = 1011, n_alt = 0
   Insn 631: point = 1013, n_alt = 0
   Insn 630: point = 1015, n_alt = 1
   Insn 629: point = 1017, n_alt = 0
   Insn 628: point = 1018, n_alt = 1
   Insn 627: point = 1019, n_alt = 0
   Insn 626: point = 1021, n_alt = 0
   Insn 622: point = 1022, n_alt = 0
   Insn 621: point = 1024, n_alt = 0
   Insn 620: point = 1026, n_alt = 1
   Insn 619: point = 1028, n_alt = 0
  BB 48
   Insn 611: point = 1030, n_alt = 1
  BB 46
   Insn 603: point = 1031, n_alt = 1
   Insn 602: point = 1032, n_alt = 0
   Insn 601: point = 1033, n_alt = 0
  BB 44
   Insn 593: point = 1034, n_alt = 1
  BB 70
   Insn 1338: point = 1034, n_alt = -1
  BB 18
   Insn 122: point = 1034, n_alt = -1
   Insn 121: point = 1034, n_alt = 0
   Insn 120: point = 1035, n_alt = 0
   Insn 119: point = 1037, n_alt = 0
   Insn 118: point = 1038, n_alt = 1
  BB 43
   Insn 1310: point = 1038, n_alt = -1
   Insn 587: point = 1038, n_alt = 1
  BB 77
   Insn 1359: point = 1038, n_alt = -1
  BB 38
   Insn 473: point = 1038, n_alt = -1
   Insn 472: point = 1038, n_alt = 0
   Insn 471: point = 1039, n_alt = 0
   Insn 470: point = 1041, n_alt = 0
   Insn 469: point = 1042, n_alt = 0
  BB 42
   Insn 1308: point = 1043, n_alt = -1
   Insn 581: point = 1043, n_alt = 1
  BB 78
   Insn 1362: point = 1044, n_alt = -1
  BB 40
   Insn 481: point = 1045, n_alt = -1
   Insn 480: point = 1045, n_alt = 0
   Insn 479: point = 1046, n_alt = 0
   Insn 478: point = 1048, n_alt = 0
   Insn 477: point = 1049, n_alt = 0
  BB 41
   Insn 1306: point = 1050, n_alt = -1
   Insn 575: point = 1050, n_alt = 1
   Insn 574: point = 1050, n_alt = 8
   Insn 573: point = 1051, n_alt = 4
   Insn 572: point = 1052, n_alt = 1
   Insn 571: point = 1054, n_alt = 3
   Insn 570: point = 1056, n_alt = 0
   Insn 569: point = 1058, n_alt = 1
   Insn 568: point = 1060, n_alt = 0
   Insn 567: point = 1061, n_alt = 0
   Insn 566: point = 1063, n_alt = 0
   Insn 565: point = 1065, n_alt = 1
   Insn 564: point = 1067, n_alt = 0
   Insn 563: point = 1068, n_alt = 1
   Insn 562: point = 1070, n_alt = 1
   Insn 561: point = 1072, n_alt = 0
   Insn 560: point = 1073, n_alt = 1
   Insn 559: point = 1075, n_alt = 7
   Insn 558: point = 1077, n_alt = 4
   Insn 557: point = 1078, n_alt = 3
   Insn 556: point = 1080, n_alt = 0
   Insn 555: point = 1082, n_alt = 1
   Insn 554: point = 1084, n_alt = 0
   Insn 553: point = 1085, n_alt = 0
   Insn 552: point = 1087, n_alt = 1
   Insn 551: point = 1089, n_alt = 0
   Insn 550: point = 1090, n_alt = 1
   Insn 549: point = 1092, n_alt = 7
   Insn 548: point = 1093, n_alt = -2
   Insn 547: point = 1095, n_alt = 2
   Insn 546: point = 1097, n_alt = 7
   Insn 545: point = 1099, n_alt = 4
   Insn 544: point = 1100, n_alt = 3
   Insn 543: point = 1102, n_alt = 0
   Insn 542: point = 1104, n_alt = 1
   Insn 541: point = 1106, n_alt = 0
   Insn 540: point = 1107, n_alt = 0
   Insn 539: point = 1109, n_alt = 1
   Insn 538: point = 1111, n_alt = 0
   Insn 537: point = 1113, n_alt = 0
   Insn 536: point = 1114, n_alt = 1
   Insn 535: point = 1116, n_alt = 7
   Insn 534: point = 1118, n_alt = 4
   Insn 533: point = 1119, n_alt = 3
   Insn 532: point = 1121, n_alt = 0
   Insn 531: point = 1123, n_alt = 1
   Insn 530: point = 1125, n_alt = 0
   Insn 529: point = 1126, n_alt = 0
   Insn 528: point = 1128, n_alt = 1
   Insn 527: point = 1130, n_alt = 0
   Insn 1374: point = 1131, n_alt = -2
	Hard reg 23 is preferable by r1058 with profit 1000
   Insn 526: point = 1133, n_alt = 2
   Insn 1373: point = 1134, n_alt = -2
	Hard reg 23 is preferable by r1058 with profit 1000
	Hard reg 21 is preferable by r1058 with profit 1000
   Insn 525: point = 1136, n_alt = 7
   Insn 524: point = 1138, n_alt = 4
   Insn 523: point = 1139, n_alt = 3
   Insn 522: point = 1141, n_alt = 0
   Insn 521: point = 1143, n_alt = 1
   Insn 520: point = 1145, n_alt = 0
   Insn 519: point = 1146, n_alt = 0
   Insn 518: point = 1148, n_alt = 1
   Insn 517: point = 1150, n_alt = 0
   Insn 516: point = 1152, n_alt = 0
   Insn 515: point = 1153, n_alt = 7
   Insn 514: point = 1155, n_alt = 4
   Insn 513: point = 1156, n_alt = 3
   Insn 512: point = 1158, n_alt = 0
   Insn 511: point = 1160, n_alt = 1
   Insn 510: point = 1162, n_alt = 0
   Insn 509: point = 1163, n_alt = 0
   Insn 508: point = 1165, n_alt = 1
   Insn 507: point = 1167, n_alt = 0
   Insn 506: point = 1168, n_alt = 7
   Insn 505: point = 1170, n_alt = 4
   Insn 504: point = 1171, n_alt = 3
   Insn 503: point = 1173, n_alt = 0
   Insn 502: point = 1175, n_alt = 1
   Insn 501: point = 1177, n_alt = 0
   Insn 500: point = 1178, n_alt = 0
   Insn 499: point = 1180, n_alt = 0
   Insn 498: point = 1182, n_alt = 1
   Insn 497: point = 1184, n_alt = 0
   Insn 496: point = 1185, n_alt = 1
   Insn 495: point = 1187, n_alt = 1
   Insn 494: point = 1189, n_alt = 0
   Insn 493: point = 1190, n_alt = 1
   Insn 492: point = 1191, n_alt = 0
   Insn 491: point = 1193, n_alt = 0
   Insn 487: point = 1194, n_alt = 0
   Insn 486: point = 1196, n_alt = 0
   Insn 485: point = 1198, n_alt = 0
   Insn 484: point = 1200, n_alt = 1
   Insn 483: point = 1202, n_alt = 0
  BB 39
   Insn 475: point = 1204, n_alt = 1
  BB 37
   Insn 467: point = 1205, n_alt = 1
   Insn 466: point = 1206, n_alt = 0
   Insn 465: point = 1207, n_alt = 0
   Insn 464: point = 1208, n_alt = 0
   Insn 463: point = 1208, n_alt = 3
   Insn 462: point = 1208, n_alt = 4
   Insn 461: point = 1208, n_alt = 0
   Insn 460: point = 1208, n_alt = 3
   Insn 459: point = 1208, n_alt = 4
  BB 75
   Insn 1353: point = 1208, n_alt = -1
  BB 32
   Insn 358: point = 1208, n_alt = -1
   Insn 357: point = 1208, n_alt = 0
   Insn 356: point = 1209, n_alt = 0
   Insn 355: point = 1211, n_alt = 0
   Insn 354: point = 1212, n_alt = 0
  BB 36
   Insn 1304: point = 1213, n_alt = -1
   Insn 453: point = 1213, n_alt = 1
  BB 76
   Insn 1356: point = 1214, n_alt = -1
  BB 34
   Insn 366: point = 1215, n_alt = -1
   Insn 365: point = 1215, n_alt = 0
   Insn 364: point = 1216, n_alt = 0
   Insn 363: point = 1218, n_alt = 0
   Insn 362: point = 1219, n_alt = 0
  BB 35
   Insn 1302: point = 1220, n_alt = -1
   Insn 447: point = 1220, n_alt = 1
   Insn 446: point = 1220, n_alt = 8
   Insn 445: point = 1221, n_alt = 4
   Insn 444: point = 1222, n_alt = 1
   Insn 443: point = 1224, n_alt = 3
   Insn 442: point = 1226, n_alt = 0
   Insn 441: point = 1228, n_alt = 1
   Insn 440: point = 1230, n_alt = 0
   Insn 439: point = 1231, n_alt = 0
   Insn 438: point = 1233, n_alt = 1
   Insn 437: point = 1235, n_alt = 0
   Insn 436: point = 1236, n_alt = 7
   Insn 435: point = 1238, n_alt = 0
   Insn 434: point = 1240, n_alt = 4
   Insn 433: point = 1241, n_alt = 3
   Insn 432: point = 1243, n_alt = 0
   Insn 431: point = 1245, n_alt = 1
   Insn 430: point = 1247, n_alt = 0
   Insn 429: point = 1248, n_alt = 0
   Insn 428: point = 1250, n_alt = 0
   Insn 427: point = 1252, n_alt = 1
   Insn 426: point = 1254, n_alt = 0
   Insn 425: point = 1255, n_alt = 1
   Insn 424: point = 1257, n_alt = 1
   Insn 423: point = 1259, n_alt = 0
   Insn 422: point = 1260, n_alt = 1
   Insn 421: point = 1262, n_alt = 7
   Insn 420: point = 1264, n_alt = 0
   Insn 419: point = 1266, n_alt = 4
   Insn 418: point = 1267, n_alt = 3
   Insn 417: point = 1269, n_alt = 0
   Insn 416: point = 1271, n_alt = 1
   Insn 415: point = 1273, n_alt = 0
   Insn 414: point = 1274, n_alt = 0
   Insn 413: point = 1276, n_alt = 0
   Insn 412: point = 1278, n_alt = 1
   Insn 411: point = 1280, n_alt = 0
   Insn 410: point = 1282, n_alt = 0
   Insn 409: point = 1283, n_alt = 1
   Insn 408: point = 1285, n_alt = 1
   Insn 407: point = 1287, n_alt = 0
   Insn 406: point = 1288, n_alt = -2
   Insn 405: point = 1290, n_alt = 2
   Insn 404: point = 1292, n_alt = 7
   Insn 403: point = 1294, n_alt = 4
   Insn 402: point = 1295, n_alt = 3
   Insn 401: point = 1297, n_alt = 0
   Insn 400: point = 1299, n_alt = 1
   Insn 399: point = 1301, n_alt = 0
   Insn 398: point = 1302, n_alt = 0
   Insn 397: point = 1304, n_alt = 0
   Insn 396: point = 1306, n_alt = 1
   Insn 395: point = 1308, n_alt = 0
   Insn 394: point = 1309, n_alt = 1
   Insn 393: point = 1311, n_alt = 1
   Insn 392: point = 1313, n_alt = 0
   Insn 391: point = 1314, n_alt = 7
   Insn 390: point = 1316, n_alt = 4
   Insn 389: point = 1317, n_alt = 3
   Insn 388: point = 1319, n_alt = 0
   Insn 387: point = 1321, n_alt = 1
   Insn 386: point = 1323, n_alt = 0
   Insn 385: point = 1324, n_alt = 0
   Insn 384: point = 1326, n_alt = 0
   Insn 383: point = 1328, n_alt = 1
   Insn 382: point = 1330, n_alt = 0
   Insn 381: point = 1332, n_alt = 0
   Insn 380: point = 1333, n_alt = 1
   Insn 379: point = 1335, n_alt = 1
   Insn 378: point = 1337, n_alt = 0
   Insn 377: point = 1338, n_alt = 1
   Insn 376: point = 1339, n_alt = 0
   Insn 375: point = 1341, n_alt = 0
   Insn 371: point = 1342, n_alt = 0
   Insn 370: point = 1344, n_alt = 0
   Insn 369: point = 1346, n_alt = 1
   Insn 368: point = 1348, n_alt = 0
  BB 33
   Insn 360: point = 1350, n_alt = 1
  BB 31
   Insn 352: point = 1351, n_alt = 1
   Insn 351: point = 1352, n_alt = 0
   Insn 350: point = 1353, n_alt = 0
  BB 73
   Insn 1347: point = 1354, n_alt = -1
  BB 26
   Insn 249: point = 1354, n_alt = -1
   Insn 248: point = 1354, n_alt = 0
   Insn 247: point = 1355, n_alt = 0
   Insn 246: point = 1357, n_alt = 0
   Insn 245: point = 1358, n_alt = 0
  BB 30
   Insn 1300: point = 1359, n_alt = -1
   Insn 344: point = 1359, n_alt = 1
  BB 74
   Insn 1350: point = 1360, n_alt = -1
  BB 28
   Insn 257: point = 1361, n_alt = -1
   Insn 256: point = 1361, n_alt = 0
   Insn 255: point = 1362, n_alt = 0
   Insn 254: point = 1364, n_alt = 0
   Insn 253: point = 1365, n_alt = 0
  BB 29
   Insn 1298: point = 1366, n_alt = -1
   Insn 338: point = 1366, n_alt = 1
   Insn 337: point = 1366, n_alt = 8
   Insn 336: point = 1367, n_alt = 4
   Insn 335: point = 1368, n_alt = 1
   Insn 334: point = 1370, n_alt = 3
   Insn 333: point = 1372, n_alt = 0
   Insn 332: point = 1374, n_alt = 1
   Insn 331: point = 1376, n_alt = 0
   Insn 330: point = 1377, n_alt = 0
   Insn 329: point = 1379, n_alt = 1
   Insn 328: point = 1381, n_alt = 0
   Insn 327: point = 1382, n_alt = 7
   Insn 326: point = 1384, n_alt = 0
   Insn 325: point = 1386, n_alt = 4
   Insn 324: point = 1387, n_alt = 3
   Insn 323: point = 1389, n_alt = 0
   Insn 322: point = 1391, n_alt = 1
   Insn 321: point = 1393, n_alt = 0
   Insn 320: point = 1394, n_alt = 0
   Insn 319: point = 1396, n_alt = 0
   Insn 318: point = 1398, n_alt = 1
   Insn 317: point = 1400, n_alt = 0
   Insn 316: point = 1402, n_alt = 0
   Insn 315: point = 1403, n_alt = 1
   Insn 314: point = 1405, n_alt = 1
   Insn 313: point = 1407, n_alt = 0
   Insn 312: point = 1408, n_alt = 1
   Insn 311: point = 1410, n_alt = 7
   Insn 310: point = 1412, n_alt = 0
   Insn 309: point = 1414, n_alt = 4
   Insn 308: point = 1415, n_alt = 3
   Insn 307: point = 1417, n_alt = 0
   Insn 306: point = 1419, n_alt = 1
   Insn 305: point = 1421, n_alt = 0
   Insn 304: point = 1422, n_alt = 0
   Insn 303: point = 1424, n_alt = 0
   Insn 302: point = 1426, n_alt = 1
   Insn 301: point = 1428, n_alt = 0
   Insn 300: point = 1429, n_alt = 1
   Insn 299: point = 1431, n_alt = 1
   Insn 298: point = 1433, n_alt = 0
   Insn 297: point = 1434, n_alt = -2
   Insn 296: point = 1436, n_alt = 2
   Insn 295: point = 1438, n_alt = 7
   Insn 294: point = 1440, n_alt = 4
   Insn 293: point = 1441, n_alt = 3
   Insn 292: point = 1443, n_alt = 0
   Insn 291: point = 1445, n_alt = 1
   Insn 290: point = 1447, n_alt = 0
   Insn 289: point = 1448, n_alt = 0
   Insn 288: point = 1450, n_alt = 0
   Insn 287: point = 1452, n_alt = 1
   Insn 286: point = 1454, n_alt = 0
   Insn 285: point = 1455, n_alt = 1
   Insn 284: point = 1457, n_alt = 1
   Insn 283: point = 1459, n_alt = 0
   Insn 282: point = 1460, n_alt = 7
   Insn 281: point = 1462, n_alt = 4
   Insn 280: point = 1463, n_alt = 3
   Insn 279: point = 1465, n_alt = 0
   Insn 278: point = 1467, n_alt = 1
   Insn 277: point = 1469, n_alt = 0
   Insn 276: point = 1470, n_alt = 0
   Insn 275: point = 1472, n_alt = 0
   Insn 274: point = 1474, n_alt = 1
   Insn 273: point = 1476, n_alt = 0
   Insn 272: point = 1478, n_alt = 0
   Insn 271: point = 1479, n_alt = 1
   Insn 270: point = 1481, n_alt = 1
   Insn 269: point = 1483, n_alt = 0
   Insn 268: point = 1484, n_alt = 1
   Insn 267: point = 1485, n_alt = 0
   Insn 266: point = 1487, n_alt = 0
   Insn 262: point = 1488, n_alt = 0
   Insn 261: point = 1490, n_alt = 0
   Insn 260: point = 1492, n_alt = 1
   Insn 259: point = 1494, n_alt = 0
  BB 27
   Insn 251: point = 1496, n_alt = 1
  BB 25
   Insn 243: point = 1497, n_alt = 1
   Insn 242: point = 1498, n_alt = 0
   Insn 241: point = 1499, n_alt = 0
   Insn 240: point = 1500, n_alt = 0
   Insn 239: point = 1500, n_alt = 3
   Insn 238: point = 1500, n_alt = -2
   Insn 237: point = 1501, n_alt = 0
   Insn 236: point = 1503, n_alt = 4
   Insn 235: point = 1504, n_alt = 1
   Insn 234: point = 1506, n_alt = 1
   Insn 233: point = 1508, n_alt = 0
   Insn 232: point = 1510, n_alt = 0
   Insn 231: point = 1512, n_alt = 0
  BB 71
   Insn 1341: point = 1513, n_alt = -1
  BB 20
   Insn 132: point = 1513, n_alt = -1
   Insn 131: point = 1513, n_alt = 0
   Insn 130: point = 1514, n_alt = 0
   Insn 129: point = 1516, n_alt = 0
   Insn 128: point = 1517, n_alt = 0
  BB 24
   Insn 1296: point = 1518, n_alt = -1
   Insn 225: point = 1518, n_alt = 1
  BB 72
   Insn 1344: point = 1519, n_alt = -1
  BB 22
   Insn 140: point = 1520, n_alt = -1
   Insn 139: point = 1520, n_alt = 0
   Insn 138: point = 1521, n_alt = 0
   Insn 137: point = 1523, n_alt = 0
   Insn 136: point = 1524, n_alt = 0
  BB 23
   Insn 1294: point = 1525, n_alt = -1
   Insn 219: point = 1525, n_alt = 1
   Insn 218: point = 1525, n_alt = 8
   Insn 217: point = 1526, n_alt = 4
   Insn 216: point = 1527, n_alt = 1
   Insn 215: point = 1529, n_alt = 3
   Insn 214: point = 1531, n_alt = 0
   Insn 213: point = 1533, n_alt = 0
   Insn 212: point = 1535, n_alt = 0
   Insn 211: point = 1536, n_alt = 0
   Insn 210: point = 1538, n_alt = 0
   Insn 209: point = 1540, n_alt = 0
   Insn 208: point = 1542, n_alt = 0
   Insn 207: point = 1543, n_alt = 1
   Insn 206: point = 1545, n_alt = 0
   Insn 205: point = 1547, n_alt = 0
   Insn 204: point = 1548, n_alt = 1
   Insn 203: point = 1550, n_alt = 7
   Insn 202: point = 1552, n_alt = 0
   Insn 201: point = 1554, n_alt = 4
   Insn 200: point = 1555, n_alt = 3
   Insn 199: point = 1557, n_alt = 0
   Insn 198: point = 1559, n_alt = 0
   Insn 197: point = 1561, n_alt = 0
   Insn 196: point = 1562, n_alt = 0
   Insn 195: point = 1564, n_alt = 0
   Insn 194: point = 1566, n_alt = 0
   Insn 193: point = 1568, n_alt = 0
   Insn 192: point = 1569, n_alt = 1
   Insn 191: point = 1571, n_alt = 0
   Insn 190: point = 1573, n_alt = 0
   Insn 189: point = 1574, n_alt = -2
   Insn 188: point = 1576, n_alt = 1
   Insn 187: point = 1578, n_alt = 7
   Insn 186: point = 1579, n_alt = 1
   Insn 185: point = 1581, n_alt = 7
   Insn 184: point = 1582, n_alt = 7
   Insn 183: point = 1584, n_alt = 0
   Insn 182: point = 1586, n_alt = 4
   Insn 181: point = 1587, n_alt = 3
   Insn 180: point = 1589, n_alt = 0
   Insn 179: point = 1591, n_alt = 0
   Insn 178: point = 1593, n_alt = 0
   Insn 177: point = 1594, n_alt = 0
   Insn 176: point = 1596, n_alt = 0
   Insn 175: point = 1598, n_alt = 0
   Insn 174: point = 1600, n_alt = 0
   Insn 173: point = 1601, n_alt = 1
   Insn 172: point = 1603, n_alt = 0
   Insn 171: point = 1605, n_alt = 0
   Insn 170: point = 1606, n_alt = 4
   Insn 169: point = 1607, n_alt = 9
   Insn 168: point = 1608, n_alt = 0
   Insn 167: point = 1608, n_alt = -2
   Insn 166: point = 1609, n_alt = 7
   Insn 165: point = 1609, n_alt = -2
   Insn 164: point = 1611, n_alt = 2
   Insn 163: point = 1613, n_alt = 7
   Insn 162: point = 1614, n_alt = -2
   Insn 161: point = 1616, n_alt = 1
   Insn 160: point = 1618, n_alt = 7
   Insn 159: point = 1620, n_alt = 4
   Insn 158: point = 1621, n_alt = 1
   Insn 157: point = 1623, n_alt = 7
   Insn 156: point = 1625, n_alt = 0
   Insn 155: point = 1627, n_alt = 4
   Insn 154: point = 1628, n_alt = 3
   Insn 153: point = 1630, n_alt = 0
   Insn 152: point = 1632, n_alt = 0
   Insn 151: point = 1633, n_alt = 7
   Insn 150: point = 1635, n_alt = 0
   Insn 149: point = 1637, n_alt = 4
   Insn 148: point = 1638, n_alt = 3
   Insn 147: point = 1640, n_alt = 0
   Insn 146: point = 1642, n_alt = 0
   Insn 145: point = 1644, n_alt = 0
   Insn 144: point = 1645, n_alt = 0
   Insn 143: point = 1647, n_alt = 0
   Insn 142: point = 1649, n_alt = 0
  BB 21
   Insn 134: point = 1651, n_alt = 1
  BB 19
   Insn 126: point = 1652, n_alt = 1
   Insn 125: point = 1653, n_alt = 0
   Insn 124: point = 1654, n_alt = 0
  BB 17
   Insn 116: point = 1655, n_alt = 1
  BB 68
   Insn 1332: point = 1655, n_alt = -1
  BB 12
   Insn 73: point = 1655, n_alt = -1
   Insn 72: point = 1655, n_alt = 0
   Insn 71: point = 1656, n_alt = 0
   Insn 70: point = 1658, n_alt = 0
   Insn 69: point = 1659, n_alt = 0
  BB 16
   Insn 1292: point = 1660, n_alt = -1
   Insn 110: point = 1660, n_alt = 1
  BB 69
   Insn 1335: point = 1661, n_alt = -1
  BB 14
   Insn 81: point = 1662, n_alt = -1
   Insn 80: point = 1662, n_alt = 0
   Insn 79: point = 1663, n_alt = 0
   Insn 78: point = 1665, n_alt = 0
   Insn 77: point = 1666, n_alt = 0
  BB 15
   Insn 1290: point = 1667, n_alt = -1
   Insn 104: point = 1667, n_alt = 1
   Insn 103: point = 1667, n_alt = 8
   Insn 102: point = 1668, n_alt = 4
   Insn 101: point = 1669, n_alt = 1
   Insn 100: point = 1671, n_alt = 7
   Insn 99: point = 1672, n_alt = 3
   Insn 98: point = 1674, n_alt = 0
   Insn 97: point = 1676, n_alt = 1
   Insn 96: point = 1678, n_alt = 0
   Insn 95: point = 1679, n_alt = 0
   Insn 94: point = 1681, n_alt = 1
   Insn 93: point = 1683, n_alt = 0
   Insn 92: point = 1684, n_alt = 7
   Insn 91: point = 1686, n_alt = 0
   Insn 90: point = 1688, n_alt = 4
   Insn 89: point = 1689, n_alt = 3
   Insn 88: point = 1691, n_alt = 0
   Insn 87: point = 1693, n_alt = 1
   Insn 86: point = 1695, n_alt = 0
   Insn 85: point = 1696, n_alt = 0
   Insn 84: point = 1698, n_alt = 1
   Insn 83: point = 1700, n_alt = 0
  BB 13
   Insn 75: point = 1702, n_alt = 1
  BB 11
   Insn 67: point = 1703, n_alt = 1
   Insn 66: point = 1704, n_alt = 0
   Insn 65: point = 1705, n_alt = 0
  BB 65
   Insn 1323: point = 1706, n_alt = -1
  BB 3
   Insn 13: point = 1706, n_alt = -1
   Insn 12: point = 1706, n_alt = 0
   Insn 11: point = 1707, n_alt = 0
   Insn 10: point = 1709, n_alt = 0
   Insn 9: point = 1710, n_alt = 0
  BB 10
   Insn 1288: point = 1710, n_alt = -1
   Insn 59: point = 1710, n_alt = 1
  BB 66
   Insn 1326: point = 1710, n_alt = -1
  BB 5
   Insn 23: point = 1710, n_alt = -1
   Insn 22: point = 1710, n_alt = 0
   Insn 21: point = 1711, n_alt = 0
   Insn 20: point = 1713, n_alt = 0
   Insn 19: point = 1714, n_alt = 0
  BB 9
   Insn 1286: point = 1715, n_alt = -1
   Insn 53: point = 1715, n_alt = 1
  BB 67
   Insn 1329: point = 1716, n_alt = -1
  BB 7
   Insn 31: point = 1717, n_alt = -1
   Insn 30: point = 1717, n_alt = 0
   Insn 29: point = 1718, n_alt = 0
   Insn 28: point = 1720, n_alt = 0
   Insn 27: point = 1721, n_alt = 0
  BB 8
   Insn 1284: point = 1722, n_alt = -1
   Insn 47: point = 1722, n_alt = 1
   Insn 46: point = 1722, n_alt = 8
   Insn 45: point = 1723, n_alt = 3
   Insn 44: point = 1724, n_alt = 7
   Insn 43: point = 1725, n_alt = 3
   Insn 42: point = 1727, n_alt = 0
   Insn 41: point = 1729, n_alt = 1
   Insn 40: point = 1731, n_alt = 0
   Insn 39: point = 1732, n_alt = 0
   Insn 38: point = 1734, n_alt = 0
   Insn 37: point = 1736, n_alt = 1
   Insn 36: point = 1738, n_alt = 0
   Insn 35: point = 1739, n_alt = 1
   Insn 34: point = 1741, n_alt = 1
   Insn 33: point = 1743, n_alt = 0
  BB 6
   Insn 25: point = 1745, n_alt = 1
  BB 4
   Insn 17: point = 1746, n_alt = 1
   Insn 16: point = 1747, n_alt = 0
   Insn 15: point = 1748, n_alt = 0
  BB 2
   Insn 7: point = 1749, n_alt = 1
   Insn 3: point = 1749, n_alt = 5
   Insn 2: point = 1749, n_alt = 5
 r87: [1740..1741]
 r88: [1733..1739]
 r89: [1735..1736]
 r90: [1733..1734]
 r91: [1728..1732]
 r92: [1728..1729]
 r93: [1726..1727]
 r94: [1722..1725]
 r95: [1722..1724]
 r96: [1697..1698]
 r97: [1692..1696]
 r98: [1692..1693]
 r99: [1690..1691]
 r100: [1687..1689]
 r101: [1670..1684]
 r102: [1680..1681]
 r103: [1675..1679]
 r104: [1675..1676]
 r105: [1673..1674]
 r106: [1667..1672]
 r107: [1667..1669]
 r108: [1646..1647]
 r109: [1641..1645]
 r110: [1641..1642]
 r111: [1639..1640]
 r112: [1636..1638]
 r113: [1622..1633]
 r114: [1629..1630]
 r115: [1626..1628]
 r116: [1622..1623]
 r117: [1617..1621]
 r118: [1617..1618]
 r119: [1615..1616]
 r120: [1612..1614]
 r121: [1610..1611]
 r122: [1602..1603]
 r123: [1595..1601]
 r124: [1597..1598]
 r125: [1595..1596]
 r126: [1590..1594]
 r127: [1590..1591]
 r128: [1588..1589]
 r129: [1585..1587]
 r130: [1580..1582]
 r131: [1577..1579]
 r132: [1575..1576]
 r133: [1549..1574]
 r134: [1570..1571]
 r135: [1563..1569]
 r136: [1565..1566]
 r137: [1563..1564]
 r138: [1558..1562]
 r139: [1558..1559]
 r140: [1556..1557]
 r141: [1553..1555]
 r142: [1549..1550]
 r143: [1528..1548]
 r144: [1544..1545]
 r145: [1537..1543]
 r146: [1539..1540]
 r147: [1537..1538]
 r148: [1532..1536]
 r149: [1532..1533]
 r150: [1530..1531]
 r151: [1525..1529]
 r152: [1525..1527]
 r153: [1509..1510]
 r154: [1507..1508]
 r155: [1505..1506]
 r156: [1500..1501]
 r157: [1491..1492]
 r158: [1489..1490]
 r159: [1486..1488]
 r160: [1480..1481]
 r161: [1471..1479]
 r162: [1475..1476]
 r163: [1473..1474]
 r164: [1471..1472]
 r165: [1466..1470]
 r166: [1466..1467]
 r167: [1464..1465]
 r168: [1461..1463]
 r169: [1437..1460]
 r170: [1456..1457]
 r171: [1449..1455]
 r172: [1451..1452]
 r173: [1449..1450]
 r174: [1444..1448]
 r175: [1444..1445]
 r176: [1442..1443]
 r177: [1439..1441]
 r178: [1437..1438]
 r179: [1435..1436]
 r180: [1409..1434]
 r181: [1430..1431]
 r182: [1423..1429]
 r183: [1425..1426]
 r184: [1423..1424]
 r185: [1418..1422]
 r186: [1418..1419]
 r187: [1416..1417]
 r188: [1413..1415]
 r189: [1409..1410]
 r190: [1369..1408]
 r191: [1404..1405]
 r192: [1395..1403]
 r193: [1399..1400]
 r194: [1397..1398]
 r195: [1395..1396]
 r196: [1390..1394]
 r197: [1390..1391]
 r198: [1388..1389]
 r199: [1385..1387]
 r200: [1369..1382]
 r201: [1378..1379]
 r202: [1373..1377]
 r203: [1373..1374]
 r204: [1371..1372]
 r205: [1366..1370]
 r206: [1366..1368]
 r207: [1345..1346]
 r208: [1343..1344]
 r209: [1340..1342]
 r210: [1334..1335]
 r211: [1325..1333]
 r212: [1329..1330]
 r213: [1327..1328]
 r214: [1325..1326]
 r215: [1320..1324]
 r216: [1320..1321]
 r217: [1318..1319]
 r218: [1315..1317]
 r219: [1291..1314]
 r220: [1310..1311]
 r221: [1303..1309]
 r222: [1305..1306]
 r223: [1303..1304]
 r224: [1298..1302]
 r225: [1298..1299]
 r226: [1296..1297]
 r227: [1293..1295]
 r228: [1291..1292]
 r229: [1289..1290]
 r230: [1261..1288]
 r231: [1284..1285]
 r232: [1275..1283]
 r233: [1279..1280]
 r234: [1277..1278]
 r235: [1275..1276]
 r236: [1270..1274]
 r237: [1270..1271]
 r238: [1268..1269]
 r239: [1265..1267]
 r240: [1261..1262]
 r241: [1223..1260]
 r242: [1256..1257]
 r243: [1249..1255]
 r244: [1251..1252]
 r245: [1249..1250]
 r246: [1244..1248]
 r247: [1244..1245]
 r248: [1242..1243]
 r249: [1239..1241]
 r250: [1223..1236]
 r251: [1232..1233]
 r252: [1227..1231]
 r253: [1227..1228]
 r254: [1225..1226]
 r255: [1220..1224]
 r256: [1220..1222]
 r257: [1199..1200]
 r258: [1197..1198]
 r259: [1192..1194]
 r260: [1186..1187]
 r261: [1179..1185]
 r262: [1181..1182]
 r263: [1179..1180]
 r264: [1174..1178]
 r265: [1174..1175]
 r266: [1172..1173]
 r267: [1169..1171]
 r268: [1053..1168]
 r269: [1164..1165]
 r270: [1159..1163]
 r271: [1159..1160]
 r272: [1157..1158]
 r273: [1154..1156]
 r274: [1135..1153]
 r275: [1149..1150]
 r276: [1147..1148]
 r277: [1142..1146]
 r278: [1142..1143]
 r279: [1140..1141]
 r280: [1137..1139]
 r281: [1133..1136]
 r282: [1115..1131]
 r283: [1127..1128]
 r284: [1122..1126]
 r285: [1122..1123]
 r286: [1120..1121]
 r287: [1117..1119]
 r288: [1115..1116]
 r289: [1096..1114]
 r290: [1110..1111]
 r291: [1108..1109]
 r292: [1103..1107]
 r293: [1103..1104]
 r294: [1101..1102]
 r295: [1098..1100]
 r296: [1096..1097]
 r297: [1094..1095]
 r298: [1091..1093]
 r299: [1074..1090]
 r300: [1086..1087]
 r301: [1081..1085]
 r302: [1081..1082]
 r303: [1079..1080]
 r304: [1076..1078]
 r305: [1074..1075]
 r306: [1053..1073]
 r307: [1069..1070]
 r308: [1062..1068]
 r309: [1064..1065]
 r310: [1062..1063]
 r311: [1057..1061]
 r312: [1057..1058]
 r313: [1055..1056]
 r314: [1050..1054]
 r315: [1050..1052]
 r316: [1025..1026]
 r317: [1023..1024]
 r318: [1020..1022]
 r319: [1014..1015]
 r320: [1012..1013]
 r321: [1007..1009]
 r322: [1001..1002]
 r323: [992..1000]
 r324: [996..997]
 r325: [994..995]
 r326: [992..993]
 r327: [987..991]
 r328: [987..988]
 r329: [985..986]
 r330: [982..984]
 r331: [954..979]
 r332: [975..976]
 r333: [968..974]
 r334: [970..971]
 r335: [968..969]
 r336: [963..967]
 r337: [963..964]
 r338: [961..962]
 r339: [958..960]
 r340: [954..955]
 r341: [928..953]
 r342: [949..950]
 r343: [942..948]
 r344: [944..945]
 r345: [942..943]
 r346: [937..941]
 r347: [937..938]
 r348: [935..936]
 r349: [932..934]
 r350: [928..929]
 r351: [900..927]
 r352: [923..924]
 r353: [914..922]
 r354: [918..919]
 r355: [916..917]
 r356: [914..915]
 r357: [909..913]
 r358: [909..910]
 r359: [907..908]
 r360: [904..906]
 r361: [900..901]
 r362: [894..895]
 r363: [892..893]
 r364: [883..891]
 r365: [887..888]
 r366: [885..886]
 r367: [883..884]
 r368: [878..882]
 r369: [878..879]
 r370: [876..877]
 r371: [873..875]
 r372: [843..870]
 r373: [866..867]
 r374: [864..865]
 r375: [857..863]
 r376: [859..860]
 r377: [857..858]
 r378: [852..856]
 r379: [852..853]
 r380: [850..851]
 r381: [847..849]
 r382: [843..844]
 r383: [815..842]
 r384: [838..839]
 r385: [836..837]
 r386: [829..835]
 r387: [831..832]
 r388: [829..830]
 r389: [824..828]
 r390: [824..825]
 r391: [822..823]
 r392: [819..821]
 r393: [815..816]
 r394: [785..814]
 r395: [810..811]
 r396: [808..809]
 r397: [799..807]
 r398: [803..804]
 r399: [801..802]
 r400: [799..800]
 r401: [794..798]
 r402: [794..795]
 r403: [792..793]
 r404: [789..791]
 r405: [785..786]
 r406: [767..768]
 r407: [758..766]
 r408: [762..763]
 r409: [760..761]
 r410: [758..759]
 r411: [753..757]
 r412: [753..754]
 r413: [751..752]
 r414: [748..750]
 r415: [720..745]
 r416: [741..742]
 r417: [734..740]
 r418: [736..737]
 r419: [734..735]
 r420: [729..733]
 r421: [729..730]
 r422: [727..728]
 r423: [724..726]
 r424: [720..721]
 r425: [694..719]
 r426: [715..716]
 r427: [708..714]
 r428: [710..711]
 r429: [708..709]
 r430: [703..707]
 r431: [703..704]
 r432: [701..702]
 r433: [698..700]
 r434: [694..695]
 r435: [666..693]
 r436: [689..690]
 r437: [680..688]
 r438: [684..685]
 r439: [682..683]
 r440: [680..681]
 r441: [675..679]
 r442: [675..676]
 r443: [673..674]
 r444: [670..672]
 r445: [666..667]
 r446: [664..665]
 r447: [662..663]
 r448: [656..657]
 r449: [654..655]
 r450: [645..653]
 r451: [649..650]
 r452: [647..648]
 r453: [645..646]
 r454: [640..644]
 r455: [640..641]
 r456: [638..639]
 r457: [635..637]
 r458: [605..632]
 r459: [628..629]
 r460: [626..627]
 r461: [619..625]
 r462: [621..622]
 r463: [619..620]
 r464: [614..618]
 r465: [614..615]
 r466: [612..613]
 r467: [609..611]
 r468: [605..606]
 r469: [577..604]
 r470: [600..601]
 r471: [598..599]
 r472: [591..597]
 r473: [593..594]
 r474: [591..592]
 r475: [586..590]
 r476: [586..587]
 r477: [584..585]
 r478: [581..583]
 r479: [577..578]
 r480: [547..576]
 r481: [572..573]
 r482: [570..571]
 r483: [561..569]
 r484: [565..566]
 r485: [563..564]
 r486: [561..562]
 r487: [556..560]
 r488: [556..557]
 r489: [554..555]
 r490: [551..553]
 r491: [547..548]
 r492: [545..546]
 r493: [543..544]
 r494: [537..538]
 r495: [528..536]
 r496: [532..533]
 r497: [530..531]
 r498: [528..529]
 r499: [523..527]
 r500: [523..524]
 r501: [521..522]
 r502: [518..520]
 r503: [490..515]
 r504: [511..512]
 r505: [504..510]
 r506: [506..507]
 r507: [504..505]
 r508: [499..503]
 r509: [499..500]
 r510: [497..498]
 r511: [494..496]
 r512: [490..491]
 r513: [464..489]
 r514: [485..486]
 r515: [478..484]
 r516: [480..481]
 r517: [478..479]
 r518: [473..477]
 r519: [473..474]
 r520: [471..472]
 r521: [468..470]
 r522: [464..465]
 r523: [436..463]
 r524: [459..460]
 r525: [450..458]
 r526: [454..455]
 r527: [452..453]
 r528: [450..451]
 r529: [445..449]
 r530: [445..446]
 r531: [443..444]
 r532: [440..442]
 r533: [436..437]
 r534: [434..435]
 r535: [432..433]
 r536: [426..427]
 r537: [424..425]
 r538: [415..423]
 r539: [419..420]
 r540: [417..418]
 r541: [415..416]
 r542: [410..414]
 r543: [410..411]
 r544: [408..409]
 r545: [405..407]
 r546: [375..402]
 r547: [398..399]
 r548: [396..397]
 r549: [389..395]
 r550: [391..392]
 r551: [389..390]
 r552: [384..388]
 r553: [384..385]
 r554: [382..383]
 r555: [379..381]
 r556: [375..376]
 r557: [347..374]
 r558: [370..371]
 r559: [368..369]
 r560: [361..367]
 r561: [363..364]
 r562: [361..362]
 r563: [356..360]
 r564: [356..357]
 r565: [354..355]
 r566: [351..353]
 r567: [347..348]
 r568: [317..346]
 r569: [342..343]
 r570: [340..341]
 r571: [331..339]
 r572: [335..336]
 r573: [333..334]
 r574: [331..332]
 r575: [326..330]
 r576: [326..327]
 r577: [324..325]
 r578: [321..323]
 r579: [317..318]
 r580: [315..316]
 r581: [313..314]
 r582: [307..308]
 r583: [300..306]
 r584: [302..303]
 r585: [300..301]
 r586: [295..299]
 r587: [295..296]
 r588: [293..294]
 r589: [290..292]
 r590: [260..287]
 r591: [283..284]
 r592: [281..282]
 r593: [274..280]
 r594: [276..277]
 r595: [274..275]
 r596: [269..273]
 r597: [269..270]
 r598: [267..268]
 r599: [264..266]
 r600: [260..261]
 r601: [258..259]
 r602: [255..257]
 r603: [245..246]
 r604: [238..244]
 r605: [240..241]
 r606: [238..239]
 r607: [233..237]
 r608: [233..234]
 r609: [231..232]
 r610: [228..230]
 r611: [216..220]
 r612: [216..217]
 r613: [214..215]
 r614: [204..205]
 r615: [197..203]
 r616: [199..200]
 r617: [197..198]
 r618: [192..196]
 r619: [192..193]
 r620: [190..191]
 r621: [187..189]
 r622: [175..179]
 r623: [175..176]
 r624: [173..174]
 r625: [161..162]
 r626: [154..160]
 r627: [156..157]
 r628: [154..155]
 r629: [149..153]
 r630: [149..150]
 r631: [147..148]
 r632: [144..146]
 r633: [118..143]
 r634: [139..140]
 r635: [137..138]
 r636: [130..136]
 r637: [132..133]
 r638: [130..131]
 r639: [125..129]
 r640: [125..126]
 r641: [123..124]
 r642: [120..122]
 r643: [118..119]
 r644: [112..113]
 r645: [108..109]
 r646: [104..105]
 r647: [95..96]
 r648: [88..90]
 r649: [83..85]
 r650: [35..36]
 r651: [28..34]
 r652: [30..31]
 r653: [28..29]
 r654: [23..27]
 r655: [23..24]
 r656: [21..22]
 r657: [17..20]
 r658: [17..19]
 r659: [77..78]
 r660: [74..76]
 r661: [67..69]
 r662: [64..66]
 r663: [58..59]
 r664: [51..57]
 r665: [53..54]
 r666: [51..52]
 r667: [46..50]
 r668: [46..47]
 r669: [44..45]
 r670: [40..43]
 r671: [214..225] [210..212]
 r672: [173..184] [169..171]
 r673: [1706..1707]
 r674: [1746..1748]
 r675: [1710..1747]
 r676: [1710..1711]
 r677: [1717..1718]
 r678: [1703..1705]
 r679: [1655..1704]
 r680: [1655..1656]
 r681: [1662..1663]
 r682: [1034..1035]
 r683: [1652..1654]
 r684: [1513..1653]
 r685: [1513..1514]
 r686: [1520..1521]
 r687: [1608..1609]
 r688: [1497..1499]
 r689: [1354..1498]
 r690: [1354..1355]
 r691: [1361..1362]
 r692: [1351..1353]
 r693: [1208..1352]
 r694: [1208..1209]
 r695: [1215..1216]
 r696: [1205..1207]
 r697: [1038..1206]
 r698: [1038..1039]
 r699: [1045..1046]
 r700: [0..1]
 r701: [1031..1033]
 r702: [4..1032]
 r703: [4..5]
 r704: [11..12]
 r705: [101..103]
 r706: [91..99]
 r707: [93..94]
 r708: [91..92]
 r709: [1708..1709]
 r710: [1712..1713]
 r711: [1719..1720]
 r712: [1742..1743]
 r713: [1737..1738]
 r714: [1730..1731]
 r715: [1722..1723]
 r716: [1657..1658]
 r717: [1664..1665]
 r718: [1699..1700]
 r719: [1694..1695]
 r720: [1685..1688]
 r721: [1685..1686]
 r722: [1682..1683]
 r723: [1677..1678]
 r724: [1670..1671]
 r725: [1667..1668]
 r726: [1036..1037]
 r727: [1515..1516]
 r728: [1522..1523]
 r729: [1648..1649]
 r730: [1643..1644]
 r731: [1634..1637]
 r732: [1634..1635]
 r733: [1631..1632]
 r734: [1624..1627]
 r735: [1624..1625]
 r736: [1619..1620]
 r737: [1612..1613]
 r738: [1606..1607]
 r739: [1604..1605]
 r740: [1599..1600]
 r741: [1592..1593]
 r742: [1583..1586]
 r743: [1583..1584]
 r744: [1580..1581]
 r745: [1577..1578]
 r746: [1572..1573]
 r747: [1567..1568]
 r748: [1560..1561]
 r749: [1551..1554]
 r750: [1551..1552]
 r751: [1546..1547]
 r752: [1541..1542]
 r753: [1534..1535]
 r754: [1525..1526]
 r755: [1511..1512]
 r756: [1502..1504]
 r757: [1502..1503]
 r758: [1356..1357]
 r759: [1363..1364]
 r760: [1493..1494]
 r763: [1484..1485]
 r764: [1486..1487]
 r765: [1482..1483]
 r766: [1477..1478]
 r767: [1468..1469]
 r768: [1461..1462]
 r769: [1458..1459]
 r770: [1453..1454]
 r771: [1446..1447]
 r772: [1439..1440]
 r773: [1432..1433]
 r774: [1427..1428]
 r775: [1420..1421]
 r776: [1411..1414]
 r777: [1411..1412]
 r778: [1406..1407]
 r779: [1401..1402]
 r780: [1392..1393]
 r781: [1383..1386]
 r782: [1383..1384]
 r783: [1380..1381]
 r784: [1375..1376]
 r785: [1366..1367]
 r786: [1210..1211]
 r787: [1217..1218]
 r788: [1347..1348]
 r791: [1338..1339]
 r792: [1340..1341]
 r793: [1336..1337]
 r794: [1331..1332]
 r795: [1322..1323]
 r796: [1315..1316]
 r797: [1312..1313]
 r798: [1307..1308]
 r799: [1300..1301]
 r800: [1293..1294]
 r801: [1286..1287]
 r802: [1281..1282]
 r803: [1272..1273]
 r804: [1263..1266]
 r805: [1263..1264]
 r806: [1258..1259]
 r807: [1253..1254]
 r808: [1246..1247]
 r809: [1237..1240]
 r810: [1237..1238]
 r811: [1234..1235]
 r812: [1229..1230]
 r813: [1220..1221]
 r814: [1040..1041]
 r815: [1047..1048]
 r816: [1201..1202]
 r817: [1195..1196]
 r820: [1190..1191]
 r821: [1192..1193]
 r822: [1188..1189]
 r823: [1183..1184]
 r824: [1176..1177]
 r825: [1169..1170]
 r826: [1166..1167]
 r827: [1161..1162]
 r828: [1154..1155]
 r829: [1151..1152]
 r830: [1144..1145]
 r831: [1137..1138]
 r832: [1129..1130]
 r833: [1124..1125]
 r834: [1117..1118]
 r835: [1112..1113]
 r836: [1105..1106]
 r837: [1098..1099]
 r838: [1091..1092]
 r839: [1088..1089]
 r840: [1083..1084]
 r841: [1076..1077]
 r842: [1071..1072]
 r843: [1066..1067]
 r844: [1059..1060]
 r845: [1050..1051]
 r846: [2..3]
 r847: [6..7]
 r848: [13..14]
 r849: [1027..1028]
 r852: [1018..1019]
 r853: [1020..1021]
 r854: [1016..1017]
 r855: [1010..1011]
 r858: [1005..1006]
 r859: [1007..1008]
 r860: [1003..1004]
 r861: [998..999]
 r862: [989..990]
 r863: [980..983]
 r864: [980..981]
 r865: [977..978]
 r866: [972..973]
 r867: [965..966]
 r868: [956..959]
 r869: [956..957]
 r870: [951..952]
 r871: [946..947]
 r872: [939..940]
 r873: [930..933]
 r874: [930..931]
 r875: [925..926]
 r876: [920..921]
 r877: [911..912]
 r878: [902..905]
 r879: [902..903]
 r880: [898..899]
 r881: [896..897]
 r882: [889..890]
 r883: [880..881]
 r884: [871..874]
 r885: [871..872]
 r886: [868..869]
 r887: [861..862]
 r888: [854..855]
 r889: [845..848]
 r890: [845..846]
 r891: [840..841]
 r892: [833..834]
 r893: [826..827]
 r894: [817..820]
 r895: [817..818]
 r896: [812..813]
 r897: [805..806]
 r898: [796..797]
 r899: [787..790]
 r900: [787..788]
 r901: [783..784]
 r902: [781..782]
 r903: [778..779]
 r904: [775..776]
 r905: [772..773]
 r906: [769..770]
 r907: [764..765]
 r908: [755..756]
 r909: [746..749]
 r910: [746..747]
 r911: [743..744]
 r912: [738..739]
 r913: [731..732]
 r914: [722..725]
 r915: [722..723]
 r916: [717..718]
 r917: [712..713]
 r918: [705..706]
 r919: [696..699]
 r920: [696..697]
 r921: [691..692]
 r922: [686..687]
 r923: [677..678]
 r924: [668..671]
 r925: [668..669]
 r926: [660..661]
 r927: [658..659]
 r928: [651..652]
 r929: [642..643]
 r930: [633..636]
 r931: [633..634]
 r932: [630..631]
 r933: [623..624]
 r934: [616..617]
 r935: [607..610]
 r936: [607..608]
 r937: [602..603]
 r938: [595..596]
 r939: [588..589]
 r940: [579..582]
 r941: [579..580]
 r942: [574..575]
 r943: [567..568]
 r944: [558..559]
 r945: [549..552]
 r946: [549..550]
 r947: [541..542]
 r948: [539..540]
 r949: [534..535]
 r950: [525..526]
 r951: [516..519]
 r952: [516..517]
 r953: [513..514]
 r954: [508..509]
 r955: [501..502]
 r956: [492..495]
 r957: [492..493]
 r958: [487..488]
 r959: [482..483]
 r960: [475..476]
 r961: [466..469]
 r962: [466..467]
 r963: [461..462]
 r964: [456..457]
 r965: [447..448]
 r966: [438..441]
 r967: [438..439]
 r968: [430..431]
 r969: [428..429]
 r970: [421..422]
 r971: [412..413]
 r972: [403..406]
 r973: [403..404]
 r974: [400..401]
 r975: [393..394]
 r976: [386..387]
 r977: [377..380]
 r978: [377..378]
 r979: [372..373]
 r980: [365..366]
 r981: [358..359]
 r982: [349..352]
 r983: [349..350]
 r984: [344..345]
 r985: [337..338]
 r986: [328..329]
 r987: [319..322]
 r988: [319..320]
 r989: [311..312]
 r990: [309..310]
 r991: [304..305]
 r992: [297..298]
 r993: [288..291]
 r994: [288..289]
 r995: [285..286]
 r996: [278..279]
 r997: [271..272]
 r998: [262..265]
 r999: [262..263]
 r1000: [253..254]
 r1001: [255..256]
 r1002: [249..250]
 r1003: [251..252]
 r1004: [247..248]
 r1005: [242..243]
 r1006: [235..236]
 r1007: [226..229]
 r1008: [226..227]
 r1010: [221..222]
 r1011: [223..224]
 r1012: [218..219]
 r1013: [208..209]
 r1014: [206..207]
 r1015: [201..202]
 r1016: [194..195]
 r1017: [187..188]
 r1018: [185..186]
 r1020: [180..181]
 r1021: [182..183]
 r1022: [177..178]
 r1023: [165..166]
 r1024: [167..168]
 r1025: [163..164]
 r1026: [158..159]
 r1027: [151..152]
 r1028: [144..145]
 r1029: [141..142]
 r1030: [134..135]
 r1031: [127..128]
 r1032: [120..121]
 r1033: [116..117]
 r1034: [114..115]
 r1035: [110..111]
 r1036: [106..107]
 r1037: [97..98]
 r1038: [88..89]
 r1039: [86..87]
 r1040: [83..84]
 r1041: [37..38]
 r1042: [32..33]
 r1043: [25..26]
 r1044: [17..18]
 r1045: [79..81]
 r1046: [79..80]
 r1047: [72..73]
 r1048: [74..75]
 r1049: [70..71]
 r1050: [67..68]
 r1051: [62..63]
 r1052: [64..65]
 r1053: [60..61]
 r1054: [55..56]
 r1055: [48..49]
 r1056: [40..42]
 r1057: [40..41]
 r1058: [1132..1134]
 r1059: [100..102]
Compressing live ranges: from 1749 to 1462 - 83%
Ranges after the compression:
 r87: [1456..1457]
 r88: [1450..1455]
 r89: [1452..1453]
 r90: [1450..1451]
 r91: [1446..1449]
 r92: [1446..1447]
 r93: [1444..1445]
 r94: [1442..1443]
 r95: [1442..1443]
 r96: [1424..1425]
 r97: [1420..1423]
 r98: [1420..1421]
 r99: [1418..1419]
 r100: [1416..1417]
 r101: [1402..1413]
 r102: [1410..1411]
 r103: [1406..1409]
 r104: [1406..1407]
 r105: [1404..1405]
 r106: [1400..1403]
 r107: [1400..1401]
 r108: [1386..1387]
 r109: [1382..1385]
 r110: [1382..1383]
 r111: [1380..1381]
 r112: [1378..1379]
 r113: [1366..1375]
 r114: [1372..1373]
 r115: [1370..1371]
 r116: [1366..1367]
 r117: [1362..1365]
 r118: [1362..1363]
 r119: [1360..1361]
 r120: [1358..1359]
 r121: [1356..1357]
 r122: [1348..1349]
 r123: [1342..1347]
 r124: [1344..1345]
 r125: [1342..1343]
 r126: [1338..1341]
 r127: [1338..1339]
 r128: [1336..1337]
 r129: [1334..1335]
 r130: [1330..1331]
 r131: [1328..1329]
 r132: [1326..1327]
 r133: [1304..1325]
 r134: [1322..1323]
 r135: [1316..1321]
 r136: [1318..1319]
 r137: [1316..1317]
 r138: [1312..1315]
 r139: [1312..1313]
 r140: [1310..1311]
 r141: [1308..1309]
 r142: [1304..1305]
 r143: [1286..1303]
 r144: [1300..1301]
 r145: [1294..1299]
 r146: [1296..1297]
 r147: [1294..1295]
 r148: [1290..1293]
 r149: [1290..1291]
 r150: [1288..1289]
 r151: [1284..1287]
 r152: [1284..1285]
 r153: [1272..1273]
 r154: [1270..1271]
 r155: [1268..1269]
 r156: [1264..1265]
 r157: [1258..1259]
 r158: [1256..1257]
 r159: [1254..1255]
 r160: [1248..1249]
 r161: [1240..1247]
 r162: [1244..1245]
 r163: [1242..1243]
 r164: [1240..1241]
 r165: [1236..1239]
 r166: [1236..1237]
 r167: [1234..1235]
 r168: [1232..1233]
 r169: [1212..1231]
 r170: [1228..1229]
 r171: [1222..1227]
 r172: [1224..1225]
 r173: [1222..1223]
 r174: [1218..1221]
 r175: [1218..1219]
 r176: [1216..1217]
 r177: [1214..1215]
 r178: [1212..1213]
 r179: [1210..1211]
 r180: [1188..1209]
 r181: [1206..1207]
 r182: [1200..1205]
 r183: [1202..1203]
 r184: [1200..1201]
 r185: [1196..1199]
 r186: [1196..1197]
 r187: [1194..1195]
 r188: [1192..1193]
 r189: [1188..1189]
 r190: [1154..1187]
 r191: [1184..1185]
 r192: [1176..1183]
 r193: [1180..1181]
 r194: [1178..1179]
 r195: [1176..1177]
 r196: [1172..1175]
 r197: [1172..1173]
 r198: [1170..1171]
 r199: [1168..1169]
 r200: [1154..1165]
 r201: [1162..1163]
 r202: [1158..1161]
 r203: [1158..1159]
 r204: [1156..1157]
 r205: [1152..1155]
 r206: [1152..1153]
 r207: [1138..1139]
 r208: [1136..1137]
 r209: [1134..1135]
 r210: [1128..1129]
 r211: [1120..1127]
 r212: [1124..1125]
 r213: [1122..1123]
 r214: [1120..1121]
 r215: [1116..1119]
 r216: [1116..1117]
 r217: [1114..1115]
 r218: [1112..1113]
 r219: [1092..1111]
 r220: [1108..1109]
 r221: [1102..1107]
 r222: [1104..1105]
 r223: [1102..1103]
 r224: [1098..1101]
 r225: [1098..1099]
 r226: [1096..1097]
 r227: [1094..1095]
 r228: [1092..1093]
 r229: [1090..1091]
 r230: [1066..1089]
 r231: [1086..1087]
 r232: [1078..1085]
 r233: [1082..1083]
 r234: [1080..1081]
 r235: [1078..1079]
 r236: [1074..1077]
 r237: [1074..1075]
 r238: [1072..1073]
 r239: [1070..1071]
 r240: [1066..1067]
 r241: [1034..1065]
 r242: [1062..1063]
 r243: [1056..1061]
 r244: [1058..1059]
 r245: [1056..1057]
 r246: [1052..1055]
 r247: [1052..1053]
 r248: [1050..1051]
 r249: [1048..1049]
 r250: [1034..1045]
 r251: [1042..1043]
 r252: [1038..1041]
 r253: [1038..1039]
 r254: [1036..1037]
 r255: [1032..1035]
 r256: [1032..1033]
 r257: [1018..1019]
 r258: [1016..1017]
 r259: [1012..1013]
 r260: [1006..1007]
 r261: [1000..1005]
 r262: [1002..1003]
 r263: [1000..1001]
 r264: [996..999]
 r265: [996..997]
 r266: [994..995]
 r267: [992..993]
 r268: [896..991]
 r269: [988..989]
 r270: [984..987]
 r271: [984..985]
 r272: [982..983]
 r273: [980..981]
 r274: [964..979]
 r275: [976..977]
 r276: [974..975]
 r277: [970..973]
 r278: [970..971]
 r279: [968..969]
 r280: [966..967]
 r281: [962..965]
 r282: [948..961]
 r283: [958..959]
 r284: [954..957]
 r285: [954..955]
 r286: [952..953]
 r287: [950..951]
 r288: [948..949]
 r289: [932..947]
 r290: [944..945]
 r291: [942..943]
 r292: [938..941]
 r293: [938..939]
 r294: [936..937]
 r295: [934..935]
 r296: [932..933]
 r297: [930..931]
 r298: [928..929]
 r299: [914..927]
 r300: [924..925]
 r301: [920..923]
 r302: [920..921]
 r303: [918..919]
 r304: [916..917]
 r305: [914..915]
 r306: [896..913]
 r307: [910..911]
 r308: [904..909]
 r309: [906..907]
 r310: [904..905]
 r311: [900..903]
 r312: [900..901]
 r313: [898..899]
 r314: [894..897]
 r315: [894..895]
 r316: [876..877]
 r317: [874..875]
 r318: [872..873]
 r319: [866..867]
 r320: [864..865]
 r321: [860..861]
 r322: [854..855]
 r323: [846..853]
 r324: [850..851]
 r325: [848..849]
 r326: [846..847]
 r327: [842..845]
 r328: [842..843]
 r329: [840..841]
 r330: [838..839]
 r331: [814..835]
 r332: [832..833]
 r333: [826..831]
 r334: [828..829]
 r335: [826..827]
 r336: [822..825]
 r337: [822..823]
 r338: [820..821]
 r339: [818..819]
 r340: [814..815]
 r341: [792..813]
 r342: [810..811]
 r343: [804..809]
 r344: [806..807]
 r345: [804..805]
 r346: [800..803]
 r347: [800..801]
 r348: [798..799]
 r349: [796..797]
 r350: [792..793]
 r351: [768..791]
 r352: [788..789]
 r353: [780..787]
 r354: [784..785]
 r355: [782..783]
 r356: [780..781]
 r357: [776..779]
 r358: [776..777]
 r359: [774..775]
 r360: [772..773]
 r361: [768..769]
 r362: [762..763]
 r363: [760..761]
 r364: [752..759]
 r365: [756..757]
 r366: [754..755]
 r367: [752..753]
 r368: [748..751]
 r369: [748..749]
 r370: [746..747]
 r371: [744..745]
 r372: [718..741]
 r373: [738..739]
 r374: [736..737]
 r375: [730..735]
 r376: [732..733]
 r377: [730..731]
 r378: [726..729]
 r379: [726..727]
 r380: [724..725]
 r381: [722..723]
 r382: [718..719]
 r383: [694..717]
 r384: [714..715]
 r385: [712..713]
 r386: [706..711]
 r387: [708..709]
 r388: [706..707]
 r389: [702..705]
 r390: [702..703]
 r391: [700..701]
 r392: [698..699]
 r393: [694..695]
 r394: [668..693]
 r395: [690..691]
 r396: [688..689]
 r397: [680..687]
 r398: [684..685]
 r399: [682..683]
 r400: [680..681]
 r401: [676..679]
 r402: [676..677]
 r403: [674..675]
 r404: [672..673]
 r405: [668..669]
 r406: [654..655]
 r407: [646..653]
 r408: [650..651]
 r409: [648..649]
 r410: [646..647]
 r411: [642..645]
 r412: [642..643]
 r413: [640..641]
 r414: [638..639]
 r415: [614..635]
 r416: [632..633]
 r417: [626..631]
 r418: [628..629]
 r419: [626..627]
 r420: [622..625]
 r421: [622..623]
 r422: [620..621]
 r423: [618..619]
 r424: [614..615]
 r425: [592..613]
 r426: [610..611]
 r427: [604..609]
 r428: [606..607]
 r429: [604..605]
 r430: [600..603]
 r431: [600..601]
 r432: [598..599]
 r433: [596..597]
 r434: [592..593]
 r435: [568..591]
 r436: [588..589]
 r437: [580..587]
 r438: [584..585]
 r439: [582..583]
 r440: [580..581]
 r441: [576..579]
 r442: [576..577]
 r443: [574..575]
 r444: [572..573]
 r445: [568..569]
 r446: [566..567]
 r447: [564..565]
 r448: [558..559]
 r449: [556..557]
 r450: [548..555]
 r451: [552..553]
 r452: [550..551]
 r453: [548..549]
 r454: [544..547]
 r455: [544..545]
 r456: [542..543]
 r457: [540..541]
 r458: [514..537]
 r459: [534..535]
 r460: [532..533]
 r461: [526..531]
 r462: [528..529]
 r463: [526..527]
 r464: [522..525]
 r465: [522..523]
 r466: [520..521]
 r467: [518..519]
 r468: [514..515]
 r469: [490..513]
 r470: [510..511]
 r471: [508..509]
 r472: [502..507]
 r473: [504..505]
 r474: [502..503]
 r475: [498..501]
 r476: [498..499]
 r477: [496..497]
 r478: [494..495]
 r479: [490..491]
 r480: [464..489]
 r481: [486..487]
 r482: [484..485]
 r483: [476..483]
 r484: [480..481]
 r485: [478..479]
 r486: [476..477]
 r487: [472..475]
 r488: [472..473]
 r489: [470..471]
 r490: [468..469]
 r491: [464..465]
 r492: [462..463]
 r493: [460..461]
 r494: [454..455]
 r495: [446..453]
 r496: [450..451]
 r497: [448..449]
 r498: [446..447]
 r499: [442..445]
 r500: [442..443]
 r501: [440..441]
 r502: [438..439]
 r503: [414..435]
 r504: [432..433]
 r505: [426..431]
 r506: [428..429]
 r507: [426..427]
 r508: [422..425]
 r509: [422..423]
 r510: [420..421]
 r511: [418..419]
 r512: [414..415]
 r513: [392..413]
 r514: [410..411]
 r515: [404..409]
 r516: [406..407]
 r517: [404..405]
 r518: [400..403]
 r519: [400..401]
 r520: [398..399]
 r521: [396..397]
 r522: [392..393]
 r523: [368..391]
 r524: [388..389]
 r525: [380..387]
 r526: [384..385]
 r527: [382..383]
 r528: [380..381]
 r529: [376..379]
 r530: [376..377]
 r531: [374..375]
 r532: [372..373]
 r533: [368..369]
 r534: [366..367]
 r535: [364..365]
 r536: [358..359]
 r537: [356..357]
 r538: [348..355]
 r539: [352..353]
 r540: [350..351]
 r541: [348..349]
 r542: [344..347]
 r543: [344..345]
 r544: [342..343]
 r545: [340..341]
 r546: [314..337]
 r547: [334..335]
 r548: [332..333]
 r549: [326..331]
 r550: [328..329]
 r551: [326..327]
 r552: [322..325]
 r553: [322..323]
 r554: [320..321]
 r555: [318..319]
 r556: [314..315]
 r557: [290..313]
 r558: [310..311]
 r559: [308..309]
 r560: [302..307]
 r561: [304..305]
 r562: [302..303]
 r563: [298..301]
 r564: [298..299]
 r565: [296..297]
 r566: [294..295]
 r567: [290..291]
 r568: [264..289]
 r569: [286..287]
 r570: [284..285]
 r571: [276..283]
 r572: [280..281]
 r573: [278..279]
 r574: [276..277]
 r575: [272..275]
 r576: [272..273]
 r577: [270..271]
 r578: [268..269]
 r579: [264..265]
 r580: [262..263]
 r581: [260..261]
 r582: [254..255]
 r583: [248..253]
 r584: [250..251]
 r585: [248..249]
 r586: [244..247]
 r587: [244..245]
 r588: [242..243]
 r589: [240..241]
 r590: [214..237]
 r591: [234..235]
 r592: [232..233]
 r593: [226..231]
 r594: [228..229]
 r595: [226..227]
 r596: [222..225]
 r597: [222..223]
 r598: [220..221]
 r599: [218..219]
 r600: [214..215]
 r601: [212..213]
 r602: [210..211]
 r603: [200..201]
 r604: [194..199]
 r605: [196..197]
 r606: [194..195]
 r607: [190..193]
 r608: [190..191]
 r609: [188..189]
 r610: [186..187]
 r611: [176..179]
 r612: [176..177]
 r613: [174..175]
 r614: [166..167]
 r615: [160..165]
 r616: [162..163]
 r617: [160..161]
 r618: [156..159]
 r619: [156..157]
 r620: [154..155]
 r621: [152..153]
 r622: [142..145]
 r623: [142..143]
 r624: [140..141]
 r625: [130..131]
 r626: [124..129]
 r627: [126..127]
 r628: [124..125]
 r629: [120..123]
 r630: [120..121]
 r631: [118..119]
 r632: [116..117]
 r633: [94..115]
 r634: [112..113]
 r635: [110..111]
 r636: [104..109]
 r637: [106..107]
 r638: [104..105]
 r639: [100..103]
 r640: [100..101]
 r641: [98..99]
 r642: [96..97]
 r643: [94..95]
 r644: [88..89]
 r645: [84..85]
 r646: [80..81]
 r647: [74..75]
 r648: [68..69]
 r649: [64..65]
 r650: [26..27]
 r651: [20..25]
 r652: [22..23]
 r653: [20..21]
 r654: [16..19]
 r655: [16..17]
 r656: [14..15]
 r657: [12..13]
 r658: [12..13]
 r659: [60..61]
 r660: [58..59]
 r661: [52..53]
 r662: [50..51]
 r663: [44..45]
 r664: [38..43]
 r665: [40..41]
 r666: [38..39]
 r667: [34..37]
 r668: [34..35]
 r669: [32..33]
 r670: [30..31]
 r671: [172..183]
 r672: [138..149]
 r673: [1430..1431]
 r674: [1460..1461]
 r675: [1434..1461]
 r676: [1434..1435]
 r677: [1438..1439]
 r678: [1428..1429]
 r679: [1392..1429]
 r680: [1392..1393]
 r681: [1396..1397]
 r682: [882..883]
 r683: [1390..1391]
 r684: [1276..1391]
 r685: [1276..1277]
 r686: [1280..1281]
 r687: [1354..1355]
 r688: [1262..1263]
 r689: [1144..1263]
 r690: [1144..1145]
 r691: [1148..1149]
 r692: [1142..1143]
 r693: [1024..1143]
 r694: [1024..1025]
 r695: [1028..1029]
 r696: [1022..1023]
 r697: [886..1023]
 r698: [886..887]
 r699: [890..891]
 r700: [0..1]
 r701: [880..881]
 r702: [4..881]
 r703: [4..5]
 r704: [8..9]
 r705: [78..79]
 r706: [70..77]
 r707: [72..73]
 r708: [70..71]
 r709: [1432..1433]
 r710: [1436..1437]
 r711: [1440..1441]
 r712: [1458..1459]
 r713: [1454..1455]
 r714: [1448..1449]
 r715: [1442..1443]
 r716: [1394..1395]
 r717: [1398..1399]
 r718: [1426..1427]
 r719: [1422..1423]
 r720: [1414..1417]
 r721: [1414..1415]
 r722: [1412..1413]
 r723: [1408..1409]
 r724: [1402..1403]
 r725: [1400..1401]
 r726: [884..885]
 r727: [1278..1279]
 r728: [1282..1283]
 r729: [1388..1389]
 r730: [1384..1385]
 r731: [1376..1379]
 r732: [1376..1377]
 r733: [1374..1375]
 r734: [1368..1371]
 r735: [1368..1369]
 r736: [1364..1365]
 r737: [1358..1359]
 r738: [1352..1353]
 r739: [1350..1351]
 r740: [1346..1347]
 r741: [1340..1341]
 r742: [1332..1335]
 r743: [1332..1333]
 r744: [1330..1331]
 r745: [1328..1329]
 r746: [1324..1325]
 r747: [1320..1321]
 r748: [1314..1315]
 r749: [1306..1309]
 r750: [1306..1307]
 r751: [1302..1303]
 r752: [1298..1299]
 r753: [1292..1293]
 r754: [1284..1285]
 r755: [1274..1275]
 r756: [1266..1267]
 r757: [1266..1267]
 r758: [1146..1147]
 r759: [1150..1151]
 r760: [1260..1261]
 r763: [1252..1253]
 r764: [1254..1255]
 r765: [1250..1251]
 r766: [1246..1247]
 r767: [1238..1239]
 r768: [1232..1233]
 r769: [1230..1231]
 r770: [1226..1227]
 r771: [1220..1221]
 r772: [1214..1215]
 r773: [1208..1209]
 r774: [1204..1205]
 r775: [1198..1199]
 r776: [1190..1193]
 r777: [1190..1191]
 r778: [1186..1187]
 r779: [1182..1183]
 r780: [1174..1175]
 r781: [1166..1169]
 r782: [1166..1167]
 r783: [1164..1165]
 r784: [1160..1161]
 r785: [1152..1153]
 r786: [1026..1027]
 r787: [1030..1031]
 r788: [1140..1141]
 r791: [1132..1133]
 r792: [1134..1135]
 r793: [1130..1131]
 r794: [1126..1127]
 r795: [1118..1119]
 r796: [1112..1113]
 r797: [1110..1111]
 r798: [1106..1107]
 r799: [1100..1101]
 r800: [1094..1095]
 r801: [1088..1089]
 r802: [1084..1085]
 r803: [1076..1077]
 r804: [1068..1071]
 r805: [1068..1069]
 r806: [1064..1065]
 r807: [1060..1061]
 r808: [1054..1055]
 r809: [1046..1049]
 r810: [1046..1047]
 r811: [1044..1045]
 r812: [1040..1041]
 r813: [1032..1033]
 r814: [888..889]
 r815: [892..893]
 r816: [1020..1021]
 r817: [1014..1015]
 r820: [1010..1011]
 r821: [1012..1013]
 r822: [1008..1009]
 r823: [1004..1005]
 r824: [998..999]
 r825: [992..993]
 r826: [990..991]
 r827: [986..987]
 r828: [980..981]
 r829: [978..979]
 r830: [972..973]
 r831: [966..967]
 r832: [960..961]
 r833: [956..957]
 r834: [950..951]
 r835: [946..947]
 r836: [940..941]
 r837: [934..935]
 r838: [928..929]
 r839: [926..927]
 r840: [922..923]
 r841: [916..917]
 r842: [912..913]
 r843: [908..909]
 r844: [902..903]
 r845: [894..895]
 r846: [2..3]
 r847: [6..7]
 r848: [10..11]
 r849: [878..879]
 r852: [870..871]
 r853: [872..873]
 r854: [868..869]
 r855: [862..863]
 r858: [858..859]
 r859: [860..861]
 r860: [856..857]
 r861: [852..853]
 r862: [844..845]
 r863: [836..839]
 r864: [836..837]
 r865: [834..835]
 r866: [830..831]
 r867: [824..825]
 r868: [816..819]
 r869: [816..817]
 r870: [812..813]
 r871: [808..809]
 r872: [802..803]
 r873: [794..797]
 r874: [794..795]
 r875: [790..791]
 r876: [786..787]
 r877: [778..779]
 r878: [770..773]
 r879: [770..771]
 r880: [766..767]
 r881: [764..765]
 r882: [758..759]
 r883: [750..751]
 r884: [742..745]
 r885: [742..743]
 r886: [740..741]
 r887: [734..735]
 r888: [728..729]
 r889: [720..723]
 r890: [720..721]
 r891: [716..717]
 r892: [710..711]
 r893: [704..705]
 r894: [696..699]
 r895: [696..697]
 r896: [692..693]
 r897: [686..687]
 r898: [678..679]
 r899: [670..673]
 r900: [670..671]
 r901: [666..667]
 r902: [664..665]
 r903: [662..663]
 r904: [660..661]
 r905: [658..659]
 r906: [656..657]
 r907: [652..653]
 r908: [644..645]
 r909: [636..639]
 r910: [636..637]
 r911: [634..635]
 r912: [630..631]
 r913: [624..625]
 r914: [616..619]
 r915: [616..617]
 r916: [612..613]
 r917: [608..609]
 r918: [602..603]
 r919: [594..597]
 r920: [594..595]
 r921: [590..591]
 r922: [586..587]
 r923: [578..579]
 r924: [570..573]
 r925: [570..571]
 r926: [562..563]
 r927: [560..561]
 r928: [554..555]
 r929: [546..547]
 r930: [538..541]
 r931: [538..539]
 r932: [536..537]
 r933: [530..531]
 r934: [524..525]
 r935: [516..519]
 r936: [516..517]
 r937: [512..513]
 r938: [506..507]
 r939: [500..501]
 r940: [492..495]
 r941: [492..493]
 r942: [488..489]
 r943: [482..483]
 r944: [474..475]
 r945: [466..469]
 r946: [466..467]
 r947: [458..459]
 r948: [456..457]
 r949: [452..453]
 r950: [444..445]
 r951: [436..439]
 r952: [436..437]
 r953: [434..435]
 r954: [430..431]
 r955: [424..425]
 r956: [416..419]
 r957: [416..417]
 r958: [412..413]
 r959: [408..409]
 r960: [402..403]
 r961: [394..397]
 r962: [394..395]
 r963: [390..391]
 r964: [386..387]
 r965: [378..379]
 r966: [370..373]
 r967: [370..371]
 r968: [362..363]
 r969: [360..361]
 r970: [354..355]
 r971: [346..347]
 r972: [338..341]
 r973: [338..339]
 r974: [336..337]
 r975: [330..331]
 r976: [324..325]
 r977: [316..319]
 r978: [316..317]
 r979: [312..313]
 r980: [306..307]
 r981: [300..301]
 r982: [292..295]
 r983: [292..293]
 r984: [288..289]
 r985: [282..283]
 r986: [274..275]
 r987: [266..269]
 r988: [266..267]
 r989: [258..259]
 r990: [256..257]
 r991: [252..253]
 r992: [246..247]
 r993: [238..241]
 r994: [238..239]
 r995: [236..237]
 r996: [230..231]
 r997: [224..225]
 r998: [216..219]
 r999: [216..217]
 r1000: [208..209]
 r1001: [210..211]
 r1002: [204..205]
 r1003: [206..207]
 r1004: [202..203]
 r1005: [198..199]
 r1006: [192..193]
 r1007: [184..187]
 r1008: [184..185]
 r1010: [180..181]
 r1011: [182..183]
 r1012: [178..179]
 r1013: [170..171]
 r1014: [168..169]
 r1015: [164..165]
 r1016: [158..159]
 r1017: [152..153]
 r1018: [150..151]
 r1020: [146..147]
 r1021: [148..149]
 r1022: [144..145]
 r1023: [134..135]
 r1024: [136..137]
 r1025: [132..133]
 r1026: [128..129]
 r1027: [122..123]
 r1028: [116..117]
 r1029: [114..115]
 r1030: [108..109]
 r1031: [102..103]
 r1032: [96..97]
 r1033: [92..93]
 r1034: [90..91]
 r1035: [86..87]
 r1036: [82..83]
 r1037: [76..77]
 r1038: [68..69]
 r1039: [66..67]
 r1040: [64..65]
 r1041: [28..29]
 r1042: [24..25]
 r1043: [18..19]
 r1044: [12..13]
 r1045: [62..63]
 r1046: [62..63]
 r1047: [56..57]
 r1048: [58..59]
 r1049: [54..55]
 r1050: [52..53]
 r1051: [48..49]
 r1052: [50..51]
 r1053: [46..47]
 r1054: [42..43]
 r1055: [36..37]
 r1056: [30..31]
 r1057: [30..31]
 r1058: [962..963]
 r1059: [78..79]

********** Assignment #1: **********

	 Assigning to 1058 (cl=SSE_REGS, orig=274, freq=3000, tfirst=1058, tfreq=3000)...
	   Assign 21 to reload r1058 (freq=3000)
	 Assigning to 1059 (cl=SSE_REGS, orig=705, freq=3000, tfirst=1059, tfreq=3000)...
	   Assign 22 to reload r1059 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 39
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 46
changing reg in insn 44
changing reg in insn 46
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 103
changing reg in insn 101
changing reg in insn 103
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 150
changing reg in insn 151
changing reg in insn 158
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 177
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 183
changing reg in insn 184
changing reg in insn 186
changing reg in insn 186
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 196
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 216
changing reg in insn 206
changing reg in insn 207
changing reg in insn 207
changing reg in insn 211
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 218
changing reg in insn 216
changing reg in insn 218
changing reg in insn 232
changing reg in insn 233
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 235
changing reg in insn 237
changing reg in insn 238
changing reg in insn 260
changing reg in insn 261
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 267
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 276
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 275
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 278
changing reg in insn 279
changing reg in insn 280
changing reg in insn 280
changing reg in insn 282
changing reg in insn 282
changing reg in insn 296
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 289
changing reg in insn 287
changing reg in insn 288
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 291
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 295
changing reg in insn 295
changing reg in insn 296
changing reg in insn 296
changing reg in insn 297
changing reg in insn 297
changing reg in insn 312
changing reg in insn 299
changing reg in insn 300
changing reg in insn 300
changing reg in insn 304
changing reg in insn 302
changing reg in insn 303
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 306
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 310
changing reg in insn 311
changing reg in insn 312
changing reg in insn 312
changing reg in insn 314
changing reg in insn 315
changing reg in insn 315
changing reg in insn 320
changing reg in insn 317
changing reg in insn 318
changing reg in insn 318
changing reg in insn 319
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 322
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 326
changing reg in insn 327
changing reg in insn 329
changing reg in insn 330
changing reg in insn 330
changing reg in insn 332
changing reg in insn 333
changing reg in insn 334
changing reg in insn 334
changing reg in insn 337
changing reg in insn 335
changing reg in insn 337
changing reg in insn 369
changing reg in insn 370
changing reg in insn 370
changing reg in insn 371
changing reg in insn 371
changing reg in insn 376
changing reg in insn 379
changing reg in insn 380
changing reg in insn 380
changing reg in insn 385
changing reg in insn 382
changing reg in insn 383
changing reg in insn 383
changing reg in insn 384
changing reg in insn 384
changing reg in insn 385
changing reg in insn 385
changing reg in insn 387
changing reg in insn 388
changing reg in insn 389
changing reg in insn 389
changing reg in insn 391
changing reg in insn 391
changing reg in insn 405
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 398
changing reg in insn 396
changing reg in insn 397
changing reg in insn 397
changing reg in insn 398
changing reg in insn 398
changing reg in insn 400
changing reg in insn 401
changing reg in insn 402
changing reg in insn 402
changing reg in insn 404
changing reg in insn 404
changing reg in insn 405
changing reg in insn 405
changing reg in insn 406
changing reg in insn 406
changing reg in insn 422
changing reg in insn 408
changing reg in insn 409
changing reg in insn 409
changing reg in insn 414
changing reg in insn 411
changing reg in insn 412
changing reg in insn 412
changing reg in insn 413
changing reg in insn 413
changing reg in insn 414
changing reg in insn 414
changing reg in insn 416
changing reg in insn 417
changing reg in insn 418
changing reg in insn 418
changing reg in insn 420
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 424
changing reg in insn 425
changing reg in insn 425
changing reg in insn 429
changing reg in insn 427
changing reg in insn 428
changing reg in insn 428
changing reg in insn 429
changing reg in insn 429
changing reg in insn 431
changing reg in insn 432
changing reg in insn 433
changing reg in insn 433
changing reg in insn 435
changing reg in insn 436
changing reg in insn 438
changing reg in insn 439
changing reg in insn 439
changing reg in insn 441
changing reg in insn 442
changing reg in insn 443
changing reg in insn 443
changing reg in insn 446
changing reg in insn 444
changing reg in insn 446
changing reg in insn 484
changing reg in insn 485
changing reg in insn 485
changing reg in insn 486
changing reg in insn 487
changing reg in insn 492
changing reg in insn 495
changing reg in insn 496
changing reg in insn 496
changing reg in insn 500
changing reg in insn 498
changing reg in insn 499
changing reg in insn 499
changing reg in insn 500
changing reg in insn 500
changing reg in insn 502
changing reg in insn 503
changing reg in insn 504
changing reg in insn 504
changing reg in insn 506
changing reg in insn 506
changing reg in insn 508
changing reg in insn 509
changing reg in insn 509
changing reg in insn 511
changing reg in insn 512
changing reg in insn 513
changing reg in insn 513
changing reg in insn 515
changing reg in insn 515
changing reg in insn 517
changing reg in insn 518
changing reg in insn 518
changing reg in insn 519
changing reg in insn 519
changing reg in insn 521
changing reg in insn 522
changing reg in insn 523
changing reg in insn 523
changing reg in insn 525
changing reg in insn 525
changing reg in insn 526
changing reg in insn 528
changing reg in insn 529
changing reg in insn 529
changing reg in insn 531
changing reg in insn 532
changing reg in insn 533
changing reg in insn 533
changing reg in insn 535
changing reg in insn 535
changing reg in insn 536
changing reg in insn 547
changing reg in insn 538
changing reg in insn 539
changing reg in insn 539
changing reg in insn 540
changing reg in insn 540
changing reg in insn 542
changing reg in insn 543
changing reg in insn 544
changing reg in insn 544
changing reg in insn 546
changing reg in insn 546
changing reg in insn 547
changing reg in insn 547
changing reg in insn 548
changing reg in insn 548
changing reg in insn 550
changing reg in insn 550
changing reg in insn 552
changing reg in insn 553
changing reg in insn 553
changing reg in insn 555
changing reg in insn 556
changing reg in insn 557
changing reg in insn 557
changing reg in insn 559
changing reg in insn 559
changing reg in insn 560
changing reg in insn 562
changing reg in insn 563
changing reg in insn 563
changing reg in insn 567
changing reg in insn 565
changing reg in insn 566
changing reg in insn 566
changing reg in insn 567
changing reg in insn 567
changing reg in insn 569
changing reg in insn 570
changing reg in insn 571
changing reg in insn 571
changing reg in insn 574
changing reg in insn 572
changing reg in insn 574
changing reg in insn 620
changing reg in insn 621
changing reg in insn 621
changing reg in insn 622
changing reg in insn 622
changing reg in insn 627
changing reg in insn 630
changing reg in insn 631
changing reg in insn 631
changing reg in insn 632
changing reg in insn 633
changing reg in insn 638
changing reg in insn 641
changing reg in insn 642
changing reg in insn 642
changing reg in insn 647
changing reg in insn 644
changing reg in insn 645
changing reg in insn 645
changing reg in insn 646
changing reg in insn 646
changing reg in insn 647
changing reg in insn 647
changing reg in insn 649
changing reg in insn 650
changing reg in insn 651
changing reg in insn 651
changing reg in insn 653
changing reg in insn 654
changing reg in insn 669
changing reg in insn 656
changing reg in insn 657
changing reg in insn 657
changing reg in insn 661
changing reg in insn 659
changing reg in insn 660
changing reg in insn 660
changing reg in insn 661
changing reg in insn 661
changing reg in insn 663
changing reg in insn 664
changing reg in insn 665
changing reg in insn 665
changing reg in insn 667
changing reg in insn 668
changing reg in insn 669
changing reg in insn 669
changing reg in insn 684
changing reg in insn 671
changing reg in insn 672
changing reg in insn 672
changing reg in insn 676
changing reg in insn 674
changing reg in insn 675
changing reg in insn 675
changing reg in insn 676
changing reg in insn 676
changing reg in insn 678
changing reg in insn 679
changing reg in insn 680
changing reg in insn 680
changing reg in insn 682
changing reg in insn 683
changing reg in insn 684
changing reg in insn 684
changing reg in insn 686
changing reg in insn 687
changing reg in insn 687
changing reg in insn 692
changing reg in insn 689
changing reg in insn 690
changing reg in insn 690
changing reg in insn 691
changing reg in insn 691
changing reg in insn 692
changing reg in insn 692
changing reg in insn 694
changing reg in insn 695
changing reg in insn 696
changing reg in insn 696
changing reg in insn 698
changing reg in insn 699
changing reg in insn 703
changing reg in insn 704
changing reg in insn 704
changing reg in insn 705
changing reg in insn 705
changing reg in insn 710
changing reg in insn 707
changing reg in insn 708
changing reg in insn 708
changing reg in insn 709
changing reg in insn 709
changing reg in insn 710
changing reg in insn 710
changing reg in insn 712
changing reg in insn 713
changing reg in insn 714
changing reg in insn 714
changing reg in insn 716
changing reg in insn 717
changing reg in insn 733
changing reg in insn 719
changing reg in insn 720
changing reg in insn 720
changing reg in insn 721
changing reg in insn 721
changing reg in insn 725
changing reg in insn 723
changing reg in insn 724
changing reg in insn 724
changing reg in insn 725
changing reg in insn 725
changing reg in insn 727
changing reg in insn 728
changing reg in insn 729
changing reg in insn 729
changing reg in insn 731
changing reg in insn 732
changing reg in insn 733
changing reg in insn 733
changing reg in insn 749
changing reg in insn 735
changing reg in insn 736
changing reg in insn 736
changing reg in insn 737
changing reg in insn 737
changing reg in insn 741
changing reg in insn 739
changing reg in insn 740
changing reg in insn 740
changing reg in insn 741
changing reg in insn 741
changing reg in insn 743
changing reg in insn 744
changing reg in insn 745
changing reg in insn 745
changing reg in insn 747
changing reg in insn 748
changing reg in insn 749
changing reg in insn 749
changing reg in insn 751
changing reg in insn 752
changing reg in insn 752
changing reg in insn 753
changing reg in insn 753
changing reg in insn 758
changing reg in insn 755
changing reg in insn 756
changing reg in insn 756
changing reg in insn 757
changing reg in insn 757
changing reg in insn 758
changing reg in insn 758
changing reg in insn 760
changing reg in insn 761
changing reg in insn 762
changing reg in insn 762
changing reg in insn 764
changing reg in insn 765
changing reg in insn 785
changing reg in insn 786
changing reg in insn 786
changing reg in insn 791
changing reg in insn 788
changing reg in insn 789
changing reg in insn 789
changing reg in insn 790
changing reg in insn 790
changing reg in insn 791
changing reg in insn 791
changing reg in insn 793
changing reg in insn 794
changing reg in insn 795
changing reg in insn 795
changing reg in insn 797
changing reg in insn 798
changing reg in insn 813
changing reg in insn 800
changing reg in insn 801
changing reg in insn 801
changing reg in insn 805
changing reg in insn 803
changing reg in insn 804
changing reg in insn 804
changing reg in insn 805
changing reg in insn 805
changing reg in insn 807
changing reg in insn 808
changing reg in insn 809
changing reg in insn 809
changing reg in insn 811
changing reg in insn 812
changing reg in insn 813
changing reg in insn 813
changing reg in insn 828
changing reg in insn 815
changing reg in insn 816
changing reg in insn 816
changing reg in insn 820
changing reg in insn 818
changing reg in insn 819
changing reg in insn 819
changing reg in insn 820
changing reg in insn 820
changing reg in insn 822
changing reg in insn 823
changing reg in insn 824
changing reg in insn 824
changing reg in insn 826
changing reg in insn 827
changing reg in insn 828
changing reg in insn 828
changing reg in insn 830
changing reg in insn 831
changing reg in insn 831
changing reg in insn 836
changing reg in insn 833
changing reg in insn 834
changing reg in insn 834
changing reg in insn 835
changing reg in insn 835
changing reg in insn 836
changing reg in insn 836
changing reg in insn 838
changing reg in insn 839
changing reg in insn 840
changing reg in insn 840
changing reg in insn 842
changing reg in insn 843
changing reg in insn 844
changing reg in insn 845
changing reg in insn 845
changing reg in insn 846
changing reg in insn 849
changing reg in insn 850
changing reg in insn 850
changing reg in insn 851
changing reg in insn 851
changing reg in insn 856
changing reg in insn 853
changing reg in insn 854
changing reg in insn 854
changing reg in insn 855
changing reg in insn 855
changing reg in insn 856
changing reg in insn 856
changing reg in insn 858
changing reg in insn 859
changing reg in insn 860
changing reg in insn 860
changing reg in insn 862
changing reg in insn 863
changing reg in insn 879
changing reg in insn 865
changing reg in insn 866
changing reg in insn 866
changing reg in insn 867
changing reg in insn 867
changing reg in insn 871
changing reg in insn 869
changing reg in insn 870
changing reg in insn 870
changing reg in insn 871
changing reg in insn 871
changing reg in insn 873
changing reg in insn 874
changing reg in insn 875
changing reg in insn 875
changing reg in insn 877
changing reg in insn 878
changing reg in insn 879
changing reg in insn 879
changing reg in insn 895
changing reg in insn 881
changing reg in insn 882
changing reg in insn 882
changing reg in insn 883
changing reg in insn 883
changing reg in insn 887
changing reg in insn 885
changing reg in insn 886
changing reg in insn 886
changing reg in insn 887
changing reg in insn 887
changing reg in insn 889
changing reg in insn 890
changing reg in insn 891
changing reg in insn 891
changing reg in insn 893
changing reg in insn 894
changing reg in insn 895
changing reg in insn 895
changing reg in insn 897
changing reg in insn 898
changing reg in insn 898
changing reg in insn 899
changing reg in insn 899
changing reg in insn 904
changing reg in insn 901
changing reg in insn 902
changing reg in insn 902
changing reg in insn 903
changing reg in insn 903
changing reg in insn 904
changing reg in insn 904
changing reg in insn 906
changing reg in insn 907
changing reg in insn 908
changing reg in insn 908
changing reg in insn 910
changing reg in insn 911
changing reg in insn 912
changing reg in insn 913
changing reg in insn 913
changing reg in insn 914
changing reg in insn 917
changing reg in insn 918
changing reg in insn 918
changing reg in insn 923
changing reg in insn 920
changing reg in insn 921
changing reg in insn 921
changing reg in insn 922
changing reg in insn 922
changing reg in insn 923
changing reg in insn 923
changing reg in insn 925
changing reg in insn 926
changing reg in insn 927
changing reg in insn 927
changing reg in insn 929
changing reg in insn 930
changing reg in insn 945
changing reg in insn 932
changing reg in insn 933
changing reg in insn 933
changing reg in insn 937
changing reg in insn 935
changing reg in insn 936
changing reg in insn 936
changing reg in insn 937
changing reg in insn 937
changing reg in insn 939
changing reg in insn 940
changing reg in insn 941
changing reg in insn 941
changing reg in insn 943
changing reg in insn 944
changing reg in insn 945
changing reg in insn 945
changing reg in insn 960
changing reg in insn 947
changing reg in insn 948
changing reg in insn 948
changing reg in insn 952
changing reg in insn 950
changing reg in insn 951
changing reg in insn 951
changing reg in insn 952
changing reg in insn 952
changing reg in insn 954
changing reg in insn 955
changing reg in insn 956
changing reg in insn 956
changing reg in insn 958
changing reg in insn 959
changing reg in insn 960
changing reg in insn 960
changing reg in insn 962
changing reg in insn 963
changing reg in insn 963
changing reg in insn 968
changing reg in insn 965
changing reg in insn 966
changing reg in insn 966
changing reg in insn 967
changing reg in insn 967
changing reg in insn 968
changing reg in insn 968
changing reg in insn 970
changing reg in insn 971
changing reg in insn 972
changing reg in insn 972
changing reg in insn 974
changing reg in insn 975
changing reg in insn 976
changing reg in insn 977
changing reg in insn 977
changing reg in insn 978
changing reg in insn 981
changing reg in insn 982
changing reg in insn 982
changing reg in insn 983
changing reg in insn 983
changing reg in insn 988
changing reg in insn 985
changing reg in insn 986
changing reg in insn 986
changing reg in insn 987
changing reg in insn 987
changing reg in insn 988
changing reg in insn 988
changing reg in insn 990
changing reg in insn 991
changing reg in insn 992
changing reg in insn 992
changing reg in insn 994
changing reg in insn 995
changing reg in insn 1011
changing reg in insn 997
changing reg in insn 998
changing reg in insn 998
changing reg in insn 999
changing reg in insn 999
changing reg in insn 1003
changing reg in insn 1001
changing reg in insn 1002
changing reg in insn 1002
changing reg in insn 1003
changing reg in insn 1003
changing reg in insn 1005
changing reg in insn 1006
changing reg in insn 1007
changing reg in insn 1007
changing reg in insn 1009
changing reg in insn 1010
changing reg in insn 1011
changing reg in insn 1011
changing reg in insn 1027
changing reg in insn 1013
changing reg in insn 1014
changing reg in insn 1014
changing reg in insn 1015
changing reg in insn 1015
changing reg in insn 1019
changing reg in insn 1017
changing reg in insn 1018
changing reg in insn 1018
changing reg in insn 1019
changing reg in insn 1019
changing reg in insn 1021
changing reg in insn 1022
changing reg in insn 1023
changing reg in insn 1023
changing reg in insn 1025
changing reg in insn 1026
changing reg in insn 1027
changing reg in insn 1027
changing reg in insn 1029
changing reg in insn 1030
changing reg in insn 1030
changing reg in insn 1031
changing reg in insn 1031
changing reg in insn 1036
changing reg in insn 1033
changing reg in insn 1034
changing reg in insn 1034
changing reg in insn 1035
changing reg in insn 1035
changing reg in insn 1036
changing reg in insn 1036
changing reg in insn 1038
changing reg in insn 1039
changing reg in insn 1040
changing reg in insn 1040
changing reg in insn 1042
changing reg in insn 1043
changing reg in insn 1044
changing reg in insn 1045
changing reg in insn 1045
changing reg in insn 1046
changing reg in insn 1049
changing reg in insn 1050
changing reg in insn 1050
changing reg in insn 1054
changing reg in insn 1052
changing reg in insn 1053
changing reg in insn 1053
changing reg in insn 1054
changing reg in insn 1054
changing reg in insn 1056
changing reg in insn 1057
changing reg in insn 1058
changing reg in insn 1058
changing reg in insn 1060
changing reg in insn 1061
changing reg in insn 1077
changing reg in insn 1063
changing reg in insn 1064
changing reg in insn 1064
changing reg in insn 1065
changing reg in insn 1065
changing reg in insn 1069
changing reg in insn 1067
changing reg in insn 1068
changing reg in insn 1068
changing reg in insn 1069
changing reg in insn 1069
changing reg in insn 1071
changing reg in insn 1072
changing reg in insn 1073
changing reg in insn 1073
changing reg in insn 1075
changing reg in insn 1076
changing reg in insn 1077
changing reg in insn 1077
changing reg in insn 1078
changing reg in insn 1078
changing reg in insn 1086
changing reg in insn 1087
changing reg in insn 1087
changing reg in insn 1091
changing reg in insn 1089
changing reg in insn 1090
changing reg in insn 1090
changing reg in insn 1091
changing reg in insn 1091
changing reg in insn 1093
changing reg in insn 1094
changing reg in insn 1095
changing reg in insn 1095
changing reg in insn 1097
changing reg in insn 1102
changing reg in insn 1105
changing reg in insn 1106
changing reg in insn 1107
changing reg in insn 1117
changing reg in insn 1118
changing reg in insn 1118
changing reg in insn 1122
changing reg in insn 1120
changing reg in insn 1121
changing reg in insn 1121
changing reg in insn 1122
changing reg in insn 1122
changing reg in insn 1124
changing reg in insn 1125
changing reg in insn 1126
changing reg in insn 1126
changing reg in insn 1128
changing reg in insn 1134
changing reg in insn 1137
changing reg in insn 1138
changing reg in insn 1139
changing reg in insn 1150
changing reg in insn 1151
changing reg in insn 1151
changing reg in insn 1155
changing reg in insn 1153
changing reg in insn 1154
changing reg in insn 1154
changing reg in insn 1155
changing reg in insn 1155
changing reg in insn 1157
changing reg in insn 1158
changing reg in insn 1159
changing reg in insn 1159
changing reg in insn 1161
changing reg in insn 1161
changing reg in insn 1176
changing reg in insn 1163
changing reg in insn 1164
changing reg in insn 1164
changing reg in insn 1165
changing reg in insn 1165
changing reg in insn 1169
changing reg in insn 1167
changing reg in insn 1168
changing reg in insn 1168
changing reg in insn 1169
changing reg in insn 1169
changing reg in insn 1171
changing reg in insn 1172
changing reg in insn 1173
changing reg in insn 1173
changing reg in insn 1175
changing reg in insn 1175
changing reg in insn 1176
changing reg in insn 1179
changing reg in insn 1180
changing reg in insn 1182
changing reg in insn 1183
changing reg in insn 1185
changing reg in insn 1186
changing reg in insn 1189
changing reg in insn 1190
changing reg in insn 1192
changing reg in insn 1194
changing reg in insn 1196
changing reg in insn 1198
changing reg in insn 1205
changing reg in insn 1206
changing reg in insn 1206
changing reg in insn 1210
changing reg in insn 1208
changing reg in insn 1209
changing reg in insn 1209
changing reg in insn 1210
changing reg in insn 1210
changing reg in insn 1212
changing reg in insn 1213
changing reg in insn 1214
changing reg in insn 1214
changing reg in insn 1217
changing reg in insn 1215
changing reg in insn 1217
changing reg in insn 1224
changing reg in insn 1225
changing reg in insn 1225
changing reg in insn 1227
changing reg in insn 1227
changing reg in insn 1230
changing reg in insn 1232
changing reg in insn 1232
changing reg in insn 1234
changing reg in insn 1234
changing reg in insn 1237
changing reg in insn 1238
changing reg in insn 1238
changing reg in insn 1242
changing reg in insn 1240
changing reg in insn 1241
changing reg in insn 1241
changing reg in insn 1242
changing reg in insn 1242
changing reg in insn 1244
changing reg in insn 1245
changing reg in insn 1246
changing reg in insn 1246
changing reg in insn 1249
changing reg in insn 1110
changing reg in insn 1098
changing reg in insn 1113
changing reg in insn 1103
changing reg in insn 1103
changing reg in insn 1100
changing reg in insn 1142
changing reg in insn 1130
changing reg in insn 1145
changing reg in insn 1135
changing reg in insn 1135
changing reg in insn 1132
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 17
changing reg in insn 16
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 29
changing reg in insn 30
changing reg in insn 65
changing reg in insn 67
changing reg in insn 66
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 79
changing reg in insn 80
changing reg in insn 120
changing reg in insn 121
changing reg in insn 124
changing reg in insn 126
changing reg in insn 125
changing reg in insn 128
changing reg in insn 130
changing reg in insn 131
changing reg in insn 138
changing reg in insn 139
changing reg in insn 165
changing reg in insn 167
changing reg in insn 241
changing reg in insn 243
changing reg in insn 242
changing reg in insn 245
changing reg in insn 247
changing reg in insn 248
changing reg in insn 255
changing reg in insn 256
changing reg in insn 350
changing reg in insn 352
changing reg in insn 351
changing reg in insn 354
changing reg in insn 356
changing reg in insn 357
changing reg in insn 364
changing reg in insn 365
changing reg in insn 465
changing reg in insn 467
changing reg in insn 466
changing reg in insn 469
changing reg in insn 471
changing reg in insn 472
changing reg in insn 479
changing reg in insn 480
changing reg in insn 597
changing reg in insn 598
changing reg in insn 601
changing reg in insn 603
changing reg in insn 602
changing reg in insn 605
changing reg in insn 607
changing reg in insn 608
changing reg in insn 615
changing reg in insn 616
changing reg in insn 1186
changing reg in insn 1187
changing reg in insn 1190
changing reg in insn 1191
changing reg in insn 1191
changing reg in insn 1191
changing reg in insn 10
changing reg in insn 11
changing reg in insn 20
changing reg in insn 21
changing reg in insn 28
changing reg in insn 29
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 45
changing reg in insn 46
changing reg in insn 70
changing reg in insn 71
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 87
changing reg in insn 90
changing reg in insn 92
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 119
changing reg in insn 120
changing reg in insn 129
changing reg in insn 130
changing reg in insn 137
changing reg in insn 138
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 149
changing reg in insn 151
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 157
changing reg in insn 156
changing reg in insn 157
changing reg in insn 159
changing reg in insn 160
changing reg in insn 163
changing reg in insn 164
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 178
changing reg in insn 179
changing reg in insn 182
changing reg in insn 184
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 190
changing reg in insn 191
changing reg in insn 193
changing reg in insn 194
changing reg in insn 197
changing reg in insn 198
changing reg in insn 201
changing reg in insn 203
changing reg in insn 202
changing reg in insn 203
changing reg in insn 205
changing reg in insn 206
changing reg in insn 208
changing reg in insn 209
changing reg in insn 212
changing reg in insn 213
changing reg in insn 217
changing reg in insn 218
changing reg in insn 231
changing reg in insn 232
changing reg in insn 235
changing reg in insn 236
changing reg in insn 246
changing reg in insn 247
changing reg in insn 254
changing reg in insn 255
changing reg in insn 259
changing reg in insn 260
changing reg in insn 267
changing reg in insn 268
changing reg in insn 266
changing reg in insn 269
changing reg in insn 270
changing reg in insn 272
changing reg in insn 273
changing reg in insn 277
changing reg in insn 278
changing reg in insn 281
changing reg in insn 282
changing reg in insn 283
changing reg in insn 284
changing reg in insn 286
changing reg in insn 287
changing reg in insn 290
changing reg in insn 291
changing reg in insn 294
changing reg in insn 295
changing reg in insn 298
changing reg in insn 299
changing reg in insn 301
changing reg in insn 302
changing reg in insn 305
changing reg in insn 306
changing reg in insn 309
changing reg in insn 311
changing reg in insn 310
changing reg in insn 311
changing reg in insn 313
changing reg in insn 314
changing reg in insn 316
changing reg in insn 317
changing reg in insn 321
changing reg in insn 322
changing reg in insn 325
changing reg in insn 327
changing reg in insn 326
changing reg in insn 327
changing reg in insn 328
changing reg in insn 329
changing reg in insn 331
changing reg in insn 332
changing reg in insn 336
changing reg in insn 337
changing reg in insn 355
changing reg in insn 356
changing reg in insn 363
changing reg in insn 364
changing reg in insn 368
changing reg in insn 369
changing reg in insn 376
changing reg in insn 377
changing reg in insn 375
changing reg in insn 378
changing reg in insn 379
changing reg in insn 381
changing reg in insn 382
changing reg in insn 386
changing reg in insn 387
changing reg in insn 390
changing reg in insn 391
changing reg in insn 392
changing reg in insn 393
changing reg in insn 395
changing reg in insn 396
changing reg in insn 399
changing reg in insn 400
changing reg in insn 403
changing reg in insn 404
changing reg in insn 407
changing reg in insn 408
changing reg in insn 410
changing reg in insn 411
changing reg in insn 415
changing reg in insn 416
changing reg in insn 419
changing reg in insn 421
changing reg in insn 420
changing reg in insn 421
changing reg in insn 423
changing reg in insn 424
changing reg in insn 426
changing reg in insn 427
changing reg in insn 430
changing reg in insn 431
changing reg in insn 434
changing reg in insn 436
changing reg in insn 435
changing reg in insn 436
changing reg in insn 437
changing reg in insn 438
changing reg in insn 440
changing reg in insn 441
changing reg in insn 445
changing reg in insn 446
changing reg in insn 470
changing reg in insn 471
changing reg in insn 478
changing reg in insn 479
changing reg in insn 483
changing reg in insn 484
changing reg in insn 486
changing reg in insn 487
changing reg in insn 492
changing reg in insn 493
changing reg in insn 491
changing reg in insn 494
changing reg in insn 495
changing reg in insn 497
changing reg in insn 498
changing reg in insn 501
changing reg in insn 502
changing reg in insn 505
changing reg in insn 506
changing reg in insn 507
changing reg in insn 508
changing reg in insn 510
changing reg in insn 511
changing reg in insn 514
changing reg in insn 515
changing reg in insn 516
changing reg in insn 517
changing reg in insn 520
changing reg in insn 521
changing reg in insn 524
changing reg in insn 525
changing reg in insn 527
changing reg in insn 528
changing reg in insn 530
changing reg in insn 531
changing reg in insn 534
changing reg in insn 535
changing reg in insn 537
changing reg in insn 538
changing reg in insn 541
changing reg in insn 542
changing reg in insn 545
changing reg in insn 546
changing reg in insn 549
changing reg in insn 550
changing reg in insn 551
changing reg in insn 552
changing reg in insn 554
changing reg in insn 555
changing reg in insn 558
changing reg in insn 559
changing reg in insn 561
changing reg in insn 562
changing reg in insn 564
changing reg in insn 565
changing reg in insn 568
changing reg in insn 569
changing reg in insn 573
changing reg in insn 574
changing reg in insn 596
changing reg in insn 597
changing reg in insn 606
changing reg in insn 607
changing reg in insn 614
changing reg in insn 615
changing reg in insn 619
changing reg in insn 620
changing reg in insn 627
changing reg in insn 628
changing reg in insn 626
changing reg in insn 629
changing reg in insn 630
changing reg in insn 632
changing reg in insn 633
changing reg in insn 638
changing reg in insn 639
changing reg in insn 637
changing reg in insn 640
changing reg in insn 641
changing reg in insn 643
changing reg in insn 644
changing reg in insn 648
changing reg in insn 649
changing reg in insn 652
changing reg in insn 654
changing reg in insn 653
changing reg in insn 654
changing reg in insn 655
changing reg in insn 656
changing reg in insn 658
changing reg in insn 659
changing reg in insn 662
changing reg in insn 663
changing reg in insn 666
changing reg in insn 668
changing reg in insn 667
changing reg in insn 668
changing reg in insn 670
changing reg in insn 671
changing reg in insn 673
changing reg in insn 674
changing reg in insn 677
changing reg in insn 678
changing reg in insn 681
changing reg in insn 683
changing reg in insn 682
changing reg in insn 683
changing reg in insn 685
changing reg in insn 686
changing reg in insn 688
changing reg in insn 689
changing reg in insn 693
changing reg in insn 694
changing reg in insn 697
changing reg in insn 699
changing reg in insn 698
changing reg in insn 699
changing reg in insn 700
changing reg in insn 701
changing reg in insn 702
changing reg in insn 703
changing reg in insn 706
changing reg in insn 707
changing reg in insn 711
changing reg in insn 712
changing reg in insn 715
changing reg in insn 717
changing reg in insn 716
changing reg in insn 717
changing reg in insn 718
changing reg in insn 719
changing reg in insn 722
changing reg in insn 723
changing reg in insn 726
changing reg in insn 727
changing reg in insn 730
changing reg in insn 732
changing reg in insn 731
changing reg in insn 732
changing reg in insn 734
changing reg in insn 735
changing reg in insn 738
changing reg in insn 739
changing reg in insn 742
changing reg in insn 743
changing reg in insn 746
changing reg in insn 748
changing reg in insn 747
changing reg in insn 748
changing reg in insn 750
changing reg in insn 751
changing reg in insn 754
changing reg in insn 755
changing reg in insn 759
changing reg in insn 760
changing reg in insn 763
changing reg in insn 765
changing reg in insn 764
changing reg in insn 765
changing reg in insn 766
changing reg in insn 767
changing reg in insn 768
changing reg in insn 769
changing reg in insn 771
changing reg in insn 772
changing reg in insn 776
changing reg in insn 777
changing reg in insn 779
changing reg in insn 780
changing reg in insn 784
changing reg in insn 785
changing reg in insn 787
changing reg in insn 788
changing reg in insn 792
changing reg in insn 793
changing reg in insn 796
changing reg in insn 798
changing reg in insn 797
changing reg in insn 798
changing reg in insn 799
changing reg in insn 800
changing reg in insn 802
changing reg in insn 803
changing reg in insn 806
changing reg in insn 807
changing reg in insn 810
changing reg in insn 812
changing reg in insn 811
changing reg in insn 812
changing reg in insn 814
changing reg in insn 815
changing reg in insn 817
changing reg in insn 818
changing reg in insn 821
changing reg in insn 822
changing reg in insn 825
changing reg in insn 827
changing reg in insn 826
changing reg in insn 827
changing reg in insn 829
changing reg in insn 830
changing reg in insn 832
changing reg in insn 833
changing reg in insn 837
changing reg in insn 838
changing reg in insn 841
changing reg in insn 843
changing reg in insn 842
changing reg in insn 843
changing reg in insn 846
changing reg in insn 847
changing reg in insn 848
changing reg in insn 849
changing reg in insn 852
changing reg in insn 853
changing reg in insn 857
changing reg in insn 858
changing reg in insn 861
changing reg in insn 863
changing reg in insn 862
changing reg in insn 863
changing reg in insn 864
changing reg in insn 865
changing reg in insn 868
changing reg in insn 869
changing reg in insn 872
changing reg in insn 873
changing reg in insn 876
changing reg in insn 878
changing reg in insn 877
changing reg in insn 878
changing reg in insn 880
changing reg in insn 881
changing reg in insn 884
changing reg in insn 885
changing reg in insn 888
changing reg in insn 889
changing reg in insn 892
changing reg in insn 894
changing reg in insn 893
changing reg in insn 894
changing reg in insn 896
changing reg in insn 897
changing reg in insn 900
changing reg in insn 901
changing reg in insn 905
changing reg in insn 906
changing reg in insn 909
changing reg in insn 911
changing reg in insn 910
changing reg in insn 911
changing reg in insn 914
changing reg in insn 915
changing reg in insn 916
changing reg in insn 917
changing reg in insn 919
changing reg in insn 920
changing reg in insn 924
changing reg in insn 925
changing reg in insn 928
changing reg in insn 930
changing reg in insn 929
changing reg in insn 930
changing reg in insn 931
changing reg in insn 932
changing reg in insn 934
changing reg in insn 935
changing reg in insn 938
changing reg in insn 939
changing reg in insn 942
changing reg in insn 944
changing reg in insn 943
changing reg in insn 944
changing reg in insn 946
changing reg in insn 947
changing reg in insn 949
changing reg in insn 950
changing reg in insn 953
changing reg in insn 954
changing reg in insn 957
changing reg in insn 959
changing reg in insn 958
changing reg in insn 959
changing reg in insn 961
changing reg in insn 962
changing reg in insn 964
changing reg in insn 965
changing reg in insn 969
changing reg in insn 970
changing reg in insn 973
changing reg in insn 975
changing reg in insn 974
changing reg in insn 975
changing reg in insn 978
changing reg in insn 979
changing reg in insn 980
changing reg in insn 981
changing reg in insn 984
changing reg in insn 985
changing reg in insn 989
changing reg in insn 990
changing reg in insn 993
changing reg in insn 995
changing reg in insn 994
changing reg in insn 995
changing reg in insn 996
changing reg in insn 997
changing reg in insn 1000
changing reg in insn 1001
changing reg in insn 1004
changing reg in insn 1005
changing reg in insn 1008
changing reg in insn 1010
changing reg in insn 1009
changing reg in insn 1010
changing reg in insn 1012
changing reg in insn 1013
changing reg in insn 1016
changing reg in insn 1017
changing reg in insn 1020
changing reg in insn 1021
changing reg in insn 1024
changing reg in insn 1026
changing reg in insn 1025
changing reg in insn 1026
changing reg in insn 1028
changing reg in insn 1029
changing reg in insn 1032
changing reg in insn 1033
changing reg in insn 1037
changing reg in insn 1038
changing reg in insn 1041
changing reg in insn 1043
changing reg in insn 1042
changing reg in insn 1043
changing reg in insn 1046
changing reg in insn 1047
changing reg in insn 1048
changing reg in insn 1049
changing reg in insn 1051
changing reg in insn 1052
changing reg in insn 1055
changing reg in insn 1056
changing reg in insn 1059
changing reg in insn 1061
changing reg in insn 1060
changing reg in insn 1061
changing reg in insn 1062
changing reg in insn 1063
changing reg in insn 1066
changing reg in insn 1067
changing reg in insn 1070
changing reg in insn 1071
changing reg in insn 1074
changing reg in insn 1076
changing reg in insn 1075
changing reg in insn 1076
changing reg in insn 1080
changing reg in insn 1081
changing reg in insn 1079
changing reg in insn 1083
changing reg in insn 1084
changing reg in insn 1082
changing reg in insn 1083
changing reg in insn 1085
changing reg in insn 1086
changing reg in insn 1088
changing reg in insn 1089
changing reg in insn 1092
changing reg in insn 1093
changing reg in insn 1096
changing reg in insn 1098
changing reg in insn 1097
changing reg in insn 1098
changing reg in insn 1101
changing reg in insn 1102
changing reg in insn 1099
changing reg in insn 1100
changing reg in insn 1104
changing reg in insn 1105
changing reg in insn 1114
changing reg in insn 1115
changing reg in insn 1116
changing reg in insn 1117
changing reg in insn 1119
changing reg in insn 1120
changing reg in insn 1123
changing reg in insn 1124
changing reg in insn 1127
changing reg in insn 1128
changing reg in insn 1128
changing reg in insn 1129
changing reg in insn 1133
changing reg in insn 1134
changing reg in insn 1131
changing reg in insn 1132
changing reg in insn 1136
changing reg in insn 1137
changing reg in insn 1147
changing reg in insn 1148
changing reg in insn 1146
changing reg in insn 1147
changing reg in insn 1149
changing reg in insn 1150
changing reg in insn 1152
changing reg in insn 1153
changing reg in insn 1156
changing reg in insn 1157
changing reg in insn 1160
changing reg in insn 1161
changing reg in insn 1162
changing reg in insn 1163
changing reg in insn 1166
changing reg in insn 1167
changing reg in insn 1170
changing reg in insn 1171
changing reg in insn 1174
changing reg in insn 1175
changing reg in insn 1176
changing reg in insn 1177
changing reg in insn 1178
changing reg in insn 1179
changing reg in insn 1181
changing reg in insn 1182
changing reg in insn 1184
changing reg in insn 1185
changing reg in insn 1188
changing reg in insn 1189
changing reg in insn 1193
changing reg in insn 1194
changing reg in insn 1195
changing reg in insn 1196
changing reg in insn 1197
changing reg in insn 1198
changing reg in insn 1204
changing reg in insn 1205
changing reg in insn 1207
changing reg in insn 1208
changing reg in insn 1211
changing reg in insn 1212
changing reg in insn 1216
changing reg in insn 1217
changing reg in insn 1222
changing reg in insn 1223
changing reg in insn 1227
changing reg in insn 1228
changing reg in insn 1226
changing reg in insn 1227
changing reg in insn 1229
changing reg in insn 1230
changing reg in insn 1231
changing reg in insn 1232
changing reg in insn 1234
changing reg in insn 1235
changing reg in insn 1233
changing reg in insn 1234
changing reg in insn 1236
changing reg in insn 1237
changing reg in insn 1239
changing reg in insn 1240
changing reg in insn 1243
changing reg in insn 1244
changing reg in insn 1247
changing reg in insn 1249
changing reg in insn 1248
changing reg in insn 1249
deleting insn with uid = 165.
deleting insn with uid = 167.
deleting insn with uid = 1373.
deleting insn with uid = 845.
deleting insn with uid = 913.
deleting insn with uid = 977.
deleting insn with uid = 1045.
deleting insn with uid = 1186.
deleting insn with uid = 1376.
deleting insn with uid = 1190.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 168.
verify found no changes in insn with uid = 240.
verify found no changes in insn with uid = 461.
verify found no changes in insn with uid = 464.


calrch

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2]
;;  ref usage 	r0={69d,64u} r1={563d,558u} r2={191d,186u,5e} r3={1d,1u} r4={5d,1u} r5={8d,4u} r6={1d,375u} r7={1d,85u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={415d,45u} r18={4d} r19={4d} r20={1d,1u,37e} r21={106d,108u,2e} r22={50d,45u} r23={10d,5u} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 3202{1680d,1478u,44e} in 1141{1137 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 el+0 S8 A64])
        (reg:DI 5 di [ el ])) "CALRCH.f":1 85 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [3 richno+0 S8 A64])
        (reg:DI 4 si [ richno ])) "CALRCH.f":1 85 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 60 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
        (const_int 1 [0x1])) "CALRCH.f":76 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              10 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 673 709
(code_label 60 7 8 3 7 (nil) [1 uses])
(note 8 60 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
            (const_int 38 [0x26]))) "CALRCH.f":76 11 {*cmpsi_1}
     (nil))
(insn 10 9 11 3 (set (reg:QI 0 ax [709])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":76 678 {*setcc_qi}
     (nil))
(insn 11 10 12 3 (set (reg:SI 0 ax [orig:673 _624 ] [673])
        (zero_extend:SI (reg:QI 0 ax [709]))) "CALRCH.f":76 140 {*zero_extendqisi2}
     (nil))
(insn 12 11 13 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:673 _624 ] [673])
            (const_int 0 [0]))) "CALRCH.f":76 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1322)
            (pc))) "CALRCH.f":76 682 {*jcc}
     (nil)
 -> 1322)
;;  succ:       65
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 674 675
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg:SI 1 dx [orig:674 _625 ] [674])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "CALRCH.f":77 86 {*movsi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:SI 0 ax [orig:675 _626 ] [675])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 12 [0xc]))) [1 parallel.jend+0 S4 A32])) "CALRCH.f":77 86 {*movsi_internal}
     (nil))
(insn 17 16 54 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
        (reg:SI 1 dx [orig:674 _625 ] [674])) "CALRCH.f":77 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              9 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675
;; lr  def 	 17 [flags] 676 710
(code_label 54 17 18 5 6 (nil) [1 uses])
(note 18 54 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:675 _626 ] [675]))) "CALRCH.f":77 11 {*cmpsi_1}
     (nil))
(insn 20 19 21 5 (set (reg:QI 1 dx [710])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":77 678 {*setcc_qi}
     (nil))
(insn 21 20 22 5 (set (reg:SI 1 dx [orig:676 _628 ] [676])
        (zero_extend:SI (reg:QI 1 dx [710]))) "CALRCH.f":77 140 {*zero_extendqisi2}
     (nil))
(insn 22 21 23 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:676 _628 ] [676])
            (const_int 0 [0]))) "CALRCH.f":77 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 23 22 24 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1325)
            (pc))) "CALRCH.f":77 682 {*jcc}
     (nil)
 -> 1325)
;;  succ:       66
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 24 23 25 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 48 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALRCH.f":78 86 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              8 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 677 711
(code_label 48 25 26 7 5 (nil) [1 uses])
(note 26 48 27 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALRCH.f":78 11 {*cmpsi_1}
     (nil))
(insn 28 27 29 7 (set (reg:QI 1 dx [711])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":78 678 {*setcc_qi}
     (nil))
(insn 29 28 30 7 (set (reg:SI 1 dx [orig:677 _630 ] [677])
        (zero_extend:SI (reg:QI 1 dx [711]))) "CALRCH.f":78 140 {*zero_extendqisi2}
     (nil))
(insn 30 29 31 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:677 _630 ] [677])
            (const_int 0 [0]))) "CALRCH.f":78 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 31 30 32 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1328)
            (pc))) "CALRCH.f":78 682 {*jcc}
     (nil)
 -> 1328)
;;  succ:       67
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 67, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 712 713 714 715
(note 32 31 33 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 8 (set (reg:SI 1 dx [712])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":79 86 {*movsi_internal}
     (nil))
(insn 34 33 35 8 (set (reg:DI 1 dx [orig:87 _1 ] [87])
        (sign_extend:DI (reg:SI 1 dx [712]))) "CALRCH.f":79 149 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 8 (parallel [
            (set (reg:DI 2 cx [orig:88 _2 ] [88])
                (mult:DI (reg:DI 1 dx [orig:87 _1 ] [87])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":79 349 {*muldi3_1}
     (nil))
(insn 36 35 37 8 (set (reg:SI 1 dx [713])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":79 86 {*movsi_internal}
     (nil))
(insn 37 36 38 8 (set (reg:DI 1 dx [orig:89 _3 ] [89])
        (sign_extend:DI (reg:SI 1 dx [713]))) "CALRCH.f":79 149 {*extendsidi2_rex64}
     (nil))
(insn 38 37 39 8 (parallel [
            (set (reg:DI 1 dx [orig:90 _4 ] [90])
                (mult:DI (reg:DI 1 dx [orig:89 _3 ] [89])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":79 349 {*muldi3_1}
     (nil))
(insn 39 38 40 8 (parallel [
            (set (reg:DI 2 cx [orig:91 _5 ] [91])
                (plus:DI (reg:DI 2 cx [orig:88 _2 ] [88])
                    (reg:DI 1 dx [orig:90 _4 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":79 222 {*adddi_1}
     (nil))
(insn 40 39 41 8 (set (reg:SI 1 dx [714])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":79 86 {*movsi_internal}
     (nil))
(insn 41 40 42 8 (set (reg:DI 1 dx [orig:92 _6 ] [92])
        (sign_extend:DI (reg:SI 1 dx [714]))) "CALRCH.f":79 149 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 8 (parallel [
            (set (reg:DI 1 dx [orig:93 _7 ] [93])
                (plus:DI (reg:DI 1 dx [orig:92 _6 ] [92])
                    (reg:DI 2 cx [orig:91 _5 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":79 222 {*adddi_1}
     (nil))
(insn 43 42 44 8 (parallel [
            (set (reg:DI 2 cx [orig:94 _8 ] [94])
                (plus:DI (reg:DI 1 dx [orig:93 _7 ] [93])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":79 222 {*adddi_1}
     (nil))
(insn 44 43 45 8 (set (reg:SF 21 xmm0 [orig:95 _9 ] [95])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7fe96ef06240 options>) [2 options.spval+0 S4 A128])) "CALRCH.f":1 131 {*movsf_internal}
     (nil))
(insn 45 44 46 8 (set (reg/f:DI 1 dx [715])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [3 richno+0 S8 A64])) "CALRCH.f":79 85 {*movdi_internal}
     (nil))
(insn 46 45 47 8 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:94 _8 ] [94])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [715])) [2 *richno_631(D) S4 A32])
        (reg:SF 21 xmm0 [orig:95 _9 ] [95])) "CALRCH.f":79 131 {*movsf_internal}
     (nil))
(insn 47 46 1284 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":78 221 {*addsi_1}
     (nil))
(jump_insn 1284 47 1285 8 (set (pc)
        (label_ref 48)) "CALRCH.f":78 683 {jump}
     (nil)
 -> 48)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675

(barrier 1285 1284 1328)
;; basic block 67, loop depth 0, maybe hot
;;  prev block 8, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1328 1285 1327 67 50 (nil) [1 uses])
(note 1327 1328 1329 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 1329 1327 51 67 (const_int 0 [0]) "CALRCH.f":79 718 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675

;; basic block 9, loop depth 0, maybe hot
;;  prev block 67, next block 66, flags: (RTL, MODIFIED)
;;  pred:       67 [always]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 51 1329 52 9 4 (nil) [0 uses])
(note 52 51 53 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 1286 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":77 221 {*addsi_1}
     (nil))
(jump_insn 1286 53 1287 9 (set (pc)
        (label_ref 54)) "CALRCH.f":77 683 {jump}
     (nil)
 -> 54)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 675

(barrier 1287 1286 1325)
;; basic block 66, loop depth 0, maybe hot
;;  prev block 9, next block 10, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1325 1287 1324 66 49 (nil) [1 uses])
(note 1324 1325 1326 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 1326 1324 57 66 (const_int 0 [0]) "CALRCH.f":78 718 {nop}
     (nil))
;;  succ:       10 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 66, next block 65, flags: (RTL, MODIFIED)
;;  pred:       66 [always]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 57 1326 58 10 3 (nil) [0 uses])
(note 58 57 59 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 1288 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":76 221 {*addsi_1}
     (nil))
(jump_insn 1288 59 1289 10 (set (pc)
        (label_ref 60)) "CALRCH.f":76 683 {jump}
     (nil)
 -> 60)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1289 1288 1322)
;; basic block 65, loop depth 0, maybe hot
;;  prev block 10, next block 11, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1322 1289 1321 65 48 (nil) [1 uses])
(note 1321 1322 1323 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 1323 1321 63 65 (const_int 0 [0]) "CALRCH.f":77 718 {nop}
     (nil))
;;  succ:       11 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 65, next block 12, flags: (RTL, MODIFIED)
;;  pred:       65 [always]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 678 679
(code_label 63 1323 64 11 2 (nil) [0 uses])
(note 64 63 65 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 11 (set (reg:SI 1 dx [orig:678 _636 ] [678])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "CALRCH.f":85 86 {*movsi_internal}
     (nil))
(insn 66 65 67 11 (set (reg:SI 0 ax [orig:679 _637 ] [679])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 12 [0xc]))) [1 parallel.jend+0 S4 A32])) "CALRCH.f":85 86 {*movsi_internal}
     (nil))
(insn 67 66 111 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
        (reg:SI 1 dx [orig:678 _636 ] [678])) "CALRCH.f":85 86 {*movsi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              16 [always] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679
;; lr  def 	 17 [flags] 680 716
(code_label 111 67 68 12 11 (nil) [1 uses])
(note 68 111 69 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:679 _637 ] [679]))) "CALRCH.f":85 11 {*cmpsi_1}
     (nil))
(insn 70 69 71 12 (set (reg:QI 1 dx [716])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":85 678 {*setcc_qi}
     (nil))
(insn 71 70 72 12 (set (reg:SI 1 dx [orig:680 _639 ] [680])
        (zero_extend:SI (reg:QI 1 dx [716]))) "CALRCH.f":85 140 {*zero_extendqisi2}
     (nil))
(insn 72 71 73 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:680 _639 ] [680])
            (const_int 0 [0]))) "CALRCH.f":85 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 73 72 74 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1331)
            (pc))) "CALRCH.f":85 682 {*jcc}
     (nil)
 -> 1331)
;;  succ:       68
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 74 73 75 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 105 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALRCH.f":86 86 {*movsi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              15 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 681 717
(code_label 105 75 76 14 10 (nil) [1 uses])
(note 76 105 77 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALRCH.f":86 11 {*cmpsi_1}
     (nil))
(insn 78 77 79 14 (set (reg:QI 1 dx [717])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":86 678 {*setcc_qi}
     (nil))
(insn 79 78 80 14 (set (reg:SI 1 dx [orig:681 _641 ] [681])
        (zero_extend:SI (reg:QI 1 dx [717]))) "CALRCH.f":86 140 {*zero_extendqisi2}
     (nil))
(insn 80 79 81 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:681 _641 ] [681])
            (const_int 0 [0]))) "CALRCH.f":86 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 81 80 82 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1334)
            (pc))) "CALRCH.f":86 682 {*jcc}
     (nil)
 -> 1334)
;;  succ:       69
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 69, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 97 98 99 100 101 102 103 104 105 106 107 718 719 720 721 722 723 724 725
(note 82 81 83 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 15 (set (reg:SI 1 dx [718])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":87 86 {*movsi_internal}
     (nil))
(insn 84 83 85 15 (set (reg:DI 1 dx [orig:96 _10 ] [96])
        (sign_extend:DI (reg:SI 1 dx [718]))) "CALRCH.f":87 149 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 15 (parallel [
            (set (reg:DI 2 cx [orig:97 _11 ] [97])
                (mult:DI (reg:DI 1 dx [orig:96 _10 ] [96])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":87 349 {*muldi3_1}
     (nil))
(insn 86 85 87 15 (set (reg:SI 1 dx [719])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":87 86 {*movsi_internal}
     (nil))
(insn 87 86 88 15 (set (reg:DI 1 dx [orig:98 _12 ] [98])
        (sign_extend:DI (reg:SI 1 dx [719]))) "CALRCH.f":87 149 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 15 (parallel [
            (set (reg:DI 1 dx [orig:99 _13 ] [99])
                (plus:DI (reg:DI 1 dx [orig:98 _12 ] [98])
                    (reg:DI 2 cx [orig:97 _11 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":87 222 {*adddi_1}
     (nil))
(insn 89 88 90 15 (parallel [
            (set (reg:DI 2 cx [orig:100 _14 ] [100])
                (plus:DI (reg:DI 1 dx [orig:99 _13 ] [99])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":87 222 {*adddi_1}
     (nil))
(insn 90 89 91 15 (set (reg/f:DI 1 dx [720])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":87 85 {*movdi_internal}
     (nil))
(insn 91 90 92 15 (parallel [
            (set (reg:DI 2 cx [721])
                (plus:DI (reg:DI 2 cx [orig:100 _14 ] [100])
                    (const_int 59262 [0xe77e])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":87 222 {*adddi_1}
     (nil))
(insn 92 91 93 15 (set (reg:SF 22 xmm1 [orig:101 _15 ] [101])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [721])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [720])) [2 vrbls.fis S4 A32])) "CALRCH.f":87 131 {*movsf_internal}
     (nil))
(insn 93 92 94 15 (set (reg:SI 1 dx [722])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":87 86 {*movsi_internal}
     (nil))
(insn 94 93 95 15 (set (reg:DI 1 dx [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 1 dx [722]))) "CALRCH.f":87 149 {*extendsidi2_rex64}
     (nil))
(insn 95 94 96 15 (parallel [
            (set (reg:DI 2 cx [orig:103 _17 ] [103])
                (mult:DI (reg:DI 1 dx [orig:102 _16 ] [102])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":87 349 {*muldi3_1}
     (nil))
(insn 96 95 97 15 (set (reg:SI 1 dx [723])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":87 86 {*movsi_internal}
     (nil))
(insn 97 96 98 15 (set (reg:DI 1 dx [orig:104 _18 ] [104])
        (sign_extend:DI (reg:SI 1 dx [723]))) "CALRCH.f":87 149 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 15 (parallel [
            (set (reg:DI 1 dx [orig:105 _19 ] [105])
                (plus:DI (reg:DI 1 dx [orig:104 _18 ] [104])
                    (reg:DI 2 cx [orig:103 _17 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":87 222 {*adddi_1}
     (nil))
(insn 99 98 100 15 (parallel [
            (set (reg:DI 2 cx [orig:106 _20 ] [106])
                (plus:DI (reg:DI 1 dx [orig:105 _19 ] [105])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":87 222 {*adddi_1}
     (nil))
(insn 100 99 101 15 (set (reg:SF 21 xmm0 [724])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) "CALRCH.f":87 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.80000019073486328125e+0 [0x0.9ccccdp+4])
        (nil)))
(insn 101 100 102 15 (set (reg:SF 21 xmm0 [orig:107 _21 ] [107])
        (mult:SF (reg:SF 21 xmm0 [724])
            (reg:SF 22 xmm1 [orig:101 _15 ] [101]))) "CALRCH.f":87 838 {*fop_sf_comm}
     (nil))
(insn 102 101 103 15 (set (reg/f:DI 1 dx [725])
        (symbol_ref:DI ("hgt.4223") [flags 0x202]  <var_decl 0x7fe96ef1e360 hgt>)) "CALRCH.f":87 85 {*movdi_internal}
     (nil))
(insn 103 102 104 15 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:106 _20 ] [106])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [725])) [2 hgt S4 A32])
        (reg:SF 21 xmm0 [orig:107 _21 ] [107])) "CALRCH.f":87 131 {*movsf_internal}
     (nil))
(insn 104 103 1290 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":86 221 {*addsi_1}
     (nil))
(jump_insn 1290 104 1291 15 (set (pc)
        (label_ref 105)) "CALRCH.f":86 683 {jump}
     (nil)
 -> 105)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679

(barrier 1291 1290 1334)
;; basic block 69, loop depth 0, maybe hot
;;  prev block 15, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1334 1291 1333 69 52 (nil) [1 uses])
(note 1333 1334 1335 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 1335 1333 108 69 (const_int 0 [0]) "CALRCH.f":87 718 {nop}
     (nil))
;;  succ:       16 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679

;; basic block 16, loop depth 0, maybe hot
;;  prev block 69, next block 68, flags: (RTL, MODIFIED)
;;  pred:       69 [always]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 108 1335 109 16 9 (nil) [0 uses])
(note 109 108 110 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 1292 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":85 221 {*addsi_1}
     (nil))
(jump_insn 1292 110 1293 16 (set (pc)
        (label_ref 111)) "CALRCH.f":85 683 {jump}
     (nil)
 -> 111)
;;  succ:       12 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 679

(barrier 1293 1292 1331)
;; basic block 68, loop depth 0, maybe hot
;;  prev block 16, next block 17, flags: (RTL, MODIFIED)
;;  pred:       12
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1331 1293 1330 68 51 (nil) [1 uses])
(note 1330 1331 1332 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 1332 1330 114 68 (const_int 0 [0]) "CALRCH.f":86 718 {nop}
     (nil))
;;  succ:       17 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 68, next block 18, flags: (RTL, MODIFIED)
;;  pred:       68 [always]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 114 1332 115 17 8 (nil) [0 uses])
(note 115 114 116 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 588 17 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
        (const_int 38 [0x26])) "CALRCH.f":95 86 {*movsi_internal}
     (nil))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;;              43 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 682 726
(code_label 588 116 117 18 29 (nil) [1 uses])
(note 117 588 118 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 18 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
            (const_int 0 [0]))) "CALRCH.f":95 7 {*cmpsi_ccno_1}
     (nil))
(insn 119 118 120 18 (set (reg:QI 0 ax [726])
        (le:QI (reg:CCNO 17 flags)
            (const_int 0 [0]))) "CALRCH.f":95 678 {*setcc_qi}
     (nil))
(insn 120 119 121 18 (set (reg:SI 0 ax [orig:682 _646 ] [682])
        (zero_extend:SI (reg:QI 0 ax [726]))) "CALRCH.f":95 140 {*zero_extendqisi2}
     (nil))
(insn 121 120 122 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:682 _646 ] [682])
            (const_int 0 [0]))) "CALRCH.f":95 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 122 121 123 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1337)
            (pc))) "CALRCH.f":95 682 {*jcc}
     (nil)
 -> 1337)
;;  succ:       70
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 683 684
(note 123 122 124 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 125 19 (set (reg:SI 0 ax [orig:683 _647 ] [683])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "CALRCH.f":96 86 {*movsi_internal}
     (nil))
(insn 125 124 126 19 (set (reg:SI 3 bx [orig:684 _648 ] [684])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 12 [0xc]))) [1 parallel.jend+0 S4 A32])) "CALRCH.f":96 86 {*movsi_internal}
     (nil))
(insn 126 125 226 19 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
        (reg:SI 0 ax [orig:683 _647 ] [683])) "CALRCH.f":96 86 {*movsi_internal}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              24 [always] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684
;; lr  def 	 17 [flags] 685 727
(code_label 226 126 127 20 16 (nil) [1 uses])
(note 127 226 128 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 20 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
            (reg:SI 3 bx [orig:684 _648 ] [684]))) "CALRCH.f":96 11 {*cmpsi_1}
     (nil))
(insn 129 128 130 20 (set (reg:QI 0 ax [727])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":96 678 {*setcc_qi}
     (nil))
(insn 130 129 131 20 (set (reg:SI 0 ax [orig:685 _650 ] [685])
        (zero_extend:SI (reg:QI 0 ax [727]))) "CALRCH.f":96 140 {*zero_extendqisi2}
     (nil))
(insn 131 130 132 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:685 _650 ] [685])
            (const_int 0 [0]))) "CALRCH.f":96 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 132 131 133 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1340)
            (pc))) "CALRCH.f":96 682 {*jcc}
     (nil)
 -> 1340)
;;  succ:       71
;;              21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 133 132 134 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 220 21 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALRCH.f":97 86 {*movsi_internal}
     (nil))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;;              23 [always] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 686 728
(code_label 220 134 135 22 15 (nil) [1 uses])
(note 135 220 136 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "CALRCH.f":97 11 {*cmpsi_1}
     (nil))
(insn 137 136 138 22 (set (reg:QI 0 ax [728])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":97 678 {*setcc_qi}
     (nil))
(insn 138 137 139 22 (set (reg:SI 0 ax [orig:686 _652 ] [686])
        (zero_extend:SI (reg:QI 0 ax [728]))) "CALRCH.f":97 140 {*zero_extendqisi2}
     (nil))
(insn 139 138 140 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:686 _652 ] [686])
            (const_int 0 [0]))) "CALRCH.f":97 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 140 139 141 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1343)
            (pc))) "CALRCH.f":97 682 {*jcc}
     (nil)
 -> 1343)
;;  succ:       72
;;              23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 72, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 687 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754
(note 141 140 142 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 143 23 (set (reg:SI 0 ax [729])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":98 86 {*movsi_internal}
     (nil))
(insn 143 142 144 23 (set (reg:DI 0 ax [orig:108 _22 ] [108])
        (sign_extend:DI (reg:SI 0 ax [729]))) "CALRCH.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 144 143 145 23 (parallel [
            (set (reg:DI 1 dx [orig:109 _23 ] [109])
                (mult:DI (reg:DI 0 ax [orig:108 _22 ] [108])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":98 349 {*muldi3_1}
     (nil))
(insn 145 144 146 23 (set (reg:SI 0 ax [730])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":98 86 {*movsi_internal}
     (nil))
(insn 146 145 147 23 (set (reg:DI 0 ax [orig:110 _24 ] [110])
        (sign_extend:DI (reg:SI 0 ax [730]))) "CALRCH.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 147 146 148 23 (parallel [
            (set (reg:DI 0 ax [orig:111 _25 ] [111])
                (plus:DI (reg:DI 0 ax [orig:110 _24 ] [110])
                    (reg:DI 1 dx [orig:109 _23 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":98 222 {*adddi_1}
     (nil))
(insn 148 147 149 23 (parallel [
            (set (reg:DI 1 dx [orig:112 _26 ] [112])
                (plus:DI (reg:DI 0 ax [orig:111 _25 ] [111])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":98 222 {*adddi_1}
     (nil))
(insn 149 148 150 23 (set (reg/f:DI 0 ax [731])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7fe96eef8870 extra>)) "CALRCH.f":98 85 {*movdi_internal}
     (nil))
(insn 150 149 151 23 (parallel [
            (set (reg:DI 1 dx [732])
                (plus:DI (reg:DI 1 dx [orig:112 _26 ] [112])
                    (const_int 4647393 [0x46e9e1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":98 222 {*adddi_1}
     (nil))
(insn 151 150 152 23 (set (reg:SF 22 xmm1 [orig:113 _27 ] [113])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [732])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [731])) [2 extra.pdsl S4 A32])) "CALRCH.f":98 131 {*movsf_internal}
     (nil))
(insn 152 151 153 23 (set (reg:SI 0 ax [733])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":98 86 {*movsi_internal}
     (nil))
(insn 153 152 154 23 (set (reg:DI 0 ax [orig:114 _28 ] [114])
        (sign_extend:DI (reg:SI 0 ax [733]))) "CALRCH.f":98 149 {*extendsidi2_rex64}
     (nil))
(insn 154 153 155 23 (parallel [
            (set (reg:DI 1 dx [orig:115 _29 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 _28 ] [114])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":98 222 {*adddi_1}
     (nil))
(insn 155 154 156 23 (set (reg/f:DI 0 ax [734])
        (symbol_ref:DI ("phys_") [flags 0x202]  <var_decl 0x7fe96ef06ea0 phys>)) "CALRCH.f":98 85 {*movdi_internal}
     (nil))
(insn 156 155 157 23 (parallel [
            (set (reg:DI 1 dx [735])
                (plus:DI (reg:DI 1 dx [orig:115 _29 ] [115])
                    (const_int 59 [0x3b])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":98 222 {*adddi_1}
     (nil))
(insn 157 156 158 23 (set (reg:SF 21 xmm0 [orig:116 _30 ] [116])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [735])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [734])) [2 phys.aeta S4 A32])) "CALRCH.f":98 131 {*movsf_internal}
     (nil))
(insn 158 157 159 23 (set (reg:SF 22 xmm1 [orig:117 _31 ] [117])
        (mult:SF (reg:SF 22 xmm1 [orig:113 _27 ] [113])
            (reg:SF 21 xmm0 [orig:116 _30 ] [116]))) "CALRCH.f":98 838 {*fop_sf_comm}
     (nil))
(insn 159 158 160 23 (set (reg/f:DI 0 ax [736])
        (symbol_ref:DI ("phys_") [flags 0x202]  <var_decl 0x7fe96ef06ea0 phys>)) "CALRCH.f":1 85 {*movdi_internal}
     (nil))
(insn 160 159 161 23 (set (reg:SF 21 xmm0 [orig:118 _32 ] [118])
        (mem/c:SF (plus:DI (reg/f:DI 0 ax [736])
                (const_int 4 [0x4])) [2 phys.pt+0 S4 A32])) "CALRCH.f":1 131 {*movsf_internal}
     (nil))
(insn 161 160 162 23 (set (reg:SF 21 xmm0 [orig:119 _33 ] [119])
        (plus:SF (reg:SF 21 xmm0 [orig:118 _32 ] [118])
            (reg:SF 22 xmm1 [orig:117 _31 ] [117]))) "CALRCH.f":98 838 {*fop_sf_comm}
     (nil))
(insn 162 161 163 23 (set (reg:SF 22 xmm1 [orig:120 _34 ] [120])
        (reg:SF 21 xmm0 [orig:119 _33 ] [119])) "CALRCH.f":98 131 {*movsf_internal}
     (nil))
(insn 163 162 164 23 (set (reg:SF 21 xmm0 [737])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "CALRCH.f":98 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+5 [0x0.c35p+17])
        (nil)))
(insn 164 163 166 23 (set (reg:SF 21 xmm0 [orig:121 _35 ] [121])
        (div:SF (reg:SF 21 xmm0 [737])
            (reg:SF 22 xmm1 [orig:120 _34 ] [120]))) "CALRCH.f":98 841 {*fop_sf_1}
     (nil))
(insn 166 164 168 23 (set (reg:SF 22 xmm1)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "CALRCH.f":98 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.8589642047882080078125e-1 [0x0.926104p-1])
        (nil)))
(call_insn/u 168 166 169 23 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("powf") [flags 0x41]  <function_decl 0x7fe96ed74100 __builtin_powf>) [0 __builtin_powf S1 A8])
            (const_int 0 [0]))) "CALRCH.f":98 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (expr_list:SF (use (reg:SF 22 xmm1))
            (nil))))
(insn 169 168 170 23 (set (reg:SF 0 ax [738])
        (reg:SF 21 xmm0)) "CALRCH.f":98 131 {*movsf_internal}
     (nil))
(insn 170 169 171 23 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ape+0 S4 A32])
        (reg:SF 0 ax [738])) "CALRCH.f":98 131 {*movsf_internal}
     (nil))
(insn 171 170 172 23 (set (reg:SI 0 ax [739])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":99 86 {*movsi_internal}
     (nil))
(insn 172 171 173 23 (set (reg:DI 0 ax [orig:122 _36 ] [122])
        (sign_extend:DI (reg:SI 0 ax [739]))) "CALRCH.f":99 149 {*extendsidi2_rex64}
     (nil))
(insn 173 172 174 23 (parallel [
            (set (reg:DI 1 dx [orig:123 _37 ] [123])
                (mult:DI (reg:DI 0 ax [orig:122 _36 ] [122])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 349 {*muldi3_1}
     (nil))
(insn 174 173 175 23 (set (reg:SI 0 ax [740])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":99 86 {*movsi_internal}
     (nil))
(insn 175 174 176 23 (set (reg:DI 0 ax [orig:124 _38 ] [124])
        (sign_extend:DI (reg:SI 0 ax [740]))) "CALRCH.f":99 149 {*extendsidi2_rex64}
     (nil))
(insn 176 175 177 23 (parallel [
            (set (reg:DI 0 ax [orig:125 _39 ] [125])
                (mult:DI (reg:DI 0 ax [orig:124 _38 ] [124])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 349 {*muldi3_1}
     (nil))
(insn 177 176 178 23 (parallel [
            (set (reg:DI 1 dx [orig:126 _40 ] [126])
                (plus:DI (reg:DI 1 dx [orig:123 _37 ] [123])
                    (reg:DI 0 ax [orig:125 _39 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 222 {*adddi_1}
     (nil))
(insn 178 177 179 23 (set (reg:SI 0 ax [741])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":99 86 {*movsi_internal}
     (nil))
(insn 179 178 180 23 (set (reg:DI 0 ax [orig:127 _41 ] [127])
        (sign_extend:DI (reg:SI 0 ax [741]))) "CALRCH.f":99 149 {*extendsidi2_rex64}
     (nil))
(insn 180 179 181 23 (parallel [
            (set (reg:DI 0 ax [orig:128 _42 ] [128])
                (plus:DI (reg:DI 0 ax [orig:127 _41 ] [127])
                    (reg:DI 1 dx [orig:126 _40 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 222 {*adddi_1}
     (nil))
(insn 181 180 182 23 (parallel [
            (set (reg:DI 1 dx [orig:129 _43 ] [129])
                (plus:DI (reg:DI 0 ax [orig:128 _42 ] [128])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 222 {*adddi_1}
     (nil))
(insn 182 181 183 23 (set (reg/f:DI 0 ax [742])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":99 85 {*movdi_internal}
     (nil))
(insn 183 182 184 23 (parallel [
            (set (reg:DI 1 dx [743])
                (plus:DI (reg:DI 1 dx [orig:129 _43 ] [129])
                    (const_int 3466827 [0x34e64b])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 222 {*adddi_1}
     (nil))
(insn 184 183 185 23 (set (reg:SF 22 xmm1 [orig:130 _44 ] [130])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [743])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [742])) [2 vrbls.q S4 A32])) "CALRCH.f":99 131 {*movsf_internal}
     (nil))
(insn 185 184 186 23 (set (reg:SF 21 xmm0 [744])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) "CALRCH.f":99 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.07999980449676513671875e-1 [0x0.9ba5e3p+0])
        (nil)))
(insn 186 185 187 23 (set (reg:SF 22 xmm1 [orig:131 _45 ] [131])
        (mult:SF (reg:SF 22 xmm1 [orig:130 _44 ] [130])
            (reg:SF 21 xmm0 [744]))) "CALRCH.f":99 838 {*fop_sf_comm}
     (nil))
(insn 187 186 188 23 (set (reg:SF 21 xmm0 [745])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S4 A32])) "CALRCH.f":99 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 188 187 189 23 (set (reg:SF 21 xmm0 [orig:132 _46 ] [132])
        (plus:SF (reg:SF 21 xmm0 [745])
            (reg:SF 22 xmm1 [orig:131 _45 ] [131]))) "CALRCH.f":99 838 {*fop_sf_comm}
     (nil))
(insn 189 188 190 23 (set (reg:SF 22 xmm1 [orig:133 _47 ] [133])
        (reg:SF 21 xmm0 [orig:132 _46 ] [132])) "CALRCH.f":99 131 {*movsf_internal}
     (nil))
(insn 190 189 191 23 (set (reg:SI 0 ax [746])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":99 86 {*movsi_internal}
     (nil))
(insn 191 190 192 23 (set (reg:DI 0 ax [orig:134 _48 ] [134])
        (sign_extend:DI (reg:SI 0 ax [746]))) "CALRCH.f":99 149 {*extendsidi2_rex64}
     (nil))
(insn 192 191 193 23 (parallel [
            (set (reg:DI 1 dx [orig:135 _49 ] [135])
                (mult:DI (reg:DI 0 ax [orig:134 _48 ] [134])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 349 {*muldi3_1}
     (nil))
(insn 193 192 194 23 (set (reg:SI 0 ax [747])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":99 86 {*movsi_internal}
     (nil))
(insn 194 193 195 23 (set (reg:DI 0 ax [orig:136 _50 ] [136])
        (sign_extend:DI (reg:SI 0 ax [747]))) "CALRCH.f":99 149 {*extendsidi2_rex64}
     (nil))
(insn 195 194 196 23 (parallel [
            (set (reg:DI 0 ax [orig:137 _51 ] [137])
                (mult:DI (reg:DI 0 ax [orig:136 _50 ] [136])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 349 {*muldi3_1}
     (nil))
(insn 196 195 197 23 (parallel [
            (set (reg:DI 1 dx [orig:138 _52 ] [138])
                (plus:DI (reg:DI 1 dx [orig:135 _49 ] [135])
                    (reg:DI 0 ax [orig:137 _51 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 222 {*adddi_1}
     (nil))
(insn 197 196 198 23 (set (reg:SI 0 ax [748])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":99 86 {*movsi_internal}
     (nil))
(insn 198 197 199 23 (set (reg:DI 0 ax [orig:139 _53 ] [139])
        (sign_extend:DI (reg:SI 0 ax [748]))) "CALRCH.f":99 149 {*extendsidi2_rex64}
     (nil))
(insn 199 198 200 23 (parallel [
            (set (reg:DI 0 ax [orig:140 _54 ] [140])
                (plus:DI (reg:DI 0 ax [orig:139 _53 ] [139])
                    (reg:DI 1 dx [orig:138 _52 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 222 {*adddi_1}
     (nil))
(insn 200 199 201 23 (parallel [
            (set (reg:DI 1 dx [orig:141 _55 ] [141])
                (plus:DI (reg:DI 0 ax [orig:140 _54 ] [140])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 222 {*adddi_1}
     (nil))
(insn 201 200 202 23 (set (reg/f:DI 0 ax [749])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":99 85 {*movdi_internal}
     (nil))
(insn 202 201 203 23 (parallel [
            (set (reg:DI 1 dx [750])
                (plus:DI (reg:DI 1 dx [orig:141 _55 ] [141])
                    (const_int 2340849 [0x23b7f1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 222 {*adddi_1}
     (nil))
(insn 203 202 204 23 (set (reg:SF 21 xmm0 [orig:142 _56 ] [142])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [750])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [749])) [2 vrbls.t S4 A32])) "CALRCH.f":99 131 {*movsf_internal}
     (nil))
(insn 204 203 205 23 (set (reg:SF 21 xmm0 [orig:143 _57 ] [143])
        (mult:SF (reg:SF 21 xmm0 [orig:142 _56 ] [142])
            (reg:SF 22 xmm1 [orig:133 _47 ] [133]))) "CALRCH.f":99 838 {*fop_sf_comm}
     (nil))
(insn 205 204 206 23 (set (reg:SI 0 ax [751])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":99 86 {*movsi_internal}
     (nil))
(insn 206 205 207 23 (set (reg:DI 0 ax [orig:144 _58 ] [144])
        (sign_extend:DI (reg:SI 0 ax [751]))) "CALRCH.f":99 149 {*extendsidi2_rex64}
     (nil))
(insn 207 206 208 23 (parallel [
            (set (reg:DI 1 dx [orig:145 _59 ] [145])
                (mult:DI (reg:DI 0 ax [orig:144 _58 ] [144])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 349 {*muldi3_1}
     (nil))
(insn 208 207 209 23 (set (reg:SI 0 ax [752])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":99 86 {*movsi_internal}
     (nil))
(insn 209 208 210 23 (set (reg:DI 0 ax [orig:146 _60 ] [146])
        (sign_extend:DI (reg:SI 0 ax [752]))) "CALRCH.f":99 149 {*extendsidi2_rex64}
     (nil))
(insn 210 209 211 23 (parallel [
            (set (reg:DI 0 ax [orig:147 _61 ] [147])
                (mult:DI (reg:DI 0 ax [orig:146 _60 ] [146])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 349 {*muldi3_1}
     (nil))
(insn 211 210 212 23 (parallel [
            (set (reg:DI 1 dx [orig:148 _62 ] [148])
                (plus:DI (reg:DI 1 dx [orig:145 _59 ] [145])
                    (reg:DI 0 ax [orig:147 _61 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 222 {*adddi_1}
     (nil))
(insn 212 211 213 23 (set (reg:SI 0 ax [753])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":99 86 {*movsi_internal}
     (nil))
(insn 213 212 214 23 (set (reg:DI 0 ax [orig:149 _63 ] [149])
        (sign_extend:DI (reg:SI 0 ax [753]))) "CALRCH.f":99 149 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 23 (parallel [
            (set (reg:DI 0 ax [orig:150 _64 ] [150])
                (plus:DI (reg:DI 0 ax [orig:149 _63 ] [149])
                    (reg:DI 1 dx [orig:148 _62 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 222 {*adddi_1}
     (nil))
(insn 215 214 216 23 (parallel [
            (set (reg:DI 1 dx [orig:151 _65 ] [151])
                (plus:DI (reg:DI 0 ax [orig:150 _64 ] [150])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":99 222 {*adddi_1}
     (nil))
(insn 216 215 217 23 (set (reg:SF 21 xmm0 [orig:152 _66 ] [152])
        (mult:SF (reg:SF 21 xmm0 [orig:143 _57 ] [143])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 ape+0 S4 A32]))) "CALRCH.f":99 838 {*fop_sf_comm}
     (nil))
(insn 217 216 218 23 (set (reg/f:DI 0 ax [754])
        (symbol_ref:DI ("thv.4234") [flags 0x202]  <var_decl 0x7fe96ef1e900 thv>)) "CALRCH.f":99 85 {*movdi_internal}
     (nil))
(insn 218 217 219 23 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:151 _65 ] [151])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [754])) [2 thv S4 A32])
        (reg:SF 21 xmm0 [orig:152 _66 ] [152])) "CALRCH.f":99 131 {*movsf_internal}
     (nil))
(insn 219 218 1294 23 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":97 221 {*addsi_1}
     (nil))
(jump_insn 1294 219 1295 23 (set (pc)
        (label_ref 220)) "CALRCH.f":97 683 {jump}
     (nil)
 -> 220)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684

(barrier 1295 1294 1343)
;; basic block 72, loop depth 0, maybe hot
;;  prev block 23, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1343 1295 1342 72 55 (nil) [1 uses])
(note 1342 1343 1344 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 1344 1342 223 72 (const_int 0 [0]) "CALRCH.f":99 718 {nop}
     (nil))
;;  succ:       24 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684

;; basic block 24, loop depth 0, maybe hot
;;  prev block 72, next block 71, flags: (RTL, MODIFIED)
;;  pred:       72 [always]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 223 1344 224 24 14 (nil) [0 uses])
(note 224 223 225 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 225 224 1296 24 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":96 221 {*addsi_1}
     (nil))
(jump_insn 1296 225 1297 24 (set (pc)
        (label_ref 226)) "CALRCH.f":96 683 {jump}
     (nil)
 -> 226)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 684

(barrier 1297 1296 1340)
;; basic block 71, loop depth 0, maybe hot
;;  prev block 24, next block 25, flags: (RTL, MODIFIED)
;;  pred:       20
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1340 1297 1339 71 54 (nil) [1 uses])
(note 1339 1340 1341 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 1341 1339 229 71 (const_int 0 [0]) "CALRCH.f":97 718 {nop}
     (nil))
;;  succ:       25 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 71, next block 26, flags: (RTL, MODIFIED)
;;  pred:       71 [always]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 153 154 155 156 688 689 755 756 757
(code_label 229 1341 230 25 13 (nil) [0 uses])
(note 230 229 231 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 231 230 232 25 (set (reg:SI 0 ax [755])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":103 86 {*movsi_internal}
     (nil))
(insn 232 231 233 25 (set (reg:DI 0 ax [orig:153 _67 ] [153])
        (sign_extend:DI (reg:SI 0 ax [755]))) "CALRCH.f":103 149 {*extendsidi2_rex64}
     (nil))
(insn 233 232 234 25 (parallel [
            (set (reg:DI 0 ax [orig:154 _68 ] [154])
                (plus:DI (reg:DI 0 ax [orig:153 _67 ] [153])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":103 222 {*adddi_1}
     (nil))
(insn 234 233 235 25 (parallel [
            (set (reg:DI 0 ax [orig:155 _69 ] [155])
                (mult:DI (reg:DI 0 ax [orig:154 _68 ] [154])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":103 349 {*muldi3_1}
     (nil))
(insn 235 234 236 25 (parallel [
            (set (reg:DI 1 dx [756])
                (ashift:DI (reg:DI 0 ax [orig:155 _69 ] [155])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":103 551 {*ashldi3_1}
     (nil))
(insn 236 235 237 25 (set (reg:DI 0 ax [757])
        (symbol_ref:DI ("thv.4234") [flags 0x202]  <var_decl 0x7fe96ef1e900 thv>)) "CALRCH.f":103 85 {*movdi_internal}
     (nil))
(insn 237 236 238 25 (parallel [
            (set (reg/f:DI 0 ax [orig:156 _70 ] [156])
                (plus:DI (reg:DI 0 ax [757])
                    (reg:DI 1 dx [756])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":103 222 {*adddi_1}
     (nil))
(insn 238 237 239 25 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:156 _70 ] [156])) "CALRCH.f":103 85 {*movdi_internal}
     (nil))
(insn 239 238 240 25 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALRCH.f":103 88 {*movqi_internal}
     (nil))
(call_insn 240 239 241 25 (call (mem:QI (symbol_ref:DI ("exch_") [flags 0x41]  <function_decl 0x7fe96eeef600 exch>) [0 exch S1 A8])
        (const_int 0 [0])) "CALRCH.f":103 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 241 240 242 25 (set (reg:SI 1 dx [orig:688 _659 ] [688])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "CALRCH.f":107 86 {*movsi_internal}
     (nil))
(insn 242 241 243 25 (set (reg:SI 0 ax [orig:689 _660 ] [689])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 20 [0x14]))) [1 parallel.jend_m+0 S4 A32])) "CALRCH.f":107 86 {*movsi_internal}
     (nil))
(insn 243 242 345 25 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
        (reg:SI 1 dx [orig:688 _659 ] [688])) "CALRCH.f":107 86 {*movsi_internal}
     (nil))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;;              30 [always] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689
;; lr  def 	 17 [flags] 690 758
(code_label 345 243 244 26 20 (nil) [1 uses])
(note 244 345 245 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 245 244 246 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:689 _660 ] [689]))) "CALRCH.f":107 11 {*cmpsi_1}
     (nil))
(insn 246 245 247 26 (set (reg:QI 1 dx [758])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":107 678 {*setcc_qi}
     (nil))
(insn 247 246 248 26 (set (reg:SI 1 dx [orig:690 _662 ] [690])
        (zero_extend:SI (reg:QI 1 dx [758]))) "CALRCH.f":107 140 {*zero_extendqisi2}
     (nil))
(insn 248 247 249 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:690 _662 ] [690])
            (const_int 0 [0]))) "CALRCH.f":107 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 249 248 250 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1346)
            (pc))) "CALRCH.f":107 682 {*jcc}
     (nil)
 -> 1346)
;;  succ:       73
;;              27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 250 249 251 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 339 27 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALRCH.f":108 86 {*movsi_internal}
     (nil))
;;  succ:       28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;;              29 [always] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 691 759
(code_label 339 251 252 28 19 (nil) [1 uses])
(note 252 339 253 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 253 252 254 28 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (const_int 118 [0x76]))) "CALRCH.f":108 11 {*cmpsi_1}
     (nil))
(insn 254 253 255 28 (set (reg:QI 1 dx [759])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":108 678 {*setcc_qi}
     (nil))
(insn 255 254 256 28 (set (reg:SI 1 dx [orig:691 _664 ] [691])
        (zero_extend:SI (reg:QI 1 dx [759]))) "CALRCH.f":108 140 {*zero_extendqisi2}
     (nil))
(insn 256 255 257 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:691 _664 ] [691])
            (const_int 0 [0]))) "CALRCH.f":108 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 257 256 258 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1349)
            (pc))) "CALRCH.f":108 682 {*jcc}
     (nil)
 -> 1349)
;;  succ:       74
;;              29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 74, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 760 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785
(note 258 257 259 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 259 258 260 29 (set (reg:SI 1 dx [760])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":109 86 {*movsi_internal}
     (nil))
(insn 260 259 261 29 (set (reg:DI 1 dx [orig:157 _71 ] [157])
        (sign_extend:DI (reg:SI 1 dx [760]))) "CALRCH.f":109 149 {*extendsidi2_rex64}
     (nil))
(insn 261 260 262 29 (parallel [
            (set (reg:DI 1 dx [orig:158 _72 ] [158])
                (plus:DI (reg:DI 1 dx [orig:157 _71 ] [157])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":109 222 {*adddi_1}
     (nil))
(insn 262 261 266 29 (set (reg:SI 2 cx [orig:159 _73 ] [159])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:158 _72 ] [158])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7fe96ef00630 indx>)) [1 indx.ihe S4 A32])) "CALRCH.f":109 86 {*movsi_internal}
     (nil))
(insn 266 262 267 29 (set (reg:SI 1 dx [764])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":109 86 {*movsi_internal}
     (nil))
(insn 267 266 268 29 (parallel [
            (set (reg:SI 1 dx [763])
                (plus:SI (reg:SI 1 dx [764])
                    (reg:SI 2 cx [orig:159 _73 ] [159])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":109 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:159 _73 ] [159])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 268 267 269 29 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ie+0 S4 A32])
        (reg:SI 1 dx [763])) "CALRCH.f":109 86 {*movsi_internal}
     (nil))
(insn 269 268 270 29 (set (reg:SI 1 dx [765])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 270 269 271 29 (set (reg:DI 1 dx [orig:160 _74 ] [160])
        (sign_extend:DI (reg:SI 1 dx [765]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 271 270 272 29 (parallel [
            (set (reg:DI 2 cx [orig:161 _75 ] [161])
                (mult:DI (reg:DI 1 dx [orig:160 _74 ] [160])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 349 {*muldi3_1}
     (nil))
(insn 272 271 273 29 (set (reg:SI 1 dx [766])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 273 272 274 29 (parallel [
            (set (reg:SI 1 dx [orig:162 _76 ] [162])
                (plus:SI (reg:SI 1 dx [766])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 274 273 275 29 (set (reg:DI 1 dx [orig:163 _77 ] [163])
        (sign_extend:DI (reg:SI 1 dx [orig:162 _76 ] [162]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 275 274 276 29 (parallel [
            (set (reg:DI 1 dx [orig:164 _78 ] [164])
                (mult:DI (reg:DI 1 dx [orig:163 _77 ] [163])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 349 {*muldi3_1}
     (nil))
(insn 276 275 277 29 (parallel [
            (set (reg:DI 2 cx [orig:165 _79 ] [165])
                (plus:DI (reg:DI 2 cx [orig:161 _75 ] [161])
                    (reg:DI 1 dx [orig:164 _78 ] [164])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 277 276 278 29 (set (reg:SI 1 dx [767])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ie+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 278 277 279 29 (set (reg:DI 1 dx [orig:166 _80 ] [166])
        (sign_extend:DI (reg:SI 1 dx [767]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 279 278 280 29 (parallel [
            (set (reg:DI 1 dx [orig:167 _81 ] [167])
                (plus:DI (reg:DI 1 dx [orig:166 _80 ] [166])
                    (reg:DI 2 cx [orig:165 _79 ] [165])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 280 279 281 29 (parallel [
            (set (reg:DI 2 cx [orig:168 _82 ] [168])
                (plus:DI (reg:DI 1 dx [orig:167 _81 ] [167])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 281 280 282 29 (set (reg/f:DI 1 dx [768])
        (symbol_ref:DI ("thv.4234") [flags 0x202]  <var_decl 0x7fe96ef1e900 thv>)) "CALRCH.f":111 85 {*movdi_internal}
     (nil))
(insn 282 281 283 29 (set (reg:SF 21 xmm0 [orig:169 _83 ] [169])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:168 _82 ] [168])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [768])) [2 thv S4 A32])) "CALRCH.f":111 131 {*movsf_internal}
     (nil))
(insn 283 282 284 29 (set (reg:SI 1 dx [769])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 284 283 285 29 (set (reg:DI 1 dx [orig:170 _84 ] [170])
        (sign_extend:DI (reg:SI 1 dx [769]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 285 284 286 29 (parallel [
            (set (reg:DI 2 cx [orig:171 _85 ] [171])
                (mult:DI (reg:DI 1 dx [orig:170 _84 ] [170])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 349 {*muldi3_1}
     (nil))
(insn 286 285 287 29 (set (reg:SI 1 dx [770])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 287 286 288 29 (set (reg:DI 1 dx [orig:172 _86 ] [172])
        (sign_extend:DI (reg:SI 1 dx [770]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 288 287 289 29 (parallel [
            (set (reg:DI 1 dx [orig:173 _87 ] [173])
                (mult:DI (reg:DI 1 dx [orig:172 _86 ] [172])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 349 {*muldi3_1}
     (nil))
(insn 289 288 290 29 (parallel [
            (set (reg:DI 2 cx [orig:174 _88 ] [174])
                (plus:DI (reg:DI 2 cx [orig:171 _85 ] [171])
                    (reg:DI 1 dx [orig:173 _87 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 290 289 291 29 (set (reg:SI 1 dx [771])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 291 290 292 29 (set (reg:DI 1 dx [orig:175 _89 ] [175])
        (sign_extend:DI (reg:SI 1 dx [771]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 292 291 293 29 (parallel [
            (set (reg:DI 1 dx [orig:176 _90 ] [176])
                (plus:DI (reg:DI 1 dx [orig:175 _89 ] [175])
                    (reg:DI 2 cx [orig:174 _88 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 293 292 294 29 (parallel [
            (set (reg:DI 2 cx [orig:177 _91 ] [177])
                (plus:DI (reg:DI 1 dx [orig:176 _90 ] [176])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 294 293 295 29 (set (reg/f:DI 1 dx [772])
        (symbol_ref:DI ("thv.4234") [flags 0x202]  <var_decl 0x7fe96ef1e900 thv>)) "CALRCH.f":111 85 {*movdi_internal}
     (nil))
(insn 295 294 296 29 (set (reg:SF 22 xmm1 [orig:178 _92 ] [178])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:177 _91 ] [177])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [772])) [2 thv S4 A32])) "CALRCH.f":111 131 {*movsf_internal}
     (nil))
(insn 296 295 297 29 (set (reg:SF 21 xmm0 [orig:179 _93 ] [179])
        (minus:SF (reg:SF 21 xmm0 [orig:169 _83 ] [169])
            (reg:SF 22 xmm1 [orig:178 _92 ] [178]))) "CALRCH.f":111 841 {*fop_sf_1}
     (nil))
(insn 297 296 298 29 (set (reg:SF 22 xmm1 [orig:180 _94 ] [180])
        (reg:SF 21 xmm0 [orig:179 _93 ] [179])) "CALRCH.f":111 131 {*movsf_internal}
     (nil))
(insn 298 297 299 29 (set (reg:SI 1 dx [773])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 299 298 300 29 (set (reg:DI 1 dx [orig:181 _95 ] [181])
        (sign_extend:DI (reg:SI 1 dx [773]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 300 299 301 29 (parallel [
            (set (reg:DI 2 cx [orig:182 _96 ] [182])
                (mult:DI (reg:DI 1 dx [orig:181 _95 ] [181])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 349 {*muldi3_1}
     (nil))
(insn 301 300 302 29 (set (reg:SI 1 dx [774])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 302 301 303 29 (set (reg:DI 1 dx [orig:183 _97 ] [183])
        (sign_extend:DI (reg:SI 1 dx [774]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 303 302 304 29 (parallel [
            (set (reg:DI 1 dx [orig:184 _98 ] [184])
                (mult:DI (reg:DI 1 dx [orig:183 _97 ] [183])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 349 {*muldi3_1}
     (nil))
(insn 304 303 305 29 (parallel [
            (set (reg:DI 2 cx [orig:185 _99 ] [185])
                (plus:DI (reg:DI 2 cx [orig:182 _96 ] [182])
                    (reg:DI 1 dx [orig:184 _98 ] [184])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 305 304 306 29 (set (reg:SI 1 dx [775])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 306 305 307 29 (set (reg:DI 1 dx [orig:186 _100 ] [186])
        (sign_extend:DI (reg:SI 1 dx [775]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 307 306 308 29 (parallel [
            (set (reg:DI 1 dx [orig:187 _101 ] [187])
                (plus:DI (reg:DI 1 dx [orig:186 _100 ] [186])
                    (reg:DI 2 cx [orig:185 _99 ] [185])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 308 307 309 29 (parallel [
            (set (reg:DI 2 cx [orig:188 _102 ] [188])
                (plus:DI (reg:DI 1 dx [orig:187 _101 ] [187])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 309 308 310 29 (set (reg/f:DI 1 dx [776])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fe96ef00d80 masks>)) "CALRCH.f":111 85 {*movdi_internal}
     (nil))
(insn 310 309 311 29 (parallel [
            (set (reg:DI 2 cx [777])
                (plus:DI (reg:DI 2 cx [orig:188 _102 ] [188])
                    (const_int 148155 [0x242bb])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 311 310 312 29 (set (reg:SF 21 xmm0 [orig:189 _103 ] [189])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [777])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [776])) [2 masks.htm S4 A32])) "CALRCH.f":111 131 {*movsf_internal}
     (nil))
(insn 312 311 313 29 (set (reg:SF 22 xmm1 [orig:190 _104 ] [190])
        (mult:SF (reg:SF 22 xmm1 [orig:180 _94 ] [180])
            (reg:SF 21 xmm0 [orig:189 _103 ] [189]))) "CALRCH.f":111 838 {*fop_sf_comm}
     (nil))
(insn 313 312 314 29 (set (reg:SI 1 dx [778])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 314 313 315 29 (set (reg:DI 1 dx [orig:191 _105 ] [191])
        (sign_extend:DI (reg:SI 1 dx [778]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 315 314 316 29 (parallel [
            (set (reg:DI 2 cx [orig:192 _106 ] [192])
                (mult:DI (reg:DI 1 dx [orig:191 _105 ] [191])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 349 {*muldi3_1}
     (nil))
(insn 316 315 317 29 (set (reg:SI 1 dx [779])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 317 316 318 29 (parallel [
            (set (reg:SI 1 dx [orig:193 _107 ] [193])
                (plus:SI (reg:SI 1 dx [779])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 318 317 319 29 (set (reg:DI 1 dx [orig:194 _108 ] [194])
        (sign_extend:DI (reg:SI 1 dx [orig:193 _107 ] [193]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 319 318 320 29 (parallel [
            (set (reg:DI 1 dx [orig:195 _109 ] [195])
                (mult:DI (reg:DI 1 dx [orig:194 _108 ] [194])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 349 {*muldi3_1}
     (nil))
(insn 320 319 321 29 (parallel [
            (set (reg:DI 2 cx [orig:196 _110 ] [196])
                (plus:DI (reg:DI 2 cx [orig:192 _106 ] [192])
                    (reg:DI 1 dx [orig:195 _109 ] [195])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 321 320 322 29 (set (reg:SI 1 dx [780])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ie+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 322 321 323 29 (set (reg:DI 1 dx [orig:197 _111 ] [197])
        (sign_extend:DI (reg:SI 1 dx [780]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 323 322 324 29 (parallel [
            (set (reg:DI 1 dx [orig:198 _112 ] [198])
                (plus:DI (reg:DI 1 dx [orig:197 _111 ] [197])
                    (reg:DI 2 cx [orig:196 _110 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 324 323 325 29 (parallel [
            (set (reg:DI 2 cx [orig:199 _113 ] [199])
                (plus:DI (reg:DI 1 dx [orig:198 _112 ] [198])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 325 324 326 29 (set (reg/f:DI 1 dx [781])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fe96ef00d80 masks>)) "CALRCH.f":111 85 {*movdi_internal}
     (nil))
(insn 326 325 327 29 (parallel [
            (set (reg:DI 2 cx [782])
                (plus:DI (reg:DI 2 cx [orig:199 _113 ] [199])
                    (const_int 148155 [0x242bb])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 327 326 328 29 (set (reg:SF 21 xmm0 [orig:200 _114 ] [200])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [782])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [781])) [2 masks.htm S4 A32])) "CALRCH.f":111 131 {*movsf_internal}
     (nil))
(insn 328 327 329 29 (set (reg:SI 1 dx [783])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 329 328 330 29 (set (reg:DI 1 dx [orig:201 _115 ] [201])
        (sign_extend:DI (reg:SI 1 dx [783]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 330 329 331 29 (parallel [
            (set (reg:DI 2 cx [orig:202 _116 ] [202])
                (mult:DI (reg:DI 1 dx [orig:201 _115 ] [201])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 349 {*muldi3_1}
     (nil))
(insn 331 330 332 29 (set (reg:SI 1 dx [784])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":111 86 {*movsi_internal}
     (nil))
(insn 332 331 333 29 (set (reg:DI 1 dx [orig:203 _117 ] [203])
        (sign_extend:DI (reg:SI 1 dx [784]))) "CALRCH.f":111 149 {*extendsidi2_rex64}
     (nil))
(insn 333 332 334 29 (parallel [
            (set (reg:DI 1 dx [orig:204 _118 ] [204])
                (plus:DI (reg:DI 1 dx [orig:203 _117 ] [203])
                    (reg:DI 2 cx [orig:202 _116 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 334 333 335 29 (parallel [
            (set (reg:DI 2 cx [orig:205 _119 ] [205])
                (plus:DI (reg:DI 1 dx [orig:204 _118 ] [204])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":111 222 {*adddi_1}
     (nil))
(insn 335 334 336 29 (set (reg:SF 21 xmm0 [orig:206 _120 ] [206])
        (mult:SF (reg:SF 21 xmm0 [orig:200 _114 ] [200])
            (reg:SF 22 xmm1 [orig:190 _104 ] [190]))) "CALRCH.f":111 838 {*fop_sf_comm}
     (nil))
(insn 336 335 337 29 (set (reg/f:DI 1 dx [785])
        (symbol_ref:DI ("egrid1.4217") [flags 0x202]  <var_decl 0x7fe96ef1e120 egrid1>)) "CALRCH.f":111 85 {*movdi_internal}
     (nil))
(insn 337 336 338 29 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:205 _119 ] [205])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [785])) [2 egrid1 S4 A32])
        (reg:SF 21 xmm0 [orig:206 _120 ] [206])) "CALRCH.f":111 131 {*movsf_internal}
     (nil))
(insn 338 337 1298 29 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":108 221 {*addsi_1}
     (nil))
(jump_insn 1298 338 1299 29 (set (pc)
        (label_ref 339)) "CALRCH.f":108 683 {jump}
     (nil)
 -> 339)
;;  succ:       28 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689

(barrier 1299 1298 1349)
;; basic block 74, loop depth 0, maybe hot
;;  prev block 29, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1349 1299 1348 74 57 (nil) [1 uses])
(note 1348 1349 1350 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 1350 1348 342 74 (const_int 0 [0]) "CALRCH.f":111 718 {nop}
     (nil))
;;  succ:       30 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689

;; basic block 30, loop depth 0, maybe hot
;;  prev block 74, next block 73, flags: (RTL, MODIFIED)
;;  pred:       74 [always]  (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 342 1350 343 30 18 (nil) [0 uses])
(note 343 342 344 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 344 343 1300 30 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":107 221 {*addsi_1}
     (nil))
(jump_insn 1300 344 1301 30 (set (pc)
        (label_ref 345)) "CALRCH.f":107 683 {jump}
     (nil)
 -> 345)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 689

(barrier 1301 1300 1346)
;; basic block 73, loop depth 0, maybe hot
;;  prev block 30, next block 31, flags: (RTL, MODIFIED)
;;  pred:       26
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1346 1301 1345 73 56 (nil) [1 uses])
(note 1345 1346 1347 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 1347 1345 348 73 (const_int 0 [0]) "CALRCH.f":108 718 {nop}
     (nil))
;;  succ:       31 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 73, next block 32, flags: (RTL, MODIFIED)
;;  pred:       73 [always]  (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 692 693
(code_label 348 1347 349 31 17 (nil) [0 uses])
(note 349 348 350 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 350 349 351 31 (set (reg:SI 1 dx [orig:692 _669 ] [692])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 16 [0x10]))) [1 parallel.jsta_m+0 S4 A128])) "CALRCH.f":115 86 {*movsi_internal}
     (nil))
(insn 351 350 352 31 (set (reg:SI 0 ax [orig:693 _670 ] [693])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 12 [0xc]))) [1 parallel.jend+0 S4 A32])) "CALRCH.f":115 86 {*movsi_internal}
     (nil))
(insn 352 351 454 31 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
        (reg:SI 1 dx [orig:692 _669 ] [692])) "CALRCH.f":115 86 {*movsi_internal}
     (nil))
;;  succ:       32 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;;              36 [always] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693
;; lr  def 	 17 [flags] 694 786
(code_label 454 352 353 32 24 (nil) [1 uses])
(note 353 454 354 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 354 353 355 32 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:693 _670 ] [693]))) "CALRCH.f":115 11 {*cmpsi_1}
     (nil))
(insn 355 354 356 32 (set (reg:QI 1 dx [786])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":115 678 {*setcc_qi}
     (nil))
(insn 356 355 357 32 (set (reg:SI 1 dx [orig:694 _672 ] [694])
        (zero_extend:SI (reg:QI 1 dx [786]))) "CALRCH.f":115 140 {*zero_extendqisi2}
     (nil))
(insn 357 356 358 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:694 _672 ] [694])
            (const_int 0 [0]))) "CALRCH.f":115 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 358 357 359 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1352)
            (pc))) "CALRCH.f":115 682 {*jcc}
     (nil)
 -> 1352)
;;  succ:       75
;;              33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 359 358 360 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 360 359 448 33 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "CALRCH.f":116 86 {*movsi_internal}
     (nil))
;;  succ:       34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;;              35 [always] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 695 787
(code_label 448 360 361 34 23 (nil) [1 uses])
(note 361 448 362 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 362 361 363 34 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (const_int 118 [0x76]))) "CALRCH.f":116 11 {*cmpsi_1}
     (nil))
(insn 363 362 364 34 (set (reg:QI 1 dx [787])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":116 678 {*setcc_qi}
     (nil))
(insn 364 363 365 34 (set (reg:SI 1 dx [orig:695 _674 ] [695])
        (zero_extend:SI (reg:QI 1 dx [787]))) "CALRCH.f":116 140 {*zero_extendqisi2}
     (nil))
(insn 365 364 366 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:695 _674 ] [695])
            (const_int 0 [0]))) "CALRCH.f":116 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 366 365 367 34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1355)
            (pc))) "CALRCH.f":116 682 {*jcc}
     (nil)
 -> 1355)
;;  succ:       76
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 76, flags: (RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 788 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813
(note 367 366 368 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 368 367 369 35 (set (reg:SI 1 dx [788])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":117 86 {*movsi_internal}
     (nil))
(insn 369 368 370 35 (set (reg:DI 1 dx [orig:207 _121 ] [207])
        (sign_extend:DI (reg:SI 1 dx [788]))) "CALRCH.f":117 149 {*extendsidi2_rex64}
     (nil))
(insn 370 369 371 35 (parallel [
            (set (reg:DI 1 dx [orig:208 _122 ] [208])
                (plus:DI (reg:DI 1 dx [orig:207 _121 ] [207])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":117 222 {*adddi_1}
     (nil))
(insn 371 370 375 35 (set (reg:SI 2 cx [orig:209 _123 ] [209])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:208 _122 ] [208])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7fe96ef00630 indx>)) [1 indx.ihe S4 A32])) "CALRCH.f":117 86 {*movsi_internal}
     (nil))
(insn 375 371 376 35 (set (reg:SI 1 dx [792])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":117 86 {*movsi_internal}
     (nil))
(insn 376 375 377 35 (parallel [
            (set (reg:SI 1 dx [791])
                (plus:SI (reg:SI 1 dx [792])
                    (reg:SI 2 cx [orig:209 _123 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":117 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:209 _123 ] [209])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 377 376 378 35 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ie+0 S4 A32])
        (reg:SI 1 dx [791])) "CALRCH.f":117 86 {*movsi_internal}
     (nil))
(insn 378 377 379 35 (set (reg:SI 1 dx [793])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 379 378 380 35 (set (reg:DI 1 dx [orig:210 _124 ] [210])
        (sign_extend:DI (reg:SI 1 dx [793]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 380 379 381 35 (parallel [
            (set (reg:DI 2 cx [orig:211 _125 ] [211])
                (mult:DI (reg:DI 1 dx [orig:210 _124 ] [210])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 349 {*muldi3_1}
     (nil))
(insn 381 380 382 35 (set (reg:SI 1 dx [794])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 382 381 383 35 (parallel [
            (set (reg:SI 1 dx [orig:212 _126 ] [212])
                (plus:SI (reg:SI 1 dx [794])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 383 382 384 35 (set (reg:DI 1 dx [orig:213 _127 ] [213])
        (sign_extend:DI (reg:SI 1 dx [orig:212 _126 ] [212]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 384 383 385 35 (parallel [
            (set (reg:DI 1 dx [orig:214 _128 ] [214])
                (mult:DI (reg:DI 1 dx [orig:213 _127 ] [213])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 349 {*muldi3_1}
     (nil))
(insn 385 384 386 35 (parallel [
            (set (reg:DI 2 cx [orig:215 _129 ] [215])
                (plus:DI (reg:DI 2 cx [orig:211 _125 ] [211])
                    (reg:DI 1 dx [orig:214 _128 ] [214])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 386 385 387 35 (set (reg:SI 1 dx [795])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ie+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 387 386 388 35 (set (reg:DI 1 dx [orig:216 _130 ] [216])
        (sign_extend:DI (reg:SI 1 dx [795]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 388 387 389 35 (parallel [
            (set (reg:DI 1 dx [orig:217 _131 ] [217])
                (plus:DI (reg:DI 1 dx [orig:216 _130 ] [216])
                    (reg:DI 2 cx [orig:215 _129 ] [215])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 389 388 390 35 (parallel [
            (set (reg:DI 2 cx [orig:218 _132 ] [218])
                (plus:DI (reg:DI 1 dx [orig:217 _131 ] [217])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 390 389 391 35 (set (reg/f:DI 1 dx [796])
        (symbol_ref:DI ("thv.4234") [flags 0x202]  <var_decl 0x7fe96ef1e900 thv>)) "CALRCH.f":119 85 {*movdi_internal}
     (nil))
(insn 391 390 392 35 (set (reg:SF 21 xmm0 [orig:219 _133 ] [219])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:218 _132 ] [218])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [796])) [2 thv S4 A32])) "CALRCH.f":119 131 {*movsf_internal}
     (nil))
(insn 392 391 393 35 (set (reg:SI 1 dx [797])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 393 392 394 35 (set (reg:DI 1 dx [orig:220 _134 ] [220])
        (sign_extend:DI (reg:SI 1 dx [797]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 394 393 395 35 (parallel [
            (set (reg:DI 2 cx [orig:221 _135 ] [221])
                (mult:DI (reg:DI 1 dx [orig:220 _134 ] [220])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 349 {*muldi3_1}
     (nil))
(insn 395 394 396 35 (set (reg:SI 1 dx [798])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 396 395 397 35 (set (reg:DI 1 dx [orig:222 _136 ] [222])
        (sign_extend:DI (reg:SI 1 dx [798]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 397 396 398 35 (parallel [
            (set (reg:DI 1 dx [orig:223 _137 ] [223])
                (mult:DI (reg:DI 1 dx [orig:222 _136 ] [222])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 349 {*muldi3_1}
     (nil))
(insn 398 397 399 35 (parallel [
            (set (reg:DI 2 cx [orig:224 _138 ] [224])
                (plus:DI (reg:DI 2 cx [orig:221 _135 ] [221])
                    (reg:DI 1 dx [orig:223 _137 ] [223])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 399 398 400 35 (set (reg:SI 1 dx [799])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 400 399 401 35 (set (reg:DI 1 dx [orig:225 _139 ] [225])
        (sign_extend:DI (reg:SI 1 dx [799]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 401 400 402 35 (parallel [
            (set (reg:DI 1 dx [orig:226 _140 ] [226])
                (plus:DI (reg:DI 1 dx [orig:225 _139 ] [225])
                    (reg:DI 2 cx [orig:224 _138 ] [224])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 402 401 403 35 (parallel [
            (set (reg:DI 2 cx [orig:227 _141 ] [227])
                (plus:DI (reg:DI 1 dx [orig:226 _140 ] [226])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 403 402 404 35 (set (reg/f:DI 1 dx [800])
        (symbol_ref:DI ("thv.4234") [flags 0x202]  <var_decl 0x7fe96ef1e900 thv>)) "CALRCH.f":119 85 {*movdi_internal}
     (nil))
(insn 404 403 405 35 (set (reg:SF 22 xmm1 [orig:228 _142 ] [228])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:227 _141 ] [227])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [800])) [2 thv S4 A32])) "CALRCH.f":119 131 {*movsf_internal}
     (nil))
(insn 405 404 406 35 (set (reg:SF 21 xmm0 [orig:229 _143 ] [229])
        (minus:SF (reg:SF 21 xmm0 [orig:219 _133 ] [219])
            (reg:SF 22 xmm1 [orig:228 _142 ] [228]))) "CALRCH.f":119 841 {*fop_sf_1}
     (nil))
(insn 406 405 407 35 (set (reg:SF 22 xmm1 [orig:230 _144 ] [230])
        (reg:SF 21 xmm0 [orig:229 _143 ] [229])) "CALRCH.f":119 131 {*movsf_internal}
     (nil))
(insn 407 406 408 35 (set (reg:SI 1 dx [801])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 408 407 409 35 (set (reg:DI 1 dx [orig:231 _145 ] [231])
        (sign_extend:DI (reg:SI 1 dx [801]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 409 408 410 35 (parallel [
            (set (reg:DI 2 cx [orig:232 _146 ] [232])
                (mult:DI (reg:DI 1 dx [orig:231 _145 ] [231])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 349 {*muldi3_1}
     (nil))
(insn 410 409 411 35 (set (reg:SI 1 dx [802])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 411 410 412 35 (parallel [
            (set (reg:SI 1 dx [orig:233 _147 ] [233])
                (plus:SI (reg:SI 1 dx [802])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 412 411 413 35 (set (reg:DI 1 dx [orig:234 _148 ] [234])
        (sign_extend:DI (reg:SI 1 dx [orig:233 _147 ] [233]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 413 412 414 35 (parallel [
            (set (reg:DI 1 dx [orig:235 _149 ] [235])
                (mult:DI (reg:DI 1 dx [orig:234 _148 ] [234])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 349 {*muldi3_1}
     (nil))
(insn 414 413 415 35 (parallel [
            (set (reg:DI 2 cx [orig:236 _150 ] [236])
                (plus:DI (reg:DI 2 cx [orig:232 _146 ] [232])
                    (reg:DI 1 dx [orig:235 _149 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 415 414 416 35 (set (reg:SI 1 dx [803])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ie+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 416 415 417 35 (set (reg:DI 1 dx [orig:237 _151 ] [237])
        (sign_extend:DI (reg:SI 1 dx [803]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 417 416 418 35 (parallel [
            (set (reg:DI 1 dx [orig:238 _152 ] [238])
                (plus:DI (reg:DI 1 dx [orig:237 _151 ] [237])
                    (reg:DI 2 cx [orig:236 _150 ] [236])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 418 417 419 35 (parallel [
            (set (reg:DI 2 cx [orig:239 _153 ] [239])
                (plus:DI (reg:DI 1 dx [orig:238 _152 ] [238])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 419 418 420 35 (set (reg/f:DI 1 dx [804])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fe96ef00d80 masks>)) "CALRCH.f":119 85 {*movdi_internal}
     (nil))
(insn 420 419 421 35 (parallel [
            (set (reg:DI 2 cx [805])
                (plus:DI (reg:DI 2 cx [orig:239 _153 ] [239])
                    (const_int 148155 [0x242bb])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 421 420 422 35 (set (reg:SF 21 xmm0 [orig:240 _154 ] [240])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [805])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [804])) [2 masks.htm S4 A32])) "CALRCH.f":119 131 {*movsf_internal}
     (nil))
(insn 422 421 423 35 (set (reg:SF 22 xmm1 [orig:241 _155 ] [241])
        (mult:SF (reg:SF 22 xmm1 [orig:230 _144 ] [230])
            (reg:SF 21 xmm0 [orig:240 _154 ] [240]))) "CALRCH.f":119 838 {*fop_sf_comm}
     (nil))
(insn 423 422 424 35 (set (reg:SI 1 dx [806])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 424 423 425 35 (set (reg:DI 1 dx [orig:242 _156 ] [242])
        (sign_extend:DI (reg:SI 1 dx [806]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 425 424 426 35 (parallel [
            (set (reg:DI 2 cx [orig:243 _157 ] [243])
                (mult:DI (reg:DI 1 dx [orig:242 _156 ] [242])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 349 {*muldi3_1}
     (nil))
(insn 426 425 427 35 (set (reg:SI 1 dx [807])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 427 426 428 35 (set (reg:DI 1 dx [orig:244 _158 ] [244])
        (sign_extend:DI (reg:SI 1 dx [807]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 428 427 429 35 (parallel [
            (set (reg:DI 1 dx [orig:245 _159 ] [245])
                (mult:DI (reg:DI 1 dx [orig:244 _158 ] [244])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 349 {*muldi3_1}
     (nil))
(insn 429 428 430 35 (parallel [
            (set (reg:DI 2 cx [orig:246 _160 ] [246])
                (plus:DI (reg:DI 2 cx [orig:243 _157 ] [243])
                    (reg:DI 1 dx [orig:245 _159 ] [245])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 430 429 431 35 (set (reg:SI 1 dx [808])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 431 430 432 35 (set (reg:DI 1 dx [orig:247 _161 ] [247])
        (sign_extend:DI (reg:SI 1 dx [808]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 432 431 433 35 (parallel [
            (set (reg:DI 1 dx [orig:248 _162 ] [248])
                (plus:DI (reg:DI 1 dx [orig:247 _161 ] [247])
                    (reg:DI 2 cx [orig:246 _160 ] [246])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 433 432 434 35 (parallel [
            (set (reg:DI 2 cx [orig:249 _163 ] [249])
                (plus:DI (reg:DI 1 dx [orig:248 _162 ] [248])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 434 433 435 35 (set (reg/f:DI 1 dx [809])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fe96ef00d80 masks>)) "CALRCH.f":119 85 {*movdi_internal}
     (nil))
(insn 435 434 436 35 (parallel [
            (set (reg:DI 2 cx [810])
                (plus:DI (reg:DI 2 cx [orig:249 _163 ] [249])
                    (const_int 148155 [0x242bb])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 436 435 437 35 (set (reg:SF 21 xmm0 [orig:250 _164 ] [250])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [810])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [809])) [2 masks.htm S4 A32])) "CALRCH.f":119 131 {*movsf_internal}
     (nil))
(insn 437 436 438 35 (set (reg:SI 1 dx [811])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 438 437 439 35 (set (reg:DI 1 dx [orig:251 _165 ] [251])
        (sign_extend:DI (reg:SI 1 dx [811]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 439 438 440 35 (parallel [
            (set (reg:DI 2 cx [orig:252 _166 ] [252])
                (mult:DI (reg:DI 1 dx [orig:251 _165 ] [251])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 349 {*muldi3_1}
     (nil))
(insn 440 439 441 35 (set (reg:SI 1 dx [812])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":119 86 {*movsi_internal}
     (nil))
(insn 441 440 442 35 (set (reg:DI 1 dx [orig:253 _167 ] [253])
        (sign_extend:DI (reg:SI 1 dx [812]))) "CALRCH.f":119 149 {*extendsidi2_rex64}
     (nil))
(insn 442 441 443 35 (parallel [
            (set (reg:DI 1 dx [orig:254 _168 ] [254])
                (plus:DI (reg:DI 1 dx [orig:253 _167 ] [253])
                    (reg:DI 2 cx [orig:252 _166 ] [252])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 443 442 444 35 (parallel [
            (set (reg:DI 2 cx [orig:255 _169 ] [255])
                (plus:DI (reg:DI 1 dx [orig:254 _168 ] [254])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":119 222 {*adddi_1}
     (nil))
(insn 444 443 445 35 (set (reg:SF 21 xmm0 [orig:256 _170 ] [256])
        (mult:SF (reg:SF 21 xmm0 [orig:250 _164 ] [250])
            (reg:SF 22 xmm1 [orig:241 _155 ] [241]))) "CALRCH.f":119 838 {*fop_sf_comm}
     (nil))
(insn 445 444 446 35 (set (reg/f:DI 1 dx [813])
        (symbol_ref:DI ("egrid2.4219") [flags 0x202]  <var_decl 0x7fe96ef1e1b0 egrid2>)) "CALRCH.f":119 85 {*movdi_internal}
     (nil))
(insn 446 445 447 35 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:255 _169 ] [255])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [813])) [2 egrid2 S4 A32])
        (reg:SF 21 xmm0 [orig:256 _170 ] [256])) "CALRCH.f":119 131 {*movsf_internal}
     (nil))
(insn 447 446 1302 35 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":116 221 {*addsi_1}
     (nil))
(jump_insn 1302 447 1303 35 (set (pc)
        (label_ref 448)) "CALRCH.f":116 683 {jump}
     (nil)
 -> 448)
;;  succ:       34 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693

(barrier 1303 1302 1355)
;; basic block 76, loop depth 0, maybe hot
;;  prev block 35, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1355 1303 1354 76 59 (nil) [1 uses])
(note 1354 1355 1356 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 1356 1354 451 76 (const_int 0 [0]) "CALRCH.f":119 718 {nop}
     (nil))
;;  succ:       36 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693

;; basic block 36, loop depth 0, maybe hot
;;  prev block 76, next block 75, flags: (RTL, MODIFIED)
;;  pred:       76 [always]  (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 451 1356 452 36 22 (nil) [0 uses])
(note 452 451 453 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 453 452 1304 36 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":115 221 {*addsi_1}
     (nil))
(jump_insn 1304 453 1305 36 (set (pc)
        (label_ref 454)) "CALRCH.f":115 683 {jump}
     (nil)
 -> 454)
;;  succ:       32 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 693

(barrier 1305 1304 1352)
;; basic block 75, loop depth 0, maybe hot
;;  prev block 36, next block 37, flags: (RTL, MODIFIED)
;;  pred:       32
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1352 1305 1351 75 58 (nil) [1 uses])
(note 1351 1352 1353 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 1353 1351 457 75 (const_int 0 [0]) "CALRCH.f":116 718 {nop}
     (nil))
;;  succ:       37 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 75, next block 38, flags: (RTL, MODIFIED)
;;  pred:       75 [always]  (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 696 697
(code_label 457 1353 458 37 21 (nil) [0 uses])
(note 458 457 459 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 459 458 460 37 (set (reg:DI 5 di)
        (symbol_ref:DI ("egrid1.4217") [flags 0x202]  <var_decl 0x7fe96ef1e120 egrid1>)) "CALRCH.f":123 85 {*movdi_internal}
     (nil))
(insn 460 459 461 37 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALRCH.f":123 88 {*movqi_internal}
     (nil))
(call_insn 461 460 462 37 (call (mem:QI (symbol_ref:DI ("exch_") [flags 0x41]  <function_decl 0x7fe96eeef600 exch>) [0 exch S1 A8])
        (const_int 0 [0])) "CALRCH.f":123 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 462 461 463 37 (set (reg:DI 5 di)
        (symbol_ref:DI ("egrid2.4219") [flags 0x202]  <var_decl 0x7fe96ef1e1b0 egrid2>)) "CALRCH.f":124 85 {*movdi_internal}
     (nil))
(insn 463 462 464 37 (set (reg:QI 0 ax)
        (const_int 0 [0])) "CALRCH.f":124 88 {*movqi_internal}
     (nil))
(call_insn 464 463 465 37 (call (mem:QI (symbol_ref:DI ("exch_") [flags 0x41]  <function_decl 0x7fe96eeef600 exch>) [0 exch S1 A8])
        (const_int 0 [0])) "CALRCH.f":124 689 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 465 464 466 37 (set (reg:SI 1 dx [orig:696 _681 ] [696])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 24 [0x18]))) [1 parallel.jsta_m2+0 S4 A64])) "CALRCH.f":126 86 {*movsi_internal}
     (nil))
(insn 466 465 467 37 (set (reg:SI 0 ax [orig:697 _682 ] [697])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 28 [0x1c]))) [1 parallel.jend_m2+0 S4 A32])) "CALRCH.f":126 86 {*movsi_internal}
     (nil))
(insn 467 466 582 37 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
        (reg:SI 1 dx [orig:696 _681 ] [696])) "CALRCH.f":126 86 {*movsi_internal}
     (nil))
;;  succ:       38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;;              42 [always] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697
;; lr  def 	 17 [flags] 698 814
(code_label 582 467 468 38 28 (nil) [1 uses])
(note 468 582 469 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 469 468 470 38 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:697 _682 ] [697]))) "CALRCH.f":126 11 {*cmpsi_1}
     (nil))
(insn 470 469 471 38 (set (reg:QI 1 dx [814])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":126 678 {*setcc_qi}
     (nil))
(insn 471 470 472 38 (set (reg:SI 1 dx [orig:698 _684 ] [698])
        (zero_extend:SI (reg:QI 1 dx [814]))) "CALRCH.f":126 140 {*zero_extendqisi2}
     (nil))
(insn 472 471 473 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:698 _684 ] [698])
            (const_int 0 [0]))) "CALRCH.f":126 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 473 472 474 38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1358)
            (pc))) "CALRCH.f":126 682 {*jcc}
     (nil)
 -> 1358)
;;  succ:       77
;;              39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 474 473 475 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 475 474 576 39 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 2 [0x2])) "CALRCH.f":127 86 {*movsi_internal}
     (nil))
;;  succ:       40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697

;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 41, flags: (RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;;              41 [always] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 699 815
(code_label 576 475 476 40 27 (nil) [1 uses])
(note 476 576 477 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 477 476 478 40 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (const_int 118 [0x76]))) "CALRCH.f":127 11 {*cmpsi_1}
     (nil))
(insn 478 477 479 40 (set (reg:QI 1 dx [815])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":127 678 {*setcc_qi}
     (nil))
(insn 479 478 480 40 (set (reg:SI 1 dx [orig:699 _686 ] [699])
        (zero_extend:SI (reg:QI 1 dx [815]))) "CALRCH.f":127 140 {*zero_extendqisi2}
     (nil))
(insn 480 479 481 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:699 _686 ] [699])
            (const_int 0 [0]))) "CALRCH.f":127 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 481 480 482 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1361)
            (pc))) "CALRCH.f":127 682 {*jcc}
     (nil)
 -> 1361)
;;  succ:       78
;;              41 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697

;; basic block 41, loop depth 0, maybe hot
;;  prev block 40, next block 78, flags: (RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 816 817 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845
(note 482 481 483 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 483 482 484 41 (set (reg:SI 1 dx [816])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":128 86 {*movsi_internal}
     (nil))
(insn 484 483 485 41 (set (reg:DI 1 dx [orig:257 _171 ] [257])
        (sign_extend:DI (reg:SI 1 dx [816]))) "CALRCH.f":128 149 {*extendsidi2_rex64}
     (nil))
(insn 485 484 486 41 (parallel [
            (set (reg:DI 1 dx [orig:258 _172 ] [258])
                (plus:DI (reg:DI 1 dx [orig:257 _171 ] [257])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":128 222 {*adddi_1}
     (nil))
(insn 486 485 487 41 (parallel [
            (set (reg:DI 1 dx [817])
                (plus:DI (reg:DI 1 dx [orig:258 _172 ] [258])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":128 222 {*adddi_1}
     (nil))
(insn 487 486 491 41 (set (reg:SI 2 cx [orig:259 _173 ] [259])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [817])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7fe96ef00630 indx>)) [1 indx.ihw S4 A32])) "CALRCH.f":128 86 {*movsi_internal}
     (nil))
(insn 491 487 492 41 (set (reg:SI 1 dx [821])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":128 86 {*movsi_internal}
     (nil))
(insn 492 491 493 41 (parallel [
            (set (reg:SI 1 dx [820])
                (plus:SI (reg:SI 1 dx [821])
                    (reg:SI 2 cx [orig:259 _173 ] [259])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":128 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:259 _173 ] [259])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 493 492 494 41 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iw+0 S4 A32])
        (reg:SI 1 dx [820])) "CALRCH.f":128 86 {*movsi_internal}
     (nil))
(insn 494 493 495 41 (set (reg:SI 1 dx [822])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 495 494 496 41 (set (reg:DI 1 dx [orig:260 _174 ] [260])
        (sign_extend:DI (reg:SI 1 dx [822]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 496 495 497 41 (parallel [
            (set (reg:DI 2 cx [orig:261 _175 ] [261])
                (mult:DI (reg:DI 1 dx [orig:260 _174 ] [260])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 349 {*muldi3_1}
     (nil))
(insn 497 496 498 41 (set (reg:SI 1 dx [823])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 498 497 499 41 (set (reg:DI 1 dx [orig:262 _176 ] [262])
        (sign_extend:DI (reg:SI 1 dx [823]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 499 498 500 41 (parallel [
            (set (reg:DI 1 dx [orig:263 _177 ] [263])
                (mult:DI (reg:DI 1 dx [orig:262 _176 ] [262])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 349 {*muldi3_1}
     (nil))
(insn 500 499 501 41 (parallel [
            (set (reg:DI 2 cx [orig:264 _178 ] [264])
                (plus:DI (reg:DI 2 cx [orig:261 _175 ] [261])
                    (reg:DI 1 dx [orig:263 _177 ] [263])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 501 500 502 41 (set (reg:SI 1 dx [824])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 502 501 503 41 (set (reg:DI 1 dx [orig:265 _179 ] [265])
        (sign_extend:DI (reg:SI 1 dx [824]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 503 502 504 41 (parallel [
            (set (reg:DI 1 dx [orig:266 _180 ] [266])
                (plus:DI (reg:DI 1 dx [orig:265 _179 ] [265])
                    (reg:DI 2 cx [orig:264 _178 ] [264])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 504 503 505 41 (parallel [
            (set (reg:DI 2 cx [orig:267 _181 ] [267])
                (plus:DI (reg:DI 1 dx [orig:266 _180 ] [266])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 505 504 506 41 (set (reg/f:DI 1 dx [825])
        (symbol_ref:DI ("thv.4234") [flags 0x202]  <var_decl 0x7fe96ef1e900 thv>)) "CALRCH.f":131 85 {*movdi_internal}
     (nil))
(insn 506 505 507 41 (set (reg:SF 22 xmm1 [orig:268 _182 ] [268])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:267 _181 ] [267])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [825])) [2 thv S4 A32])) "CALRCH.f":131 131 {*movsf_internal}
     (nil))
(insn 507 506 508 41 (set (reg:SI 1 dx [826])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 508 507 509 41 (set (reg:DI 1 dx [orig:269 _183 ] [269])
        (sign_extend:DI (reg:SI 1 dx [826]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 509 508 510 41 (parallel [
            (set (reg:DI 2 cx [orig:270 _184 ] [270])
                (mult:DI (reg:DI 1 dx [orig:269 _183 ] [269])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 349 {*muldi3_1}
     (nil))
(insn 510 509 511 41 (set (reg:SI 1 dx [827])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 511 510 512 41 (set (reg:DI 1 dx [orig:271 _185 ] [271])
        (sign_extend:DI (reg:SI 1 dx [827]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 512 511 513 41 (parallel [
            (set (reg:DI 1 dx [orig:272 _186 ] [272])
                (plus:DI (reg:DI 1 dx [orig:271 _185 ] [271])
                    (reg:DI 2 cx [orig:270 _184 ] [270])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 513 512 514 41 (parallel [
            (set (reg:DI 2 cx [orig:273 _187 ] [273])
                (plus:DI (reg:DI 1 dx [orig:272 _186 ] [272])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 514 513 515 41 (set (reg/f:DI 1 dx [828])
        (symbol_ref:DI ("egrid1.4217") [flags 0x202]  <var_decl 0x7fe96ef1e120 egrid1>)) "CALRCH.f":131 85 {*movdi_internal}
     (nil))
(insn 515 514 516 41 (set (reg:SF 21 xmm0 [orig:274 _188 ] [274])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:273 _187 ] [273])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [828])) [2 egrid1 S4 A32])) "CALRCH.f":131 131 {*movsf_internal}
     (nil))
(insn 516 515 517 41 (set (reg:SI 1 dx [829])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 517 516 518 41 (parallel [
            (set (reg:SI 1 dx [orig:275 _189 ] [275])
                (plus:SI (reg:SI 1 dx [829])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 518 517 519 41 (set (reg:DI 1 dx [orig:276 _190 ] [276])
        (sign_extend:DI (reg:SI 1 dx [orig:275 _189 ] [275]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 519 518 520 41 (parallel [
            (set (reg:DI 2 cx [orig:277 _191 ] [277])
                (mult:DI (reg:DI 1 dx [orig:276 _190 ] [276])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 349 {*muldi3_1}
     (nil))
(insn 520 519 521 41 (set (reg:SI 1 dx [830])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iw+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 521 520 522 41 (set (reg:DI 1 dx [orig:278 _192 ] [278])
        (sign_extend:DI (reg:SI 1 dx [830]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 522 521 523 41 (parallel [
            (set (reg:DI 1 dx [orig:279 _193 ] [279])
                (plus:DI (reg:DI 1 dx [orig:278 _192 ] [278])
                    (reg:DI 2 cx [orig:277 _191 ] [277])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 523 522 524 41 (parallel [
            (set (reg:DI 2 cx [orig:280 _194 ] [280])
                (plus:DI (reg:DI 1 dx [orig:279 _193 ] [279])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 524 523 525 41 (set (reg/f:DI 1 dx [831])
        (symbol_ref:DI ("egrid1.4217") [flags 0x202]  <var_decl 0x7fe96ef1e120 egrid1>)) "CALRCH.f":131 85 {*movdi_internal}
     (nil))
(insn 525 524 526 41 (set (reg:SF 23 xmm2 [orig:281 _195 ] [281])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:280 _194 ] [280])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [831])) [2 egrid1 S4 A32])) "CALRCH.f":131 131 {*movsf_internal}
     (nil))
(insn 526 525 1374 41 (set (reg:SF 21 xmm0 [orig:274 _188 ] [274])
        (minus:SF (reg:SF 21 xmm0 [orig:274 _188 ] [274])
            (reg:SF 23 xmm2 [orig:281 _195 ] [281]))) "CALRCH.f":131 841 {*fop_sf_1}
     (nil))
(insn 1374 526 527 41 (set (reg:SF 23 xmm2 [orig:282 _196 ] [282])
        (reg:SF 21 xmm0 [orig:274 _188 ] [274])) "CALRCH.f":131 131 {*movsf_internal}
     (nil))
(insn 527 1374 528 41 (set (reg:SI 1 dx [832])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 528 527 529 41 (set (reg:DI 1 dx [orig:283 _197 ] [283])
        (sign_extend:DI (reg:SI 1 dx [832]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 529 528 530 41 (parallel [
            (set (reg:DI 2 cx [orig:284 _198 ] [284])
                (mult:DI (reg:DI 1 dx [orig:283 _197 ] [283])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 349 {*muldi3_1}
     (nil))
(insn 530 529 531 41 (set (reg:SI 1 dx [833])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 531 530 532 41 (set (reg:DI 1 dx [orig:285 _199 ] [285])
        (sign_extend:DI (reg:SI 1 dx [833]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 532 531 533 41 (parallel [
            (set (reg:DI 1 dx [orig:286 _200 ] [286])
                (plus:DI (reg:DI 1 dx [orig:285 _199 ] [285])
                    (reg:DI 2 cx [orig:284 _198 ] [284])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 533 532 534 41 (parallel [
            (set (reg:DI 2 cx [orig:287 _201 ] [287])
                (plus:DI (reg:DI 1 dx [orig:286 _200 ] [286])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 534 533 535 41 (set (reg/f:DI 1 dx [834])
        (symbol_ref:DI ("egrid2.4219") [flags 0x202]  <var_decl 0x7fe96ef1e1b0 egrid2>)) "CALRCH.f":131 85 {*movdi_internal}
     (nil))
(insn 535 534 536 41 (set (reg:SF 21 xmm0 [orig:288 _202 ] [288])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:287 _201 ] [287])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [834])) [2 egrid2 S4 A32])) "CALRCH.f":131 131 {*movsf_internal}
     (nil))
(insn 536 535 537 41 (set (reg:SF 21 xmm0 [orig:289 _203 ] [289])
        (plus:SF (reg:SF 21 xmm0 [orig:288 _202 ] [288])
            (reg:SF 23 xmm2 [orig:282 _196 ] [282]))) "CALRCH.f":131 838 {*fop_sf_comm}
     (nil))
(insn 537 536 538 41 (set (reg:SI 1 dx [835])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 538 537 539 41 (parallel [
            (set (reg:SI 1 dx [orig:290 _204 ] [290])
                (plus:SI (reg:SI 1 dx [835])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 539 538 540 41 (set (reg:DI 1 dx [orig:291 _205 ] [291])
        (sign_extend:DI (reg:SI 1 dx [orig:290 _204 ] [290]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 540 539 541 41 (parallel [
            (set (reg:DI 2 cx [orig:292 _206 ] [292])
                (mult:DI (reg:DI 1 dx [orig:291 _205 ] [291])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 349 {*muldi3_1}
     (nil))
(insn 541 540 542 41 (set (reg:SI 1 dx [836])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iw+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 542 541 543 41 (set (reg:DI 1 dx [orig:293 _207 ] [293])
        (sign_extend:DI (reg:SI 1 dx [836]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 543 542 544 41 (parallel [
            (set (reg:DI 1 dx [orig:294 _208 ] [294])
                (plus:DI (reg:DI 1 dx [orig:293 _207 ] [293])
                    (reg:DI 2 cx [orig:292 _206 ] [292])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 544 543 545 41 (parallel [
            (set (reg:DI 2 cx [orig:295 _209 ] [295])
                (plus:DI (reg:DI 1 dx [orig:294 _208 ] [294])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 545 544 546 41 (set (reg/f:DI 1 dx [837])
        (symbol_ref:DI ("egrid2.4219") [flags 0x202]  <var_decl 0x7fe96ef1e1b0 egrid2>)) "CALRCH.f":131 85 {*movdi_internal}
     (nil))
(insn 546 545 547 41 (set (reg:SF 23 xmm2 [orig:296 _210 ] [296])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:295 _209 ] [295])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [837])) [2 egrid2 S4 A32])) "CALRCH.f":131 131 {*movsf_internal}
     (nil))
(insn 547 546 548 41 (set (reg:SF 21 xmm0 [orig:297 _211 ] [297])
        (minus:SF (reg:SF 21 xmm0 [orig:289 _203 ] [289])
            (reg:SF 23 xmm2 [orig:296 _210 ] [296]))) "CALRCH.f":131 841 {*fop_sf_1}
     (nil))
(insn 548 547 549 41 (set (reg:SF 23 xmm2 [orig:298 _212 ] [298])
        (reg:SF 21 xmm0 [orig:297 _211 ] [297])) "CALRCH.f":131 131 {*movsf_internal}
     (nil))
(insn 549 548 550 41 (set (reg:SF 21 xmm0 [838])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) "CALRCH.f":131 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.25e-1 [0x0.8p-2])
        (nil)))
(insn 550 549 551 41 (set (reg:SF 23 xmm2 [orig:299 _213 ] [299])
        (mult:SF (reg:SF 23 xmm2 [orig:298 _212 ] [298])
            (reg:SF 21 xmm0 [838]))) "CALRCH.f":131 838 {*fop_sf_comm}
     (nil))
(insn 551 550 552 41 (set (reg:SI 1 dx [839])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 552 551 553 41 (set (reg:DI 1 dx [orig:300 _214 ] [300])
        (sign_extend:DI (reg:SI 1 dx [839]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 553 552 554 41 (parallel [
            (set (reg:DI 2 cx [orig:301 _215 ] [301])
                (mult:DI (reg:DI 1 dx [orig:300 _214 ] [300])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 349 {*muldi3_1}
     (nil))
(insn 554 553 555 41 (set (reg:SI 1 dx [840])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 555 554 556 41 (set (reg:DI 1 dx [orig:302 _216 ] [302])
        (sign_extend:DI (reg:SI 1 dx [840]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 556 555 557 41 (parallel [
            (set (reg:DI 1 dx [orig:303 _217 ] [303])
                (plus:DI (reg:DI 1 dx [orig:302 _216 ] [302])
                    (reg:DI 2 cx [orig:301 _215 ] [301])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 557 556 558 41 (parallel [
            (set (reg:DI 2 cx [orig:304 _218 ] [304])
                (plus:DI (reg:DI 1 dx [orig:303 _217 ] [303])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 558 557 559 41 (set (reg/f:DI 1 dx [841])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fe96ef00d80 masks>)) "CALRCH.f":131 85 {*movdi_internal}
     (nil))
(insn 559 558 560 41 (set (reg:SF 21 xmm0 [orig:305 _219 ] [305])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:304 _218 ] [304])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [841])) [2 masks.hbm2 S4 A32])) "CALRCH.f":131 131 {*movsf_internal}
     (nil))
(insn 560 559 561 41 (set (reg:SF 21 xmm0 [orig:306 _220 ] [306])
        (mult:SF (reg:SF 21 xmm0 [orig:305 _219 ] [305])
            (reg:SF 23 xmm2 [orig:299 _213 ] [299]))) "CALRCH.f":131 838 {*fop_sf_comm}
     (nil))
(insn 561 560 562 41 (set (reg:SI 1 dx [842])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 562 561 563 41 (set (reg:DI 1 dx [orig:307 _221 ] [307])
        (sign_extend:DI (reg:SI 1 dx [842]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 563 562 564 41 (parallel [
            (set (reg:DI 2 cx [orig:308 _222 ] [308])
                (mult:DI (reg:DI 1 dx [orig:307 _221 ] [307])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 349 {*muldi3_1}
     (nil))
(insn 564 563 565 41 (set (reg:SI 1 dx [843])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 565 564 566 41 (set (reg:DI 1 dx [orig:309 _223 ] [309])
        (sign_extend:DI (reg:SI 1 dx [843]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 566 565 567 41 (parallel [
            (set (reg:DI 1 dx [orig:310 _224 ] [310])
                (mult:DI (reg:DI 1 dx [orig:309 _223 ] [309])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 349 {*muldi3_1}
     (nil))
(insn 567 566 568 41 (parallel [
            (set (reg:DI 2 cx [orig:311 _225 ] [311])
                (plus:DI (reg:DI 2 cx [orig:308 _222 ] [308])
                    (reg:DI 1 dx [orig:310 _224 ] [310])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 568 567 569 41 (set (reg:SI 1 dx [844])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":131 86 {*movsi_internal}
     (nil))
(insn 569 568 570 41 (set (reg:DI 1 dx [orig:312 _226 ] [312])
        (sign_extend:DI (reg:SI 1 dx [844]))) "CALRCH.f":131 149 {*extendsidi2_rex64}
     (nil))
(insn 570 569 571 41 (parallel [
            (set (reg:DI 1 dx [orig:313 _227 ] [313])
                (plus:DI (reg:DI 1 dx [orig:312 _226 ] [312])
                    (reg:DI 2 cx [orig:311 _225 ] [311])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 571 570 572 41 (parallel [
            (set (reg:DI 2 cx [orig:314 _228 ] [314])
                (plus:DI (reg:DI 1 dx [orig:313 _227 ] [313])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":131 222 {*adddi_1}
     (nil))
(insn 572 571 573 41 (set (reg:SF 21 xmm0 [orig:315 _229 ] [315])
        (plus:SF (reg:SF 21 xmm0 [orig:306 _220 ] [306])
            (reg:SF 22 xmm1 [orig:268 _182 ] [268]))) "CALRCH.f":131 838 {*fop_sf_comm}
     (nil))
(insn 573 572 574 41 (set (reg/f:DI 1 dx [845])
        (symbol_ref:DI ("thv.4234") [flags 0x202]  <var_decl 0x7fe96ef1e900 thv>)) "CALRCH.f":131 85 {*movdi_internal}
     (nil))
(insn 574 573 575 41 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:314 _228 ] [314])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [845])) [2 thv S4 A32])
        (reg:SF 21 xmm0 [orig:315 _229 ] [315])) "CALRCH.f":131 131 {*movsf_internal}
     (nil))
(insn 575 574 1306 41 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":127 221 {*addsi_1}
     (nil))
(jump_insn 1306 575 1307 41 (set (pc)
        (label_ref 576)) "CALRCH.f":127 683 {jump}
     (nil)
 -> 576)
;;  succ:       40 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697

(barrier 1307 1306 1361)
;; basic block 78, loop depth 0, maybe hot
;;  prev block 41, next block 42, flags: (RTL, MODIFIED)
;;  pred:       40
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1361 1307 1360 78 61 (nil) [1 uses])
(note 1360 1361 1362 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 1362 1360 579 78 (const_int 0 [0]) "CALRCH.f":131 718 {nop}
     (nil))
;;  succ:       42 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697

;; basic block 42, loop depth 0, maybe hot
;;  prev block 78, next block 77, flags: (RTL, MODIFIED)
;;  pred:       78 [always]  (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 579 1362 580 42 26 (nil) [0 uses])
(note 580 579 581 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 581 580 1308 42 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":126 221 {*addsi_1}
     (nil))
(jump_insn 1308 581 1309 42 (set (pc)
        (label_ref 582)) "CALRCH.f":126 683 {jump}
     (nil)
 -> 582)
;;  succ:       38 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 697

(barrier 1309 1308 1358)
;; basic block 77, loop depth 0, maybe hot
;;  prev block 42, next block 43, flags: (RTL, MODIFIED)
;;  pred:       38
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1358 1309 1357 77 60 (nil) [1 uses])
(note 1357 1358 1359 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 1359 1357 585 77 (const_int 0 [0]) "CALRCH.f":127 718 {nop}
     (nil))
;;  succ:       43 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, maybe hot
;;  prev block 77, next block 70, flags: (RTL, MODIFIED)
;;  pred:       77 [always]  (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 585 1359 586 43 25 (nil) [0 uses])
(note 586 585 587 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 587 586 1310 43 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":95 221 {*addsi_1}
     (nil))
(jump_insn 1310 587 1311 43 (set (pc)
        (label_ref 588)) "CALRCH.f":95 683 {jump}
     (nil)
 -> 588)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1311 1310 1337)
;; basic block 70, loop depth 0, maybe hot
;;  prev block 43, next block 44, flags: (RTL, MODIFIED)
;;  pred:       18
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1337 1311 1336 70 53 (nil) [1 uses])
(note 1336 1337 1338 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 1338 1336 591 70 (const_int 0 [0]) "CALRCH.f":126 718 {nop}
     (nil))
;;  succ:       44 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, maybe hot
;;  prev block 70, next block 45, flags: (RTL, MODIFIED)
;;  pred:       70 [always]  (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 591 1338 592 44 12 (nil) [0 uses])
(note 592 591 593 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 593 592 1265 44 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
        (const_int 1 [0x1])) "CALRCH.f":145 86 {*movsi_internal}
     (nil))
;;  succ:       45 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, maybe hot
;;  prev block 44, next block 46, flags: (RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;;              63 [always] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 700 846
(code_label 1265 593 594 45 42 (nil) [1 uses])
(note 594 1265 595 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 595 594 596 45 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
            (const_int 37 [0x25]))) "CALRCH.f":145 11 {*cmpsi_1}
     (nil))
(insn 596 595 597 45 (set (reg:QI 0 ax [846])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":145 678 {*setcc_qi}
     (nil))
(insn 597 596 598 45 (set (reg:SI 0 ax [orig:700 _693 ] [700])
        (zero_extend:SI (reg:QI 0 ax [846]))) "CALRCH.f":145 140 {*zero_extendqisi2}
     (nil))
(insn 598 597 599 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:700 _693 ] [700])
            (const_int 0 [0]))) "CALRCH.f":145 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 599 598 600 45 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1364)
            (pc))) "CALRCH.f":145 682 {*jcc}
     (nil)
 -> 1364)
;;  succ:       79
;;              46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, maybe hot
;;  prev block 45, next block 47, flags: (RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 701 702
(note 600 599 601 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 601 600 602 46 (set (reg:SI 1 dx [orig:701 _694 ] [701])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 24 [0x18]))) [1 parallel.jsta_m2+0 S4 A64])) "CALRCH.f":149 86 {*movsi_internal}
     (nil))
(insn 602 601 603 46 (set (reg:SI 0 ax [orig:702 _695 ] [702])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe96ef06630 parallel>)
                    (const_int 28 [0x1c]))) [1 parallel.jend_m2+0 S4 A32])) "CALRCH.f":149 86 {*movsi_internal}
     (nil))
(insn 603 602 1259 46 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
        (reg:SI 1 dx [orig:701 _694 ] [701])) "CALRCH.f":149 86 {*movsi_internal}
     (nil))
;;  succ:       47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

;; basic block 47, loop depth 0, maybe hot
;;  prev block 46, next block 48, flags: (RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;;              62 [always] 
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  def 	 17 [flags] 703 847
(code_label 1259 603 604 47 41 (nil) [1 uses])
(note 604 1259 605 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 605 604 606 47 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
            (reg:SI 0 ax [orig:702 _695 ] [702]))) "CALRCH.f":149 11 {*cmpsi_1}
     (nil))
(insn 606 605 607 47 (set (reg:QI 1 dx [847])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":149 678 {*setcc_qi}
     (nil))
(insn 607 606 608 47 (set (reg:SI 1 dx [orig:703 _697 ] [703])
        (zero_extend:SI (reg:QI 1 dx [847]))) "CALRCH.f":149 140 {*zero_extendqisi2}
     (nil))
(insn 608 607 609 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:703 _697 ] [703])
            (const_int 0 [0]))) "CALRCH.f":149 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 609 608 610 47 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1367)
            (pc))) "CALRCH.f":149 682 {*jcc}
     (nil)
 -> 1367)
;;  succ:       80
;;              48 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

;; basic block 48, loop depth 0, maybe hot
;;  prev block 47, next block 49, flags: (RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 610 609 611 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 611 610 1253 48 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 2 [0x2])) "CALRCH.f":150 86 {*movsi_internal}
     (nil))
;;  succ:       49 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

;; basic block 49, loop depth 0, maybe hot
;;  prev block 48, next block 50, flags: (RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;;              61 [always] 
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 704 848
(code_label 1253 611 612 49 40 (nil) [1 uses])
(note 612 1253 613 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 613 612 614 49 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (const_int 118 [0x76]))) "CALRCH.f":150 11 {*cmpsi_1}
     (nil))
(insn 614 613 615 49 (set (reg:QI 1 dx [848])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "CALRCH.f":150 678 {*setcc_qi}
     (nil))
(insn 615 614 616 49 (set (reg:SI 1 dx [orig:704 _699 ] [704])
        (zero_extend:SI (reg:QI 1 dx [848]))) "CALRCH.f":150 140 {*zero_extendqisi2}
     (nil))
(insn 616 615 617 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:704 _699 ] [704])
            (const_int 0 [0]))) "CALRCH.f":150 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 617 616 618 49 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1370)
            (pc))) "CALRCH.f":150 682 {*jcc}
     (nil)
 -> 1370)
;;  succ:       81
;;              50 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

;; basic block 50, loop depth 0, maybe hot
;;  prev block 49, next block 51, flags: (RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags
(note 618 617 619 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 619 618 620 50 (set (reg:SI 1 dx [849])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":151 86 {*movsi_internal}
     (nil))
(insn 620 619 621 50 (set (reg:DI 1 dx [orig:316 _230 ] [316])
        (sign_extend:DI (reg:SI 1 dx [849]))) "CALRCH.f":151 149 {*extendsidi2_rex64}
     (nil))
(insn 621 620 622 50 (parallel [
            (set (reg:DI 1 dx [orig:317 _231 ] [317])
                (plus:DI (reg:DI 1 dx [orig:316 _230 ] [316])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":151 222 {*adddi_1}
     (nil))
(insn 622 621 626 50 (set (reg:SI 2 cx [orig:318 _232 ] [318])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:317 _231 ] [317])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7fe96ef00630 indx>)) [1 indx.ihe S4 A32])) "CALRCH.f":151 86 {*movsi_internal}
     (nil))
(insn 626 622 627 50 (set (reg:SI 1 dx [853])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":151 86 {*movsi_internal}
     (nil))
(insn 627 626 628 50 (parallel [
            (set (reg:SI 1 dx [852])
                (plus:SI (reg:SI 1 dx [853])
                    (reg:SI 2 cx [orig:318 _232 ] [318])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":151 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:318 _232 ] [318])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 628 627 629 50 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ie+0 S4 A32])
        (reg:SI 1 dx [852])) "CALRCH.f":151 86 {*movsi_internal}
     (nil))
(insn 629 628 630 50 (set (reg:SI 1 dx [854])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":152 86 {*movsi_internal}
     (nil))
(insn 630 629 631 50 (set (reg:DI 1 dx [orig:319 _233 ] [319])
        (sign_extend:DI (reg:SI 1 dx [854]))) "CALRCH.f":152 149 {*extendsidi2_rex64}
     (nil))
(insn 631 630 632 50 (parallel [
            (set (reg:DI 1 dx [orig:320 _234 ] [320])
                (plus:DI (reg:DI 1 dx [orig:319 _233 ] [319])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":152 222 {*adddi_1}
     (nil))
(insn 632 631 633 50 (parallel [
            (set (reg:DI 1 dx [855])
                (plus:DI (reg:DI 1 dx [orig:320 _234 ] [320])
                    (const_int 249 [0xf9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":152 222 {*adddi_1}
     (nil))
(insn 633 632 637 50 (set (reg:SI 2 cx [orig:321 _235 ] [321])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [855])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("indx_") [flags 0x2]  <var_decl 0x7fe96ef00630 indx>)) [1 indx.ihw S4 A32])) "CALRCH.f":152 86 {*movsi_internal}
     (nil))
(insn 637 633 638 50 (set (reg:SI 1 dx [859])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":152 86 {*movsi_internal}
     (nil))
(insn 638 637 639 50 (parallel [
            (set (reg:SI 1 dx [858])
                (plus:SI (reg:SI 1 dx [859])
                    (reg:SI 2 cx [orig:321 _235 ] [321])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":152 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:321 _235 ] [321])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 639 638 640 50 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iw+0 S4 A32])
        (reg:SI 1 dx [858])) "CALRCH.f":152 86 {*movsi_internal}
     (nil))
(insn 640 639 641 50 (set (reg:SI 1 dx [860])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":160 86 {*movsi_internal}
     (nil))
(insn 641 640 642 50 (set (reg:DI 1 dx [orig:322 _236 ] [322])
        (sign_extend:DI (reg:SI 1 dx [860]))) "CALRCH.f":160 149 {*extendsidi2_rex64}
     (nil))
(insn 642 641 643 50 (parallel [
            (set (reg:DI 2 cx [orig:323 _237 ] [323])
                (mult:DI (reg:DI 1 dx [orig:322 _236 ] [322])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 349 {*muldi3_1}
     (nil))
(insn 643 642 644 50 (set (reg:SI 1 dx [861])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":160 86 {*movsi_internal}
     (nil))
(insn 644 643 645 50 (parallel [
            (set (reg:SI 1 dx [orig:324 _238 ] [324])
                (plus:SI (reg:SI 1 dx [861])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 645 644 646 50 (set (reg:DI 1 dx [orig:325 _239 ] [325])
        (sign_extend:DI (reg:SI 1 dx [orig:324 _238 ] [324]))) "CALRCH.f":160 149 {*extendsidi2_rex64}
     (nil))
(insn 646 645 647 50 (parallel [
            (set (reg:DI 1 dx [orig:326 _240 ] [326])
                (mult:DI (reg:DI 1 dx [orig:325 _239 ] [325])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 349 {*muldi3_1}
     (nil))
(insn 647 646 648 50 (parallel [
            (set (reg:DI 2 cx [orig:327 _241 ] [327])
                (plus:DI (reg:DI 2 cx [orig:323 _237 ] [323])
                    (reg:DI 1 dx [orig:326 _240 ] [326])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 648 647 649 50 (set (reg:SI 1 dx [862])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":160 86 {*movsi_internal}
     (nil))
(insn 649 648 650 50 (set (reg:DI 1 dx [orig:328 _242 ] [328])
        (sign_extend:DI (reg:SI 1 dx [862]))) "CALRCH.f":160 149 {*extendsidi2_rex64}
     (nil))
(insn 650 649 651 50 (parallel [
            (set (reg:DI 1 dx [orig:329 _243 ] [329])
                (plus:DI (reg:DI 1 dx [orig:328 _242 ] [328])
                    (reg:DI 2 cx [orig:327 _241 ] [327])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 651 650 652 50 (parallel [
            (set (reg:DI 2 cx [orig:330 _244 ] [330])
                (plus:DI (reg:DI 1 dx [orig:329 _243 ] [329])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 652 651 653 50 (set (reg/f:DI 1 dx [863])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fe96ef00d80 masks>)) "CALRCH.f":160 85 {*movdi_internal}
     (nil))
(insn 653 652 654 50 (parallel [
            (set (reg:DI 2 cx [864])
                (plus:DI (reg:DI 2 cx [orig:330 _244 ] [330])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 654 653 655 50 (set (reg:SF 22 xmm1 [orig:331 _245 ] [331])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [864])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [863])) [2 masks.vtm S4 A32])) "CALRCH.f":160 131 {*movsf_internal}
     (nil))
(insn 655 654 656 50 (set (reg:SI 1 dx [865])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":160 86 {*movsi_internal}
     (nil))
(insn 656 655 657 50 (set (reg:DI 1 dx [orig:332 _246 ] [332])
        (sign_extend:DI (reg:SI 1 dx [865]))) "CALRCH.f":160 149 {*extendsidi2_rex64}
     (nil))
(insn 657 656 658 50 (parallel [
            (set (reg:DI 2 cx [orig:333 _247 ] [333])
                (mult:DI (reg:DI 1 dx [orig:332 _246 ] [332])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 349 {*muldi3_1}
     (nil))
(insn 658 657 659 50 (set (reg:SI 1 dx [866])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":160 86 {*movsi_internal}
     (nil))
(insn 659 658 660 50 (set (reg:DI 1 dx [orig:334 _248 ] [334])
        (sign_extend:DI (reg:SI 1 dx [866]))) "CALRCH.f":160 149 {*extendsidi2_rex64}
     (nil))
(insn 660 659 661 50 (parallel [
            (set (reg:DI 1 dx [orig:335 _249 ] [335])
                (mult:DI (reg:DI 1 dx [orig:334 _248 ] [334])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 349 {*muldi3_1}
     (nil))
(insn 661 660 662 50 (parallel [
            (set (reg:DI 2 cx [orig:336 _250 ] [336])
                (plus:DI (reg:DI 2 cx [orig:333 _247 ] [333])
                    (reg:DI 1 dx [orig:335 _249 ] [335])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 662 661 663 50 (set (reg:SI 1 dx [867])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iw+0 S4 A32])) "CALRCH.f":160 86 {*movsi_internal}
     (nil))
(insn 663 662 664 50 (set (reg:DI 1 dx [orig:337 _251 ] [337])
        (sign_extend:DI (reg:SI 1 dx [867]))) "CALRCH.f":160 149 {*extendsidi2_rex64}
     (nil))
(insn 664 663 665 50 (parallel [
            (set (reg:DI 1 dx [orig:338 _252 ] [338])
                (plus:DI (reg:DI 1 dx [orig:337 _251 ] [337])
                    (reg:DI 2 cx [orig:336 _250 ] [336])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 665 664 666 50 (parallel [
            (set (reg:DI 2 cx [orig:339 _253 ] [339])
                (plus:DI (reg:DI 1 dx [orig:338 _252 ] [338])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 666 665 667 50 (set (reg/f:DI 1 dx [868])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fe96ef00d80 masks>)) "CALRCH.f":160 85 {*movdi_internal}
     (nil))
(insn 667 666 668 50 (parallel [
            (set (reg:DI 2 cx [869])
                (plus:DI (reg:DI 2 cx [orig:339 _253 ] [339])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 668 667 669 50 (set (reg:SF 21 xmm0 [orig:340 _254 ] [340])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [869])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [868])) [2 masks.vtm S4 A32])) "CALRCH.f":160 131 {*movsf_internal}
     (nil))
(insn 669 668 670 50 (set (reg:SF 22 xmm1 [orig:341 _255 ] [341])
        (plus:SF (reg:SF 22 xmm1 [orig:331 _245 ] [331])
            (reg:SF 21 xmm0 [orig:340 _254 ] [340]))) "CALRCH.f":160 838 {*fop_sf_comm}
     (nil))
(insn 670 669 671 50 (set (reg:SI 1 dx [870])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":160 86 {*movsi_internal}
     (nil))
(insn 671 670 672 50 (set (reg:DI 1 dx [orig:342 _256 ] [342])
        (sign_extend:DI (reg:SI 1 dx [870]))) "CALRCH.f":160 149 {*extendsidi2_rex64}
     (nil))
(insn 672 671 673 50 (parallel [
            (set (reg:DI 2 cx [orig:343 _257 ] [343])
                (mult:DI (reg:DI 1 dx [orig:342 _256 ] [342])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 349 {*muldi3_1}
     (nil))
(insn 673 672 674 50 (set (reg:SI 1 dx [871])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":160 86 {*movsi_internal}
     (nil))
(insn 674 673 675 50 (set (reg:DI 1 dx [orig:344 _258 ] [344])
        (sign_extend:DI (reg:SI 1 dx [871]))) "CALRCH.f":160 149 {*extendsidi2_rex64}
     (nil))
(insn 675 674 676 50 (parallel [
            (set (reg:DI 1 dx [orig:345 _259 ] [345])
                (mult:DI (reg:DI 1 dx [orig:344 _258 ] [344])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 349 {*muldi3_1}
     (nil))
(insn 676 675 677 50 (parallel [
            (set (reg:DI 2 cx [orig:346 _260 ] [346])
                (plus:DI (reg:DI 2 cx [orig:343 _257 ] [343])
                    (reg:DI 1 dx [orig:345 _259 ] [345])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 677 676 678 50 (set (reg:SI 1 dx [872])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ie+0 S4 A32])) "CALRCH.f":160 86 {*movsi_internal}
     (nil))
(insn 678 677 679 50 (set (reg:DI 1 dx [orig:347 _261 ] [347])
        (sign_extend:DI (reg:SI 1 dx [872]))) "CALRCH.f":160 149 {*extendsidi2_rex64}
     (nil))
(insn 679 678 680 50 (parallel [
            (set (reg:DI 1 dx [orig:348 _262 ] [348])
                (plus:DI (reg:DI 1 dx [orig:347 _261 ] [347])
                    (reg:DI 2 cx [orig:346 _260 ] [346])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 680 679 681 50 (parallel [
            (set (reg:DI 2 cx [orig:349 _263 ] [349])
                (plus:DI (reg:DI 1 dx [orig:348 _262 ] [348])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 681 680 682 50 (set (reg/f:DI 1 dx [873])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fe96ef00d80 masks>)) "CALRCH.f":160 85 {*movdi_internal}
     (nil))
(insn 682 681 683 50 (parallel [
            (set (reg:DI 2 cx [874])
                (plus:DI (reg:DI 2 cx [orig:349 _263 ] [349])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 683 682 684 50 (set (reg:SF 21 xmm0 [orig:350 _264 ] [350])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [874])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [873])) [2 masks.vtm S4 A32])) "CALRCH.f":160 131 {*movsf_internal}
     (nil))
(insn 684 683 685 50 (set (reg:SF 22 xmm1 [orig:351 _265 ] [351])
        (plus:SF (reg:SF 22 xmm1 [orig:341 _255 ] [341])
            (reg:SF 21 xmm0 [orig:350 _264 ] [350]))) "CALRCH.f":160 838 {*fop_sf_comm}
     (nil))
(insn 685 684 686 50 (set (reg:SI 1 dx [875])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":160 86 {*movsi_internal}
     (nil))
(insn 686 685 687 50 (set (reg:DI 1 dx [orig:352 _266 ] [352])
        (sign_extend:DI (reg:SI 1 dx [875]))) "CALRCH.f":160 149 {*extendsidi2_rex64}
     (nil))
(insn 687 686 688 50 (parallel [
            (set (reg:DI 2 cx [orig:353 _267 ] [353])
                (mult:DI (reg:DI 1 dx [orig:352 _266 ] [352])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 349 {*muldi3_1}
     (nil))
(insn 688 687 689 50 (set (reg:SI 1 dx [876])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":160 86 {*movsi_internal}
     (nil))
(insn 689 688 690 50 (parallel [
            (set (reg:SI 1 dx [orig:354 _268 ] [354])
                (plus:SI (reg:SI 1 dx [876])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 690 689 691 50 (set (reg:DI 1 dx [orig:355 _269 ] [355])
        (sign_extend:DI (reg:SI 1 dx [orig:354 _268 ] [354]))) "CALRCH.f":160 149 {*extendsidi2_rex64}
     (nil))
(insn 691 690 692 50 (parallel [
            (set (reg:DI 1 dx [orig:356 _270 ] [356])
                (mult:DI (reg:DI 1 dx [orig:355 _269 ] [355])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 349 {*muldi3_1}
     (nil))
(insn 692 691 693 50 (parallel [
            (set (reg:DI 2 cx [orig:357 _271 ] [357])
                (plus:DI (reg:DI 2 cx [orig:353 _267 ] [353])
                    (reg:DI 1 dx [orig:356 _270 ] [356])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 693 692 694 50 (set (reg:SI 1 dx [877])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":160 86 {*movsi_internal}
     (nil))
(insn 694 693 695 50 (set (reg:DI 1 dx [orig:358 _272 ] [358])
        (sign_extend:DI (reg:SI 1 dx [877]))) "CALRCH.f":160 149 {*extendsidi2_rex64}
     (nil))
(insn 695 694 696 50 (parallel [
            (set (reg:DI 1 dx [orig:359 _273 ] [359])
                (plus:DI (reg:DI 1 dx [orig:358 _272 ] [358])
                    (reg:DI 2 cx [orig:357 _271 ] [357])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 696 695 697 50 (parallel [
            (set (reg:DI 2 cx [orig:360 _274 ] [360])
                (plus:DI (reg:DI 1 dx [orig:359 _273 ] [359])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 697 696 698 50 (set (reg/f:DI 1 dx [878])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fe96ef00d80 masks>)) "CALRCH.f":160 85 {*movdi_internal}
     (nil))
(insn 698 697 699 50 (parallel [
            (set (reg:DI 2 cx [879])
                (plus:DI (reg:DI 2 cx [orig:360 _274 ] [360])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":160 222 {*adddi_1}
     (nil))
(insn 699 698 700 50 (set (reg:SF 21 xmm0 [orig:361 _275 ] [361])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [879])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [878])) [2 masks.vtm S4 A32])) "CALRCH.f":160 131 {*movsf_internal}
     (nil))
(insn 700 699 701 50 (set (reg:SF 21 xmm0 [880])
        (plus:SF (reg:SF 21 xmm0 [orig:361 _275 ] [361])
            (reg:SF 22 xmm1 [orig:351 _265 ] [351]))) "CALRCH.f":160 838 {*fop_sf_comm}
     (nil))
(insn 701 700 702 50 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [2 wndsl+0 S4 A32])
        (reg:SF 21 xmm0 [880])) "CALRCH.f":160 131 {*movsf_internal}
     (nil))
(insn 702 701 703 50 (set (reg:SI 1 dx [881])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":162 86 {*movsi_internal}
     (nil))
(insn 703 702 704 50 (parallel [
            (set (reg:SI 1 dx [orig:362 _276 ] [362])
                (plus:SI (reg:SI 1 dx [881])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 704 703 705 50 (set (reg:DI 1 dx [orig:363 _277 ] [363])
        (sign_extend:DI (reg:SI 1 dx [orig:362 _276 ] [362]))) "CALRCH.f":162 149 {*extendsidi2_rex64}
     (nil))
(insn 705 704 706 50 (parallel [
            (set (reg:DI 2 cx [orig:364 _278 ] [364])
                (mult:DI (reg:DI 1 dx [orig:363 _277 ] [363])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 349 {*muldi3_1}
     (nil))
(insn 706 705 707 50 (set (reg:SI 1 dx [882])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":162 86 {*movsi_internal}
     (nil))
(insn 707 706 708 50 (parallel [
            (set (reg:SI 1 dx [orig:365 _279 ] [365])
                (plus:SI (reg:SI 1 dx [882])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 708 707 709 50 (set (reg:DI 1 dx [orig:366 _280 ] [366])
        (sign_extend:DI (reg:SI 1 dx [orig:365 _279 ] [365]))) "CALRCH.f":162 149 {*extendsidi2_rex64}
     (nil))
(insn 709 708 710 50 (parallel [
            (set (reg:DI 1 dx [orig:367 _281 ] [367])
                (mult:DI (reg:DI 1 dx [orig:366 _280 ] [366])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 349 {*muldi3_1}
     (nil))
(insn 710 709 711 50 (parallel [
            (set (reg:DI 2 cx [orig:368 _282 ] [368])
                (plus:DI (reg:DI 2 cx [orig:364 _278 ] [364])
                    (reg:DI 1 dx [orig:367 _281 ] [367])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 711 710 712 50 (set (reg:SI 1 dx [883])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":162 86 {*movsi_internal}
     (nil))
(insn 712 711 713 50 (set (reg:DI 1 dx [orig:369 _283 ] [369])
        (sign_extend:DI (reg:SI 1 dx [883]))) "CALRCH.f":162 149 {*extendsidi2_rex64}
     (nil))
(insn 713 712 714 50 (parallel [
            (set (reg:DI 1 dx [orig:370 _284 ] [370])
                (plus:DI (reg:DI 1 dx [orig:369 _283 ] [369])
                    (reg:DI 2 cx [orig:368 _282 ] [368])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 714 713 715 50 (parallel [
            (set (reg:DI 2 cx [orig:371 _285 ] [371])
                (plus:DI (reg:DI 1 dx [orig:370 _284 ] [370])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 715 714 716 50 (set (reg/f:DI 1 dx [884])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fe96ef00d80 masks>)) "CALRCH.f":162 85 {*movdi_internal}
     (nil))
(insn 716 715 717 50 (parallel [
            (set (reg:DI 2 cx [885])
                (plus:DI (reg:DI 2 cx [orig:371 _285 ] [371])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 717 716 718 50 (set (reg:SF 22 xmm1 [orig:372 _286 ] [372])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [885])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [884])) [2 masks.vtm S4 A32])) "CALRCH.f":162 131 {*movsf_internal}
     (nil))
(insn 718 717 719 50 (set (reg:SI 1 dx [886])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":162 86 {*movsi_internal}
     (nil))
(insn 719 718 720 50 (parallel [
            (set (reg:SI 1 dx [orig:373 _287 ] [373])
                (plus:SI (reg:SI 1 dx [886])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 720 719 721 50 (set (reg:DI 1 dx [orig:374 _288 ] [374])
        (sign_extend:DI (reg:SI 1 dx [orig:373 _287 ] [373]))) "CALRCH.f":162 149 {*extendsidi2_rex64}
     (nil))
(insn 721 720 722 50 (parallel [
            (set (reg:DI 2 cx [orig:375 _289 ] [375])
                (mult:DI (reg:DI 1 dx [orig:374 _288 ] [374])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 349 {*muldi3_1}
     (nil))
(insn 722 721 723 50 (set (reg:SI 1 dx [887])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":162 86 {*movsi_internal}
     (nil))
(insn 723 722 724 50 (set (reg:DI 1 dx [orig:376 _290 ] [376])
        (sign_extend:DI (reg:SI 1 dx [887]))) "CALRCH.f":162 149 {*extendsidi2_rex64}
     (nil))
(insn 724 723 725 50 (parallel [
            (set (reg:DI 1 dx [orig:377 _291 ] [377])
                (mult:DI (reg:DI 1 dx [orig:376 _290 ] [376])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 349 {*muldi3_1}
     (nil))
(insn 725 724 726 50 (parallel [
            (set (reg:DI 2 cx [orig:378 _292 ] [378])
                (plus:DI (reg:DI 2 cx [orig:375 _289 ] [375])
                    (reg:DI 1 dx [orig:377 _291 ] [377])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 726 725 727 50 (set (reg:SI 1 dx [888])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iw+0 S4 A32])) "CALRCH.f":162 86 {*movsi_internal}
     (nil))
(insn 727 726 728 50 (set (reg:DI 1 dx [orig:379 _293 ] [379])
        (sign_extend:DI (reg:SI 1 dx [888]))) "CALRCH.f":162 149 {*extendsidi2_rex64}
     (nil))
(insn 728 727 729 50 (parallel [
            (set (reg:DI 1 dx [orig:380 _294 ] [380])
                (plus:DI (reg:DI 1 dx [orig:379 _293 ] [379])
                    (reg:DI 2 cx [orig:378 _292 ] [378])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 729 728 730 50 (parallel [
            (set (reg:DI 2 cx [orig:381 _295 ] [381])
                (plus:DI (reg:DI 1 dx [orig:380 _294 ] [380])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 730 729 731 50 (set (reg/f:DI 1 dx [889])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fe96ef00d80 masks>)) "CALRCH.f":162 85 {*movdi_internal}
     (nil))
(insn 731 730 732 50 (parallel [
            (set (reg:DI 2 cx [890])
                (plus:DI (reg:DI 2 cx [orig:381 _295 ] [381])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 732 731 733 50 (set (reg:SF 21 xmm0 [orig:382 _296 ] [382])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [890])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [889])) [2 masks.vtm S4 A32])) "CALRCH.f":162 131 {*movsf_internal}
     (nil))
(insn 733 732 734 50 (set (reg:SF 22 xmm1 [orig:383 _297 ] [383])
        (plus:SF (reg:SF 22 xmm1 [orig:372 _286 ] [372])
            (reg:SF 21 xmm0 [orig:382 _296 ] [382]))) "CALRCH.f":162 838 {*fop_sf_comm}
     (nil))
(insn 734 733 735 50 (set (reg:SI 1 dx [891])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":162 86 {*movsi_internal}
     (nil))
(insn 735 734 736 50 (parallel [
            (set (reg:SI 1 dx [orig:384 _298 ] [384])
                (plus:SI (reg:SI 1 dx [891])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 736 735 737 50 (set (reg:DI 1 dx [orig:385 _299 ] [385])
        (sign_extend:DI (reg:SI 1 dx [orig:384 _298 ] [384]))) "CALRCH.f":162 149 {*extendsidi2_rex64}
     (nil))
(insn 737 736 738 50 (parallel [
            (set (reg:DI 2 cx [orig:386 _300 ] [386])
                (mult:DI (reg:DI 1 dx [orig:385 _299 ] [385])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 349 {*muldi3_1}
     (nil))
(insn 738 737 739 50 (set (reg:SI 1 dx [892])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":162 86 {*movsi_internal}
     (nil))
(insn 739 738 740 50 (set (reg:DI 1 dx [orig:387 _301 ] [387])
        (sign_extend:DI (reg:SI 1 dx [892]))) "CALRCH.f":162 149 {*extendsidi2_rex64}
     (nil))
(insn 740 739 741 50 (parallel [
            (set (reg:DI 1 dx [orig:388 _302 ] [388])
                (mult:DI (reg:DI 1 dx [orig:387 _301 ] [387])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 349 {*muldi3_1}
     (nil))
(insn 741 740 742 50 (parallel [
            (set (reg:DI 2 cx [orig:389 _303 ] [389])
                (plus:DI (reg:DI 2 cx [orig:386 _300 ] [386])
                    (reg:DI 1 dx [orig:388 _302 ] [388])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 742 741 743 50 (set (reg:SI 1 dx [893])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ie+0 S4 A32])) "CALRCH.f":162 86 {*movsi_internal}
     (nil))
(insn 743 742 744 50 (set (reg:DI 1 dx [orig:390 _304 ] [390])
        (sign_extend:DI (reg:SI 1 dx [893]))) "CALRCH.f":162 149 {*extendsidi2_rex64}
     (nil))
(insn 744 743 745 50 (parallel [
            (set (reg:DI 1 dx [orig:391 _305 ] [391])
                (plus:DI (reg:DI 1 dx [orig:390 _304 ] [390])
                    (reg:DI 2 cx [orig:389 _303 ] [389])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 745 744 746 50 (parallel [
            (set (reg:DI 2 cx [orig:392 _306 ] [392])
                (plus:DI (reg:DI 1 dx [orig:391 _305 ] [391])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 746 745 747 50 (set (reg/f:DI 1 dx [894])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fe96ef00d80 masks>)) "CALRCH.f":162 85 {*movdi_internal}
     (nil))
(insn 747 746 748 50 (parallel [
            (set (reg:DI 2 cx [895])
                (plus:DI (reg:DI 2 cx [orig:392 _306 ] [392])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 748 747 749 50 (set (reg:SF 21 xmm0 [orig:393 _307 ] [393])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [895])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [894])) [2 masks.vtm S4 A32])) "CALRCH.f":162 131 {*movsf_internal}
     (nil))
(insn 749 748 750 50 (set (reg:SF 22 xmm1 [orig:394 _308 ] [394])
        (plus:SF (reg:SF 22 xmm1 [orig:383 _297 ] [383])
            (reg:SF 21 xmm0 [orig:393 _307 ] [393]))) "CALRCH.f":162 838 {*fop_sf_comm}
     (nil))
(insn 750 749 751 50 (set (reg:SI 1 dx [896])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":162 86 {*movsi_internal}
     (nil))
(insn 751 750 752 50 (parallel [
            (set (reg:SI 1 dx [orig:395 _309 ] [395])
                (plus:SI (reg:SI 1 dx [896])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 752 751 753 50 (set (reg:DI 1 dx [orig:396 _310 ] [396])
        (sign_extend:DI (reg:SI 1 dx [orig:395 _309 ] [395]))) "CALRCH.f":162 149 {*extendsidi2_rex64}
     (nil))
(insn 753 752 754 50 (parallel [
            (set (reg:DI 2 cx [orig:397 _311 ] [397])
                (mult:DI (reg:DI 1 dx [orig:396 _310 ] [396])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 349 {*muldi3_1}
     (nil))
(insn 754 753 755 50 (set (reg:SI 1 dx [897])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":162 86 {*movsi_internal}
     (nil))
(insn 755 754 756 50 (parallel [
            (set (reg:SI 1 dx [orig:398 _312 ] [398])
                (plus:SI (reg:SI 1 dx [897])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 756 755 757 50 (set (reg:DI 1 dx [orig:399 _313 ] [399])
        (sign_extend:DI (reg:SI 1 dx [orig:398 _312 ] [398]))) "CALRCH.f":162 149 {*extendsidi2_rex64}
     (nil))
(insn 757 756 758 50 (parallel [
            (set (reg:DI 1 dx [orig:400 _314 ] [400])
                (mult:DI (reg:DI 1 dx [orig:399 _313 ] [399])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 349 {*muldi3_1}
     (nil))
(insn 758 757 759 50 (parallel [
            (set (reg:DI 2 cx [orig:401 _315 ] [401])
                (plus:DI (reg:DI 2 cx [orig:397 _311 ] [397])
                    (reg:DI 1 dx [orig:400 _314 ] [400])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 759 758 760 50 (set (reg:SI 1 dx [898])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":162 86 {*movsi_internal}
     (nil))
(insn 760 759 761 50 (set (reg:DI 1 dx [orig:402 _316 ] [402])
        (sign_extend:DI (reg:SI 1 dx [898]))) "CALRCH.f":162 149 {*extendsidi2_rex64}
     (nil))
(insn 761 760 762 50 (parallel [
            (set (reg:DI 1 dx [orig:403 _317 ] [403])
                (plus:DI (reg:DI 1 dx [orig:402 _316 ] [402])
                    (reg:DI 2 cx [orig:401 _315 ] [401])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 762 761 763 50 (parallel [
            (set (reg:DI 2 cx [orig:404 _318 ] [404])
                (plus:DI (reg:DI 1 dx [orig:403 _317 ] [403])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 763 762 764 50 (set (reg/f:DI 1 dx [899])
        (symbol_ref:DI ("masks_") [flags 0x202]  <var_decl 0x7fe96ef00d80 masks>)) "CALRCH.f":162 85 {*movdi_internal}
     (nil))
(insn 764 763 765 50 (parallel [
            (set (reg:DI 2 cx [900])
                (plus:DI (reg:DI 2 cx [orig:404 _318 ] [404])
                    (const_int 1274133 [0x137115])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":162 222 {*adddi_1}
     (nil))
(insn 765 764 766 50 (set (reg:SF 21 xmm0 [orig:405 _319 ] [405])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [900])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [899])) [2 masks.vtm S4 A32])) "CALRCH.f":162 131 {*movsf_internal}
     (nil))
(insn 766 765 767 50 (set (reg:SF 21 xmm0 [901])
        (plus:SF (reg:SF 21 xmm0 [orig:405 _319 ] [405])
            (reg:SF 22 xmm1 [orig:394 _308 ] [394]))) "CALRCH.f":162 838 {*fop_sf_comm}
     (nil))
(insn 767 766 768 50 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 wndslp+0 S4 A32])
        (reg:SF 21 xmm0 [901])) "CALRCH.f":162 131 {*movsf_internal}
     (nil))
(insn 768 767 769 50 (set (reg:SF 21 xmm0 [902])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S4 A32])) "CALRCH.f":163 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 769 768 770 50 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [902])
                    (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [2 wndsl+0 S4 A32]))
            ] UNSPEC_NOTRAP)) "CALRCH.f":163 54 {*cmpiusf}
     (nil))
(jump_insn 770 769 1274 50 (set (pc)
        (if_then_else (unordered (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1280)
            (pc))) "CALRCH.f":163 682 {*jcc}
     (nil)
 -> 1280)
;;  succ:       52
;;              51 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

;; basic block 51, loop depth 0, maybe hot
;;  prev block 50, next block 52, flags: (RTL, MODIFIED)
;;  pred:       50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 903
(note 1274 770 771 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 771 1274 772 51 (set (reg:SF 21 xmm0 [903])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S4 A32])) "CALRCH.f":163 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 772 771 773 51 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [903])
                    (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [2 wndsl+0 S4 A32]))
            ] UNSPEC_NOTRAP)) "CALRCH.f":163 54 {*cmpiusf}
     (nil))
(jump_insn 773 772 1280 51 (set (pc)
        (if_then_else (uneq (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref 1250)
            (pc))) "CALRCH.f":163 682 {*jcc}
     (nil)
 -> 1250)
;;  succ:       61
;;              52 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

;; basic block 52, loop depth 0, maybe hot
;;  prev block 51, next block 53, flags: (RTL, MODIFIED)
;;  pred:       51 (FALLTHRU)
;;              50
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 904
(code_label 1280 773 775 52 44 (nil) [1 uses])
(note 775 1280 776 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 776 775 777 52 (set (reg:SF 21 xmm0 [904])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S4 A32])) "CALRCH.f":163 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 777 776 778 52 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [904])
                    (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [2 wndslp+0 S4 A32]))
            ] UNSPEC_NOTRAP)) "CALRCH.f":163 54 {*cmpiusf}
     (nil))
(jump_insn 778 777 1276 52 (set (pc)
        (if_then_else (unordered (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1281)
            (pc))) "CALRCH.f":163 682 {*jcc}
     (nil)
 -> 1281)
;;  succ:       54
;;              53 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

;; basic block 53, loop depth 0, maybe hot
;;  prev block 52, next block 54, flags: (RTL, MODIFIED)
;;  pred:       52 (FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 905
(note 1276 778 779 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 779 1276 780 53 (set (reg:SF 21 xmm0 [905])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S4 A32])) "CALRCH.f":163 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 780 779 781 53 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [905])
                    (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [2 wndslp+0 S4 A32]))
            ] UNSPEC_NOTRAP)) "CALRCH.f":163 54 {*cmpiusf}
     (nil))
(jump_insn 781 780 1281 53 (set (pc)
        (if_then_else (uneq (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref 1250)
            (pc))) "CALRCH.f":163 682 {*jcc}
     (nil)
 -> 1250)
;;  succ:       61
;;              54 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

;; basic block 54, loop depth 0, maybe hot
;;  prev block 53, next block 55, flags: (RTL, MODIFIED)
;;  pred:       53 (FALLTHRU)
;;              52
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags
(code_label 1281 781 783 54 45 (nil) [1 uses])
(note 783 1281 784 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 784 783 785 54 (set (reg:SI 1 dx [906])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":164 86 {*movsi_internal}
     (nil))
(insn 785 784 786 54 (set (reg:DI 1 dx [orig:406 _320 ] [406])
        (sign_extend:DI (reg:SI 1 dx [906]))) "CALRCH.f":164 149 {*extendsidi2_rex64}
     (nil))
(insn 786 785 787 54 (parallel [
            (set (reg:DI 2 cx [orig:407 _321 ] [407])
                (mult:DI (reg:DI 1 dx [orig:406 _320 ] [406])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 349 {*muldi3_1}
     (nil))
(insn 787 786 788 54 (set (reg:SI 1 dx [907])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":164 86 {*movsi_internal}
     (nil))
(insn 788 787 789 54 (parallel [
            (set (reg:SI 1 dx [orig:408 _322 ] [408])
                (plus:SI (reg:SI 1 dx [907])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 789 788 790 54 (set (reg:DI 1 dx [orig:409 _323 ] [409])
        (sign_extend:DI (reg:SI 1 dx [orig:408 _322 ] [408]))) "CALRCH.f":164 149 {*extendsidi2_rex64}
     (nil))
(insn 790 789 791 54 (parallel [
            (set (reg:DI 1 dx [orig:410 _324 ] [410])
                (mult:DI (reg:DI 1 dx [orig:409 _323 ] [409])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 349 {*muldi3_1}
     (nil))
(insn 791 790 792 54 (parallel [
            (set (reg:DI 2 cx [orig:411 _325 ] [411])
                (plus:DI (reg:DI 2 cx [orig:407 _321 ] [407])
                    (reg:DI 1 dx [orig:410 _324 ] [410])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 792 791 793 54 (set (reg:SI 1 dx [908])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":164 86 {*movsi_internal}
     (nil))
(insn 793 792 794 54 (set (reg:DI 1 dx [orig:412 _326 ] [412])
        (sign_extend:DI (reg:SI 1 dx [908]))) "CALRCH.f":164 149 {*extendsidi2_rex64}
     (nil))
(insn 794 793 795 54 (parallel [
            (set (reg:DI 1 dx [orig:413 _327 ] [413])
                (plus:DI (reg:DI 1 dx [orig:412 _326 ] [412])
                    (reg:DI 2 cx [orig:411 _325 ] [411])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 795 794 796 54 (parallel [
            (set (reg:DI 2 cx [orig:414 _328 ] [414])
                (plus:DI (reg:DI 1 dx [orig:413 _327 ] [413])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 796 795 797 54 (set (reg/f:DI 1 dx [909])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":164 85 {*movdi_internal}
     (nil))
(insn 797 796 798 54 (parallel [
            (set (reg:DI 2 cx [910])
                (plus:DI (reg:DI 2 cx [orig:414 _328 ] [414])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 798 797 799 54 (set (reg:SF 22 xmm1 [orig:415 _329 ] [415])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [910])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [909])) [2 vrbls.u S4 A32])) "CALRCH.f":164 131 {*movsf_internal}
     (nil))
(insn 799 798 800 54 (set (reg:SI 1 dx [911])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":164 86 {*movsi_internal}
     (nil))
(insn 800 799 801 54 (set (reg:DI 1 dx [orig:416 _330 ] [416])
        (sign_extend:DI (reg:SI 1 dx [911]))) "CALRCH.f":164 149 {*extendsidi2_rex64}
     (nil))
(insn 801 800 802 54 (parallel [
            (set (reg:DI 2 cx [orig:417 _331 ] [417])
                (mult:DI (reg:DI 1 dx [orig:416 _330 ] [416])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 349 {*muldi3_1}
     (nil))
(insn 802 801 803 54 (set (reg:SI 1 dx [912])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":164 86 {*movsi_internal}
     (nil))
(insn 803 802 804 54 (set (reg:DI 1 dx [orig:418 _332 ] [418])
        (sign_extend:DI (reg:SI 1 dx [912]))) "CALRCH.f":164 149 {*extendsidi2_rex64}
     (nil))
(insn 804 803 805 54 (parallel [
            (set (reg:DI 1 dx [orig:419 _333 ] [419])
                (mult:DI (reg:DI 1 dx [orig:418 _332 ] [418])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 349 {*muldi3_1}
     (nil))
(insn 805 804 806 54 (parallel [
            (set (reg:DI 2 cx [orig:420 _334 ] [420])
                (plus:DI (reg:DI 2 cx [orig:417 _331 ] [417])
                    (reg:DI 1 dx [orig:419 _333 ] [419])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 806 805 807 54 (set (reg:SI 1 dx [913])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iw+0 S4 A32])) "CALRCH.f":164 86 {*movsi_internal}
     (nil))
(insn 807 806 808 54 (set (reg:DI 1 dx [orig:421 _335 ] [421])
        (sign_extend:DI (reg:SI 1 dx [913]))) "CALRCH.f":164 149 {*extendsidi2_rex64}
     (nil))
(insn 808 807 809 54 (parallel [
            (set (reg:DI 1 dx [orig:422 _336 ] [422])
                (plus:DI (reg:DI 1 dx [orig:421 _335 ] [421])
                    (reg:DI 2 cx [orig:420 _334 ] [420])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 809 808 810 54 (parallel [
            (set (reg:DI 2 cx [orig:423 _337 ] [423])
                (plus:DI (reg:DI 1 dx [orig:422 _336 ] [422])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 810 809 811 54 (set (reg/f:DI 1 dx [914])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":164 85 {*movdi_internal}
     (nil))
(insn 811 810 812 54 (parallel [
            (set (reg:DI 2 cx [915])
                (plus:DI (reg:DI 2 cx [orig:423 _337 ] [423])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 812 811 813 54 (set (reg:SF 21 xmm0 [orig:424 _338 ] [424])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [915])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [914])) [2 vrbls.u S4 A32])) "CALRCH.f":164 131 {*movsf_internal}
     (nil))
(insn 813 812 814 54 (set (reg:SF 22 xmm1 [orig:425 _339 ] [425])
        (plus:SF (reg:SF 22 xmm1 [orig:415 _329 ] [415])
            (reg:SF 21 xmm0 [orig:424 _338 ] [424]))) "CALRCH.f":164 838 {*fop_sf_comm}
     (nil))
(insn 814 813 815 54 (set (reg:SI 1 dx [916])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":164 86 {*movsi_internal}
     (nil))
(insn 815 814 816 54 (set (reg:DI 1 dx [orig:426 _340 ] [426])
        (sign_extend:DI (reg:SI 1 dx [916]))) "CALRCH.f":164 149 {*extendsidi2_rex64}
     (nil))
(insn 816 815 817 54 (parallel [
            (set (reg:DI 2 cx [orig:427 _341 ] [427])
                (mult:DI (reg:DI 1 dx [orig:426 _340 ] [426])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 349 {*muldi3_1}
     (nil))
(insn 817 816 818 54 (set (reg:SI 1 dx [917])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":164 86 {*movsi_internal}
     (nil))
(insn 818 817 819 54 (set (reg:DI 1 dx [orig:428 _342 ] [428])
        (sign_extend:DI (reg:SI 1 dx [917]))) "CALRCH.f":164 149 {*extendsidi2_rex64}
     (nil))
(insn 819 818 820 54 (parallel [
            (set (reg:DI 1 dx [orig:429 _343 ] [429])
                (mult:DI (reg:DI 1 dx [orig:428 _342 ] [428])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 349 {*muldi3_1}
     (nil))
(insn 820 819 821 54 (parallel [
            (set (reg:DI 2 cx [orig:430 _344 ] [430])
                (plus:DI (reg:DI 2 cx [orig:427 _341 ] [427])
                    (reg:DI 1 dx [orig:429 _343 ] [429])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 821 820 822 54 (set (reg:SI 1 dx [918])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ie+0 S4 A32])) "CALRCH.f":164 86 {*movsi_internal}
     (nil))
(insn 822 821 823 54 (set (reg:DI 1 dx [orig:431 _345 ] [431])
        (sign_extend:DI (reg:SI 1 dx [918]))) "CALRCH.f":164 149 {*extendsidi2_rex64}
     (nil))
(insn 823 822 824 54 (parallel [
            (set (reg:DI 1 dx [orig:432 _346 ] [432])
                (plus:DI (reg:DI 1 dx [orig:431 _345 ] [431])
                    (reg:DI 2 cx [orig:430 _344 ] [430])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 824 823 825 54 (parallel [
            (set (reg:DI 2 cx [orig:433 _347 ] [433])
                (plus:DI (reg:DI 1 dx [orig:432 _346 ] [432])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 825 824 826 54 (set (reg/f:DI 1 dx [919])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":164 85 {*movdi_internal}
     (nil))
(insn 826 825 827 54 (parallel [
            (set (reg:DI 2 cx [920])
                (plus:DI (reg:DI 2 cx [orig:433 _347 ] [433])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 827 826 828 54 (set (reg:SF 21 xmm0 [orig:434 _348 ] [434])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [920])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [919])) [2 vrbls.u S4 A32])) "CALRCH.f":164 131 {*movsf_internal}
     (nil))
(insn 828 827 829 54 (set (reg:SF 22 xmm1 [orig:435 _349 ] [435])
        (plus:SF (reg:SF 22 xmm1 [orig:425 _339 ] [425])
            (reg:SF 21 xmm0 [orig:434 _348 ] [434]))) "CALRCH.f":164 838 {*fop_sf_comm}
     (nil))
(insn 829 828 830 54 (set (reg:SI 1 dx [921])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":164 86 {*movsi_internal}
     (nil))
(insn 830 829 831 54 (set (reg:DI 1 dx [orig:436 _350 ] [436])
        (sign_extend:DI (reg:SI 1 dx [921]))) "CALRCH.f":164 149 {*extendsidi2_rex64}
     (nil))
(insn 831 830 832 54 (parallel [
            (set (reg:DI 2 cx [orig:437 _351 ] [437])
                (mult:DI (reg:DI 1 dx [orig:436 _350 ] [436])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 349 {*muldi3_1}
     (nil))
(insn 832 831 833 54 (set (reg:SI 1 dx [922])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":164 86 {*movsi_internal}
     (nil))
(insn 833 832 834 54 (parallel [
            (set (reg:SI 1 dx [orig:438 _352 ] [438])
                (plus:SI (reg:SI 1 dx [922])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 834 833 835 54 (set (reg:DI 1 dx [orig:439 _353 ] [439])
        (sign_extend:DI (reg:SI 1 dx [orig:438 _352 ] [438]))) "CALRCH.f":164 149 {*extendsidi2_rex64}
     (nil))
(insn 835 834 836 54 (parallel [
            (set (reg:DI 1 dx [orig:440 _354 ] [440])
                (mult:DI (reg:DI 1 dx [orig:439 _353 ] [439])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 349 {*muldi3_1}
     (nil))
(insn 836 835 837 54 (parallel [
            (set (reg:DI 2 cx [orig:441 _355 ] [441])
                (plus:DI (reg:DI 2 cx [orig:437 _351 ] [437])
                    (reg:DI 1 dx [orig:440 _354 ] [440])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 837 836 838 54 (set (reg:SI 1 dx [923])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":164 86 {*movsi_internal}
     (nil))
(insn 838 837 839 54 (set (reg:DI 1 dx [orig:442 _356 ] [442])
        (sign_extend:DI (reg:SI 1 dx [923]))) "CALRCH.f":164 149 {*extendsidi2_rex64}
     (nil))
(insn 839 838 840 54 (parallel [
            (set (reg:DI 1 dx [orig:443 _357 ] [443])
                (plus:DI (reg:DI 1 dx [orig:442 _356 ] [442])
                    (reg:DI 2 cx [orig:441 _355 ] [441])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 840 839 841 54 (parallel [
            (set (reg:DI 2 cx [orig:444 _358 ] [444])
                (plus:DI (reg:DI 1 dx [orig:443 _357 ] [443])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 841 840 842 54 (set (reg/f:DI 1 dx [924])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":164 85 {*movdi_internal}
     (nil))
(insn 842 841 843 54 (parallel [
            (set (reg:DI 2 cx [925])
                (plus:DI (reg:DI 2 cx [orig:444 _358 ] [444])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":164 222 {*adddi_1}
     (nil))
(insn 843 842 844 54 (set (reg:SF 21 xmm0 [orig:445 _359 ] [445])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [925])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [924])) [2 vrbls.u S4 A32])) "CALRCH.f":164 131 {*movsf_internal}
     (nil))
(insn 844 843 846 54 (set (reg:SF 21 xmm0 [orig:446 _360 ] [446])
        (plus:SF (reg:SF 21 xmm0 [orig:445 _359 ] [445])
            (reg:SF 22 xmm1 [orig:435 _349 ] [435]))) "CALRCH.f":164 838 {*fop_sf_comm}
     (nil))
(insn 846 844 847 54 (set (reg:SF 21 xmm0 [926])
        (div:SF (reg:SF 21 xmm0 [orig:447 _361 ] [447])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [2 wndsl+0 S4 A32]))) "CALRCH.f":164 841 {*fop_sf_1}
     (nil))
(insn 847 846 848 54 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 uhkl+0 S4 A32])
        (reg:SF 21 xmm0 [926])) "CALRCH.f":164 131 {*movsf_internal}
     (nil))
(insn 848 847 849 54 (set (reg:SI 1 dx [927])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":166 86 {*movsi_internal}
     (nil))
(insn 849 848 850 54 (parallel [
            (set (reg:SI 1 dx [orig:448 _362 ] [448])
                (plus:SI (reg:SI 1 dx [927])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 850 849 851 54 (set (reg:DI 1 dx [orig:449 _363 ] [449])
        (sign_extend:DI (reg:SI 1 dx [orig:448 _362 ] [448]))) "CALRCH.f":166 149 {*extendsidi2_rex64}
     (nil))
(insn 851 850 852 54 (parallel [
            (set (reg:DI 2 cx [orig:450 _364 ] [450])
                (mult:DI (reg:DI 1 dx [orig:449 _363 ] [449])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 349 {*muldi3_1}
     (nil))
(insn 852 851 853 54 (set (reg:SI 1 dx [928])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":166 86 {*movsi_internal}
     (nil))
(insn 853 852 854 54 (parallel [
            (set (reg:SI 1 dx [orig:451 _365 ] [451])
                (plus:SI (reg:SI 1 dx [928])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 854 853 855 54 (set (reg:DI 1 dx [orig:452 _366 ] [452])
        (sign_extend:DI (reg:SI 1 dx [orig:451 _365 ] [451]))) "CALRCH.f":166 149 {*extendsidi2_rex64}
     (nil))
(insn 855 854 856 54 (parallel [
            (set (reg:DI 1 dx [orig:453 _367 ] [453])
                (mult:DI (reg:DI 1 dx [orig:452 _366 ] [452])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 349 {*muldi3_1}
     (nil))
(insn 856 855 857 54 (parallel [
            (set (reg:DI 2 cx [orig:454 _368 ] [454])
                (plus:DI (reg:DI 2 cx [orig:450 _364 ] [450])
                    (reg:DI 1 dx [orig:453 _367 ] [453])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 857 856 858 54 (set (reg:SI 1 dx [929])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":166 86 {*movsi_internal}
     (nil))
(insn 858 857 859 54 (set (reg:DI 1 dx [orig:455 _369 ] [455])
        (sign_extend:DI (reg:SI 1 dx [929]))) "CALRCH.f":166 149 {*extendsidi2_rex64}
     (nil))
(insn 859 858 860 54 (parallel [
            (set (reg:DI 1 dx [orig:456 _370 ] [456])
                (plus:DI (reg:DI 1 dx [orig:455 _369 ] [455])
                    (reg:DI 2 cx [orig:454 _368 ] [454])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 860 859 861 54 (parallel [
            (set (reg:DI 2 cx [orig:457 _371 ] [457])
                (plus:DI (reg:DI 1 dx [orig:456 _370 ] [456])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 861 860 862 54 (set (reg/f:DI 1 dx [930])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":166 85 {*movdi_internal}
     (nil))
(insn 862 861 863 54 (parallel [
            (set (reg:DI 2 cx [931])
                (plus:DI (reg:DI 2 cx [orig:457 _371 ] [457])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 863 862 864 54 (set (reg:SF 22 xmm1 [orig:458 _372 ] [458])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [931])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [930])) [2 vrbls.u S4 A32])) "CALRCH.f":166 131 {*movsf_internal}
     (nil))
(insn 864 863 865 54 (set (reg:SI 1 dx [932])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":166 86 {*movsi_internal}
     (nil))
(insn 865 864 866 54 (parallel [
            (set (reg:SI 1 dx [orig:459 _373 ] [459])
                (plus:SI (reg:SI 1 dx [932])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 866 865 867 54 (set (reg:DI 1 dx [orig:460 _374 ] [460])
        (sign_extend:DI (reg:SI 1 dx [orig:459 _373 ] [459]))) "CALRCH.f":166 149 {*extendsidi2_rex64}
     (nil))
(insn 867 866 868 54 (parallel [
            (set (reg:DI 2 cx [orig:461 _375 ] [461])
                (mult:DI (reg:DI 1 dx [orig:460 _374 ] [460])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 349 {*muldi3_1}
     (nil))
(insn 868 867 869 54 (set (reg:SI 1 dx [933])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":166 86 {*movsi_internal}
     (nil))
(insn 869 868 870 54 (set (reg:DI 1 dx [orig:462 _376 ] [462])
        (sign_extend:DI (reg:SI 1 dx [933]))) "CALRCH.f":166 149 {*extendsidi2_rex64}
     (nil))
(insn 870 869 871 54 (parallel [
            (set (reg:DI 1 dx [orig:463 _377 ] [463])
                (mult:DI (reg:DI 1 dx [orig:462 _376 ] [462])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 349 {*muldi3_1}
     (nil))
(insn 871 870 872 54 (parallel [
            (set (reg:DI 2 cx [orig:464 _378 ] [464])
                (plus:DI (reg:DI 2 cx [orig:461 _375 ] [461])
                    (reg:DI 1 dx [orig:463 _377 ] [463])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 872 871 873 54 (set (reg:SI 1 dx [934])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iw+0 S4 A32])) "CALRCH.f":166 86 {*movsi_internal}
     (nil))
(insn 873 872 874 54 (set (reg:DI 1 dx [orig:465 _379 ] [465])
        (sign_extend:DI (reg:SI 1 dx [934]))) "CALRCH.f":166 149 {*extendsidi2_rex64}
     (nil))
(insn 874 873 875 54 (parallel [
            (set (reg:DI 1 dx [orig:466 _380 ] [466])
                (plus:DI (reg:DI 1 dx [orig:465 _379 ] [465])
                    (reg:DI 2 cx [orig:464 _378 ] [464])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 875 874 876 54 (parallel [
            (set (reg:DI 2 cx [orig:467 _381 ] [467])
                (plus:DI (reg:DI 1 dx [orig:466 _380 ] [466])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 876 875 877 54 (set (reg/f:DI 1 dx [935])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":166 85 {*movdi_internal}
     (nil))
(insn 877 876 878 54 (parallel [
            (set (reg:DI 2 cx [936])
                (plus:DI (reg:DI 2 cx [orig:467 _381 ] [467])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 878 877 879 54 (set (reg:SF 21 xmm0 [orig:468 _382 ] [468])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [936])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [935])) [2 vrbls.u S4 A32])) "CALRCH.f":166 131 {*movsf_internal}
     (nil))
(insn 879 878 880 54 (set (reg:SF 22 xmm1 [orig:469 _383 ] [469])
        (plus:SF (reg:SF 22 xmm1 [orig:458 _372 ] [458])
            (reg:SF 21 xmm0 [orig:468 _382 ] [468]))) "CALRCH.f":166 838 {*fop_sf_comm}
     (nil))
(insn 880 879 881 54 (set (reg:SI 1 dx [937])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":166 86 {*movsi_internal}
     (nil))
(insn 881 880 882 54 (parallel [
            (set (reg:SI 1 dx [orig:470 _384 ] [470])
                (plus:SI (reg:SI 1 dx [937])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 882 881 883 54 (set (reg:DI 1 dx [orig:471 _385 ] [471])
        (sign_extend:DI (reg:SI 1 dx [orig:470 _384 ] [470]))) "CALRCH.f":166 149 {*extendsidi2_rex64}
     (nil))
(insn 883 882 884 54 (parallel [
            (set (reg:DI 2 cx [orig:472 _386 ] [472])
                (mult:DI (reg:DI 1 dx [orig:471 _385 ] [471])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 349 {*muldi3_1}
     (nil))
(insn 884 883 885 54 (set (reg:SI 1 dx [938])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":166 86 {*movsi_internal}
     (nil))
(insn 885 884 886 54 (set (reg:DI 1 dx [orig:473 _387 ] [473])
        (sign_extend:DI (reg:SI 1 dx [938]))) "CALRCH.f":166 149 {*extendsidi2_rex64}
     (nil))
(insn 886 885 887 54 (parallel [
            (set (reg:DI 1 dx [orig:474 _388 ] [474])
                (mult:DI (reg:DI 1 dx [orig:473 _387 ] [473])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 349 {*muldi3_1}
     (nil))
(insn 887 886 888 54 (parallel [
            (set (reg:DI 2 cx [orig:475 _389 ] [475])
                (plus:DI (reg:DI 2 cx [orig:472 _386 ] [472])
                    (reg:DI 1 dx [orig:474 _388 ] [474])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 888 887 889 54 (set (reg:SI 1 dx [939])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ie+0 S4 A32])) "CALRCH.f":166 86 {*movsi_internal}
     (nil))
(insn 889 888 890 54 (set (reg:DI 1 dx [orig:476 _390 ] [476])
        (sign_extend:DI (reg:SI 1 dx [939]))) "CALRCH.f":166 149 {*extendsidi2_rex64}
     (nil))
(insn 890 889 891 54 (parallel [
            (set (reg:DI 1 dx [orig:477 _391 ] [477])
                (plus:DI (reg:DI 1 dx [orig:476 _390 ] [476])
                    (reg:DI 2 cx [orig:475 _389 ] [475])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 891 890 892 54 (parallel [
            (set (reg:DI 2 cx [orig:478 _392 ] [478])
                (plus:DI (reg:DI 1 dx [orig:477 _391 ] [477])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 892 891 893 54 (set (reg/f:DI 1 dx [940])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":166 85 {*movdi_internal}
     (nil))
(insn 893 892 894 54 (parallel [
            (set (reg:DI 2 cx [941])
                (plus:DI (reg:DI 2 cx [orig:478 _392 ] [478])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 894 893 895 54 (set (reg:SF 21 xmm0 [orig:479 _393 ] [479])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [941])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [940])) [2 vrbls.u S4 A32])) "CALRCH.f":166 131 {*movsf_internal}
     (nil))
(insn 895 894 896 54 (set (reg:SF 22 xmm1 [orig:480 _394 ] [480])
        (plus:SF (reg:SF 22 xmm1 [orig:469 _383 ] [469])
            (reg:SF 21 xmm0 [orig:479 _393 ] [479]))) "CALRCH.f":166 838 {*fop_sf_comm}
     (nil))
(insn 896 895 897 54 (set (reg:SI 1 dx [942])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":166 86 {*movsi_internal}
     (nil))
(insn 897 896 898 54 (parallel [
            (set (reg:SI 1 dx [orig:481 _395 ] [481])
                (plus:SI (reg:SI 1 dx [942])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 898 897 899 54 (set (reg:DI 1 dx [orig:482 _396 ] [482])
        (sign_extend:DI (reg:SI 1 dx [orig:481 _395 ] [481]))) "CALRCH.f":166 149 {*extendsidi2_rex64}
     (nil))
(insn 899 898 900 54 (parallel [
            (set (reg:DI 2 cx [orig:483 _397 ] [483])
                (mult:DI (reg:DI 1 dx [orig:482 _396 ] [482])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 349 {*muldi3_1}
     (nil))
(insn 900 899 901 54 (set (reg:SI 1 dx [943])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":166 86 {*movsi_internal}
     (nil))
(insn 901 900 902 54 (parallel [
            (set (reg:SI 1 dx [orig:484 _398 ] [484])
                (plus:SI (reg:SI 1 dx [943])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 902 901 903 54 (set (reg:DI 1 dx [orig:485 _399 ] [485])
        (sign_extend:DI (reg:SI 1 dx [orig:484 _398 ] [484]))) "CALRCH.f":166 149 {*extendsidi2_rex64}
     (nil))
(insn 903 902 904 54 (parallel [
            (set (reg:DI 1 dx [orig:486 _400 ] [486])
                (mult:DI (reg:DI 1 dx [orig:485 _399 ] [485])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 349 {*muldi3_1}
     (nil))
(insn 904 903 905 54 (parallel [
            (set (reg:DI 2 cx [orig:487 _401 ] [487])
                (plus:DI (reg:DI 2 cx [orig:483 _397 ] [483])
                    (reg:DI 1 dx [orig:486 _400 ] [486])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 905 904 906 54 (set (reg:SI 1 dx [944])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":166 86 {*movsi_internal}
     (nil))
(insn 906 905 907 54 (set (reg:DI 1 dx [orig:488 _402 ] [488])
        (sign_extend:DI (reg:SI 1 dx [944]))) "CALRCH.f":166 149 {*extendsidi2_rex64}
     (nil))
(insn 907 906 908 54 (parallel [
            (set (reg:DI 1 dx [orig:489 _403 ] [489])
                (plus:DI (reg:DI 1 dx [orig:488 _402 ] [488])
                    (reg:DI 2 cx [orig:487 _401 ] [487])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 908 907 909 54 (parallel [
            (set (reg:DI 2 cx [orig:490 _404 ] [490])
                (plus:DI (reg:DI 1 dx [orig:489 _403 ] [489])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 909 908 910 54 (set (reg/f:DI 1 dx [945])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":166 85 {*movdi_internal}
     (nil))
(insn 910 909 911 54 (parallel [
            (set (reg:DI 2 cx [946])
                (plus:DI (reg:DI 2 cx [orig:490 _404 ] [490])
                    (const_int 88893 [0x15b3d])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":166 222 {*adddi_1}
     (nil))
(insn 911 910 912 54 (set (reg:SF 21 xmm0 [orig:491 _405 ] [491])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [946])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [945])) [2 vrbls.u S4 A32])) "CALRCH.f":166 131 {*movsf_internal}
     (nil))
(insn 912 911 914 54 (set (reg:SF 21 xmm0 [orig:492 _406 ] [492])
        (plus:SF (reg:SF 21 xmm0 [orig:491 _405 ] [491])
            (reg:SF 22 xmm1 [orig:480 _394 ] [480]))) "CALRCH.f":166 838 {*fop_sf_comm}
     (nil))
(insn 914 912 915 54 (set (reg:SF 21 xmm0 [947])
        (div:SF (reg:SF 21 xmm0 [orig:493 _407 ] [493])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [2 wndslp+0 S4 A32]))) "CALRCH.f":166 841 {*fop_sf_1}
     (nil))
(insn 915 914 916 54 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ulkl+0 S4 A32])
        (reg:SF 21 xmm0 [947])) "CALRCH.f":166 131 {*movsf_internal}
     (nil))
(insn 916 915 917 54 (set (reg:SI 1 dx [948])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":167 86 {*movsi_internal}
     (nil))
(insn 917 916 918 54 (set (reg:DI 1 dx [orig:494 _408 ] [494])
        (sign_extend:DI (reg:SI 1 dx [948]))) "CALRCH.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 918 917 919 54 (parallel [
            (set (reg:DI 2 cx [orig:495 _409 ] [495])
                (mult:DI (reg:DI 1 dx [orig:494 _408 ] [494])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 349 {*muldi3_1}
     (nil))
(insn 919 918 920 54 (set (reg:SI 1 dx [949])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":167 86 {*movsi_internal}
     (nil))
(insn 920 919 921 54 (parallel [
            (set (reg:SI 1 dx [orig:496 _410 ] [496])
                (plus:SI (reg:SI 1 dx [949])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 921 920 922 54 (set (reg:DI 1 dx [orig:497 _411 ] [497])
        (sign_extend:DI (reg:SI 1 dx [orig:496 _410 ] [496]))) "CALRCH.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 922 921 923 54 (parallel [
            (set (reg:DI 1 dx [orig:498 _412 ] [498])
                (mult:DI (reg:DI 1 dx [orig:497 _411 ] [497])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 349 {*muldi3_1}
     (nil))
(insn 923 922 924 54 (parallel [
            (set (reg:DI 2 cx [orig:499 _413 ] [499])
                (plus:DI (reg:DI 2 cx [orig:495 _409 ] [495])
                    (reg:DI 1 dx [orig:498 _412 ] [498])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 924 923 925 54 (set (reg:SI 1 dx [950])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":167 86 {*movsi_internal}
     (nil))
(insn 925 924 926 54 (set (reg:DI 1 dx [orig:500 _414 ] [500])
        (sign_extend:DI (reg:SI 1 dx [950]))) "CALRCH.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 926 925 927 54 (parallel [
            (set (reg:DI 1 dx [orig:501 _415 ] [501])
                (plus:DI (reg:DI 1 dx [orig:500 _414 ] [500])
                    (reg:DI 2 cx [orig:499 _413 ] [499])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 927 926 928 54 (parallel [
            (set (reg:DI 2 cx [orig:502 _416 ] [502])
                (plus:DI (reg:DI 1 dx [orig:501 _415 ] [501])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 928 927 929 54 (set (reg/f:DI 1 dx [951])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":167 85 {*movdi_internal}
     (nil))
(insn 929 928 930 54 (parallel [
            (set (reg:DI 2 cx [952])
                (plus:DI (reg:DI 2 cx [orig:502 _416 ] [502])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 930 929 931 54 (set (reg:SF 22 xmm1 [orig:503 _417 ] [503])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [952])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [951])) [2 vrbls.v S4 A32])) "CALRCH.f":167 131 {*movsf_internal}
     (nil))
(insn 931 930 932 54 (set (reg:SI 1 dx [953])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":167 86 {*movsi_internal}
     (nil))
(insn 932 931 933 54 (set (reg:DI 1 dx [orig:504 _418 ] [504])
        (sign_extend:DI (reg:SI 1 dx [953]))) "CALRCH.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 933 932 934 54 (parallel [
            (set (reg:DI 2 cx [orig:505 _419 ] [505])
                (mult:DI (reg:DI 1 dx [orig:504 _418 ] [504])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 349 {*muldi3_1}
     (nil))
(insn 934 933 935 54 (set (reg:SI 1 dx [954])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":167 86 {*movsi_internal}
     (nil))
(insn 935 934 936 54 (set (reg:DI 1 dx [orig:506 _420 ] [506])
        (sign_extend:DI (reg:SI 1 dx [954]))) "CALRCH.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 936 935 937 54 (parallel [
            (set (reg:DI 1 dx [orig:507 _421 ] [507])
                (mult:DI (reg:DI 1 dx [orig:506 _420 ] [506])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 349 {*muldi3_1}
     (nil))
(insn 937 936 938 54 (parallel [
            (set (reg:DI 2 cx [orig:508 _422 ] [508])
                (plus:DI (reg:DI 2 cx [orig:505 _419 ] [505])
                    (reg:DI 1 dx [orig:507 _421 ] [507])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 938 937 939 54 (set (reg:SI 1 dx [955])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iw+0 S4 A32])) "CALRCH.f":167 86 {*movsi_internal}
     (nil))
(insn 939 938 940 54 (set (reg:DI 1 dx [orig:509 _423 ] [509])
        (sign_extend:DI (reg:SI 1 dx [955]))) "CALRCH.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 940 939 941 54 (parallel [
            (set (reg:DI 1 dx [orig:510 _424 ] [510])
                (plus:DI (reg:DI 1 dx [orig:509 _423 ] [509])
                    (reg:DI 2 cx [orig:508 _422 ] [508])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 941 940 942 54 (parallel [
            (set (reg:DI 2 cx [orig:511 _425 ] [511])
                (plus:DI (reg:DI 1 dx [orig:510 _424 ] [510])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 942 941 943 54 (set (reg/f:DI 1 dx [956])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":167 85 {*movdi_internal}
     (nil))
(insn 943 942 944 54 (parallel [
            (set (reg:DI 2 cx [957])
                (plus:DI (reg:DI 2 cx [orig:511 _425 ] [511])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 944 943 945 54 (set (reg:SF 21 xmm0 [orig:512 _426 ] [512])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [957])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [956])) [2 vrbls.v S4 A32])) "CALRCH.f":167 131 {*movsf_internal}
     (nil))
(insn 945 944 946 54 (set (reg:SF 22 xmm1 [orig:513 _427 ] [513])
        (plus:SF (reg:SF 22 xmm1 [orig:503 _417 ] [503])
            (reg:SF 21 xmm0 [orig:512 _426 ] [512]))) "CALRCH.f":167 838 {*fop_sf_comm}
     (nil))
(insn 946 945 947 54 (set (reg:SI 1 dx [958])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":167 86 {*movsi_internal}
     (nil))
(insn 947 946 948 54 (set (reg:DI 1 dx [orig:514 _428 ] [514])
        (sign_extend:DI (reg:SI 1 dx [958]))) "CALRCH.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 948 947 949 54 (parallel [
            (set (reg:DI 2 cx [orig:515 _429 ] [515])
                (mult:DI (reg:DI 1 dx [orig:514 _428 ] [514])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 349 {*muldi3_1}
     (nil))
(insn 949 948 950 54 (set (reg:SI 1 dx [959])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":167 86 {*movsi_internal}
     (nil))
(insn 950 949 951 54 (set (reg:DI 1 dx [orig:516 _430 ] [516])
        (sign_extend:DI (reg:SI 1 dx [959]))) "CALRCH.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 951 950 952 54 (parallel [
            (set (reg:DI 1 dx [orig:517 _431 ] [517])
                (mult:DI (reg:DI 1 dx [orig:516 _430 ] [516])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 349 {*muldi3_1}
     (nil))
(insn 952 951 953 54 (parallel [
            (set (reg:DI 2 cx [orig:518 _432 ] [518])
                (plus:DI (reg:DI 2 cx [orig:515 _429 ] [515])
                    (reg:DI 1 dx [orig:517 _431 ] [517])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 953 952 954 54 (set (reg:SI 1 dx [960])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ie+0 S4 A32])) "CALRCH.f":167 86 {*movsi_internal}
     (nil))
(insn 954 953 955 54 (set (reg:DI 1 dx [orig:519 _433 ] [519])
        (sign_extend:DI (reg:SI 1 dx [960]))) "CALRCH.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 955 954 956 54 (parallel [
            (set (reg:DI 1 dx [orig:520 _434 ] [520])
                (plus:DI (reg:DI 1 dx [orig:519 _433 ] [519])
                    (reg:DI 2 cx [orig:518 _432 ] [518])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 956 955 957 54 (parallel [
            (set (reg:DI 2 cx [orig:521 _435 ] [521])
                (plus:DI (reg:DI 1 dx [orig:520 _434 ] [520])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 957 956 958 54 (set (reg/f:DI 1 dx [961])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":167 85 {*movdi_internal}
     (nil))
(insn 958 957 959 54 (parallel [
            (set (reg:DI 2 cx [962])
                (plus:DI (reg:DI 2 cx [orig:521 _435 ] [521])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 959 958 960 54 (set (reg:SF 21 xmm0 [orig:522 _436 ] [522])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [962])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [961])) [2 vrbls.v S4 A32])) "CALRCH.f":167 131 {*movsf_internal}
     (nil))
(insn 960 959 961 54 (set (reg:SF 22 xmm1 [orig:523 _437 ] [523])
        (plus:SF (reg:SF 22 xmm1 [orig:513 _427 ] [513])
            (reg:SF 21 xmm0 [orig:522 _436 ] [522]))) "CALRCH.f":167 838 {*fop_sf_comm}
     (nil))
(insn 961 960 962 54 (set (reg:SI 1 dx [963])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":167 86 {*movsi_internal}
     (nil))
(insn 962 961 963 54 (set (reg:DI 1 dx [orig:524 _438 ] [524])
        (sign_extend:DI (reg:SI 1 dx [963]))) "CALRCH.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 963 962 964 54 (parallel [
            (set (reg:DI 2 cx [orig:525 _439 ] [525])
                (mult:DI (reg:DI 1 dx [orig:524 _438 ] [524])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 349 {*muldi3_1}
     (nil))
(insn 964 963 965 54 (set (reg:SI 1 dx [964])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":167 86 {*movsi_internal}
     (nil))
(insn 965 964 966 54 (parallel [
            (set (reg:SI 1 dx [orig:526 _440 ] [526])
                (plus:SI (reg:SI 1 dx [964])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 966 965 967 54 (set (reg:DI 1 dx [orig:527 _441 ] [527])
        (sign_extend:DI (reg:SI 1 dx [orig:526 _440 ] [526]))) "CALRCH.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 967 966 968 54 (parallel [
            (set (reg:DI 1 dx [orig:528 _442 ] [528])
                (mult:DI (reg:DI 1 dx [orig:527 _441 ] [527])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 349 {*muldi3_1}
     (nil))
(insn 968 967 969 54 (parallel [
            (set (reg:DI 2 cx [orig:529 _443 ] [529])
                (plus:DI (reg:DI 2 cx [orig:525 _439 ] [525])
                    (reg:DI 1 dx [orig:528 _442 ] [528])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 969 968 970 54 (set (reg:SI 1 dx [965])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":167 86 {*movsi_internal}
     (nil))
(insn 970 969 971 54 (set (reg:DI 1 dx [orig:530 _444 ] [530])
        (sign_extend:DI (reg:SI 1 dx [965]))) "CALRCH.f":167 149 {*extendsidi2_rex64}
     (nil))
(insn 971 970 972 54 (parallel [
            (set (reg:DI 1 dx [orig:531 _445 ] [531])
                (plus:DI (reg:DI 1 dx [orig:530 _444 ] [530])
                    (reg:DI 2 cx [orig:529 _443 ] [529])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 972 971 973 54 (parallel [
            (set (reg:DI 2 cx [orig:532 _446 ] [532])
                (plus:DI (reg:DI 1 dx [orig:531 _445 ] [531])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 973 972 974 54 (set (reg/f:DI 1 dx [966])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":167 85 {*movdi_internal}
     (nil))
(insn 974 973 975 54 (parallel [
            (set (reg:DI 2 cx [967])
                (plus:DI (reg:DI 2 cx [orig:532 _446 ] [532])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":167 222 {*adddi_1}
     (nil))
(insn 975 974 976 54 (set (reg:SF 21 xmm0 [orig:533 _447 ] [533])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [967])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [966])) [2 vrbls.v S4 A32])) "CALRCH.f":167 131 {*movsf_internal}
     (nil))
(insn 976 975 978 54 (set (reg:SF 21 xmm0 [orig:534 _448 ] [534])
        (plus:SF (reg:SF 21 xmm0 [orig:533 _447 ] [533])
            (reg:SF 22 xmm1 [orig:523 _437 ] [523]))) "CALRCH.f":167 838 {*fop_sf_comm}
     (nil))
(insn 978 976 979 54 (set (reg:SF 21 xmm0 [968])
        (div:SF (reg:SF 21 xmm0 [orig:535 _449 ] [535])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [2 wndsl+0 S4 A32]))) "CALRCH.f":167 841 {*fop_sf_1}
     (nil))
(insn 979 978 980 54 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 vhkl+0 S4 A32])
        (reg:SF 21 xmm0 [968])) "CALRCH.f":167 131 {*movsf_internal}
     (nil))
(insn 980 979 981 54 (set (reg:SI 1 dx [969])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":169 86 {*movsi_internal}
     (nil))
(insn 981 980 982 54 (parallel [
            (set (reg:SI 1 dx [orig:536 _450 ] [536])
                (plus:SI (reg:SI 1 dx [969])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 982 981 983 54 (set (reg:DI 1 dx [orig:537 _451 ] [537])
        (sign_extend:DI (reg:SI 1 dx [orig:536 _450 ] [536]))) "CALRCH.f":169 149 {*extendsidi2_rex64}
     (nil))
(insn 983 982 984 54 (parallel [
            (set (reg:DI 2 cx [orig:538 _452 ] [538])
                (mult:DI (reg:DI 1 dx [orig:537 _451 ] [537])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 349 {*muldi3_1}
     (nil))
(insn 984 983 985 54 (set (reg:SI 1 dx [970])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":169 86 {*movsi_internal}
     (nil))
(insn 985 984 986 54 (parallel [
            (set (reg:SI 1 dx [orig:539 _453 ] [539])
                (plus:SI (reg:SI 1 dx [970])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 986 985 987 54 (set (reg:DI 1 dx [orig:540 _454 ] [540])
        (sign_extend:DI (reg:SI 1 dx [orig:539 _453 ] [539]))) "CALRCH.f":169 149 {*extendsidi2_rex64}
     (nil))
(insn 987 986 988 54 (parallel [
            (set (reg:DI 1 dx [orig:541 _455 ] [541])
                (mult:DI (reg:DI 1 dx [orig:540 _454 ] [540])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 349 {*muldi3_1}
     (nil))
(insn 988 987 989 54 (parallel [
            (set (reg:DI 2 cx [orig:542 _456 ] [542])
                (plus:DI (reg:DI 2 cx [orig:538 _452 ] [538])
                    (reg:DI 1 dx [orig:541 _455 ] [541])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 989 988 990 54 (set (reg:SI 1 dx [971])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":169 86 {*movsi_internal}
     (nil))
(insn 990 989 991 54 (set (reg:DI 1 dx [orig:543 _457 ] [543])
        (sign_extend:DI (reg:SI 1 dx [971]))) "CALRCH.f":169 149 {*extendsidi2_rex64}
     (nil))
(insn 991 990 992 54 (parallel [
            (set (reg:DI 1 dx [orig:544 _458 ] [544])
                (plus:DI (reg:DI 1 dx [orig:543 _457 ] [543])
                    (reg:DI 2 cx [orig:542 _456 ] [542])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 992 991 993 54 (parallel [
            (set (reg:DI 2 cx [orig:545 _459 ] [545])
                (plus:DI (reg:DI 1 dx [orig:544 _458 ] [544])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 993 992 994 54 (set (reg/f:DI 1 dx [972])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":169 85 {*movdi_internal}
     (nil))
(insn 994 993 995 54 (parallel [
            (set (reg:DI 2 cx [973])
                (plus:DI (reg:DI 2 cx [orig:545 _459 ] [545])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 995 994 996 54 (set (reg:SF 22 xmm1 [orig:546 _460 ] [546])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [973])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [972])) [2 vrbls.v S4 A32])) "CALRCH.f":169 131 {*movsf_internal}
     (nil))
(insn 996 995 997 54 (set (reg:SI 1 dx [974])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":169 86 {*movsi_internal}
     (nil))
(insn 997 996 998 54 (parallel [
            (set (reg:SI 1 dx [orig:547 _461 ] [547])
                (plus:SI (reg:SI 1 dx [974])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 998 997 999 54 (set (reg:DI 1 dx [orig:548 _462 ] [548])
        (sign_extend:DI (reg:SI 1 dx [orig:547 _461 ] [547]))) "CALRCH.f":169 149 {*extendsidi2_rex64}
     (nil))
(insn 999 998 1000 54 (parallel [
            (set (reg:DI 2 cx [orig:549 _463 ] [549])
                (mult:DI (reg:DI 1 dx [orig:548 _462 ] [548])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 349 {*muldi3_1}
     (nil))
(insn 1000 999 1001 54 (set (reg:SI 1 dx [975])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":169 86 {*movsi_internal}
     (nil))
(insn 1001 1000 1002 54 (set (reg:DI 1 dx [orig:550 _464 ] [550])
        (sign_extend:DI (reg:SI 1 dx [975]))) "CALRCH.f":169 149 {*extendsidi2_rex64}
     (nil))
(insn 1002 1001 1003 54 (parallel [
            (set (reg:DI 1 dx [orig:551 _465 ] [551])
                (mult:DI (reg:DI 1 dx [orig:550 _464 ] [550])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 349 {*muldi3_1}
     (nil))
(insn 1003 1002 1004 54 (parallel [
            (set (reg:DI 2 cx [orig:552 _466 ] [552])
                (plus:DI (reg:DI 2 cx [orig:549 _463 ] [549])
                    (reg:DI 1 dx [orig:551 _465 ] [551])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 1004 1003 1005 54 (set (reg:SI 1 dx [976])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iw+0 S4 A32])) "CALRCH.f":169 86 {*movsi_internal}
     (nil))
(insn 1005 1004 1006 54 (set (reg:DI 1 dx [orig:553 _467 ] [553])
        (sign_extend:DI (reg:SI 1 dx [976]))) "CALRCH.f":169 149 {*extendsidi2_rex64}
     (nil))
(insn 1006 1005 1007 54 (parallel [
            (set (reg:DI 1 dx [orig:554 _468 ] [554])
                (plus:DI (reg:DI 1 dx [orig:553 _467 ] [553])
                    (reg:DI 2 cx [orig:552 _466 ] [552])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 1007 1006 1008 54 (parallel [
            (set (reg:DI 2 cx [orig:555 _469 ] [555])
                (plus:DI (reg:DI 1 dx [orig:554 _468 ] [554])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 1008 1007 1009 54 (set (reg/f:DI 1 dx [977])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":169 85 {*movdi_internal}
     (nil))
(insn 1009 1008 1010 54 (parallel [
            (set (reg:DI 2 cx [978])
                (plus:DI (reg:DI 2 cx [orig:555 _469 ] [555])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 1010 1009 1011 54 (set (reg:SF 21 xmm0 [orig:556 _470 ] [556])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [978])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [977])) [2 vrbls.v S4 A32])) "CALRCH.f":169 131 {*movsf_internal}
     (nil))
(insn 1011 1010 1012 54 (set (reg:SF 22 xmm1 [orig:557 _471 ] [557])
        (plus:SF (reg:SF 22 xmm1 [orig:546 _460 ] [546])
            (reg:SF 21 xmm0 [orig:556 _470 ] [556]))) "CALRCH.f":169 838 {*fop_sf_comm}
     (nil))
(insn 1012 1011 1013 54 (set (reg:SI 1 dx [979])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":169 86 {*movsi_internal}
     (nil))
(insn 1013 1012 1014 54 (parallel [
            (set (reg:SI 1 dx [orig:558 _472 ] [558])
                (plus:SI (reg:SI 1 dx [979])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1014 1013 1015 54 (set (reg:DI 1 dx [orig:559 _473 ] [559])
        (sign_extend:DI (reg:SI 1 dx [orig:558 _472 ] [558]))) "CALRCH.f":169 149 {*extendsidi2_rex64}
     (nil))
(insn 1015 1014 1016 54 (parallel [
            (set (reg:DI 2 cx [orig:560 _474 ] [560])
                (mult:DI (reg:DI 1 dx [orig:559 _473 ] [559])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 349 {*muldi3_1}
     (nil))
(insn 1016 1015 1017 54 (set (reg:SI 1 dx [980])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":169 86 {*movsi_internal}
     (nil))
(insn 1017 1016 1018 54 (set (reg:DI 1 dx [orig:561 _475 ] [561])
        (sign_extend:DI (reg:SI 1 dx [980]))) "CALRCH.f":169 149 {*extendsidi2_rex64}
     (nil))
(insn 1018 1017 1019 54 (parallel [
            (set (reg:DI 1 dx [orig:562 _476 ] [562])
                (mult:DI (reg:DI 1 dx [orig:561 _475 ] [561])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 349 {*muldi3_1}
     (nil))
(insn 1019 1018 1020 54 (parallel [
            (set (reg:DI 2 cx [orig:563 _477 ] [563])
                (plus:DI (reg:DI 2 cx [orig:560 _474 ] [560])
                    (reg:DI 1 dx [orig:562 _476 ] [562])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 1020 1019 1021 54 (set (reg:SI 1 dx [981])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ie+0 S4 A32])) "CALRCH.f":169 86 {*movsi_internal}
     (nil))
(insn 1021 1020 1022 54 (set (reg:DI 1 dx [orig:564 _478 ] [564])
        (sign_extend:DI (reg:SI 1 dx [981]))) "CALRCH.f":169 149 {*extendsidi2_rex64}
     (nil))
(insn 1022 1021 1023 54 (parallel [
            (set (reg:DI 1 dx [orig:565 _479 ] [565])
                (plus:DI (reg:DI 1 dx [orig:564 _478 ] [564])
                    (reg:DI 2 cx [orig:563 _477 ] [563])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 1023 1022 1024 54 (parallel [
            (set (reg:DI 2 cx [orig:566 _480 ] [566])
                (plus:DI (reg:DI 1 dx [orig:565 _479 ] [565])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 1024 1023 1025 54 (set (reg/f:DI 1 dx [982])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":169 85 {*movdi_internal}
     (nil))
(insn 1025 1024 1026 54 (parallel [
            (set (reg:DI 2 cx [983])
                (plus:DI (reg:DI 2 cx [orig:566 _480 ] [566])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 1026 1025 1027 54 (set (reg:SF 21 xmm0 [orig:567 _481 ] [567])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [983])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [982])) [2 vrbls.v S4 A32])) "CALRCH.f":169 131 {*movsf_internal}
     (nil))
(insn 1027 1026 1028 54 (set (reg:SF 22 xmm1 [orig:568 _482 ] [568])
        (plus:SF (reg:SF 22 xmm1 [orig:557 _471 ] [557])
            (reg:SF 21 xmm0 [orig:567 _481 ] [567]))) "CALRCH.f":169 838 {*fop_sf_comm}
     (nil))
(insn 1028 1027 1029 54 (set (reg:SI 1 dx [984])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":169 86 {*movsi_internal}
     (nil))
(insn 1029 1028 1030 54 (parallel [
            (set (reg:SI 1 dx [orig:569 _483 ] [569])
                (plus:SI (reg:SI 1 dx [984])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1030 1029 1031 54 (set (reg:DI 1 dx [orig:570 _484 ] [570])
        (sign_extend:DI (reg:SI 1 dx [orig:569 _483 ] [569]))) "CALRCH.f":169 149 {*extendsidi2_rex64}
     (nil))
(insn 1031 1030 1032 54 (parallel [
            (set (reg:DI 2 cx [orig:571 _485 ] [571])
                (mult:DI (reg:DI 1 dx [orig:570 _484 ] [570])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 349 {*muldi3_1}
     (nil))
(insn 1032 1031 1033 54 (set (reg:SI 1 dx [985])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":169 86 {*movsi_internal}
     (nil))
(insn 1033 1032 1034 54 (parallel [
            (set (reg:SI 1 dx [orig:572 _486 ] [572])
                (plus:SI (reg:SI 1 dx [985])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1034 1033 1035 54 (set (reg:DI 1 dx [orig:573 _487 ] [573])
        (sign_extend:DI (reg:SI 1 dx [orig:572 _486 ] [572]))) "CALRCH.f":169 149 {*extendsidi2_rex64}
     (nil))
(insn 1035 1034 1036 54 (parallel [
            (set (reg:DI 1 dx [orig:574 _488 ] [574])
                (mult:DI (reg:DI 1 dx [orig:573 _487 ] [573])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 349 {*muldi3_1}
     (nil))
(insn 1036 1035 1037 54 (parallel [
            (set (reg:DI 2 cx [orig:575 _489 ] [575])
                (plus:DI (reg:DI 2 cx [orig:571 _485 ] [571])
                    (reg:DI 1 dx [orig:574 _488 ] [574])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 1037 1036 1038 54 (set (reg:SI 1 dx [986])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":169 86 {*movsi_internal}
     (nil))
(insn 1038 1037 1039 54 (set (reg:DI 1 dx [orig:576 _490 ] [576])
        (sign_extend:DI (reg:SI 1 dx [986]))) "CALRCH.f":169 149 {*extendsidi2_rex64}
     (nil))
(insn 1039 1038 1040 54 (parallel [
            (set (reg:DI 1 dx [orig:577 _491 ] [577])
                (plus:DI (reg:DI 1 dx [orig:576 _490 ] [576])
                    (reg:DI 2 cx [orig:575 _489 ] [575])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 1040 1039 1041 54 (parallel [
            (set (reg:DI 2 cx [orig:578 _492 ] [578])
                (plus:DI (reg:DI 1 dx [orig:577 _491 ] [577])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 1041 1040 1042 54 (set (reg/f:DI 1 dx [987])
        (symbol_ref:DI ("vrbls_") [flags 0x202]  <var_decl 0x7fe96ef1b900 vrbls>)) "CALRCH.f":169 85 {*movdi_internal}
     (nil))
(insn 1042 1041 1043 54 (parallel [
            (set (reg:DI 2 cx [988])
                (plus:DI (reg:DI 2 cx [orig:578 _492 ] [578])
                    (const_int 1214871 [0x128997])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":169 222 {*adddi_1}
     (nil))
(insn 1043 1042 1044 54 (set (reg:SF 21 xmm0 [orig:579 _493 ] [579])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [988])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [987])) [2 vrbls.v S4 A32])) "CALRCH.f":169 131 {*movsf_internal}
     (nil))
(insn 1044 1043 1046 54 (set (reg:SF 21 xmm0 [orig:580 _494 ] [580])
        (plus:SF (reg:SF 21 xmm0 [orig:579 _493 ] [579])
            (reg:SF 22 xmm1 [orig:568 _482 ] [568]))) "CALRCH.f":169 838 {*fop_sf_comm}
     (nil))
(insn 1046 1044 1047 54 (set (reg:SF 21 xmm0 [989])
        (div:SF (reg:SF 21 xmm0 [orig:581 _495 ] [581])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [2 wndslp+0 S4 A32]))) "CALRCH.f":169 841 {*fop_sf_1}
     (nil))
(insn 1047 1046 1048 54 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 vlkl+0 S4 A32])
        (reg:SF 21 xmm0 [989])) "CALRCH.f":169 131 {*movsf_internal}
     (nil))
(insn 1048 1047 1049 54 (set (reg:SI 1 dx [990])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":170 86 {*movsi_internal}
     (nil))
(insn 1049 1048 1050 54 (set (reg:DI 1 dx [orig:582 _496 ] [582])
        (sign_extend:DI (reg:SI 1 dx [990]))) "CALRCH.f":170 149 {*extendsidi2_rex64}
     (nil))
(insn 1050 1049 1051 54 (parallel [
            (set (reg:DI 2 cx [orig:583 _497 ] [583])
                (mult:DI (reg:DI 1 dx [orig:582 _496 ] [582])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":170 349 {*muldi3_1}
     (nil))
(insn 1051 1050 1052 54 (set (reg:SI 1 dx [991])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":170 86 {*movsi_internal}
     (nil))
(insn 1052 1051 1053 54 (set (reg:DI 1 dx [orig:584 _498 ] [584])
        (sign_extend:DI (reg:SI 1 dx [991]))) "CALRCH.f":170 149 {*extendsidi2_rex64}
     (nil))
(insn 1053 1052 1054 54 (parallel [
            (set (reg:DI 1 dx [orig:585 _499 ] [585])
                (mult:DI (reg:DI 1 dx [orig:584 _498 ] [584])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":170 349 {*muldi3_1}
     (nil))
(insn 1054 1053 1055 54 (parallel [
            (set (reg:DI 2 cx [orig:586 _500 ] [586])
                (plus:DI (reg:DI 2 cx [orig:583 _497 ] [583])
                    (reg:DI 1 dx [orig:585 _499 ] [585])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":170 222 {*adddi_1}
     (nil))
(insn 1055 1054 1056 54 (set (reg:SI 1 dx [992])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":170 86 {*movsi_internal}
     (nil))
(insn 1056 1055 1057 54 (set (reg:DI 1 dx [orig:587 _501 ] [587])
        (sign_extend:DI (reg:SI 1 dx [992]))) "CALRCH.f":170 149 {*extendsidi2_rex64}
     (nil))
(insn 1057 1056 1058 54 (parallel [
            (set (reg:DI 1 dx [orig:588 _502 ] [588])
                (plus:DI (reg:DI 1 dx [orig:587 _501 ] [587])
                    (reg:DI 2 cx [orig:586 _500 ] [586])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":170 222 {*adddi_1}
     (nil))
(insn 1058 1057 1059 54 (parallel [
            (set (reg:DI 2 cx [orig:589 _503 ] [589])
                (plus:DI (reg:DI 1 dx [orig:588 _502 ] [588])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":170 222 {*adddi_1}
     (nil))
(insn 1059 1058 1060 54 (set (reg/f:DI 1 dx [993])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7fe96eef8870 extra>)) "CALRCH.f":170 85 {*movdi_internal}
     (nil))
(insn 1060 1059 1061 54 (parallel [
            (set (reg:DI 2 cx [994])
                (plus:DI (reg:DI 2 cx [orig:589 _503 ] [589])
                    (const_int 2311218 [0x234432])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":170 222 {*adddi_1}
     (nil))
(insn 1061 1060 1062 54 (set (reg:SF 21 xmm0 [orig:590 _504 ] [590])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [994])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [993])) [2 extra.zint S4 A32])) "CALRCH.f":170 131 {*movsf_internal}
     (nil))
(insn 1062 1061 1063 54 (set (reg:SI 1 dx [995])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":170 86 {*movsi_internal}
     (nil))
(insn 1063 1062 1064 54 (parallel [
            (set (reg:SI 1 dx [orig:591 _505 ] [591])
                (plus:SI (reg:SI 1 dx [995])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":170 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 1064 1063 1065 54 (set (reg:DI 1 dx [orig:592 _506 ] [592])
        (sign_extend:DI (reg:SI 1 dx [orig:591 _505 ] [591]))) "CALRCH.f":170 149 {*extendsidi2_rex64}
     (nil))
(insn 1065 1064 1066 54 (parallel [
            (set (reg:DI 2 cx [orig:593 _507 ] [593])
                (mult:DI (reg:DI 1 dx [orig:592 _506 ] [592])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":170 349 {*muldi3_1}
     (nil))
(insn 1066 1065 1067 54 (set (reg:SI 1 dx [996])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":170 86 {*movsi_internal}
     (nil))
(insn 1067 1066 1068 54 (set (reg:DI 1 dx [orig:594 _508 ] [594])
        (sign_extend:DI (reg:SI 1 dx [996]))) "CALRCH.f":170 149 {*extendsidi2_rex64}
     (nil))
(insn 1068 1067 1069 54 (parallel [
            (set (reg:DI 1 dx [orig:595 _509 ] [595])
                (mult:DI (reg:DI 1 dx [orig:594 _508 ] [594])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":170 349 {*muldi3_1}
     (nil))
(insn 1069 1068 1070 54 (parallel [
            (set (reg:DI 2 cx [orig:596 _510 ] [596])
                (plus:DI (reg:DI 2 cx [orig:593 _507 ] [593])
                    (reg:DI 1 dx [orig:595 _509 ] [595])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":170 222 {*adddi_1}
     (nil))
(insn 1070 1069 1071 54 (set (reg:SI 1 dx [997])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":170 86 {*movsi_internal}
     (nil))
(insn 1071 1070 1072 54 (set (reg:DI 1 dx [orig:597 _511 ] [597])
        (sign_extend:DI (reg:SI 1 dx [997]))) "CALRCH.f":170 149 {*extendsidi2_rex64}
     (nil))
(insn 1072 1071 1073 54 (parallel [
            (set (reg:DI 1 dx [orig:598 _512 ] [598])
                (plus:DI (reg:DI 1 dx [orig:597 _511 ] [597])
                    (reg:DI 2 cx [orig:596 _510 ] [596])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":170 222 {*adddi_1}
     (nil))
(insn 1073 1072 1074 54 (parallel [
            (set (reg:DI 2 cx [orig:599 _513 ] [599])
                (plus:DI (reg:DI 1 dx [orig:598 _512 ] [598])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":170 222 {*adddi_1}
     (nil))
(insn 1074 1073 1075 54 (set (reg/f:DI 1 dx [998])
        (symbol_ref:DI ("extra_") [flags 0x202]  <var_decl 0x7fe96eef8870 extra>)) "CALRCH.f":170 85 {*movdi_internal}
     (nil))
(insn 1075 1074 1076 54 (parallel [
            (set (reg:DI 2 cx [999])
                (plus:DI (reg:DI 2 cx [orig:599 _513 ] [599])
                    (const_int 2311218 [0x234432])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":170 222 {*adddi_1}
     (nil))
(insn 1076 1075 1077 54 (set (reg:SF 22 xmm1 [orig:600 _514 ] [600])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [999])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [998])) [2 extra.zint S4 A32])) "CALRCH.f":170 131 {*movsf_internal}
     (nil))
(insn 1077 1076 1078 54 (set (reg:SF 21 xmm0 [orig:601 _515 ] [601])
        (minus:SF (reg:SF 21 xmm0 [orig:590 _504 ] [590])
            (reg:SF 22 xmm1 [orig:600 _514 ] [600]))) "CALRCH.f":170 841 {*fop_sf_1}
     (nil))
(insn 1078 1077 1079 54 (set (reg:SF 22 xmm1 [orig:602 _516 ] [602])
        (reg:SF 21 xmm0 [orig:601 _515 ] [601])) "CALRCH.f":170 131 {*movsf_internal}
     (nil))
(insn 1079 1078 1080 54 (set (reg:SF 21 xmm0 [1001])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S4 A32])) "CALRCH.f":170 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 1080 1079 1081 54 (set (reg:SF 21 xmm0 [1000])
        (mult:SF (reg:SF 21 xmm0 [1001])
            (reg:SF 22 xmm1 [orig:602 _516 ] [602]))) "CALRCH.f":170 838 {*fop_sf_comm}
     (nil))
(insn 1081 1080 1082 54 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [2 dzkl+0 S4 A32])
        (reg:SF 21 xmm0 [1000])) "CALRCH.f":170 131 {*movsf_internal}
     (nil))
(insn 1082 1081 1083 54 (set (reg:SF 21 xmm0 [1003])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S4 A32])) "CALRCH.f":171 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 1083 1082 1084 54 (set (reg:SF 21 xmm0 [1002])
        (div:SF (reg:SF 21 xmm0 [1003])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [2 dzkl+0 S4 A32]))) "CALRCH.f":171 841 {*fop_sf_1}
     (nil))
(insn 1084 1083 1085 54 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 rdzkl+0 S4 A32])
        (reg:SF 21 xmm0 [1002])) "CALRCH.f":171 131 {*movsf_internal}
     (nil))
(insn 1085 1084 1086 54 (set (reg:SI 1 dx [1004])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":172 86 {*movsi_internal}
     (nil))
(insn 1086 1085 1087 54 (set (reg:DI 1 dx [orig:603 _517 ] [603])
        (sign_extend:DI (reg:SI 1 dx [1004]))) "CALRCH.f":172 149 {*extendsidi2_rex64}
     (nil))
(insn 1087 1086 1088 54 (parallel [
            (set (reg:DI 2 cx [orig:604 _518 ] [604])
                (mult:DI (reg:DI 1 dx [orig:603 _517 ] [603])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":172 349 {*muldi3_1}
     (nil))
(insn 1088 1087 1089 54 (set (reg:SI 1 dx [1005])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":172 86 {*movsi_internal}
     (nil))
(insn 1089 1088 1090 54 (set (reg:DI 1 dx [orig:605 _519 ] [605])
        (sign_extend:DI (reg:SI 1 dx [1005]))) "CALRCH.f":172 149 {*extendsidi2_rex64}
     (nil))
(insn 1090 1089 1091 54 (parallel [
            (set (reg:DI 1 dx [orig:606 _520 ] [606])
                (mult:DI (reg:DI 1 dx [orig:605 _519 ] [605])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":172 349 {*muldi3_1}
     (nil))
(insn 1091 1090 1092 54 (parallel [
            (set (reg:DI 2 cx [orig:607 _521 ] [607])
                (plus:DI (reg:DI 2 cx [orig:604 _518 ] [604])
                    (reg:DI 1 dx [orig:606 _520 ] [606])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":172 222 {*adddi_1}
     (nil))
(insn 1092 1091 1093 54 (set (reg:SI 1 dx [1006])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":172 86 {*movsi_internal}
     (nil))
(insn 1093 1092 1094 54 (set (reg:DI 1 dx [orig:608 _522 ] [608])
        (sign_extend:DI (reg:SI 1 dx [1006]))) "CALRCH.f":172 149 {*extendsidi2_rex64}
     (nil))
(insn 1094 1093 1095 54 (parallel [
            (set (reg:DI 1 dx [orig:609 _523 ] [609])
                (plus:DI (reg:DI 1 dx [orig:608 _522 ] [608])
                    (reg:DI 2 cx [orig:607 _521 ] [607])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":172 222 {*adddi_1}
     (nil))
(insn 1095 1094 1096 54 (parallel [
            (set (reg:DI 2 cx [orig:610 _524 ] [610])
                (plus:DI (reg:DI 1 dx [orig:609 _523 ] [609])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":172 222 {*adddi_1}
     (nil))
(insn 1096 1095 1097 54 (set (reg/f:DI 1 dx [1007])
        (symbol_ref:DI ("pvrbls_") [flags 0x202]  <var_decl 0x7fe96ef14cf0 pvrbls>)) "CALRCH.f":172 85 {*movdi_internal}
     (nil))
(insn 1097 1096 1098 54 (parallel [
            (set (reg:DI 2 cx [1008])
                (plus:DI (reg:DI 2 cx [orig:610 _524 ] [610])
                    (const_int 562989 [0x8972d])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":172 222 {*adddi_1}
     (nil))
(insn 1098 1097 1099 54 (set (reg:SF 21 xmm0 [orig:671 M.0_602 ] [671])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [1008])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [1007])) [2 pvrbls.q2 S4 A32])) "CALRCH.f":172 131 {*movsf_internal}
     (nil))
(insn 1099 1098 1100 54 (set (reg:SF 22 xmm1 [1011])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S4 A32])) "CALRCH.f":172 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.99999974737875163555145263671875e-6 [0x0.a7c5acp-16])
        (nil)))
(insn 1100 1099 1101 54 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 22 xmm1 [1011])
            (reg:SF 21 xmm0 [orig:671 M.0_602 ] [671]))) "CALRCH.f":172 53 {*cmpisf}
     (nil))
(insn 1101 1100 1102 54 (set (reg:QI 1 dx [1010])
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "CALRCH.f":172 678 {*setcc_qi}
     (nil))
(insn 1102 1101 1103 54 (set (reg:SI 2 cx [orig:611 _525 ] [611])
        (zero_extend:SI (reg:QI 1 dx [1010]))) "CALRCH.f":172 140 {*zero_extendqisi2}
     (nil))
(insn 1103 1102 1104 54 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [orig:671 M.0_602 ] [671])
                    (reg:SF 21 xmm0 [orig:671 M.0_602 ] [671]))
            ] UNSPEC_NOTRAP)) "CALRCH.f":172 54 {*cmpiusf}
     (nil))
(insn 1104 1103 1105 54 (set (reg:QI 1 dx [1012])
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "CALRCH.f":172 678 {*setcc_qi}
     (nil))
(insn 1105 1104 1106 54 (set (reg:SI 1 dx [orig:612 _526 ] [612])
        (zero_extend:SI (reg:QI 1 dx [1012]))) "CALRCH.f":172 140 {*zero_extendqisi2}
     (nil))
(insn 1106 1105 1107 54 (parallel [
            (set (reg:SI 1 dx [orig:613 _527 ] [613])
                (ior:SI (reg:SI 1 dx [orig:612 _526 ] [612])
                    (reg:SI 2 cx [orig:611 _525 ] [611])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":172 450 {*iorsi_1}
     (nil))
(insn 1107 1106 1108 54 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:613 _527 ] [613])
            (const_int 0 [0]))) "CALRCH.f":172 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1108 1107 1109 54 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1111)
            (pc))) "CALRCH.f":172 682 {*jcc}
     (nil)
 -> 1111)
;;  succ:       55 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 671 702

;; basic block 55, loop depth 0, maybe hot
;;  prev block 54, next block 56, flags: (RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 671
(note 1109 1108 1110 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 1110 1109 1111 55 (set (reg:SF 21 xmm0 [orig:671 M.0_602 ] [671])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S4 A32])) "CALRCH.f":172 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.99999974737875163555145263671875e-6 [0x0.a7c5acp-16])
        (nil)))
;;  succ:       56 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 671 702

;; basic block 56, loop depth 0, maybe hot
;;  prev block 55, next block 57, flags: (RTL, MODIFIED)
;;  pred:       54
;;              55 (FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 671 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 671
;; lr  def 	 17 [flags] 614 615 616 617 618 619 620 621 622 623 624 672 1013 1014 1015 1016 1017 1018 1020 1021 1022
(code_label 1111 1110 1112 56 36 (nil) [1 uses])
(note 1112 1111 1113 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 1113 1112 1114 56 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [2 q2kl+0 S4 A32])
        (reg:SF 21 xmm0 [orig:671 M.0_602 ] [671])) "CALRCH.f":172 131 {*movsf_internal}
     (nil))
(insn 1114 1113 1115 56 (set (reg:SF 21 xmm0 [1013])
        (sqrt:SF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [2 q2kl+0 S4 A32]))) "CALRCH.f":173 872 {*sqrtsf2_sse}
     (nil))
(insn 1115 1114 1116 56 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 qroot+0 S4 A32])
        (reg:SF 21 xmm0 [1013])) "CALRCH.f":173 131 {*movsf_internal}
     (nil))
(insn 1116 1115 1117 56 (set (reg:SI 1 dx [1014])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":174 86 {*movsi_internal}
     (nil))
(insn 1117 1116 1118 56 (set (reg:DI 1 dx [orig:614 _528 ] [614])
        (sign_extend:DI (reg:SI 1 dx [1014]))) "CALRCH.f":174 149 {*extendsidi2_rex64}
     (nil))
(insn 1118 1117 1119 56 (parallel [
            (set (reg:DI 2 cx [orig:615 _529 ] [615])
                (mult:DI (reg:DI 1 dx [orig:614 _528 ] [614])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":174 349 {*muldi3_1}
     (nil))
(insn 1119 1118 1120 56 (set (reg:SI 1 dx [1015])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":174 86 {*movsi_internal}
     (nil))
(insn 1120 1119 1121 56 (set (reg:DI 1 dx [orig:616 _530 ] [616])
        (sign_extend:DI (reg:SI 1 dx [1015]))) "CALRCH.f":174 149 {*extendsidi2_rex64}
     (nil))
(insn 1121 1120 1122 56 (parallel [
            (set (reg:DI 1 dx [orig:617 _531 ] [617])
                (mult:DI (reg:DI 1 dx [orig:616 _530 ] [616])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":174 349 {*muldi3_1}
     (nil))
(insn 1122 1121 1123 56 (parallel [
            (set (reg:DI 2 cx [orig:618 _532 ] [618])
                (plus:DI (reg:DI 2 cx [orig:615 _529 ] [615])
                    (reg:DI 1 dx [orig:617 _531 ] [617])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":174 222 {*adddi_1}
     (nil))
(insn 1123 1122 1124 56 (set (reg:SI 1 dx [1016])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":174 86 {*movsi_internal}
     (nil))
(insn 1124 1123 1125 56 (set (reg:DI 1 dx [orig:619 _533 ] [619])
        (sign_extend:DI (reg:SI 1 dx [1016]))) "CALRCH.f":174 149 {*extendsidi2_rex64}
     (nil))
(insn 1125 1124 1126 56 (parallel [
            (set (reg:DI 1 dx [orig:620 _534 ] [620])
                (plus:DI (reg:DI 1 dx [orig:619 _533 ] [619])
                    (reg:DI 2 cx [orig:618 _532 ] [618])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":174 222 {*adddi_1}
     (nil))
(insn 1126 1125 1127 56 (parallel [
            (set (reg:DI 2 cx [orig:621 _535 ] [621])
                (plus:DI (reg:DI 1 dx [orig:620 _534 ] [620])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":174 222 {*adddi_1}
     (nil))
(insn 1127 1126 1128 56 (set (reg/f:DI 1 dx [1017])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 el+0 S8 A64])) "CALRCH.f":174 85 {*movdi_internal}
     (nil))
(insn 1128 1127 1129 56 (set (reg:SF 21 xmm0 [1018])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:621 _535 ] [621])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [1017])) [2 *el_715(D) S4 A32])) "CALRCH.f":174 131 {*movsf_internal}
     (nil))
(insn 1129 1128 1130 56 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [2 elkl+0 S4 A32])
        (reg:SF 21 xmm0 [1018])) "CALRCH.f":174 131 {*movsf_internal}
     (nil))
(insn 1130 1129 1131 56 (set (reg:SF 21 xmm0 [orig:672 M.1_603 ] [672])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [2 elkl+0 S4 A32])) "CALRCH.f":175 131 {*movsf_internal}
     (nil))
(insn 1131 1130 1132 56 (set (reg:SF 22 xmm1 [1021])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S4 A32])) "CALRCH.f":175 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.0000000298023223876953125e-1 [0x0.cccccdp-2])
        (nil)))
(insn 1132 1131 1133 56 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 22 xmm1 [1021])
            (reg:SF 21 xmm0 [orig:672 M.1_603 ] [672]))) "CALRCH.f":175 53 {*cmpisf}
     (nil))
(insn 1133 1132 1134 56 (set (reg:QI 1 dx [1020])
        (gt:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "CALRCH.f":175 678 {*setcc_qi}
     (nil))
(insn 1134 1133 1135 56 (set (reg:SI 2 cx [orig:622 _536 ] [622])
        (zero_extend:SI (reg:QI 1 dx [1020]))) "CALRCH.f":175 140 {*zero_extendqisi2}
     (nil))
(insn 1135 1134 1136 56 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:SF 21 xmm0 [orig:672 M.1_603 ] [672])
                    (reg:SF 21 xmm0 [orig:672 M.1_603 ] [672]))
            ] UNSPEC_NOTRAP)) "CALRCH.f":175 54 {*cmpiusf}
     (nil))
(insn 1136 1135 1137 56 (set (reg:QI 1 dx [1022])
        (unordered:QI (reg:CCFP 17 flags)
            (const_int 0 [0]))) "CALRCH.f":175 678 {*setcc_qi}
     (nil))
(insn 1137 1136 1138 56 (set (reg:SI 1 dx [orig:623 _537 ] [623])
        (zero_extend:SI (reg:QI 1 dx [1022]))) "CALRCH.f":175 140 {*zero_extendqisi2}
     (nil))
(insn 1138 1137 1139 56 (parallel [
            (set (reg:SI 1 dx [orig:624 _538 ] [624])
                (ior:SI (reg:SI 1 dx [orig:623 _537 ] [623])
                    (reg:SI 2 cx [orig:622 _536 ] [622])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":175 450 {*iorsi_1}
     (nil))
(insn 1139 1138 1140 56 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:624 _538 ] [624])
            (const_int 0 [0]))) "CALRCH.f":175 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1140 1139 1141 56 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1143)
            (pc))) "CALRCH.f":175 682 {*jcc}
     (nil)
 -> 1143)
;;  succ:       57 (FALLTHRU)
;;              58
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 672 702

;; basic block 57, loop depth 0, maybe hot
;;  prev block 56, next block 58, flags: (RTL, MODIFIED)
;;  pred:       56 (FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 672
(note 1141 1140 1142 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 1142 1141 1143 57 (set (reg:SF 21 xmm0 [orig:672 M.1_603 ] [672])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S4 A32])) "CALRCH.f":175 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.0000000298023223876953125e-1 [0x0.cccccdp-2])
        (nil)))
;;  succ:       58 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 672 702

;; basic block 58, loop depth 0, maybe hot
;;  prev block 57, next block 59, flags: (RTL, MODIFIED)
;;  pred:       56
;;              57 (FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 672 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 672
;; lr  def 	 17 [flags] 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 705 706 707 708 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040
(code_label 1143 1142 1144 58 37 (nil) [1 uses])
(note 1144 1143 1145 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 1145 1144 1146 58 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [2 elkl+0 S4 A32])
        (reg:SF 21 xmm0 [orig:672 M.1_603 ] [672])) "CALRCH.f":175 131 {*movsf_internal}
     (nil))
(insn 1146 1145 1147 58 (set (reg:SF 21 xmm0 [1024])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [2 elkl+0 S4 A32])) "CALRCH.f":176 131 {*movsf_internal}
     (nil))
(insn 1147 1146 1148 58 (set (reg:SF 21 xmm0 [1023])
        (mult:SF (reg:SF 21 xmm0 [1024])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [2 elkl+0 S4 A32]))) "CALRCH.f":176 838 {*fop_sf_comm}
     (nil))
(insn 1148 1147 1149 58 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [2 elklsq+0 S4 A32])
        (reg:SF 21 xmm0 [1023])) "CALRCH.f":176 131 {*movsf_internal}
     (nil))
(insn 1149 1148 1150 58 (set (reg:SI 1 dx [1025])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":177 86 {*movsi_internal}
     (nil))
(insn 1150 1149 1151 58 (set (reg:DI 1 dx [orig:625 _539 ] [625])
        (sign_extend:DI (reg:SI 1 dx [1025]))) "CALRCH.f":177 149 {*extendsidi2_rex64}
     (nil))
(insn 1151 1150 1152 58 (parallel [
            (set (reg:DI 2 cx [orig:626 _540 ] [626])
                (mult:DI (reg:DI 1 dx [orig:625 _539 ] [625])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":177 349 {*muldi3_1}
     (nil))
(insn 1152 1151 1153 58 (set (reg:SI 1 dx [1026])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":177 86 {*movsi_internal}
     (nil))
(insn 1153 1152 1154 58 (set (reg:DI 1 dx [orig:627 _541 ] [627])
        (sign_extend:DI (reg:SI 1 dx [1026]))) "CALRCH.f":177 149 {*extendsidi2_rex64}
     (nil))
(insn 1154 1153 1155 58 (parallel [
            (set (reg:DI 1 dx [orig:628 _542 ] [628])
                (mult:DI (reg:DI 1 dx [orig:627 _541 ] [627])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":177 349 {*muldi3_1}
     (nil))
(insn 1155 1154 1156 58 (parallel [
            (set (reg:DI 2 cx [orig:629 _543 ] [629])
                (plus:DI (reg:DI 2 cx [orig:626 _540 ] [626])
                    (reg:DI 1 dx [orig:628 _542 ] [628])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":177 222 {*adddi_1}
     (nil))
(insn 1156 1155 1157 58 (set (reg:SI 1 dx [1027])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":177 86 {*movsi_internal}
     (nil))
(insn 1157 1156 1158 58 (set (reg:DI 1 dx [orig:630 _544 ] [630])
        (sign_extend:DI (reg:SI 1 dx [1027]))) "CALRCH.f":177 149 {*extendsidi2_rex64}
     (nil))
(insn 1158 1157 1159 58 (parallel [
            (set (reg:DI 1 dx [orig:631 _545 ] [631])
                (plus:DI (reg:DI 1 dx [orig:630 _544 ] [630])
                    (reg:DI 2 cx [orig:629 _543 ] [629])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":177 222 {*adddi_1}
     (nil))
(insn 1159 1158 1160 58 (parallel [
            (set (reg:DI 2 cx [orig:632 _546 ] [632])
                (plus:DI (reg:DI 1 dx [orig:631 _545 ] [631])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":177 222 {*adddi_1}
     (nil))
(insn 1160 1159 1161 58 (set (reg/f:DI 1 dx [1028])
        (symbol_ref:DI ("thv.4234") [flags 0x202]  <var_decl 0x7fe96ef1e900 thv>)) "CALRCH.f":177 85 {*movdi_internal}
     (nil))
(insn 1161 1160 1162 58 (set (reg:SF 21 xmm0 [orig:633 _547 ] [633])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:632 _546 ] [632])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [1028])) [2 thv S4 A32])) "CALRCH.f":177 131 {*movsf_internal}
     (nil))
(insn 1162 1161 1163 58 (set (reg:SI 1 dx [1029])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":177 86 {*movsi_internal}
     (nil))
(insn 1163 1162 1164 58 (parallel [
            (set (reg:SI 1 dx [orig:634 _548 ] [634])
                (plus:SI (reg:SI 1 dx [1029])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":177 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 l+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1164 1163 1165 58 (set (reg:DI 1 dx [orig:635 _549 ] [635])
        (sign_extend:DI (reg:SI 1 dx [orig:634 _548 ] [634]))) "CALRCH.f":177 149 {*extendsidi2_rex64}
     (nil))
(insn 1165 1164 1166 58 (parallel [
            (set (reg:DI 2 cx [orig:636 _550 ] [636])
                (mult:DI (reg:DI 1 dx [orig:635 _549 ] [635])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":177 349 {*muldi3_1}
     (nil))
(insn 1166 1165 1167 58 (set (reg:SI 1 dx [1030])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":177 86 {*movsi_internal}
     (nil))
(insn 1167 1166 1168 58 (set (reg:DI 1 dx [orig:637 _551 ] [637])
        (sign_extend:DI (reg:SI 1 dx [1030]))) "CALRCH.f":177 149 {*extendsidi2_rex64}
     (nil))
(insn 1168 1167 1169 58 (parallel [
            (set (reg:DI 1 dx [orig:638 _552 ] [638])
                (mult:DI (reg:DI 1 dx [orig:637 _551 ] [637])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":177 349 {*muldi3_1}
     (nil))
(insn 1169 1168 1170 58 (parallel [
            (set (reg:DI 2 cx [orig:639 _553 ] [639])
                (plus:DI (reg:DI 2 cx [orig:636 _550 ] [636])
                    (reg:DI 1 dx [orig:638 _552 ] [638])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":177 222 {*adddi_1}
     (nil))
(insn 1170 1169 1171 58 (set (reg:SI 1 dx [1031])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":177 86 {*movsi_internal}
     (nil))
(insn 1171 1170 1172 58 (set (reg:DI 1 dx [orig:640 _554 ] [640])
        (sign_extend:DI (reg:SI 1 dx [1031]))) "CALRCH.f":177 149 {*extendsidi2_rex64}
     (nil))
(insn 1172 1171 1173 58 (parallel [
            (set (reg:DI 1 dx [orig:641 _555 ] [641])
                (plus:DI (reg:DI 1 dx [orig:640 _554 ] [640])
                    (reg:DI 2 cx [orig:639 _553 ] [639])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":177 222 {*adddi_1}
     (nil))
(insn 1173 1172 1174 58 (parallel [
            (set (reg:DI 2 cx [orig:642 _556 ] [642])
                (plus:DI (reg:DI 1 dx [orig:641 _555 ] [641])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":177 222 {*adddi_1}
     (nil))
(insn 1174 1173 1175 58 (set (reg/f:DI 1 dx [1032])
        (symbol_ref:DI ("thv.4234") [flags 0x202]  <var_decl 0x7fe96ef1e900 thv>)) "CALRCH.f":177 85 {*movdi_internal}
     (nil))
(insn 1175 1174 1176 58 (set (reg:SF 22 xmm1 [orig:643 _557 ] [643])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:642 _556 ] [642])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [1032])) [2 thv S4 A32])) "CALRCH.f":177 131 {*movsf_internal}
     (nil))
(insn 1176 1175 1177 58 (set (reg:SF 21 xmm0 [1033])
        (minus:SF (reg:SF 21 xmm0 [orig:633 _547 ] [633])
            (reg:SF 22 xmm1 [orig:643 _557 ] [643]))) "CALRCH.f":177 841 {*fop_sf_1}
     (nil))
(insn 1177 1176 1178 58 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [2 dthvkl+0 S4 A32])
        (reg:SF 21 xmm0 [1033])) "CALRCH.f":177 131 {*movsf_internal}
     (nil))
(insn 1178 1177 1179 58 (set (reg:SF 21 xmm0 [1034])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 uhkl+0 S4 A32])) "CALRCH.f":178 131 {*movsf_internal}
     (nil))
(insn 1179 1178 1180 58 (set (reg:SF 21 xmm0 [orig:644 _558 ] [644])
        (minus:SF (reg:SF 21 xmm0 [1034])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [2 ulkl+0 S4 A32]))) "CALRCH.f":178 841 {*fop_sf_1}
     (nil))
(insn 1180 1179 1181 58 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [2 dukl+0 S4 A32])
        (reg:SF 21 xmm0 [orig:644 _558 ] [644])) "CALRCH.f":178 131 {*movsf_internal}
     (nil))
(insn 1181 1180 1182 58 (set (reg:SF 21 xmm0 [1035])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 vhkl+0 S4 A32])) "CALRCH.f":179 131 {*movsf_internal}
     (nil))
(insn 1182 1181 1183 58 (set (reg:SF 21 xmm0 [orig:645 _559 ] [645])
        (minus:SF (reg:SF 21 xmm0 [1035])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [2 vlkl+0 S4 A32]))) "CALRCH.f":179 841 {*fop_sf_1}
     (nil))
(insn 1183 1182 1184 58 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [2 dvkl+0 S4 A32])
        (reg:SF 21 xmm0 [orig:645 _559 ] [645])) "CALRCH.f":179 131 {*movsf_internal}
     (nil))
(insn 1184 1183 1185 58 (set (reg:SF 21 xmm0 [1036])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [2 dukl+0 S4 A32])) "CALRCH.f":180 131 {*movsf_internal}
     (nil))
(insn 1185 1184 1375 58 (set (reg:SF 21 xmm0 [orig:646 _560 ] [646])
        (mult:SF (reg:SF 21 xmm0 [1036])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [2 rdzkl+0 S4 A32]))) "CALRCH.f":180 838 {*fop_sf_comm}
     (nil))
(insn 1375 1185 1187 58 (set (reg:SF 22 xmm1 [orig:705 _724 ] [705])
        (reg:SF 21 xmm0 [orig:705 _724 ] [705])) "CALRCH.f":180 131 {*movsf_internal}
     (nil))
(insn 1187 1375 1188 58 (set (reg:SF 22 xmm1 [orig:705 _724 ] [705])
        (mult:SF (reg:SF 22 xmm1 [orig:705 _724 ] [705])
            (reg:SF 21 xmm0 [orig:705 _724 ] [705]))) "CALRCH.f":180 838 {*fop_sf_comm}
     (nil))
(insn 1188 1187 1189 58 (set (reg:SF 21 xmm0 [1037])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [2 dvkl+0 S4 A32])) "CALRCH.f":180 131 {*movsf_internal}
     (nil))
(insn 1189 1188 1191 58 (set (reg:SF 21 xmm0 [orig:647 _561 ] [647])
        (mult:SF (reg:SF 21 xmm0 [1037])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [2 rdzkl+0 S4 A32]))) "CALRCH.f":180 838 {*fop_sf_comm}
     (nil))
(insn 1191 1189 1192 58 (set (reg:SF 21 xmm0 [orig:708 _727 ] [708])
        (mult:SF (reg:SF 21 xmm0 [orig:707 _726 ] [707])
            (reg:SF 21 xmm0 [orig:707 _726 ] [707]))) "CALRCH.f":180 838 {*fop_sf_comm}
     (nil))
(insn 1192 1191 1193 58 (set (reg:SF 21 xmm0 [orig:648 _562 ] [648])
        (plus:SF (reg:SF 21 xmm0 [orig:708 _727 ] [708])
            (reg:SF 22 xmm1 [orig:706 _725 ] [706]))) "CALRCH.f":180 838 {*fop_sf_comm}
     (nil))
(insn 1193 1192 1194 58 (set (reg/f:DI 1 dx [1038])
        (symbol_ref:DI ("phys_") [flags 0x202]  <var_decl 0x7fe96ef06ea0 phys>)) "CALRCH.f":180 85 {*movdi_internal}
     (nil))
(insn 1194 1193 1195 58 (set (mem/c:SF (plus:DI (reg/f:DI 1 dx [1038])
                (const_int 28 [0x1c])) [2 phys.cs+0 S4 A32])
        (reg:SF 21 xmm0 [orig:648 _562 ] [648])) "CALRCH.f":180 131 {*movsf_internal}
     (nil))
(insn 1195 1194 1196 58 (set (reg/f:DI 1 dx [1039])
        (symbol_ref:DI ("phys_") [flags 0x202]  <var_decl 0x7fe96ef06ea0 phys>)) "CALRCH.f":1 85 {*movdi_internal}
     (nil))
(insn 1196 1195 1197 58 (set (reg:SF 22 xmm1 [orig:649 _563 ] [649])
        (mem/c:SF (plus:DI (reg/f:DI 1 dx [1039])
                (const_int 28 [0x1c])) [2 phys.cs+0 S4 A32])) "CALRCH.f":1 131 {*movsf_internal}
     (nil))
(insn 1197 1196 1198 58 (set (reg:SF 21 xmm0 [1040])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC10") [flags 0x2]) [0  S4 A32])) "CALRCH.f":184 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.99999993922529029077850282192230224609375e-9 [0x0.abcc77p-26])
        (nil)))
(insn 1198 1197 1199 58 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:SF 21 xmm0 [1040])
            (reg:SF 22 xmm1 [orig:649 _563 ] [649]))) "CALRCH.f":184 53 {*cmpisf}
     (nil))
(jump_insn 1199 1198 1203 58 (set (pc)
        (if_then_else (unlt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1312)
            (pc))) "CALRCH.f":184 682 {*jcc}
     (nil)
 -> 1312)
;;  succ:       59 (FALLTHRU)
;;              60
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

;; basic block 59, loop depth 0, maybe hot
;;  prev block 58, next block 60, flags: (RTL, MODIFIED)
;;  pred:       58 (FALLTHRU)
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 650 651 652 653 654 655 656 657 658 1041 1042 1043 1044
(note 1203 1199 1204 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 1204 1203 1205 59 (set (reg:SI 1 dx [1041])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":189 86 {*movsi_internal}
     (nil))
(insn 1205 1204 1206 59 (set (reg:DI 1 dx [orig:650 _564 ] [650])
        (sign_extend:DI (reg:SI 1 dx [1041]))) "CALRCH.f":189 149 {*extendsidi2_rex64}
     (nil))
(insn 1206 1205 1207 59 (parallel [
            (set (reg:DI 2 cx [orig:651 _565 ] [651])
                (mult:DI (reg:DI 1 dx [orig:650 _564 ] [650])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":189 349 {*muldi3_1}
     (nil))
(insn 1207 1206 1208 59 (set (reg:SI 1 dx [1042])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":189 86 {*movsi_internal}
     (nil))
(insn 1208 1207 1209 59 (set (reg:DI 1 dx [orig:652 _566 ] [652])
        (sign_extend:DI (reg:SI 1 dx [1042]))) "CALRCH.f":189 149 {*extendsidi2_rex64}
     (nil))
(insn 1209 1208 1210 59 (parallel [
            (set (reg:DI 1 dx [orig:653 _567 ] [653])
                (mult:DI (reg:DI 1 dx [orig:652 _566 ] [652])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":189 349 {*muldi3_1}
     (nil))
(insn 1210 1209 1211 59 (parallel [
            (set (reg:DI 2 cx [orig:654 _568 ] [654])
                (plus:DI (reg:DI 2 cx [orig:651 _565 ] [651])
                    (reg:DI 1 dx [orig:653 _567 ] [653])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":189 222 {*adddi_1}
     (nil))
(insn 1211 1210 1212 59 (set (reg:SI 1 dx [1043])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":189 86 {*movsi_internal}
     (nil))
(insn 1212 1211 1213 59 (set (reg:DI 1 dx [orig:655 _569 ] [655])
        (sign_extend:DI (reg:SI 1 dx [1043]))) "CALRCH.f":189 149 {*extendsidi2_rex64}
     (nil))
(insn 1213 1212 1214 59 (parallel [
            (set (reg:DI 1 dx [orig:656 _570 ] [656])
                (plus:DI (reg:DI 1 dx [orig:655 _569 ] [655])
                    (reg:DI 2 cx [orig:654 _568 ] [654])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":189 222 {*adddi_1}
     (nil))
(insn 1214 1213 1215 59 (parallel [
            (set (reg:DI 2 cx [orig:657 _571 ] [657])
                (plus:DI (reg:DI 1 dx [orig:656 _570 ] [656])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":189 222 {*adddi_1}
     (nil))
(insn 1215 1214 1216 59 (set (reg:SF 21 xmm0 [orig:658 _572 ] [658])
        (mem/c:SF (symbol_ref:DI ("options_") [flags 0x2]  <var_decl 0x7fe96ef06240 options>) [2 options.spval+0 S4 A128])) "CALRCH.f":1 131 {*movsf_internal}
     (nil))
(insn 1216 1215 1217 59 (set (reg/f:DI 1 dx [1044])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [3 richno+0 S8 A64])) "CALRCH.f":189 85 {*movdi_internal}
     (nil))
(insn 1217 1216 1313 59 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:657 _571 ] [657])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [1044])) [2 *richno_631(D) S4 A32])
        (reg:SF 21 xmm0 [orig:658 _572 ] [658])) "CALRCH.f":189 131 {*movsf_internal}
     (nil))
(jump_insn 1313 1217 1314 59 (set (pc)
        (label_ref 1250)) 683 {jump}
     (nil)
 -> 1250)
;;  succ:       61 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

(barrier 1314 1313 1312)
;; basic block 60, loop depth 0, maybe hot
;;  prev block 59, next block 61, flags: (RTL, MODIFIED)
;;  pred:       58
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 659 660 661 662 663 664 665 666 667 668 669 670 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057
(code_label 1312 1314 1221 60 47 (nil) [1 uses])
(note 1221 1312 1222 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 1222 1221 1223 60 (set (reg:SF 22 xmm1 [1045])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [2 dthvkl+0 S4 A32])) "CALRCH.f":195 131 {*movsf_internal}
     (nil))
(insn 1223 1222 1224 60 (set (reg:SF 21 xmm0 [1046])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S4 A32])) "CALRCH.f":195 131 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.5966001451015472412109375e-2 [0x0.935116p-4])
        (nil)))
(insn 1224 1223 1225 60 (set (reg:SF 21 xmm0 [orig:659 _573 ] [659])
        (mult:SF (reg:SF 21 xmm0 [1046])
            (reg:SF 22 xmm1 [1045]))) "CALRCH.f":195 838 {*fop_sf_comm}
     (nil))
(insn 1225 1224 1226 60 (set (reg:SF 21 xmm0 [orig:660 _574 ] [660])
        (mult:SF (reg:SF 21 xmm0 [orig:659 _573 ] [659])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [2 rdzkl+0 S4 A32]))) "CALRCH.f":195 838 {*fop_sf_comm}
     (nil))
(insn 1226 1225 1227 60 (set (reg:V4SF 22 xmm1 [1048])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S16 A128])) "CALRCH.f":195 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 1227 1226 1228 60 (parallel [
            (set (reg:SF 21 xmm0 [1047])
                (neg:SF (reg:SF 21 xmm0 [orig:660 _574 ] [660])))
            (use (reg:V4SF 22 xmm1 [1048]))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":195 507 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:660 _574 ] [660]))
        (nil)))
(insn 1228 1227 1229 60 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [2 ct+0 S4 A32])
        (reg:SF 21 xmm0 [1047])) "CALRCH.f":195 131 {*movsf_internal}
     (nil))
(insn 1229 1228 1230 60 (set (reg/f:DI 1 dx [1049])
        (symbol_ref:DI ("phys_") [flags 0x202]  <var_decl 0x7fe96ef06ea0 phys>)) "CALRCH.f":1 85 {*movdi_internal}
     (nil))
(insn 1230 1229 1231 60 (set (reg:SF 22 xmm1 [orig:661 _575 ] [661])
        (mem/c:SF (plus:DI (reg/f:DI 1 dx [1049])
                (const_int 28 [0x1c])) [2 phys.cs+0 S4 A32])) "CALRCH.f":1 131 {*movsf_internal}
     (nil))
(insn 1231 1230 1232 60 (set (reg:SF 21 xmm0 [1050])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [2 ct+0 S4 A32])) "CALRCH.f":196 131 {*movsf_internal}
     (nil))
(insn 1232 1231 1233 60 (set (reg:SF 21 xmm0 [orig:662 _576 ] [662])
        (div:SF (reg:SF 21 xmm0 [1050])
            (reg:SF 22 xmm1 [orig:661 _575 ] [661]))) "CALRCH.f":196 841 {*fop_sf_1}
     (nil))
(insn 1233 1232 1234 60 (set (reg:V4SF 22 xmm1 [1052])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S16 A128])) "CALRCH.f":196 1282 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 1234 1233 1235 60 (parallel [
            (set (reg:SF 21 xmm0 [1051])
                (neg:SF (reg:SF 21 xmm0 [orig:662 _576 ] [662])))
            (use (reg:V4SF 22 xmm1 [1052]))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":196 507 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:662 _576 ] [662]))
        (nil)))
(insn 1235 1234 1236 60 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [2 ri+0 S4 A32])
        (reg:SF 21 xmm0 [1051])) "CALRCH.f":196 131 {*movsf_internal}
     (nil))
(insn 1236 1235 1237 60 (set (reg:SI 1 dx [1053])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])) "CALRCH.f":197 86 {*movsi_internal}
     (nil))
(insn 1237 1236 1238 60 (set (reg:DI 1 dx [orig:663 _577 ] [663])
        (sign_extend:DI (reg:SI 1 dx [1053]))) "CALRCH.f":197 149 {*extendsidi2_rex64}
     (nil))
(insn 1238 1237 1239 60 (parallel [
            (set (reg:DI 2 cx [orig:664 _578 ] [664])
                (mult:DI (reg:DI 1 dx [orig:663 _577 ] [663])
                    (const_int 29631 [0x73bf])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":197 349 {*muldi3_1}
     (nil))
(insn 1239 1238 1240 60 (set (reg:SI 1 dx [1054])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])) "CALRCH.f":197 86 {*movsi_internal}
     (nil))
(insn 1240 1239 1241 60 (set (reg:DI 1 dx [orig:665 _579 ] [665])
        (sign_extend:DI (reg:SI 1 dx [1054]))) "CALRCH.f":197 149 {*extendsidi2_rex64}
     (nil))
(insn 1241 1240 1242 60 (parallel [
            (set (reg:DI 1 dx [orig:666 _580 ] [666])
                (mult:DI (reg:DI 1 dx [orig:665 _579 ] [665])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":197 349 {*muldi3_1}
     (nil))
(insn 1242 1241 1243 60 (parallel [
            (set (reg:DI 2 cx [orig:667 _581 ] [667])
                (plus:DI (reg:DI 2 cx [orig:664 _578 ] [664])
                    (reg:DI 1 dx [orig:666 _580 ] [666])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":197 222 {*adddi_1}
     (nil))
(insn 1243 1242 1244 60 (set (reg:SI 1 dx [1055])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "CALRCH.f":197 86 {*movsi_internal}
     (nil))
(insn 1244 1243 1245 60 (set (reg:DI 1 dx [orig:668 _582 ] [668])
        (sign_extend:DI (reg:SI 1 dx [1055]))) "CALRCH.f":197 149 {*extendsidi2_rex64}
     (nil))
(insn 1245 1244 1246 60 (parallel [
            (set (reg:DI 1 dx [orig:669 _583 ] [669])
                (plus:DI (reg:DI 1 dx [orig:668 _582 ] [668])
                    (reg:DI 2 cx [orig:667 _581 ] [667])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":197 222 {*adddi_1}
     (nil))
(insn 1246 1245 1247 60 (parallel [
            (set (reg:DI 2 cx [orig:670 _584 ] [670])
                (plus:DI (reg:DI 1 dx [orig:669 _583 ] [669])
                    (const_int -29751 [0xffffffffffff8bc9])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":197 222 {*adddi_1}
     (nil))
(insn 1247 1246 1248 60 (set (reg/f:DI 1 dx [1056])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [3 richno+0 S8 A64])) "CALRCH.f":197 85 {*movdi_internal}
     (nil))
(insn 1248 1247 1249 60 (set (reg:SF 21 xmm0 [1057])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [2 ri+0 S4 A32])) "CALRCH.f":197 131 {*movsf_internal}
     (nil))
(insn 1249 1248 1250 60 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:670 _584 ] [670])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [1056])) [2 *richno_631(D) S4 A32])
        (reg:SF 21 xmm0 [1057])) "CALRCH.f":197 131 {*movsf_internal}
     (nil))
;;  succ:       61 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

;; basic block 61, loop depth 0, maybe hot
;;  prev block 60, next block 81, flags: (RTL, MODIFIED)
;;  pred:       60 (FALLTHRU)
;;              53
;;              51
;;              59 [always] 
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1250 1249 1251 61 33 (nil) [3 uses])
(note 1251 1250 1252 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 1252 1251 1315 61 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":150 221 {*addsi_1}
     (nil))
(jump_insn 1315 1252 1316 61 (set (pc)
        (label_ref 1253)) "CALRCH.f":150 683 {jump}
     (nil)
 -> 1253)
;;  succ:       49 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

(barrier 1316 1315 1370)
;; basic block 81, loop depth 0, maybe hot
;;  prev block 61, next block 62, flags: (RTL, MODIFIED)
;;  pred:       49
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1370 1316 1369 81 64 (nil) [1 uses])
(note 1369 1370 1371 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 1371 1369 1256 81 (const_int 0 [0]) "CALRCH.f":200 718 {nop}
     (nil))
;;  succ:       62 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

;; basic block 62, loop depth 0, maybe hot
;;  prev block 81, next block 80, flags: (RTL, MODIFIED)
;;  pred:       81 [always]  (FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1256 1371 1257 62 32 (nil) [0 uses])
(note 1257 1256 1258 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 1258 1257 1317 62 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":149 221 {*addsi_1}
     (nil))
(jump_insn 1317 1258 1318 62 (set (pc)
        (label_ref 1259)) "CALRCH.f":149 683 {jump}
     (nil)
 -> 1259)
;;  succ:       47 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 702

(barrier 1318 1317 1367)
;; basic block 80, loop depth 0, maybe hot
;;  prev block 62, next block 63, flags: (RTL, MODIFIED)
;;  pred:       47
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1367 1318 1366 80 63 (nil) [1 uses])
(note 1366 1367 1368 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 1368 1366 1262 80 (const_int 0 [0]) "CALRCH.f":150 718 {nop}
     (nil))
;;  succ:       63 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 63, loop depth 0, maybe hot
;;  prev block 80, next block 79, flags: (RTL, MODIFIED)
;;  pred:       80 [always]  (FALLTHRU)
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1262 1368 1263 63 31 (nil) [0 uses])
(note 1263 1262 1264 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 1264 1263 1319 63 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [1 l+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "CALRCH.f":145 221 {*addsi_1}
     (nil))
(jump_insn 1319 1264 1320 63 (set (pc)
        (label_ref 1265)) "CALRCH.f":145 683 {jump}
     (nil)
 -> 1265)
;;  succ:       45 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1320 1319 1364)
;; basic block 79, loop depth 0, maybe hot
;;  prev block 63, next block 64, flags: (RTL, MODIFIED)
;;  pred:       45
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1364 1320 1363 79 62 (nil) [1 uses])
(note 1363 1364 1365 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 1365 1363 1268 79 (const_int 0 [0]) "CALRCH.f":149 718 {nop}
     (nil))
;;  succ:       64 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, maybe hot
;;  prev block 79, next block 1, flags: (RTL, MODIFIED)
;;  pred:       79 [always]  (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1268 1365 1269 64 30 (nil) [0 uses])
(note 1269 1268 1283 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 1283 1269 1372 64 (const_int 0 [0]) "CALRCH.f":207 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 1372 1283 0 NOTE_INSN_DELETED)
