
;; Function collect (collect_, funcdef_no=0, decl_uid=3769, cgraph_uid=0, symbol_order=0)

collect (real(kind=4)[29631] * restrict a)
{
  logical(kind=4) D.3902;
  logical(kind=4) D.3899;
  integer(kind=4) j;
  integer(kind=4) ierr;
  integer(kind=4) i;
  static real(kind=4) b[29631];
  static integer(kind=4) jend_2u [value-expr: parallel.jend_2u];
  static integer(kind=4) jsta_2l [value-expr: parallel.jsta_2l];
  static integer(kind=4) idsp[1024] [value-expr: parallel.idsp];
  static integer(kind=4) icnt[1024] [value-expr: parallel.icnt];
  static integer(kind=4) idn [value-expr: parallel.idn];
  static integer(kind=4) iup [value-expr: parallel.iup];
  static integer(kind=4) jend_m2 [value-expr: parallel.jend_m2];
  static integer(kind=4) jsta_m2 [value-expr: parallel.jsta_m2];
  static integer(kind=4) jend_m [value-expr: parallel.jend_m];
  static integer(kind=4) jsta_m [value-expr: parallel.jsta_m];
  static integer(kind=4) jend [value-expr: parallel.jend];
  static integer(kind=4) jsta [value-expr: parallel.jsta];
  static integer(kind=4) me [value-expr: parallel.me];
  static integer(kind=4) num_procs [value-expr: parallel.num_procs];
  static integer(kind=4) mpi_weights_empty[1] [value-expr: mpi_fortran_weights_empty.mpi_weights_empty];
  static integer(kind=4) mpi_unweighted[1] [value-expr: mpi_fortran_unweighted.mpi_unweighted];
  static integer(kind=4) mpi_statuses_ignore[6] [value-expr: mpi_fortran_statuses_ignore.mpi_statuses_ignore];
  static integer(kind=4) mpi_status_ignore[6] [value-expr: mpi_fortran_status_ignore.mpi_status_ignore];
  static integer(kind=4) mpi_in_place [value-expr: mpi_fortran_in_place.mpi_in_place];
  static integer(kind=4) mpi_errcodes_ignore[1] [value-expr: mpi_fortran_errcodes_ignore.mpi_errcodes_ignore];
  static integer(kind=4) mpi_bottom [value-expr: mpi_fortran_bottom.mpi_bottom];
  static character(kind=1) mpi_argvs_null[1][1:1] [value-expr: mpi_fortran_argvs_null.mpi_argvs_null];
  static character(kind=1) mpi_argv_null[1][1:1] [value-expr: mpi_fortran_argv_null.mpi_argv_null];
  static logical(kind=4) spline [value-expr: ctlblk.spline];
  static integer(kind=4) nradl [value-expr: ctlblk.nradl];
  static integer(kind=4) nrads [value-expr: ctlblk.nrads];
  static integer(kind=4) nphs [value-expr: ctlblk.nphs];
  static integer(kind=4) ncp [value-expr: ctlblk.ncp];
  static integer(kind=4) nshde [value-expr: ctlblk.nshde];
  static integer(kind=4) nboco [value-expr: ctlblk.nboco];
  static integer(kind=4) idtad [value-expr: ctlblk.idtad];
  static integer(kind=4) nprec [value-expr: ctlblk.nprec];
  static integer(kind=4) nddamp [value-expr: ctlblk.nddamp];
  static integer(kind=4) ntstm [value-expr: ctlblk.ntstm];
  static integer(kind=4) ntsd [value-expr: ctlblk.ntsd];
  static real(kind=4) dt [value-expr: ctlblk.dt];
  static integer(kind=4) iout [value-expr: ctlblk.iout];
  static integer(kind=4) list [value-expr: ctlblk.list];
  static integer(kind=4) nbc [value-expr: ctlblk.nbc];
  static integer(kind=4) nfcst [value-expr: ctlblk.nfcst];
  static real(kind=4) restrt [value-expr: ctlblk.restrt];
  static real(kind=4) first [value-expr: ctlblk.first];
  static integer(kind=4) ihrst [value-expr: ctlblk.ihrst];
  static integer(kind=4) idat[3] [value-expr: ctlblk.idat];
  static real(kind=4) run [value-expr: ctlblk.run];
  static real(kind=4) sigma [value-expr: ctlblk.sigma];
  integer(kind=4) _1;
  integer(kind=4) _2;
  integer(kind=8) _3;
  integer(kind=4) * _4;
  integer(kind=4) _5;
  integer(kind=8) _6;
  integer(kind=8) _7;
  integer(kind=8) _8;
  real(kind=4) * _9;
  integer(kind=4) _10;
  integer(kind=8) _11;
  integer(kind=8) _12;
  integer(kind=8) _13;
  integer(kind=8) _14;
  integer(kind=8) _15;
  integer(kind=8) _16;
  integer(kind=8) _17;
  integer(kind=8) _18;
  integer(kind=8) _19;
  integer(kind=8) _20;
  real(kind=4) _21;
  logical(kind=4) _33;
  logical(kind=4) _35;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = parallel.num_procs;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  ierr ={v} {CLOBBER};
  goto <bb 13>; [INV]
;;    succ:       13

;;   basic block 4, loop depth 0
;;    pred:       2
  _2 = parallel.me;
  _3 = (integer(kind=8)) _2;
  _4 = &parallel.icnt[_3];
  _5 = parallel.jsta;
  _6 = (integer(kind=8)) _5;
  _7 = _6 + -1;
  _8 = _7 * 119;
  _9 = &*a_30(D)[_8];
  mpi_gatherv (_9, _4, &C.3891, &b, &parallel.icnt, &parallel.idsp, &C.3892, &C.3893, &C.3894, &ierr);
  _10 = parallel.me;
  if (_10 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]
;;    succ:       5
;;                12

;;   basic block 5, loop depth 0
;;    pred:       4
  j_32 = 1;
;;    succ:       6

;;   basic block 6, loop depth 1
;;    pred:       5
;;                10
  # j_23 = PHI <j_32(5), j_38(10)>
  _33 = j_23 > 249;
  if (_33 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       11
;;                7

;;   basic block 7, loop depth 1
;;    pred:       6
  i_34 = 1;
;;    succ:       8

;;   basic block 8, loop depth 2
;;    pred:       7
;;                9
  # i_22 = PHI <i_34(7), i_37(9)>
  _35 = i_22 > 119;
  if (_35 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]
;;    succ:       10
;;                9

;;   basic block 9, loop depth 2
;;    pred:       8
  _11 = (integer(kind=8)) j_23;
  _12 = _11 * 119;
  _13 = (integer(kind=8)) i_22;
  _14 = _12 + _13;
  _15 = _14 + -120;
  _16 = (integer(kind=8)) j_23;
  _17 = _16 * 119;
  _18 = (integer(kind=8)) i_22;
  _19 = _17 + _18;
  _20 = _19 + -120;
  _21 = b[_15];
  *a_30(D)[_20] = _21;
  i_37 = i_22 + 1;
  goto <bb 8>; [INV]
;;    succ:       8

;;   basic block 10, loop depth 1
;;    pred:       8
  j_38 = j_23 + 1;
  goto <bb 6>; [INV]
;;    succ:       6

;;   basic block 11, loop depth 0
;;    pred:       6
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       4
;;                11
  ierr ={v} {CLOBBER};
;;    succ:       13

;;   basic block 13, loop depth 0
;;    pred:       12
;;                3
<L17>:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (_12 - 12 )
Partition 13 (_13 - 13 )
Partition 14 (_14 - 14 )
Partition 15 (_15 - 15 )
Partition 16 (_16 - 16 )
Partition 17 (_17 - 17 )
Partition 18 (_18 - 18 )
Partition 19 (_19 - 19 )
Partition 20 (_20 - 20 )
Partition 21 (_21 - 21 )
Partition 22 (i_22 - 22 )
Partition 23 (j_23 - 23 )
Partition 30 (a_30(D) - 30 )
Partition 32 (j_32 - 32 )
Partition 33 (_33 - 33 )
Partition 34 (i_34 - 34 )
Partition 35 (_35 - 35 )
Partition 37 (i_37 - 37 )
Partition 38 (j_38 - 38 )


Coalescible Partition map 

Partition 0, base 0 (i_22 - 22 34 37 )
Partition 1, base 1 (j_23 - 23 32 38 )
Partition 2, base 2 (a_30(D) - 30 )


Partition map 

Partition 0 (i_22 - 22 )
Partition 1 (j_23 - 23 )
Partition 2 (a_30(D) - 30 )
Partition 3 (j_32 - 32 )
Partition 4 (i_34 - 34 )
Partition 5 (i_37 - 37 )
Partition 6 (j_38 - 38 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) j_23 <-> j_32
(2147483646, 0) j_23 <-> j_38
(2147483646, 0) i_22 <-> i_34
(2147483646, 0) i_22 <-> i_37

Partition map 

Partition 0 (i_22 - 22 )
Partition 1 (j_23 - 23 )
Partition 2 (a_30(D) - 30 )
Partition 3 (j_32 - 32 )
Partition 4 (i_34 - 34 )
Partition 5 (i_37 - 37 )
Partition 6 (j_38 - 38 )

Coalesce list: (23)j_23 & (32)j_32 [map: 1, 3] : Success -> 1
Coalesce list: (23)j_23 & (38)j_38 [map: 1, 6] : Success -> 1
Coalesce list: (22)i_22 & (34)i_34 [map: 0, 4] : Success -> 0
Coalesce list: (22)i_22 & (37)i_37 [map: 0, 5] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (_6 - 6 )
Partition 6 (_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (_11 - 11 )
Partition 11 (_12 - 12 )
Partition 12 (_13 - 13 )
Partition 13 (_14 - 14 )
Partition 14 (_15 - 15 )
Partition 15 (_16 - 16 )
Partition 16 (_17 - 17 )
Partition 17 (_18 - 18 )
Partition 18 (_19 - 19 )
Partition 19 (_20 - 20 )
Partition 20 (_21 - 21 )
Partition 21 (i_22 - 22 34 37 )
Partition 22 (j_23 - 23 32 38 )
Partition 23 (a_30(D) - 30 )
Partition 24 (_33 - 33 )
Partition 25 (_35 - 35 )

collect (real(kind=4)[29631] * restrict a)
{
  logical(kind=4) D.3902;
  logical(kind=4) D.3899;
  integer(kind=4) j;
  integer(kind=4) ierr;
  integer(kind=4) i;
  static real(kind=4) b[29631];
  static integer(kind=4) jend_2u [value-expr: parallel.jend_2u];
  static integer(kind=4) jsta_2l [value-expr: parallel.jsta_2l];
  static integer(kind=4) idsp[1024] [value-expr: parallel.idsp];
  static integer(kind=4) icnt[1024] [value-expr: parallel.icnt];
  static integer(kind=4) idn [value-expr: parallel.idn];
  static integer(kind=4) iup [value-expr: parallel.iup];
  static integer(kind=4) jend_m2 [value-expr: parallel.jend_m2];
  static integer(kind=4) jsta_m2 [value-expr: parallel.jsta_m2];
  static integer(kind=4) jend_m [value-expr: parallel.jend_m];
  static integer(kind=4) jsta_m [value-expr: parallel.jsta_m];
  static integer(kind=4) jend [value-expr: parallel.jend];
  static integer(kind=4) jsta [value-expr: parallel.jsta];
  static integer(kind=4) me [value-expr: parallel.me];
  static integer(kind=4) num_procs [value-expr: parallel.num_procs];
  static integer(kind=4) mpi_weights_empty[1] [value-expr: mpi_fortran_weights_empty.mpi_weights_empty];
  static integer(kind=4) mpi_unweighted[1] [value-expr: mpi_fortran_unweighted.mpi_unweighted];
  static integer(kind=4) mpi_statuses_ignore[6] [value-expr: mpi_fortran_statuses_ignore.mpi_statuses_ignore];
  static integer(kind=4) mpi_status_ignore[6] [value-expr: mpi_fortran_status_ignore.mpi_status_ignore];
  static integer(kind=4) mpi_in_place [value-expr: mpi_fortran_in_place.mpi_in_place];
  static integer(kind=4) mpi_errcodes_ignore[1] [value-expr: mpi_fortran_errcodes_ignore.mpi_errcodes_ignore];
  static integer(kind=4) mpi_bottom [value-expr: mpi_fortran_bottom.mpi_bottom];
  static character(kind=1) mpi_argvs_null[1][1:1] [value-expr: mpi_fortran_argvs_null.mpi_argvs_null];
  static character(kind=1) mpi_argv_null[1][1:1] [value-expr: mpi_fortran_argv_null.mpi_argv_null];
  static logical(kind=4) spline [value-expr: ctlblk.spline];
  static integer(kind=4) nradl [value-expr: ctlblk.nradl];
  static integer(kind=4) nrads [value-expr: ctlblk.nrads];
  static integer(kind=4) nphs [value-expr: ctlblk.nphs];
  static integer(kind=4) ncp [value-expr: ctlblk.ncp];
  static integer(kind=4) nshde [value-expr: ctlblk.nshde];
  static integer(kind=4) nboco [value-expr: ctlblk.nboco];
  static integer(kind=4) idtad [value-expr: ctlblk.idtad];
  static integer(kind=4) nprec [value-expr: ctlblk.nprec];
  static integer(kind=4) nddamp [value-expr: ctlblk.nddamp];
  static integer(kind=4) ntstm [value-expr: ctlblk.ntstm];
  static integer(kind=4) ntsd [value-expr: ctlblk.ntsd];
  static real(kind=4) dt [value-expr: ctlblk.dt];
  static integer(kind=4) iout [value-expr: ctlblk.iout];
  static integer(kind=4) list [value-expr: ctlblk.list];
  static integer(kind=4) nbc [value-expr: ctlblk.nbc];
  static integer(kind=4) nfcst [value-expr: ctlblk.nfcst];
  static real(kind=4) restrt [value-expr: ctlblk.restrt];
  static real(kind=4) first [value-expr: ctlblk.first];
  static integer(kind=4) ihrst [value-expr: ctlblk.ihrst];
  static integer(kind=4) idat[3] [value-expr: ctlblk.idat];
  static real(kind=4) run [value-expr: ctlblk.run];
  static real(kind=4) sigma [value-expr: ctlblk.sigma];
  integer(kind=4) _1;
  integer(kind=4) _2;
  integer(kind=8) _3;
  integer(kind=4) * _4;
  integer(kind=4) _5;
  integer(kind=8) _6;
  integer(kind=8) _7;
  integer(kind=8) _8;
  real(kind=4) * _9;
  integer(kind=4) _10;
  integer(kind=8) _11;
  integer(kind=8) _12;
  integer(kind=8) _13;
  integer(kind=8) _14;
  integer(kind=8) _15;
  integer(kind=8) _16;
  integer(kind=8) _17;
  integer(kind=8) _18;
  integer(kind=8) _19;
  integer(kind=8) _20;
  real(kind=4) _21;
  logical(kind=4) _33;
  logical(kind=4) _35;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = parallel.num_procs;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  ierr ={v} {CLOBBER};
  goto <bb 13>; [INV]
;;    succ:       13

;;   basic block 4, loop depth 0
;;    pred:       2
  _2 = parallel.me;
  _3 = (integer(kind=8)) _2;
  _4 = &parallel.icnt[_3];
  _5 = parallel.jsta;
  _6 = (integer(kind=8)) _5;
  _7 = _6 + -1;
  _8 = _7 * 119;
  _9 = &*a_30(D)[_8];
  mpi_gatherv (_9, _4, &C.3891, &b, &parallel.icnt, &parallel.idsp, &C.3892, &C.3893, &C.3894, &ierr);
  _10 = parallel.me;
  if (_10 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]
;;    succ:       5
;;                12

;;   basic block 5, loop depth 0
;;    pred:       4
  j_32 = 1;
;;    succ:       6

;;   basic block 6, loop depth 1
;;    pred:       5
;;                10
  # j_23 = PHI <j_32(5), j_38(10)>
  _33 = j_23 > 249;
  if (_33 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       11
;;                7

;;   basic block 7, loop depth 1
;;    pred:       6
  i_34 = 1;
;;    succ:       8

;;   basic block 8, loop depth 2
;;    pred:       7
;;                9
  # i_22 = PHI <i_34(7), i_37(9)>
  _35 = i_22 > 119;
  if (_35 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]
;;    succ:       10
;;                9

;;   basic block 9, loop depth 2
;;    pred:       8
  _11 = (integer(kind=8)) j_23;
  _12 = _11 * 119;
  _13 = (integer(kind=8)) i_22;
  _14 = _12 + _13;
  _15 = _14 + -120;
  _16 = (integer(kind=8)) j_23;
  _17 = _16 * 119;
  _18 = (integer(kind=8)) i_22;
  _19 = _17 + _18;
  _20 = _19 + -120;
  _21 = b[_15];
  *a_30(D)[_20] = _21;
  i_37 = i_22 + 1;
  goto <bb 8>; [INV]
;;    succ:       8

;;   basic block 10, loop depth 1
;;    pred:       8
  j_38 = j_23 + 1;
  goto <bb 6>; [INV]
;;    succ:       6

;;   basic block 11, loop depth 0
;;    pred:       6
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       4
;;                11
  ierr ={v} {CLOBBER};
;;    succ:       13

;;   basic block 13, loop depth 0
;;    pred:       12
;;                3
<L17>:
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; _1 = parallel.num_procs;

(insn 6 5 0 (set (reg:SI 87 [ _1 ])
        (mem/c:SI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>) [1 parallel.num_procs+0 S4 A128])) "COLLECT.f":1 -1
     (nil))

;; if (_1 == 1)

(insn 7 6 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (const_int 1 [0x1]))) "COLLECT.f":44 -1
     (nil))

(jump_insn 8 7 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "COLLECT.f":44 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; ierr ={v} {CLOBBER};

(nil)

;; Generating RTL for gimple basic block 4

;; 

(code_label 12 11 13 2 (nil) [0 uses])

(note 13 12 0 NOTE_INSN_BASIC_BLOCK)

;; _2 = parallel.me;

(insn 14 13 0 (set (reg:SI 88 [ _2 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                    (const_int 4 [0x4]))) [1 parallel.me+0 S4 A32])) "COLLECT.f":1 -1
     (nil))

;; _3 = (integer(kind=8)) _2;

(insn 15 14 0 (set (reg:DI 89 [ _3 ])
        (sign_extend:DI (reg:SI 88 [ _2 ]))) "COLLECT.f":47 -1
     (nil))

;; _4 = &parallel.icnt[_3];

(insn 16 15 17 (parallel [
            (set (reg:DI 110)
                (plus:DI (reg:DI 89 [ _3 ])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))

(insn 17 16 18 (parallel [
            (set (reg:DI 111)
                (ashift:DI (reg:DI 110)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))

(insn 18 17 0 (parallel [
            (set (reg/f:DI 90 [ _4 ])
                (plus:DI (reg:DI 111)
                    (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))

;; _5 = parallel.jsta;

(insn 19 18 0 (set (reg:SI 91 [ _5 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "COLLECT.f":1 -1
     (nil))

;; _6 = (integer(kind=8)) _5;

(insn 20 19 0 (set (reg:DI 92 [ _6 ])
        (sign_extend:DI (reg:SI 91 [ _5 ]))) "COLLECT.f":47 -1
     (nil))

;; _7 = _6 + -1;

(insn 21 20 0 (parallel [
            (set (reg:DI 93 [ _7 ])
                (plus:DI (reg:DI 92 [ _6 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))

;; _8 = _7 * 119;

(insn 22 21 0 (parallel [
            (set (reg:DI 94 [ _8 ])
                (mult:DI (reg:DI 93 [ _7 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))

;; _9 = &*a_30(D)[_8];

(insn 23 22 24 (parallel [
            (set (reg:DI 112)
                (ashift:DI (reg:DI 94 [ _8 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))

(insn 24 23 25 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 a+0 S8 A64])) "COLLECT.f":47 -1
     (nil))

(insn 25 24 0 (parallel [
            (set (reg/f:DI 95 [ _9 ])
                (plus:DI (reg:DI 112)
                    (reg/f:DI 113)))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 a+0 S8 A64])
            (reg:DI 112))
        (nil)))

;; mpi_gatherv (_9, _4, &C.3891, &b, &parallel.icnt, &parallel.idsp, &C.3892, &C.3893, &C.3894, &ierr);

(insn 26 25 27 (parallel [
            (set (reg:DI 114)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))

(insn 27 26 28 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (reg:DI 114)) "COLLECT.f":47 -1
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))

(insn 28 27 29 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fe1b5f4c090 *.LC1>)) "COLLECT.f":47 -1
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))

(insn 29 28 30 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fe1b5f4c090 *.LC1>)) "COLLECT.f":47 -1
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))

(insn 30 29 31 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fe1b5f4c000 *.LC0>)) "COLLECT.f":47 -1
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))

(insn 31 30 32 (set (reg:DI 38 r9)
        (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                (const_int 4136 [0x1028])))) "COLLECT.f":47 -1
     (nil))

(insn 32 31 33 (set (reg:DI 37 r8)
        (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                (const_int 40 [0x28])))) "COLLECT.f":47 -1
     (nil))

(insn 33 32 34 (set (reg:DI 2 cx)
        (symbol_ref:DI ("b.3886") [flags 0x202]  <var_decl 0x7fe1b632cb40 b>)) "COLLECT.f":47 -1
     (nil))

(insn 34 33 35 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fe1b5f4c000 *.LC0>)) "COLLECT.f":47 -1
     (nil))

(insn 35 34 36 (set (reg:DI 4 si)
        (reg/f:DI 90 [ _4 ])) "COLLECT.f":47 -1
     (nil))

(insn 36 35 37 (set (reg:DI 5 di)
        (reg/f:DI 95 [ _9 ])) "COLLECT.f":47 -1
     (nil))

(insn 37 36 38 (set (reg:QI 0 ax)
        (const_int 0 [0])) "COLLECT.f":47 -1
     (nil))

(call_insn 38 37 39 (call (mem:QI (symbol_ref:DI ("mpi_gatherv_") [flags 0x41]  <function_decl 0x7fe1b6302600 mpi_gatherv>) [0 mpi_gatherv S1 A8])
        (const_int 32 [0x20])) "COLLECT.f":47 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))

(insn 39 38 0 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))

;; _10 = parallel.me;

(insn 40 39 0 (set (reg:SI 96 [ _10 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                    (const_int 4 [0x4]))) [1 parallel.me+0 S4 A32])) "COLLECT.f":1 -1
     (nil))

;; if (_10 == 0)

(insn 41 40 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 96 [ _10 ])
            (const_int 0 [0]))) "COLLECT.f":48 -1
     (nil))

(jump_insn 42 41 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "COLLECT.f":48 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; j_32 = 1;

(insn 44 43 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "COLLECT.f":49 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; _33 = j_23 > 249;

(insn 46 45 47 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "COLLECT.f":49 -1
     (nil))

(insn 47 46 48 (set (reg:QI 115)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "COLLECT.f":49 -1
     (nil))

(insn 48 47 0 (set (reg:SI 108 [ _33 ])
        (zero_extend:SI (reg:QI 115))) "COLLECT.f":49 -1
     (nil))

;; if (_33 != 0)

(insn 49 48 50 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 108 [ _33 ])
            (const_int 0 [0]))) "COLLECT.f":49 -1
     (nil))

(jump_insn 50 49 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "COLLECT.f":49 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; i_34 = 1;

(insn 52 51 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "COLLECT.f":50 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; _35 = i_22 > 119;

(insn 54 53 55 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "COLLECT.f":50 -1
     (nil))

(insn 55 54 56 (set (reg:QI 116)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "COLLECT.f":50 -1
     (nil))

(insn 56 55 0 (set (reg:SI 109 [ _35 ])
        (zero_extend:SI (reg:QI 116))) "COLLECT.f":50 -1
     (nil))

;; if (_35 != 0)

(insn 57 56 58 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 109 [ _35 ])
            (const_int 0 [0]))) "COLLECT.f":50 -1
     (nil))

(jump_insn 58 57 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "COLLECT.f":50 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; _11 = (integer(kind=8)) j_23;

(insn 60 59 61 (set (reg:SI 117)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "COLLECT.f":51 -1
     (nil))

(insn 61 60 0 (set (reg:DI 97 [ _11 ])
        (sign_extend:DI (reg:SI 117))) "COLLECT.f":51 -1
     (nil))

;; _12 = _11 * 119;

(insn 62 61 0 (parallel [
            (set (reg:DI 98 [ _12 ])
                (mult:DI (reg:DI 97 [ _11 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 -1
     (nil))

;; _13 = (integer(kind=8)) i_22;

(insn 63 62 64 (set (reg:SI 118)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "COLLECT.f":51 -1
     (nil))

(insn 64 63 0 (set (reg:DI 99 [ _13 ])
        (sign_extend:DI (reg:SI 118))) "COLLECT.f":51 -1
     (nil))

;; _14 = _12 + _13;

(insn 65 64 0 (parallel [
            (set (reg:DI 100 [ _14 ])
                (plus:DI (reg:DI 98 [ _12 ])
                    (reg:DI 99 [ _13 ])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 -1
     (nil))

;; _15 = _14 + -120;

(insn 66 65 0 (parallel [
            (set (reg:DI 101 [ _15 ])
                (plus:DI (reg:DI 100 [ _14 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 -1
     (nil))

;; _16 = (integer(kind=8)) j_23;

(insn 67 66 68 (set (reg:SI 119)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "COLLECT.f":51 -1
     (nil))

(insn 68 67 0 (set (reg:DI 102 [ _16 ])
        (sign_extend:DI (reg:SI 119))) "COLLECT.f":51 -1
     (nil))

;; _17 = _16 * 119;

(insn 69 68 0 (parallel [
            (set (reg:DI 103 [ _17 ])
                (mult:DI (reg:DI 102 [ _16 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 -1
     (nil))

;; _18 = (integer(kind=8)) i_22;

(insn 70 69 71 (set (reg:SI 120)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "COLLECT.f":51 -1
     (nil))

(insn 71 70 0 (set (reg:DI 104 [ _18 ])
        (sign_extend:DI (reg:SI 120))) "COLLECT.f":51 -1
     (nil))

;; _19 = _17 + _18;

(insn 72 71 0 (parallel [
            (set (reg:DI 105 [ _19 ])
                (plus:DI (reg:DI 103 [ _17 ])
                    (reg:DI 104 [ _18 ])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 -1
     (nil))

;; _20 = _19 + -120;

(insn 73 72 0 (parallel [
            (set (reg:DI 106 [ _20 ])
                (plus:DI (reg:DI 105 [ _19 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 -1
     (nil))

;; _21 = b[_15];

(insn 74 73 75 (set (reg/f:DI 121)
        (symbol_ref:DI ("b.3886") [flags 0x202]  <var_decl 0x7fe1b632cb40 b>)) "COLLECT.f":51 -1
     (nil))

(insn 75 74 0 (set (reg:SF 107 [ _21 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 101 [ _15 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 121)) [4 b S4 A32])) "COLLECT.f":51 -1
     (nil))

;; *a_30(D)[_20] = _21;

(insn 76 75 77 (set (reg/f:DI 122)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 a+0 S8 A64])) "COLLECT.f":51 -1
     (nil))

(insn 77 76 0 (set (mem:SF (plus:DI (mult:DI (reg:DI 106 [ _20 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 122)) [4 *a_30(D) S4 A32])
        (reg:SF 107 [ _21 ])) "COLLECT.f":51 -1
     (nil))

;; i_37 = i_22 + 1;

(insn 78 77 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":50 -1
     (nil))

;; Generating RTL for gimple basic block 10

;; 

(code_label 82 81 83 6 (nil) [0 uses])

(note 83 82 0 NOTE_INSN_BASIC_BLOCK)

;; j_38 = j_23 + 1;

(insn 84 83 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":49 -1
     (nil))

;; Generating RTL for gimple basic block 11

;; 

(code_label 88 87 89 5 (nil) [0 uses])

(note 89 88 0 NOTE_INSN_BASIC_BLOCK)

;; Generating RTL for gimple basic block 12

;; 

(code_label 90 89 91 4 (nil) [0 uses])

(note 91 90 0 NOTE_INSN_BASIC_BLOCK)

;; ierr ={v} {CLOBBER};

(nil)

;; Generating RTL for gimple basic block 13

;; <L17>:

(code_label 92 91 93 3 (nil) [0 uses])

(note 93 92 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 2->4 to 15 failed.
Forwarding edge 2->4 to 15 failed.
Redirecting jump 10 from 14 to 15.
Edge 5->13 redirected to 15
Edge 7->12 redirected to 15
deleting block 12
deleting block 13
deleting block 14


try_optimize_cfg iteration 2

Forwarding edge 2->4 to 15 failed.
fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 a+0 S8 A64])
        (reg:DI 5 di [ a ])) "COLLECT.f":1 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 87 [ _1 ])
        (mem/c:SI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>) [1 parallel.num_procs+0 S4 A128])) "COLLECT.f":1 -1
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (const_int 1 [0x1]))) "COLLECT.f":44 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 12)
            (pc))) "COLLECT.f":44 -1
     (nil)
 -> 12)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 10 9 11 4 (set (pc)
        (label_ref:DI 94)) "COLLECT.f":44 683 {jump}
     (nil)
 -> 94)
;;  succ:       15 [always] 

(barrier 11 10 12)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
(code_label 12 11 13 5 2 (nil) [1 uses])
(note 13 12 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 5 (set (reg:SI 88 [ _2 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                    (const_int 4 [0x4]))) [1 parallel.me+0 S4 A32])) "COLLECT.f":1 -1
     (nil))
(insn 15 14 16 5 (set (reg:DI 89 [ _3 ])
        (sign_extend:DI (reg:SI 88 [ _2 ]))) "COLLECT.f":47 -1
     (nil))
(insn 16 15 17 5 (parallel [
            (set (reg:DI 110)
                (plus:DI (reg:DI 89 [ _3 ])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))
(insn 17 16 18 5 (parallel [
            (set (reg:DI 111)
                (ashift:DI (reg:DI 110)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))
(insn 18 17 19 5 (parallel [
            (set (reg/f:DI 90 [ _4 ])
                (plus:DI (reg:DI 111)
                    (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))
(insn 19 18 20 5 (set (reg:SI 91 [ _5 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                    (const_int 8 [0x8]))) [1 parallel.jsta+0 S4 A64])) "COLLECT.f":1 -1
     (nil))
(insn 20 19 21 5 (set (reg:DI 92 [ _6 ])
        (sign_extend:DI (reg:SI 91 [ _5 ]))) "COLLECT.f":47 -1
     (nil))
(insn 21 20 22 5 (parallel [
            (set (reg:DI 93 [ _7 ])
                (plus:DI (reg:DI 92 [ _6 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))
(insn 22 21 23 5 (parallel [
            (set (reg:DI 94 [ _8 ])
                (mult:DI (reg:DI 93 [ _7 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))
(insn 23 22 24 5 (parallel [
            (set (reg:DI 112)
                (ashift:DI (reg:DI 94 [ _8 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))
(insn 24 23 25 5 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 a+0 S8 A64])) "COLLECT.f":47 -1
     (nil))
(insn 25 24 26 5 (parallel [
            (set (reg/f:DI 95 [ _9 ])
                (plus:DI (reg:DI 112)
                    (reg/f:DI 113)))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 a+0 S8 A64])
            (reg:DI 112))
        (nil)))
(insn 26 25 27 5 (parallel [
            (set (reg:DI 114)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (nil))
(insn 27 26 28 5 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (reg:DI 114)) "COLLECT.f":47 -1
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 28 27 29 5 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fe1b5f4c090 *.LC1>)) "COLLECT.f":47 -1
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 29 28 30 5 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fe1b5f4c090 *.LC1>)) "COLLECT.f":47 -1
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 30 29 31 5 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fe1b5f4c000 *.LC0>)) "COLLECT.f":47 -1
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 31 30 32 5 (set (reg:DI 38 r9)
        (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                (const_int 4136 [0x1028])))) "COLLECT.f":47 -1
     (nil))
(insn 32 31 33 5 (set (reg:DI 37 r8)
        (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                (const_int 40 [0x28])))) "COLLECT.f":47 -1
     (nil))
(insn 33 32 34 5 (set (reg:DI 2 cx)
        (symbol_ref:DI ("b.3886") [flags 0x202]  <var_decl 0x7fe1b632cb40 b>)) "COLLECT.f":47 -1
     (nil))
(insn 34 33 35 5 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fe1b5f4c000 *.LC0>)) "COLLECT.f":47 -1
     (nil))
(insn 35 34 36 5 (set (reg:DI 4 si)
        (reg/f:DI 90 [ _4 ])) "COLLECT.f":47 -1
     (nil))
(insn 36 35 37 5 (set (reg:DI 5 di)
        (reg/f:DI 95 [ _9 ])) "COLLECT.f":47 -1
     (nil))
(insn 37 36 38 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "COLLECT.f":47 -1
     (nil))
(call_insn 38 37 39 5 (call (mem:QI (symbol_ref:DI ("mpi_gatherv_") [flags 0x41]  <function_decl 0x7fe1b6302600 mpi_gatherv>) [0 mpi_gatherv S1 A8])
        (const_int 32 [0x20])) "COLLECT.f":47 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 39 38 40 5 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":47 -1
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 40 39 41 5 (set (reg:SI 96 [ _10 ])
        (mem/c:SI (const:DI (plus:DI (symbol_ref:DI ("parallel_") [flags 0x2]  <var_decl 0x7fe1b632c2d0 parallel>)
                    (const_int 4 [0x4]))) [1 parallel.me+0 S4 A32])) "COLLECT.f":1 -1
     (nil))
(insn 41 40 42 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 96 [ _10 ])
            (const_int 0 [0]))) "COLLECT.f":48 -1
     (nil))
(jump_insn 42 41 43 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 94)
            (pc))) "COLLECT.f":48 682 {*jcc}
     (nil)
 -> 94)
;;  succ:       6 (FALLTHRU)
;;              15

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 85 6 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 1 [0x1])) "COLLECT.f":49 -1
     (nil))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 1, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              11 (DFS_BACK)
(code_label 85 44 45 7 8 (nil) [1 uses])
(note 45 85 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 249 [0xf9]))) "COLLECT.f":49 -1
     (nil))
(insn 47 46 48 7 (set (reg:QI 115)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "COLLECT.f":49 -1
     (nil))
(insn 48 47 49 7 (set (reg:SI 108 [ _33 ])
        (zero_extend:SI (reg:QI 115))) "COLLECT.f":49 -1
     (nil))
(insn 49 48 50 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 108 [ _33 ])
            (const_int 0 [0]))) "COLLECT.f":49 -1
     (nil))
(jump_insn 50 49 51 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 94)
            (pc))) "COLLECT.f":49 682 {*jcc}
     (nil)
 -> 94)
;;  succ:       15
;;              8 (FALLTHRU)

;; basic block 8, loop depth 1, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 79 8 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "COLLECT.f":50 -1
     (nil))
;;  succ:       9 (FALLTHRU)

;; basic block 9, loop depth 2, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 (FALLTHRU)
;;              10 (DFS_BACK)
(code_label 79 52 53 9 7 (nil) [1 uses])
(note 53 79 54 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 119 [0x77]))) "COLLECT.f":50 -1
     (nil))
(insn 55 54 56 9 (set (reg:QI 116)
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "COLLECT.f":50 -1
     (nil))
(insn 56 55 57 9 (set (reg:SI 109 [ _35 ])
        (zero_extend:SI (reg:QI 116))) "COLLECT.f":50 -1
     (nil))
(insn 57 56 58 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 109 [ _35 ])
            (const_int 0 [0]))) "COLLECT.f":50 -1
     (nil))
(jump_insn 58 57 59 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "COLLECT.f":50 -1
     (nil)
 -> 82)
;;  succ:       11
;;              10 (FALLTHRU)

;; basic block 10, loop depth 2, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 (FALLTHRU)
(note 59 58 60 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 10 (set (reg:SI 117)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "COLLECT.f":51 -1
     (nil))
(insn 61 60 62 10 (set (reg:DI 97 [ _11 ])
        (sign_extend:DI (reg:SI 117))) "COLLECT.f":51 -1
     (nil))
(insn 62 61 63 10 (parallel [
            (set (reg:DI 98 [ _12 ])
                (mult:DI (reg:DI 97 [ _11 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 -1
     (nil))
(insn 63 62 64 10 (set (reg:SI 118)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "COLLECT.f":51 -1
     (nil))
(insn 64 63 65 10 (set (reg:DI 99 [ _13 ])
        (sign_extend:DI (reg:SI 118))) "COLLECT.f":51 -1
     (nil))
(insn 65 64 66 10 (parallel [
            (set (reg:DI 100 [ _14 ])
                (plus:DI (reg:DI 98 [ _12 ])
                    (reg:DI 99 [ _13 ])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 -1
     (nil))
(insn 66 65 67 10 (parallel [
            (set (reg:DI 101 [ _15 ])
                (plus:DI (reg:DI 100 [ _14 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 -1
     (nil))
(insn 67 66 68 10 (set (reg:SI 119)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "COLLECT.f":51 -1
     (nil))
(insn 68 67 69 10 (set (reg:DI 102 [ _16 ])
        (sign_extend:DI (reg:SI 119))) "COLLECT.f":51 -1
     (nil))
(insn 69 68 70 10 (parallel [
            (set (reg:DI 103 [ _17 ])
                (mult:DI (reg:DI 102 [ _16 ])
                    (const_int 119 [0x77])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 -1
     (nil))
(insn 70 69 71 10 (set (reg:SI 120)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "COLLECT.f":51 -1
     (nil))
(insn 71 70 72 10 (set (reg:DI 104 [ _18 ])
        (sign_extend:DI (reg:SI 120))) "COLLECT.f":51 -1
     (nil))
(insn 72 71 73 10 (parallel [
            (set (reg:DI 105 [ _19 ])
                (plus:DI (reg:DI 103 [ _17 ])
                    (reg:DI 104 [ _18 ])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 -1
     (nil))
(insn 73 72 74 10 (parallel [
            (set (reg:DI 106 [ _20 ])
                (plus:DI (reg:DI 105 [ _19 ])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":51 -1
     (nil))
(insn 74 73 75 10 (set (reg/f:DI 121)
        (symbol_ref:DI ("b.3886") [flags 0x202]  <var_decl 0x7fe1b632cb40 b>)) "COLLECT.f":51 -1
     (nil))
(insn 75 74 76 10 (set (reg:SF 107 [ _21 ])
        (mem:SF (plus:DI (mult:DI (reg:DI 101 [ _15 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 121)) [4 b S4 A32])) "COLLECT.f":51 -1
     (nil))
(insn 76 75 77 10 (set (reg/f:DI 122)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 a+0 S8 A64])) "COLLECT.f":51 -1
     (nil))
(insn 77 76 78 10 (set (mem:SF (plus:DI (mult:DI (reg:DI 106 [ _20 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 122)) [4 *a_30(D) S4 A32])
        (reg:SF 107 [ _21 ])) "COLLECT.f":51 -1
     (nil))
(insn 78 77 80 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":50 -1
     (nil))
(jump_insn 80 78 81 10 (set (pc)
        (label_ref 79)) "COLLECT.f":50 -1
     (nil)
 -> 79)
;;  succ:       9 (DFS_BACK)

(barrier 81 80 82)
;; basic block 11, loop depth 1, maybe hot
;;  prev block 10, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       9
(code_label 82 81 83 11 6 (nil) [1 uses])
(note 83 82 84 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 86 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "COLLECT.f":49 -1
     (nil))
(jump_insn 86 84 87 11 (set (pc)
        (label_ref 85)) "COLLECT.f":49 -1
     (nil)
 -> 85)
;;  succ:       7 (DFS_BACK)

(barrier 87 86 94)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
;;              4 [always] 
;;              5
(code_label 94 87 95 15 1 (nil) [3 uses])
(note 95 94 0 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)

